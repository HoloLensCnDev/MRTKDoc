{
  "Assets/MixedRealityToolkit.Staging/README.html": {
    "href": "Assets/MixedRealityToolkit.Staging/README.html",
    "title": "What is MixedRealityToolkit.Staging | Mixed Reality Toolkit Documentation",
    "keywords": "What is MixedRealityToolkit.Staging The MixedRealityToolkit.Staging folder has been created to allow the delivery of these features to customers while the MRTK team works to implement packaging changes that span the current and next iteration. Important This folder is expected to be removed from the next version of the Microsoft Mixed Reality Toolkit. Please take no dependencies on the current structure. UnityAR UnityAR is a camera system settings provider that enables building and running MRTK applications on mobile AR devices (phones, tablets) running the Android or iOS operating systems. To use the Unity AR camera settings provider, please see the instructions in the Unity AR camera settings provider article."
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayTransformType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayTransformType.html",
    "title": "Enum VROverlayTransformType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum VROverlayTransformType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum VROverlayTransformType Fields Name Description VROverlayTransform_Absolute VROverlayTransform_SystemOverlay VROverlayTransform_TrackedComponent VROverlayTransform_TrackedDeviceRelative"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRSkeletalSummaryData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRSkeletalSummaryData_t.html",
    "title": "Struct VRSkeletalSummaryData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRSkeletalSummaryData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRSkeletalSummaryData_t Fields flFingerCurl0 Declaration public float flFingerCurl0 Field Value Type Description Single flFingerCurl1 Declaration public float flFingerCurl1 Field Value Type Description Single flFingerCurl2 Declaration public float flFingerCurl2 Field Value Type Description Single flFingerCurl3 Declaration public float flFingerCurl3 Field Value Type Description Single flFingerCurl4 Declaration public float flFingerCurl4 Field Value Type Description Single flFingerSplay0 Declaration public float flFingerSplay0 Field Value Type Description Single flFingerSplay1 Declaration public float flFingerSplay1 Field Value Type Description Single flFingerSplay2 Declaration public float flFingerSplay2 Field Value Type Description Single flFingerSplay3 Declaration public float flFingerSplay3 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.QuaternionExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.QuaternionExtensions.html",
    "title": "Class QuaternionExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class QuaternionExtensions Extension methods for Unity's Quaternion struct. Inheritance Object QuaternionExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class QuaternionExtensions Methods IsValidRotation(Quaternion) Declaration public static bool IsValidRotation(this Quaternion rotation) Parameters Type Name Description Quaternion rotation Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.RayExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.RayExtensions.html",
    "title": "Class RayExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class RayExtensions Extension methods for Unity's Ray struct Inheritance Object RayExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class RayExtensions Methods IsValid(Ray) Determines whether or not a ray is valid. Declaration public static bool IsValid(this Ray ray) Parameters Type Name Description Ray ray The ray being tested. Returns Type Description Boolean True if the ray is valid, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.ReadOnlyAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ReadOnlyAttribute Inheritance Object ReadOnlyAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class ReadOnlyAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Rendering.DepthBufferRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Rendering.DepthBufferRenderer.html",
    "title": "Class DepthBufferRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class DepthBufferRenderer Component should be applied to the main camera and will apply post-process procedure to blit the scene's rendered depth buffer as the color output Inheritance Object DepthBufferRenderer Namespace : Microsoft.MixedReality.Toolkit.Rendering Assembly : cs.temp.dll.dll Syntax public class DepthBufferRenderer : MonoBehaviour Properties OutputTexture If not null, depth buffer rendering output will blit to this RenderTexture. If null, normal operation will blit the depth buffer as color to the screen. Declaration public RenderTexture OutputTexture { get; set; } Property Value Type Description RenderTexture"
  },
  "api/Microsoft.MixedReality.Toolkit.Rendering.IMaterialInstanceOwner.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Rendering.IMaterialInstanceOwner.html",
    "title": "Interface IMaterialInstanceOwner | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMaterialInstanceOwner Optional interface to use with objects which need to take ownership of MaterialInstance (s). Namespace : Microsoft.MixedReality.Toolkit.Rendering Assembly : cs.temp.dll.dll Syntax public interface IMaterialInstanceOwner Methods OnMaterialChanged(MaterialInstance) Method which is invoked by a MaterialInstance when an external material change is detected. This normally occurs when materials are changed via Renderer.material , Renderer.materials , or via the editor. Declaration void OnMaterialChanged(MaterialInstance materialInstance) Parameters Type Name Description MaterialInstance materialInstance The material instance which contains the updated materials."
  },
  "api/Microsoft.MixedReality.Toolkit.Rendering.MaterialInstance.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Rendering.MaterialInstance.html",
    "title": "Class MaterialInstance | Mixed Reality Toolkit Documentation",
    "keywords": "Class MaterialInstance The MaterialInstance behavior aides in tracking instance material lifetime and automatically destroys instanced materials for the user. This utility component can be used as a replacement to Renderer.material or Renderer.materials . When invoking Unity's Renderer.material(s), Unity automatically instantiates new materials. It is the caller's responsibility to destroy the materials when a material is no longer needed or the game object is destroyed. The MaterialInstance behavior helps avoid material leaks and keeps material allocation paths consistent during edit and run time. Inheritance Object MaterialInstance Namespace : Microsoft.MixedReality.Toolkit.Rendering Assembly : cs.temp.dll.dll Syntax public class MaterialInstance : MonoBehaviour Properties Material Returns the first instantiated Material assigned to the renderer, similar to Renderer.material . Declaration public Material Material { get; } Property Value Type Description Material Materials Returns all the instantiated materials of this object, similar to Renderer.materials . Declaration public Material[] Materials { get; } Property Value Type Description Material [] Methods AcquireMaterial(Object, Boolean) Returns the first instantiated Material assigned to the renderer, similar to Renderer.material . If any owner is specified the instanced material(s) will not be released until all owners are released. When a material is no longer needed ReleaseMaterial should be called with the matching owner. Declaration public Material AcquireMaterial(Object owner = null, bool instance = true) Parameters Type Name Description Object owner An optional owner to track instance ownership. Boolean instance Returns Type Description Material The first instantiated Material. AcquireMaterials(Object, Boolean) Returns all the instantiated materials of this object, similar to Renderer.materials . If any owner is specified the instanced material(s) will not be released until all owners are released. When a material is no longer needed ReleaseMaterial should be called with the matching owner. Declaration public Material[] AcquireMaterials(Object owner = null, bool instance = true) Parameters Type Name Description Object owner An optional owner to track instance ownership. Boolean instance Should this acquisition attempt to instance materials? Returns Type Description Material [] All the instantiated materials. ReleaseMaterial(Object, Boolean) Relinquishes ownership of a material instance. This should be called when a material is no longer needed after acquire ownership with AcquireMaterial(s). Declaration public void ReleaseMaterial(Object owner, bool autoDestroy = true) Parameters Type Name Description Object owner The same owner which originally acquire ownership via AcquireMaterial(s). Boolean autoDestroy When ownership count hits zero should the MaterialInstance component be destroyed?"
  },
  "api/Microsoft.MixedReality.Toolkit.Rendering.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Rendering.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Rendering | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Rendering Classes DepthBufferRenderer Component should be applied to the main camera and will apply post-process procedure to blit the scene's rendered depth buffer as the color output MaterialInstance The MaterialInstance behavior aides in tracking instance material lifetime and automatically destroys instanced materials for the user. This utility component can be used as a replacement to Renderer.material or Renderer.materials . When invoking Unity's Renderer.material(s), Unity automatically instantiates new materials. It is the caller's responsibility to destroy the materials when a material is no longer needed or the game object is destroyed. The MaterialInstance behavior helps avoid material leaks and keeps material allocation paths consistent during edit and run time. Interfaces IMaterialInstanceOwner Optional interface to use with objects which need to take ownership of MaterialInstance (s)."
  },
  "api/Microsoft.MixedReality.Toolkit.SceneAssetReferenceAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneAssetReferenceAttribute.html",
    "title": "Class SceneAssetReferenceAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneAssetReferenceAttribute Attribute for using a SceneAssetReference property drawer. Inheritance Object SceneAssetReferenceAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class SceneAssetReferenceAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneAssetReferenceAttributeDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneAssetReferenceAttributeDrawer.html",
    "title": "Class SceneAssetReferenceAttributeDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneAssetReferenceAttributeDrawer Draws an object field as a scene asset reference. This enables fields to store references to scene assets (which is an editor-only object) as unity objects (which work in both editor and runtime) Inheritance Object SceneAssetReferenceAttributeDrawer Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class SceneAssetReferenceAttributeDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.ScenePickAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ScenePickAttribute.html",
    "title": "Class ScenePickAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScenePickAttribute Attribute to mark up an int field to be drawn using the ScenePickPropertyDrawer This allows the UI to display a dropdown instead of a numeric entry field. Inheritance Object ScenePickAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class ScenePickAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.IMixedRealitySceneSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.IMixedRealitySceneSystem.html",
    "title": "Interface IMixedRealitySceneSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySceneSystem Interface for managing scenes in Unity. Scenes are divided into three categories: Manager, Lighting and Content. The Manager scene is loaded first and remains loaded for the duration of the app. Only one Manager scene is ever loaded, and no scene operation will ever unload it. The Lighting scene is a largely empty scene which controls lighting settings. Ambient lighting, skybox, sun direction, etc. A default lighting scene is loaded on initialization. After that the active lighting scene may be changed at any time via SetLightingScene. Only one lighting scene can ever be loaded at a time. Content scenes are everything else. These can be loaded and unloaded at will in any combination. The scene actions provided improve on unity's SceneManagement events by ensuring that scenes are considered valid before the action is invoked. Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySceneSystem : IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Properties ActiveLightingScene Name of the currently loaded lighting scene. If a transition is in progress, this reports the target lighting scene we're transitioning to. Declaration string ActiveLightingScene { get; } Property Value Type Description String ContentSceneNames An array of content scenes available to load / unload. Order in array matches build order. Useful if you want to present an ordered list of options, or if you want to track which scenes are loaded via IsContentLoaded. Declaration string[] ContentSceneNames { get; } Property Value Type Description String [] LightingOperationInProgress True if the scene system is transitioning from one lighting scene to another. Lighting operations will not impede other operations. Declaration bool LightingOperationInProgress { get; } Property Value Type Description Boolean LightingOperationProgress Progress of current lighting operation, from 0-1 Declaration float LightingOperationProgress { get; } Property Value Type Description Single NextContentExists Returns true if a content scene appears in build settings AFTER the latest loaded build index. Use to verify that LoadNextContent can be performed without wrapping. Declaration bool NextContentExists { get; } Property Value Type Description Boolean OnContentLoaded Called when a set of content scenes have been loaded, activated and are valid. Includes names of all scenes loaded. Declaration Action<IEnumerable<string>> OnContentLoaded { get; set; } Property Value Type Description Action < IEnumerable < String >> OnContentUnloaded Called after a set of content scenes have been completely unloaded. Includes names of all scenes about to be unloaded. Declaration Action<IEnumerable<string>> OnContentUnloaded { get; set; } Property Value Type Description Action < IEnumerable < String >> OnLightingLoaded Called when a lighting scene has been loaded, activated and is valid. Includes scene name. Declaration Action<string> OnLightingLoaded { get; set; } Property Value Type Description Action < String > OnLightingUnloaded Called after a lighting scene has been completely unloaded. Includes scene name. Declaration Action<string> OnLightingUnloaded { get; set; } Property Value Type Description Action < String > OnSceneLoaded Called when scene has been loaded, activated and is valid. Called for all scene types (content, lighting and manager) Includes scene name Declaration Action<string> OnSceneLoaded { get; set; } Property Value Type Description Action < String > OnSceneUnloaded Called when scene has been unloaded Called for all scene types (content, lighting and manager) Includes scene name Declaration Action<string> OnSceneUnloaded { get; set; } Property Value Type Description Action < String > OnWillLoadContent Called just before a set of content scenes is loaded. Includes names of all scenes about to be loaded. Declaration Action<IEnumerable<string>> OnWillLoadContent { get; set; } Property Value Type Description Action < IEnumerable < String >> OnWillLoadLighting Called just before a lighting scene is loaded. Includes name of scene. Declaration Action<string> OnWillLoadLighting { get; set; } Property Value Type Description Action < String > OnWillLoadScene Called just before a scene is loaded. Called for all scene types (content, lighting and manager) Includes scene name Declaration Action<string> OnWillLoadScene { get; set; } Property Value Type Description Action < String > OnWillUnloadContent Called just before a set of content scenes will be unloaded. Includes names of all scenes about to be unloaded. Declaration Action<IEnumerable<string>> OnWillUnloadContent { get; set; } Property Value Type Description Action < IEnumerable < String >> OnWillUnloadLighting Called just before a lighting scene unload operation begins. Includes scene name. Declaration Action<string> OnWillUnloadLighting { get; set; } Property Value Type Description Action < String > OnWillUnloadScene Called just before a scene will be unloaded Called for all scene types (content, lighting and manager) Includes scene name Declaration Action<string> OnWillUnloadScene { get; set; } Property Value Type Description Action < String > PrevContentExists Returns true if a content scene appears in build settings PRIOR to the latest loaded build index. Use to verify that LoadPrevContent can be performed without wrapping. Declaration bool PrevContentExists { get; } Property Value Type Description Boolean SceneOperationInProgress True if the scene system is loading or unloading content scenes. Manager and lighting scenes are ignored. Declaration bool SceneOperationInProgress { get; } Property Value Type Description Boolean SceneOperationProgress Progress of the current scene operation, from 0-1. A scene operation may include multiple concurrently loaded scenes. Declaration float SceneOperationProgress { get; } Property Value Type Description Single WaitingToProceed True when content has been loaded with an activation token and AllowSceneActivation has not been set to true. Useful for existing entities that shouldn't act until a newly loaded scene is actually activated. Declaration bool WaitingToProceed { get; } Property Value Type Description Boolean Methods GetScene(String) Returns a scene by name. Useful for processing events. Declaration Scene GetScene(string sceneName) Parameters Type Name Description String sceneName Returns Type Description Scene GetScenes(IEnumerable<String>) Returns a set of scenes by name. Useful for processing events. Declaration IEnumerable<Scene> GetScenes(IEnumerable<string> sceneNames) Parameters Type Name Description IEnumerable < String > sceneNames Returns Type Description IEnumerable < Scene > IsContentLoaded(String) Returns true if a content scene is fully loaded. Declaration bool IsContentLoaded(string sceneName) Parameters Type Name Description String sceneName Returns Type Description Boolean LoadContent(IEnumerable<String>, LoadSceneMode, SceneActivationToken) Async method to load the scenes by name. If a scene operation is in progress, no action will be taken. Declaration Task LoadContent(IEnumerable<string> scenesToLoad, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description IEnumerable < String > scenesToLoad Names of content scenes to load. Invalid scenes will be ignored. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadContent(String, LoadSceneMode, SceneActivationToken) Async method to load a single scene by name. If a scene operation is in progress, no action will be taken. Declaration Task LoadContent(string sceneToLoad, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description String sceneToLoad Name of content scene to load. Invalid scenes will be ignored. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadContentByTag(String, LoadSceneMode, SceneActivationToken) Async method to load content scenes by tag. All scenes with the supplied tag will be loaded. If no scenes with this tag are found, no action will be taken. If a scene operation is in progress, no action will be taken. Declaration Task LoadContentByTag(string tag, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description String tag Scene tag. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadNextContent(Boolean, LoadSceneMode, SceneActivationToken) Loads the next content scene according to build index. Uses the last-loaded content scene as previous build index. If no next content exists, and wrap is false, no action is taken. Use NextContentExists to verify that this operation is possible (if not using wrap). Declaration Task LoadNextContent(bool wrap = false, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description Boolean wrap If true, if the current scene is the LAST content scene, the FIRST content scene will be loaded. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadPrevContent(Boolean, LoadSceneMode, SceneActivationToken) Loads the previous content scene according to build index. Uses the loaded content scene with the smallest build index as previous build index. If no previous content exists, and wrap is false, no action is taken. Use PrevContentExists to verify that this operation is possible (if not using wrap). Declaration Task LoadPrevContent(bool wrap = false, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description Boolean wrap If true, if the current scene is the FIRST content scene, the LAST content scene will be loaded. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task SetLightingScene(String, LightingSceneTransitionType, Single) Sets the current lighting scene. The lighting scene determines ambient light and skybox settings. It can optionally contain light objects. If the lighting scene is already loaded, no action will be taken. If a lighting scene transition is in progress, request will be queued and executed when the transition is complete. Declaration void SetLightingScene(string newLightingSceneName, LightingSceneTransitionType transitionType = LightingSceneTransitionType.None, float transitionDuration = 1F) Parameters Type Name Description String newLightingSceneName LightingSceneTransitionType transitionType The transition type to use. See LightingSceneTransitionType for information about each transition type. Single transitionDuration The duration of the transition (if not None). UnloadContent(IEnumerable<String>) Async method to unload scenes by name. If a scene is not loaded, it will be ignored. If a scene operation is in progress, no action will be taken. Declaration Task UnloadContent(IEnumerable<string> scenesToUnload) Parameters Type Name Description IEnumerable < String > scenesToUnload Returns Type Description Task Task UnloadContent(String) Async method to unload a single scene by name. If the scene is not loaded, no action will be taken. If a scene operation is in progress, no action will be taken. Declaration Task UnloadContent(string sceneToUnload) Parameters Type Name Description String sceneToUnload Returns Type Description Task Task UnloadContentByTag(String) Async method to unload scenes by name. If a scene is not loaded, it will be ignored. If a scene operation is in progress, no action will be taken. Declaration Task UnloadContentByTag(string tag) Parameters Type Name Description String tag Scene tag Returns Type Description Task Task"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.IMixedRealitySceneSystemEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.IMixedRealitySceneSystemEditor.html",
    "title": "Interface IMixedRealitySceneSystemEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySceneSystemEditor Optional editor-only interface for use with facade inspectors. If a scene system service does not implement this interface, the facade will not be rendered. Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySceneSystemEditor"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.NetworkInterfaces.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.NetworkInterfaces.html",
    "title": "Class NetworkInterfaces | Mixed Reality Toolkit Documentation",
    "keywords": "Class NetworkInterfaces Inheritance Object NetworkInterfaces Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class NetworkInterfaces Fields Interfaces Declaration public InterfaceInfo[] Interfaces Field Value Type Description InterfaceInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.NetworkProfileInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.NetworkProfileInfo.html",
    "title": "Class NetworkProfileInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class NetworkProfileInfo Inheritance Object NetworkProfileInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class NetworkProfileInfo Fields GroupPolicyProfile Declaration public bool GroupPolicyProfile Field Value Type Description Boolean Name Declaration public string Name Field Value Type Description String PerUserProfile Declaration public bool PerUserProfile Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.PowerStateInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.PowerStateInfo.html",
    "title": "Class PowerStateInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class PowerStateInfo Inheritance Object PowerStateInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class PowerStateInfo Fields LowPowerState Declaration public bool LowPowerState Field Value Type Description Boolean LowPowerStateAvailable Declaration public bool LowPowerStateAvailable Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ProcessInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ProcessInfo.html",
    "title": "Class ProcessInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProcessInfo Inheritance Object ProcessInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class ProcessInfo Fields CPUUsage Declaration public float CPUUsage Field Value Type Description Single ImageName Declaration public string ImageName Field Value Type Description String PageFileUsage Declaration public float PageFileUsage Field Value Type Description Single PrivateWorkingSet Declaration public int PrivateWorkingSet Field Value Type Description Int32 ProcessId Declaration public int ProcessId Field Value Type Description Int32 SessionId Declaration public int SessionId Field Value Type Description Int32 UserName Declaration public string UserName Field Value Type Description String VirtualSize Declaration public int VirtualSize Field Value Type Description Int32 WorkingSetSize Declaration public int WorkingSetSize Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ProcessList.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ProcessList.html",
    "title": "Class ProcessList | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProcessList Inheritance Object ProcessList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class ProcessList Fields Processes Declaration public ProcessInfo[] Processes Field Value Type Description ProcessInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.WirelessNetworkInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.WirelessNetworkInfo.html",
    "title": "Class WirelessNetworkInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class WirelessNetworkInfo Inheritance Object WirelessNetworkInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class WirelessNetworkInfo Fields AlreadyConnected Declaration public bool AlreadyConnected Field Value Type Description Boolean AuthenticationAlgorithm Declaration public string AuthenticationAlgorithm Field Value Type Description String BSSID Declaration public int[] BSSID Field Value Type Description Int32 [] Channel Declaration public int Channel Field Value Type Description Int32 CipherAlgorithm Declaration public string CipherAlgorithm Field Value Type Description String Connectable (0 | 1) Declaration public int Connectable Field Value Type Description Int32 InfrastructureType Declaration public string InfrastructureType Field Value Type Description String PhysicalTypes Declaration public string[] PhysicalTypes Field Value Type Description String [] ProfileAvailable Declaration public bool ProfileAvailable Field Value Type Description Boolean ProfileName Declaration public string ProfileName Field Value Type Description String SecurityEnabled (0 | 1) Declaration public int SecurityEnabled Field Value Type Description Int32 SignalQuality Declaration public int SignalQuality Field Value Type Description Int32 SSID Declaration public string SSID Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.WindowsDevicePortal | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.WindowsDevicePortal Classes ActivePowerSchemeInfo AdapterInfo ApplicationInfo AvailableWiFiNetworks BatteryInfo DeviceInfo DeviceOsInfo DevicePortal Function used to communicate with Windows 10 devices through the device portal REST APIs. DevicePortalConnections DHCPInfo FileList InstalledApps InstallStatus InterfaceInfo IpAddressInfo IpConfigInfo MachineName NetworkInterfaces NetworkProfileInfo PowerStateInfo ProcessInfo ProcessList WirelessNetworkInfo Structs FileInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor.WindowsMixedRealityCameraSettingsProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor.WindowsMixedRealityCameraSettingsProfileInspector.html",
    "title": "Class WindowsMixedRealityCameraSettingsProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityCameraSettingsProfileInspector Inheritance Object WindowsMixedRealityCameraSettingsProfileInspector Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityCameraSettingsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality.Editor Classes WindowsMixedRealityCameraSettingsProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.HolographicDepthReprojectionMethod.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.HolographicDepthReprojectionMethod.html",
    "title": "Enum HolographicDepthReprojectionMethod | Mixed Reality Toolkit Documentation",
    "keywords": "Enum HolographicDepthReprojectionMethod Enumeration defining how holograms are stabilized during reprojection. Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality Assembly : cs.temp.dll.dll Syntax public enum HolographicDepthReprojectionMethod Fields Name Description AutoPlanar Automatically placed plane. DepthReprojection Use the depth buffer."
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.HolographicFrameNativeData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.HolographicFrameNativeData.html",
    "title": "Struct HolographicFrameNativeData | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HolographicFrameNativeData A representation of Windows Mixed Reality native data, provided as an IntPtr from Unity's UnityEngine.XR.XRDevice.GetNativePtr(). Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality Assembly : cs.temp.dll.dll Syntax public struct HolographicFrameNativeData Remarks See https://docs.microsoft.com/windows/mixed-reality/unity-xrdevice-advanced for more info. Fields IHolographicCameraPtr An array of IntPtr (to IHolographicCamera ) marshaled as UnmanagedType.ByValArray with a length equal to MaxNumberOfCameras. Declaration public IntPtr IHolographicCameraPtr Field Value Type Description IntPtr IHolographicFramePtr The current native IHolographicFrame ). Declaration public IntPtr IHolographicFramePtr Field Value Type Description IntPtr ISpatialCoordinateSystemPtr The current native root ISpatialCoordinateSystem ). Declaration public IntPtr ISpatialCoordinateSystemPtr Field Value Type Description IntPtr MaxNumberOfCameras The number of cameras present in the IHolographicCameraPtr array. Declaration public uint MaxNumberOfCameras Field Value Type Description UInt32 VersionNumber The version number of this native data. Declaration public uint VersionNumber Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.BaseWindowsMixedRealitySource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.BaseWindowsMixedRealitySource.html",
    "title": "Class BaseWindowsMixedRealitySource | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseWindowsMixedRealitySource A Windows Mixed Reality Source Instance. Inheritance Object BaseWindowsMixedRealitySource WindowsMixedRealityArticulatedHand WindowsMixedRealityController WindowsMixedRealityGGVHand Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseWindowsMixedRealitySource : BaseController Constructors BaseWindowsMixedRealitySource(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration protected BaseWindowsMixedRealitySource(TrackingState trackingState, Handedness sourceHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness sourceHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] DefaultRightHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Methods SetupDefaultInteractions(Handedness) Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityArticulatedHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityArticulatedHand.html",
    "title": "Class WindowsMixedRealityArticulatedHand | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityArticulatedHand A Windows Mixed Reality Controller Instance. Inheritance Object BaseWindowsMixedRealitySource WindowsMixedRealityArticulatedHand Implements IMixedRealityHand Inherited Members BaseWindowsMixedRealitySource.DefaultLeftHandedInteractions BaseWindowsMixedRealitySource.DefaultRightHandedInteractions BaseWindowsMixedRealitySource.SetupDefaultInteractions(Handedness) Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityArticulatedHand : BaseWindowsMixedRealitySource, IMixedRealityHand Constructors WindowsMixedRealityArticulatedHand(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public WindowsMixedRealityArticulatedHand(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The Windows Mixed Reality articulated hands default interactions. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Remarks A single interaction mapping works for both left and right articulated hands. IsInPointingPose Declaration public override bool IsInPointingPose { get; } Property Value Type Description Boolean Methods TryGetJoint(TrackedHandJoint, out MixedRealityPose) Declaration public bool TryGetJoint(TrackedHandJoint joint, out MixedRealityPose pose) Parameters Type Name Description TrackedHandJoint joint MixedRealityPose pose Returns Type Description Boolean Implements IMixedRealityHand"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityController.html",
    "title": "Class WindowsMixedRealityController | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityController A Windows Mixed Reality Controller Instance. Inheritance Object BaseWindowsMixedRealitySource WindowsMixedRealityController Inherited Members BaseWindowsMixedRealitySource.DefaultLeftHandedInteractions BaseWindowsMixedRealitySource.DefaultRightHandedInteractions BaseWindowsMixedRealitySource.SetupDefaultInteractions(Handedness) Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityController : BaseWindowsMixedRealitySource Constructors WindowsMixedRealityController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public WindowsMixedRealityController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The Windows Mixed Reality Controller default interactions. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Remarks A single interaction mapping works for both left and right controllers."
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityDeviceManager.html",
    "title": "Class WindowsMixedRealityDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityDeviceManager Inheritance Object WindowsMixedRealityDeviceManager Implements IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityDeviceManager : BaseInputDeviceManager, IMixedRealityCapabilityCheck Constructors WindowsMixedRealityDeviceManager(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsMixedRealityDeviceManager(IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. WindowsMixedRealityDeviceManager(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsMixedRealityDeviceManager(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. Implements IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityEyeGazeDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityEyeGazeDataProvider.html",
    "title": "Class WindowsMixedRealityEyeGazeDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityEyeGazeDataProvider Inheritance Object WindowsMixedRealityEyeGazeDataProvider Implements IMixedRealityEyeGazeDataProvider IMixedRealityEyeSaccadeProvider IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityEyeGazeDataProvider : BaseInputDeviceManager, IMixedRealityEyeGazeDataProvider, IMixedRealityEyeSaccadeProvider, IMixedRealityCapabilityCheck Constructors WindowsMixedRealityEyeGazeDataProvider(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsMixedRealityEyeGazeDataProvider(IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. WindowsMixedRealityEyeGazeDataProvider(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsMixedRealityEyeGazeDataProvider(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties SaccadeProvider Declaration public IMixedRealityEyeSaccadeProvider SaccadeProvider { get; } Property Value Type Description IMixedRealityEyeSaccadeProvider SmoothEyeTracking Declaration public bool SmoothEyeTracking { get; set; } Property Value Type Description Boolean Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. Initialize() Declaration public override void Initialize() Update() Declaration public override void Update() Events OnSaccade Declaration public event Action OnSaccade Event Type Type Description Action OnSaccadeX Declaration public event Action OnSaccadeX Event Type Type Description Action OnSaccadeY Declaration public event Action OnSaccadeY Event Type Type Description Action Implements IMixedRealityEyeGazeDataProvider IMixedRealityEyeSaccadeProvider IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityGGVHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityGGVHand.html",
    "title": "Class WindowsMixedRealityGGVHand | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityGGVHand A Windows Mixed Reality Controller Instance. Inheritance Object BaseWindowsMixedRealitySource WindowsMixedRealityGGVHand Inherited Members BaseWindowsMixedRealitySource.DefaultLeftHandedInteractions BaseWindowsMixedRealitySource.DefaultRightHandedInteractions BaseWindowsMixedRealitySource.SetupDefaultInteractions(Handedness) Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityGGVHand : BaseWindowsMixedRealitySource Constructors WindowsMixedRealityGGVHand(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Declaration public WindowsMixedRealityGGVHand(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The GGV hand default interactions Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Remarks A single interaction mapping works for both left and right controllers."
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.WindowsMixedRealityUtilities.html",
    "title": "Class WindowsMixedRealityUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityUtilities Inheritance Object WindowsMixedRealityUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Assembly : cs.temp.dll.dll Syntax public static class WindowsMixedRealityUtilities Methods SystemQuaternionToUnity(Quaternion) Declaration [Obsolete(\"Use the System.Numerics.Quaternion extension method ToUnityQuaternion instead.\")] public static UnityEngine.Quaternion SystemQuaternionToUnity(Quaternion quaternion) Parameters Type Name Description Quaternion quaternion Returns Type Description UnityEngine.Quaternion SystemVector3ToUnity(Vector3) Declaration [Obsolete(\"Use the System.Numerics.Vector3 extension method ToUnityVector3 instead.\")] public static UnityEngine.Vector3 SystemVector3ToUnity(Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description UnityEngine.Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input Classes BaseWindowsMixedRealitySource A Windows Mixed Reality Source Instance. WindowsMixedRealityArticulatedHand A Windows Mixed Reality Controller Instance. WindowsMixedRealityController A Windows Mixed Reality Controller Instance. WindowsMixedRealityDeviceManager WindowsMixedRealityEyeGazeDataProvider WindowsMixedRealityGGVHand A Windows Mixed Reality Controller Instance. WindowsMixedRealityUtilities"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness.WindowsMixedRealitySpatialMeshObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness.WindowsMixedRealitySpatialMeshObserver.html",
    "title": "Class WindowsMixedRealitySpatialMeshObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealitySpatialMeshObserver Inheritance Object WindowsMixedRealitySpatialMeshObserver Implements IMixedRealitySpatialAwarenessMeshObserver IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealitySpatialMeshObserver : BaseSpatialObserver, IMixedRealitySpatialAwarenessMeshObserver, IMixedRealityCapabilityCheck Constructors WindowsMixedRealitySpatialMeshObserver(IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsMixedRealitySpatialMeshObserver(IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem The service instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. WindowsMixedRealitySpatialMeshObserver(IMixedRealityServiceRegistrar, IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public WindowsMixedRealitySpatialMeshObserver(IMixedRealityServiceRegistrar registrar, IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem The service instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Fields displayOption Declaration public SpatialAwarenessMeshDisplayOptions displayOption Field Value Type Description SpatialAwarenessMeshDisplayOptions levelOfDetail Declaration public SpatialAwarenessMeshLevelOfDetail levelOfDetail Field Value Type Description SpatialAwarenessMeshLevelOfDetail Properties DisplayOption Declaration public SpatialAwarenessMeshDisplayOptions DisplayOption { get; set; } Property Value Type Description SpatialAwarenessMeshDisplayOptions LevelOfDetail Declaration public SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; set; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail Meshes Declaration public IReadOnlyDictionary<int, SpatialAwarenessMeshObject> Meshes { get; } Property Value Type Description IReadOnlyDictionary < Int32 , SpatialAwarenessMeshObject > MeshPhysicsLayer Declaration public int MeshPhysicsLayer { get; set; } Property Value Type Description Int32 MeshPhysicsLayerMask Declaration public int MeshPhysicsLayerMask { get; } Property Value Type Description Int32 OcclusionMaterial Declaration public Material OcclusionMaterial { get; set; } Property Value Type Description Material RecalculateNormals Declaration public bool RecalculateNormals { get; set; } Property Value Type Description Boolean TrianglesPerCubicMeter Declaration public int TrianglesPerCubicMeter { get; set; } Property Value Type Description Int32 VisibleMaterial Declaration public Material VisibleMaterial { get; set; } Property Value Type Description Material Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. Resume() Declaration public override void Resume() Suspend() Declaration public override void Suspend() Implements IMixedRealitySpatialAwarenessMeshObserver IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.Audio.AudioInfluencerController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Audio.AudioInfluencerController.html",
    "title": "Class AudioInfluencerController | Mixed Reality Toolkit Documentation",
    "keywords": "Class AudioInfluencerController Class which supports components implementing IAudioInfluencer being used with audio sources. Inheritance Object AudioInfluencerController Namespace : Microsoft.MixedReality.Toolkit.Audio Assembly : cs.temp.dll.dll Syntax public class AudioInfluencerController : MonoBehaviour Remarks AudioInfluencerController requires an AudioSource component. If one is not attached, it will be added automatically. Each sound playing game object needs to have an AudioInfluencerController attached in order to have it's audio influenced. Fields NeutralHighFrequency Frequency above the nominal range of human hearing. Declaration public static readonly float NeutralHighFrequency Field Value Type Description Single Remarks This frequency can be used to set a low pass filter to allow all audible frequencies through the filter. NeutralLowFrequency Frequency below the nominal range of human hearing. Declaration public static readonly float NeutralLowFrequency Field Value Type Description Single Remarks This frequency can be used to set a high pass filter to allow all audible frequencies through the filter. Properties MaxDistance Declaration public float MaxDistance { get; set; } Property Value Type Description Single NativeHighPassCutoffFrequency Gets or sets the native high pass cutoff frequency for the sound emitter. Declaration public float NativeHighPassCutoffFrequency { get; set; } Property Value Type Description Single NativeLowPassCutoffFrequency Gets or sets the native low pass cutoff frequency for the sound emitter. Declaration public float NativeLowPassCutoffFrequency { get; set; } Property Value Type Description Single UpdateInterval Declaration public float UpdateInterval { get; set; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Audio.AudioOccluder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Audio.AudioOccluder.html",
    "title": "Class AudioOccluder | Mixed Reality Toolkit Documentation",
    "keywords": "Class AudioOccluder Class that implements IAudioInfluencer to provide an audio occlusion effect, similar to listening to sound from outside of an enclosed space. Inheritance Object AudioOccluder Implements IAudioInfluencer Namespace : Microsoft.MixedReality.Toolkit.Audio Assembly : cs.temp.dll.dll Syntax public class AudioOccluder : MonoBehaviour, IAudioInfluencer Remarks Ensure that all sound emitting objects have an attached AudioInfluencerController . Failing to do so will result in the desired effect not being applied to the sound. Properties CutoffFrequency Frequency above which sound will not be heard after applying occlusion. Setting this value to 22000.0 effectively disables the effect. Declaration public float CutoffFrequency { get; set; } Property Value Type Description Single Remarks Chaining occluders will result in the lowest of the cutoff frequencies being applied to the sound. The CutoffFrequency range is 0.0 - 22000.0 (0 - 22kHz), inclusive. The default value is 5000.0 (5kHz). VolumePassThrough Percentage of the audio source volume that will be heard after applying occlusion. Declaration public float VolumePassThrough { get; set; } Property Value Type Description Single Remarks VolumePassThrough is cumulative. It is applied to the current volume of the object at the time the effect is applied. The VolumePassThrough range is from 0.0 - 1.0 (0-100%), inclusive. The default value is 1.0. Methods ApplyEffect(GameObject) Applies an audio effect. Declaration public void ApplyEffect(GameObject soundEmittingObject) Parameters Type Name Description GameObject soundEmittingObject The GameObject on which the effect is to be applied. RemoveEffect(GameObject) Removes a previously applied audio effect. Declaration public void RemoveEffect(GameObject soundEmittingObject) Parameters Type Name Description GameObject soundEmittingObject The GameObject from which the effect is to be removed. Implements IAudioInfluencer"
  },
  "api/Microsoft.MixedReality.Toolkit.BaseCoreSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseCoreSystem.html",
    "title": "Class BaseCoreSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseCoreSystem Inheritance Object BaseService BaseEventSystem BaseCoreSystem BaseDataProviderAccessCoreSystem MixedRealityBoundarySystem MixedRealityDiagnosticsSystem DefaultRaycastProvider FocusProvider MixedRealitySceneSystem MixedRealityTeleportSystem Implements IMixedRealityEventSystem IMixedRealityService IDisposable Inherited Members BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseEventSystem.Destroy() BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseCoreSystem : BaseEventSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable Constructors BaseCoreSystem(BaseMixedRealityProfile) Constructor. Declaration protected BaseCoreSystem(BaseMixedRealityProfile profile = null) Parameters Type Name Description BaseMixedRealityProfile profile The configuration profile for the service. BaseCoreSystem(IMixedRealityServiceRegistrar, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] protected BaseCoreSystem(IMixedRealityServiceRegistrar registrar, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. BaseMixedRealityProfile profile The configuration profile for the service. Properties Registrar The service registrar instance that registered this service. Declaration [Obsolete(\"The Registrar property is obsolete and will be removed in a future version of the Microsoft Mixed Reality Toolkit\")] protected IMixedRealityServiceRegistrar Registrar { get; set; } Property Value Type Description IMixedRealityServiceRegistrar Implements IMixedRealityEventSystem IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.BaseEventSystem.EventHandlerEntry.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseEventSystem.EventHandlerEntry.html",
    "title": "Struct BaseEventSystem.EventHandlerEntry | Mixed Reality Toolkit Documentation",
    "keywords": "Struct BaseEventSystem.EventHandlerEntry Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public struct EventHandlerEntry Constructors EventHandlerEntry(IEventSystemHandler, Boolean) Declaration public EventHandlerEntry(IEventSystemHandler h, bool isParentListener = false) Parameters Type Name Description IEventSystemHandler h Boolean isParentListener Fields handler Declaration public IEventSystemHandler handler Field Value Type Description IEventSystemHandler parentObjectIsInObjectCollection Declaration public bool parentObjectIsInObjectCollection Field Value Type Description Boolean Methods ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/Microsoft.MixedReality.Toolkit.BeginReadOnlyGroupAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BeginReadOnlyGroupAttribute.html",
    "title": "Class BeginReadOnlyGroupAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class BeginReadOnlyGroupAttribute Inheritance Object BeginReadOnlyGroupAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class BeginReadOnlyGroupAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.Editor.MixedRealityBoundaryVisualizationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.Editor.MixedRealityBoundaryVisualizationProfileInspector.html",
    "title": "Class MixedRealityBoundaryVisualizationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityBoundaryVisualizationProfileInspector Inheritance Object MixedRealityBoundaryVisualizationProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Boundary.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityBoundaryVisualizationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.InscribedRectangle.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.InscribedRectangle.html",
    "title": "Class InscribedRectangle | Mixed Reality Toolkit Documentation",
    "keywords": "Class InscribedRectangle The InscribedRectangle class defines the largest rectangle within an arbitrary shape. Inheritance Object InscribedRectangle Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public class InscribedRectangle Constructors InscribedRectangle(Edge[], Int32) Finds a large inscribed rectangle. Tries to be maximal but this is best effort. The algorithm used was inspired by the blog post https://d3plus.org/blog/behind-the-scenes/2014/07/08/largest-rect/ Random points within the polygon are chosen, and then 2 lines are drawn through those points. The midpoints of those lines are used as the center of various rectangles, using a binary search to vary the size, until the largest fit-able rectangle is found. This is then repeated for predefined angles (0-180 in steps of 15) and aspect ratios (1 to 15 in steps of 0.5). Declaration public InscribedRectangle(Edge[] geometryEdges, int randomSeed) Parameters Type Name Description Edge [] geometryEdges The boundary geometry. Int32 randomSeed Random number generator seed. Remarks For the most reproducible results, use the same randomSeed value each time this method is called. Properties Angle The rotation angle, in degrees, of the inscribed rectangle. Declaration public float Angle { get; } Property Value Type Description Single Center The center point of the inscribed rectangle. Declaration public Vector2 Center { get; } Property Value Type Description Vector2 Height The height of the inscribed rectangle. Declaration public float Height { get; } Property Value Type Description Single IsValid Is the described rectangle valid? Declaration public bool IsValid { get; } Property Value Type Description Boolean Remarks A rectangle is considered valid if it's center point is valid. Width The width of the inscribed rectangle. Declaration public float Width { get; } Property Value Type Description Single Methods IsInsideBoundary(Vector2) Determine of the provided point lies within the defined rectangle. Declaration public bool IsInsideBoundary(Vector2 point) Parameters Type Name Description Vector2 point The point to check Returns Type Description Boolean True if the point is within the rectangle's bounds, false otherwise. Exceptions Type Condition InvalidOperationException The rectangle is not valid."
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildInfoExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildInfoExtensions.html",
    "title": "Class BuildInfoExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class BuildInfoExtensions Inheritance Object BuildInfoExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public static class BuildInfoExtensions Methods AppendSymbols(IBuildInfo, IEnumerable<String>) Append symbols to the end of the IBuildInfo 's BuildSymbols . Declaration public static void AppendSymbols(this IBuildInfo buildInfo, IEnumerable<string> symbols) Parameters Type Name Description IBuildInfo buildInfo IEnumerable < String > symbols The string collection to append. AppendSymbols(IBuildInfo, String[]) Append symbols to the end of the IBuildInfo 's BuildSymbols . Declaration public static void AppendSymbols(this IBuildInfo buildInfo, params string[] symbol) Parameters Type Name Description IBuildInfo buildInfo String [] symbol The string array to append. AppendWithoutConfigurationSymbols(IBuildInfo, String) Appends the IBuildInfo 's BuildSymbols without including debug, release or master. Declaration public static void AppendWithoutConfigurationSymbols(this IBuildInfo buildInfo, string symbols) Parameters Type Name Description IBuildInfo buildInfo String symbols Symbols to append. GetGroup(BuildTarget) Gets the BuildTargetGroup for the IBuildInfo 's BuildTarget Declaration public static BuildTargetGroup GetGroup(this BuildTarget buildTarget) Parameters Type Name Description BuildTarget buildTarget Returns Type Description BuildTargetGroup The BuildTargetGroup for the IBuildInfo 's BuildTarget HasAnySymbols(IBuildInfo, IEnumerable<String>) Does the IBuildInfo contain any of the provided symbols in the BuildSymbols ? Declaration public static bool HasAnySymbols(this IBuildInfo buildInfo, IEnumerable<string> symbols) Parameters Type Name Description IBuildInfo buildInfo IEnumerable < String > symbols The string collection of symbols to match. Returns Type Description Boolean True, if any of the provided symbols are in the BuildSymbols HasAnySymbols(IBuildInfo, String[]) Does the IBuildInfo contain any of the provided symbols in the BuildSymbols ? Declaration public static bool HasAnySymbols(this IBuildInfo buildInfo, params string[] symbols) Parameters Type Name Description IBuildInfo buildInfo String [] symbols The string array of symbols to match. Returns Type Description Boolean True, if any of the provided symbols are in the BuildSymbols HasConfigurationSymbol(IBuildInfo) Checks if the IBuildInfo has any configuration symbols (i.e. debug, release, or master). Declaration public static bool HasConfigurationSymbol(this IBuildInfo buildInfo) Parameters Type Name Description IBuildInfo buildInfo Returns Type Description Boolean True, if the BuildSymbols contains debug, release, or master. RemoveSymbols(IBuildInfo, IEnumerable<String>) Remove symbols from the IBuildInfo 's BuildSymbols . Declaration public static void RemoveSymbols(this IBuildInfo buildInfo, IEnumerable<string> symbolsToRemove) Parameters Type Name Description IBuildInfo buildInfo IEnumerable < String > symbolsToRemove The string collection to remove."
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpBuildInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpBuildInfo.html",
    "title": "Class UwpBuildInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpBuildInfo Inheritance Object BuildInfo UwpBuildInfo Implements IBuildInfo Inherited Members BuildInfo.IsCommandLine BuildInfo.OutputDirectory BuildInfo.Scenes BuildInfo.PreBuildAction BuildInfo.PostBuildAction BuildInfo.BuildOptions BuildInfo.ColorSpace BuildInfo.ScriptingBackend BuildInfo.AutoIncrement BuildInfo.BuildSymbols BuildInfo.BuildPlatform BuildInfo.Configuration BuildInfo.LogDirectory Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public class UwpBuildInfo : BuildInfo, IBuildInfo Constructors UwpBuildInfo(Boolean) Declaration public UwpBuildInfo(bool isCommandLine = false) Parameters Type Name Description Boolean isCommandLine Properties AllowUnsafeCode If true, unsafe code will be allowed in the generated Assembly-CSharp project. Declaration public bool AllowUnsafeCode { get; set; } Property Value Type Description Boolean BuildAppx Build the appx bundle after building Unity Player? Declaration public bool BuildAppx { get; set; } Property Value Type Description Boolean BuildTarget The build target. Declaration public override BuildTarget BuildTarget { get; } Property Value Type Description BuildTarget Overrides BuildInfo.BuildTarget GazeInputCapabilityEnabled If true, the 'Gaze Input' capability will be added to the AppX manifest after the Unity build. Declaration public bool GazeInputCapabilityEnabled { get; set; } Property Value Type Description Boolean Multicore Use multiple cores for building the appx bundle? Declaration public bool Multicore { get; set; } Property Value Type Description Boolean PlatformToolset VC Platform Toolset used building the appx bundle Declaration public string PlatformToolset { get; set; } Property Value Type Description String RebuildAppx Force rebuilding the appx bundle? Declaration public bool RebuildAppx { get; set; } Property Value Type Description Boolean ResearchModeCapabilityEnabled If true, the 'Research Mode' capability will be added to the AppX manifest after the Unity build. Declaration public bool ResearchModeCapabilityEnabled { get; set; } Property Value Type Description Boolean Implements IBuildInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpPlayerBuildTools.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpPlayerBuildTools.html",
    "title": "Class UwpPlayerBuildTools | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpPlayerBuildTools Class containing various utility methods to build a WSA solution from a Unity project. Inheritance Object UwpPlayerBuildTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public static class UwpPlayerBuildTools Methods BuildPlayer(UwpBuildInfo, CancellationToken) Build the Uwp Player. Declaration public static Task<bool> BuildPlayer(UwpBuildInfo buildInfo, CancellationToken cancellationToken = null) Parameters Type Name Description UwpBuildInfo buildInfo CancellationToken cancellationToken Returns Type Description Task < Boolean > BuildPlayer(String, Boolean, CancellationToken) Do a build configured for UWP Applications to the specified path, returns the error from BuildPlayer(UwpBuildInfo, CancellationToken) Declaration public static Task<bool> BuildPlayer(string buildDirectory, bool showDialog = true, CancellationToken cancellationToken = null) Parameters Type Name Description String buildDirectory Boolean showDialog Should the user be prompted to build the appx as well? CancellationToken cancellationToken Returns Type Description Task < Boolean > True, if build was successful."
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.IMixedRealityCameraSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.IMixedRealityCameraSystem.html",
    "title": "Interface IMixedRealityCameraSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityCameraSystem Manager interface for a camera system in the Mixed Reality Toolkit. The camera system is expected to manage settings on the main camera. It should update the camera's clear settings, render mask, etc based on platform. Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityCameraSystem : IMixedRealityEventSystem, IMixedRealityEventSource, IEqualityComparer, IMixedRealityService, IDisposable Properties CameraProfile Typed representation of the ConfigurationProfile property. Declaration MixedRealityCameraProfile CameraProfile { get; } Property Value Type Description MixedRealityCameraProfile IsOpaque Is the current camera displaying on an opaque (VR / immersive) or a transparent (AR) device Declaration bool IsOpaque { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.MixedRealityCameraSettingsConfiguration.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.MixedRealityCameraSettingsConfiguration.html",
    "title": "Struct MixedRealityCameraSettingsConfiguration | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityCameraSettingsConfiguration Defines the configuration for a camera settings provider. Implements IMixedRealityServiceConfiguration Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public struct MixedRealityCameraSettingsConfiguration : IMixedRealityServiceConfiguration Constructors MixedRealityCameraSettingsConfiguration(SystemType, String, UInt32, SupportedPlatforms, BaseCameraSettingsProfile) Constructor. Declaration public MixedRealityCameraSettingsConfiguration(SystemType componentType, string componentName, uint priority, SupportedPlatforms runtimePlatform, BaseCameraSettingsProfile configurationProfile) Parameters Type Name Description SystemType componentType The SystemType of the provider. String componentName The friendly name of the provider. UInt32 priority The load priority of the provider. SupportedPlatforms runtimePlatform The runtime platform(s) supported by the provider. BaseCameraSettingsProfile configurationProfile Properties ComponentName The name of the system, feature or manager. Declaration public string ComponentName { get; } Property Value Type Description String ComponentType The concrete type for the system, feature or manager. Declaration public SystemType ComponentType { get; } Property Value Type Description SystemType Priority The priority this system, feature or manager will be initialized in. Declaration public uint Priority { get; } Property Value Type Description UInt32 RuntimePlatform The runtime platform(s) to run this service. Declaration public SupportedPlatforms RuntimePlatform { get; } Property Value Type Description SupportedPlatforms SettingsProfile Camera settings specific configuration profile. Declaration public BaseCameraSettingsProfile SettingsProfile { get; } Property Value Type Description BaseCameraSettingsProfile Implements IMixedRealityServiceConfiguration"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.DiagnosticsEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.DiagnosticsEventData.html",
    "title": "Class DiagnosticsEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class DiagnosticsEventData Inheritance Object GenericBaseEventData DiagnosticsEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public class DiagnosticsEventData : GenericBaseEventData Constructors DiagnosticsEventData(EventSystem) Constructor Declaration public DiagnosticsEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Methods Initialize(IMixedRealityDiagnosticsSystem) Constructor Declaration public void Initialize(IMixedRealityDiagnosticsSystem diagnosticsSystem) Parameters Type Name Description IMixedRealityDiagnosticsSystem diagnosticsSystem The instance of the Diagnostic System that raised the event."
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.DiagnosticsSystemVoiceControls.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.DiagnosticsSystemVoiceControls.html",
    "title": "Class DiagnosticsSystemVoiceControls | Mixed Reality Toolkit Documentation",
    "keywords": "Class DiagnosticsSystemVoiceControls Class that listens for and acts upon diagnostic system voice commands. Inheritance Object DiagnosticsSystemVoiceControls Implements IMixedRealitySpeechHandler Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public class DiagnosticsSystemVoiceControls : MonoBehaviour, IMixedRealitySpeechHandler Methods ToggleDiagnostics() Shows or hides all enabled diagnostics. Declaration public void ToggleDiagnostics() ToggleProfiler() Shows or hides the profiler display. Declaration public void ToggleProfiler() Implements IMixedRealitySpeechHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SceneSystemInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SceneSystemInspector.html",
    "title": "Class SceneSystemInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneSystemInspector Inheritance Object BaseMixedRealityServiceInspector SceneSystemInspector Implements IMixedRealityServiceInspector Inherited Members BaseMixedRealityServiceInspector.AlwaysDrawSceneGUI BaseMixedRealityServiceInspector.DrawGizmos(Object) BaseMixedRealityServiceInspector.DrawSceneGUI(Object, SceneView) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class SceneSystemInspector : BaseMixedRealityServiceInspector, IMixedRealityServiceInspector Properties DrawProfileField Declaration public override bool DrawProfileField { get; } Property Value Type Description Boolean Overrides BaseMixedRealityServiceInspector.DrawProfileField Methods DrawInspectorGUI(Object) Declaration public override void DrawInspectorGUI(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawInspectorGUI(Object) Implements IMixedRealityServiceInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ScriptableObjectExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ScriptableObjectExtensions.html",
    "title": "Class ScriptableObjectExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScriptableObjectExtensions Extensions for ScriptableObject s Inheritance Object ScriptableObjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public static class ScriptableObjectExtensions Methods CreateAsset(ScriptableObject, String, String) Creates, saves, and then opens a new asset for the target ScriptableObject . Declaration public static ScriptableObject CreateAsset(this ScriptableObject scriptableObject, string path = null, string fileName = null) Parameters Type Name Description ScriptableObject scriptableObject ScriptableObject you want to create an asset file for. String path Optional path for the new asset. String fileName Optional filename for the new asset. Returns Type Description ScriptableObject GetAllInstances(Type) Gets all the scriptable object instances in the project. Declaration public static ScriptableObject[] GetAllInstances(Type assetType) Parameters Type Name Description Type assetType The Type of ScriptableObject you're wanting to find instances of. Returns Type Description ScriptableObject [] An Array of instances for the type. GetAllInstances<T>() Gets all the scriptable object instances in the project. Declaration public static T[] GetAllInstances<T>() where T : ScriptableObject Returns Type Description T[] An Array of instances for the type. Type Parameters Name Description T The Type of ScriptableObject you're wanting to find instances of."
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.Text3DShaderGUI.Styles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.Text3DShaderGUI.Styles.html",
    "title": "Class Text3DShaderGUI.Styles | Mixed Reality Toolkit Documentation",
    "keywords": "Class Text3DShaderGUI.Styles Inheritance Object Text3DShaderGUI.Styles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected static class Styles Fields cullMode Declaration public static GUIContent cullMode Field Value Type Description GUIContent"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.Text3DShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.Text3DShaderGUI.html",
    "title": "Class Text3DShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class Text3DShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/TextShader3D\". Inheritance Object Text3DShaderGUI Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class Text3DShaderGUI : ShaderGUI Fields cullMode Declaration protected MaterialProperty cullMode Field Value Type Description MaterialProperty firstTimeApply Declaration protected bool firstTimeApply Field Value Type Description Boolean Methods OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor matEditor, MaterialProperty[] props) Parameters Type Name Description MaterialEditor matEditor MaterialProperty [] props"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.TextureCombinerWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.TextureCombinerWindow.html",
    "title": "Class TextureCombinerWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class TextureCombinerWindow Inheritance Object TextureCombinerWindow Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class TextureCombinerWindow : EditorWindow"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.Vector3RangePropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.Vector3RangePropertyDrawer.html",
    "title": "Class Vector3RangePropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class Vector3RangePropertyDrawer Custom property drawer for Vector3RangeAttribute decorated Vector3 values rendered in the inspector. Inheritance Object Vector3RangePropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class Vector3RangePropertyDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.BlendOut.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.BlendOut.html",
    "title": "Class BlendOut | Mixed Reality Toolkit Documentation",
    "keywords": "Class BlendOut This script allows for dynamically blending out a target after it has been looked at for a certain amount of time. Inheritance Object BlendOut Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class BlendOut : MonoBehaviour Methods Disengage() Once the user looks away from the hologram, determine whether the user has dwelled at it before. If yes, start blending it out and destroy it if that option was selected. If not, we can still blend it out a little, but keep it alive and visible. Declaration public void Disengage() DwellSucceeded() Declaration public void DwellSucceeded() Engage() Once the target is looked at, set it to its full \"look at transparency\" and let's prevent its destruction when being looked at. Declaration public void Engage() Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ChangeRenderMode.BlendMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ChangeRenderMode.BlendMode.html",
    "title": "Enum ChangeRenderMode.BlendMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ChangeRenderMode.BlendMode Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public enum BlendMode Fields Name Description Cutout Fade Opaque Transparent"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ChangeRenderMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ChangeRenderMode.html",
    "title": "Class ChangeRenderMode | Mixed Reality Toolkit Documentation",
    "keywords": "Class ChangeRenderMode This class allows to change the render mode on-the-fly. This is, for example, useful when trying to show a semi-transparent preview of an target. Inheritance Object ChangeRenderMode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public static class ChangeRenderMode Methods ChangeRenderModes(Material, ChangeRenderMode.BlendMode) Declaration public static void ChangeRenderModes(Material standardShaderMaterial, ChangeRenderMode.BlendMode blendMode) Parameters Type Name Description Material standardShaderMaterial ChangeRenderMode.BlendMode blendMode"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ChangeSize.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ChangeSize.html",
    "title": "Class ChangeSize | Mixed Reality Toolkit Documentation",
    "keywords": "Class ChangeSize This script allows for dynamically changing the size of a GameObject when it is looked at. This is for example useful for better legibility of small text. Inheritance Object ChangeSize Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ChangeSize : MonoBehaviour Methods Disengage() Declaration public void Disengage() Engage() Declaration public void Engage()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.KeepThisAlive.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.KeepThisAlive.html",
    "title": "Class KeepThisAlive | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeepThisAlive Enforces to keep this GameObject alive across different scenes. Inheritance Object KeepThisAlive Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class KeepThisAlive : MonoBehaviour Properties Instance Declaration public static KeepThisAlive Instance { get; } Property Value Type Description KeepThisAlive"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.LoadAdditiveScene.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.LoadAdditiveScene.html",
    "title": "Class LoadAdditiveScene | Mixed Reality Toolkit Documentation",
    "keywords": "Class LoadAdditiveScene When the button is selected, it triggers starting the specified scene. Inheritance Object LoadAdditiveScene Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class LoadAdditiveScene : MonoBehaviour Fields lastSceneLoaded Declaration public static string lastSceneLoaded Field Value Type Description String Methods LoadScene() Declaration public void LoadScene() LoadScene(String) Declaration public void LoadScene(string sceneName) Parameters Type Name Description String sceneName"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.LoadProfilesOnStartup.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.LoadProfilesOnStartup.html",
    "title": "Class LoadProfilesOnStartup | Mixed Reality Toolkit Documentation",
    "keywords": "Class LoadProfilesOnStartup Automatically loads a given Mixed Reality Toolkit configuration profile when loading up the scene. Inheritance Object LoadProfilesOnStartup Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class LoadProfilesOnStartup : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.AsyncHelpers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.AsyncHelpers.html",
    "title": "Class AsyncHelpers | Mixed Reality Toolkit Documentation",
    "keywords": "Class AsyncHelpers Inheritance Object AsyncHelpers Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public static class AsyncHelpers Methods RunSync(Func<Task>) Execute's an async Task method which has a void return value synchronously Declaration public static void RunSync(Func<Task> task) Parameters Type Name Description Func < Task > task Task method to execute RunSync<T>(Func<Task<T>>) Execute's an async Task T method which has a T return type synchronously Declaration public static T RunSync<T>(Func<Task<T>> task) Parameters Type Name Description Func < Task <T>> task Task T method to execute Returns Type Description T Type Parameters Name Description T Return Type"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers Classes ControllerFinderInspector InBetweenEditor SolverHandlerInspector SolverInspector SurfaceMagnetismInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.SplineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.SplineDataProviderInspector.html",
    "title": "Class SplineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SplineDataProviderInspector Inheritance Object BaseLineDataProviderInspector SplineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class SplineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ToolTipConnectorInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ToolTipConnectorInspector.html",
    "title": "Class ToolTipConnectorInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipConnectorInspector Inheritance Object ToolTipConnectorInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ToolTipConnectorInspector : UnityEditor.Editor Fields connector Declaration protected ToolTipConnector connector Field Value Type Description ToolTipConnector Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() OnSceneGUI() Declaration protected virtual void OnSceneGUI() RequiresConstantRepaint() Declaration public override bool RequiresConstantRepaint() Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ToolTipInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ToolTipInspector.html",
    "title": "Class ToolTipInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipInspector Inheritance Object ToolTipInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ToolTipInspector : UnityEditor.Editor Fields toolTip Declaration protected ToolTip toolTip Field Value Type Description ToolTip Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() OnSceneGUI() Declaration protected virtual void OnSceneGUI() RequiresConstantRepaint() Declaration public override bool RequiresConstantRepaint() Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.USBDeviceInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.USBDeviceInfo.html",
    "title": "Class USBDeviceInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class USBDeviceInfo Inheritance Object USBDeviceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class USBDeviceInfo Constructors USBDeviceInfo(Int32, String, Int32, String, Int32) Declaration public USBDeviceInfo(int vendorId, string udid, int productId, string name, int revision) Parameters Type Name Description Int32 vendorId String udid Int32 productId String name Int32 revision Properties Name Declaration public string Name { get; } Property Value Type Description String ProductId Declaration public int ProductId { get; } Property Value Type Description Int32 Revision Declaration public int Revision { get; } Property Value Type Description Int32 Udid Declaration public string Udid { get; } Property Value Type Description String VendorId Declaration public int VendorId { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.USBDeviceListener.OnUsbDevicesChanged.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.USBDeviceListener.OnUsbDevicesChanged.html",
    "title": "Delegate USBDeviceListener.OnUsbDevicesChanged | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate USBDeviceListener.OnUsbDevicesChanged Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public delegate void OnUsbDevicesChanged(UsbDevice[] usbDevices); Parameters Type Name Description UsbDevice [] usbDevices"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.USBDeviceListener.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.USBDeviceListener.html",
    "title": "Class USBDeviceListener | Mixed Reality Toolkit Documentation",
    "keywords": "Class USBDeviceListener Inheritance Object USBDeviceListener Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class USBDeviceListener Fields USBDevices Declaration public static USBDeviceInfo[] USBDevices Field Value Type Description USBDeviceInfo [] Events UsbDevicesChanged Declaration public static event USBDeviceListener.OnUsbDevicesChanged UsbDevicesChanged Event Type Type Description USBDeviceListener.OnUsbDevicesChanged"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Editor Classes AssemblyDefinition A class that represents a Unity assembly definition (asmdef) file. BaseCollectionInspector BaseLineDataProviderInspector BaseMousePointerInspector BezierDataProviderInspector DependencyWindow EditorAssemblyReloadManager EditorPreferences Convenience class for setting Editor Preferences with Application.productName as key prefix. EditorProjectUtilities EllipseLineDataProviderInspector GridObjectCollectionInspector GUIEnabledWrapper Similar to the scope classes in Unity (i.e VerticalScope), This class is a helper class designed to force enable GUI.enabled over some lifetime Should be utilized with using{} code block InputManagerAxis Used to define an entire InputManagerAxis, with each variable defined by the same term the Inspector shows. InspectorField A set of field/property tags used to define how a property should render in a custom inspector InspectorFieldsExample Example of using InspectorFields attributes in a class to create custom inspectors This is on approach for building complex inspectors that need to be customized or the need to overcome lack of polymorphism support They provide a way to create one inspector for multiple classes Example: Create a MonoBehaviour or scriptable object with a custom inspector. The functionality or settings can be changed by assigning a custom script to the object Use InspectorFields to render the custom properties inside the custom script in the inspector When the app launches, copy the properties to the new instance of the script An example of this can be found in Interactables Receivers. Each Receiver is a custom class that renders their properties in the Interactables custom inspector InspectorFieldsUtility A collection of helper functions for adding InspectorFields to a custom Inspector InspectorGenericFields<T> A set of Inspector fields for setting up properties in a component that can be automatically rendered in a custom inspector InspectorUIUtility This class has handy inspector UI utilities and functions. LinePointerInspector MixedRealityEditorSettings Editor runtime controller for showing Project Configuration window and performance checks logging in current Unity project MixedRealityInspectorUtility This class has handy inspector utilities and functions. MixedRealityProfileUtility This class has utilities and functions for working with profiles in the Unity editor. MixedRealityProjectConfigurator Utility class that provides methods to both check and configure Unity project for desired settings MixedRealityProjectConfiguratorWindow MixedRealityStylesUtility MixedRealityToolkitFiles API for working with MixedRealityToolkit folders contained in the project. ParabolaPhysicalLineDataProviderInspector ParabolicConstrainedLineDataProviderInspector ProjectPreferences Utility to save preferences that should be saved per project (i.e to source control) across MRTK. Supports primitive preferences bool, int, and float RectangleLineDataProviderInspector ReserializeUtility Adds menu items to automate reserializing specific files in Unity. ScreenshotUtility Utility class to aide in taking screenshots via menu items and public APIs. Screenshots can be capture at various resolutions and with the current camera's clear color or a transparent clear color for use in easy post compositing of images. SimpleLineDataProviderInspector SplineDataProviderInspector ToolTipConnectorInspector ToolTipInspector USBDeviceInfo USBDeviceListener Structs InspectorFieldData A reference to the InspectorField and cached info InspectorPropertySetting A InspectorField property definition and value. InspectorUIUtility.ListSettings A data container for managing scrolling lists or nested drawers in custom inspectors. Enums InputManagerAxisType Used to map AxisType from a useful name to the int value the InputManager wants. InspectorField.FieldTypes Property types used for casting and defining property fields in the inspector MixedRealityProjectConfigurator.Configurations List of available configurations to check and configure with this utility MixedRealityToolkitModuleType Base folder types for modules searched by the MixedRealityToolkitFiles utility. Delegates InspectorUIUtility.ListButtonEvent Delegate for button callbacks, single index InspectorUIUtility.MultiListButtonEvent Delegate for button callbacks, multi-index for nested arrays USBDeviceListener.OnUsbDevicesChanged"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.EllipseLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.EllipseLineDataProvider.html",
    "title": "Class EllipseLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class EllipseLineDataProvider Creates an elliptical line shape. Inheritance Object BaseMixedRealityLineDataProvider EllipseLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class EllipseLineDataProvider : BaseMixedRealityLineDataProvider Remarks This line loops. Properties PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Radius Declaration public Vector2 Radius { get; set; } Property Value Type Description Vector2 Resolution Declaration public int Resolution { get; set; } Property Value Type Description Int32 Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ExperienceScale.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ExperienceScale.html",
    "title": "Enum ExperienceScale | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ExperienceScale The ExperienceScale identifies the environment for which the experience is designed. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public enum ExperienceScale Fields Name Description OrientationOnly An experience which utilizes only the headset orientation and is gravity aligned. The coordinate system origin is at head level. Room An experience designed to support movement throughout a room. The coordinate system origin is at floor level. Seated An experience designed for seated use. The coordinate system origin is at head level. Standing An experience designed for stationary standing use. The coordinate system origin is at floor level. World An experience designed to utilize and move through the physical world. The coordinate system origin is at head level."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.MixedRealityToolkitFacadeHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.MixedRealityToolkitFacadeHandler.html",
    "title": "Class MixedRealityToolkitFacadeHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitFacadeHandler Links service facade objects to active services. Inheritance Object MixedRealityToolkitFacadeHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Facades Assembly : cs.temp.dll.dll Syntax public static class MixedRealityToolkitFacadeHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.ServiceFacade.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.ServiceFacade.html",
    "title": "Class ServiceFacade | Mixed Reality Toolkit Documentation",
    "keywords": "Class ServiceFacade Lightweight MonoBehavior used to represent active services in scene. Inheritance Object ServiceFacade Namespace : Microsoft.MixedReality.Toolkit.Utilities.Facades Assembly : cs.temp.dll.dll Syntax public class ServiceFacade : MonoBehaviour Fields ActiveFacadeObjects Declaration public static List<ServiceFacade> ActiveFacadeObjects Field Value Type Description List < ServiceFacade > FacadeServiceLookup Declaration public static Dictionary<Type, ServiceFacade> FacadeServiceLookup Field Value Type Description Dictionary < Type , ServiceFacade > Properties Destroyed Declaration public bool Destroyed { get; } Property Value Type Description Boolean Service Declaration public IMixedRealityService Service { get; } Property Value Type Description IMixedRealityService ServiceType Declaration public Type ServiceType { get; } Property Value Type Description Type Methods SetService(IMixedRealityService) Declaration public void SetService(IMixedRealityService service) Parameters Type Name Description IMixedRealityService service"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ProximityLight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ProximityLight.html",
    "title": "Class ProximityLight | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProximityLight Utility component to animate and visualize a light that can be used with the \"MixedRealityToolkit/Standard\" shader \"_ProximityLight\" feature. Inheritance Object ProximityLight Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ProximityLight : MonoBehaviour Properties Settings Declaration public ProximityLight.LightSettings Settings { get; set; } Property Value Type Description ProximityLight.LightSettings Methods Pulse(Single, Single, Single) Initiates a pulse, if one is not already occurring, which simulates a user touching a surface. Declaration public void Pulse(float pulseDuration = 0.2F, float fadeBegin = 0.8F, float fadeSpeed = 10F) Parameters Type Name Description Single pulseDuration How long in seconds should the pulse animate over. Single fadeBegin At what point during the pulseDuration should the pulse begin to fade out as a percentage. Range should be [0, 1]. Single fadeSpeed The speed to fade in and out."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.RadialViewReferenceDirection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.RadialViewReferenceDirection.html",
    "title": "Enum RadialViewReferenceDirection | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RadialViewReferenceDirection Which direction to orient the radial view object. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum RadialViewReferenceDirection Fields Name Description FacingWorldUp Orient toward the target but ignore roll GravityAligned Orient towards the target but remain vertical or gravity aligned ObjectOriented Orient towards the target including roll, pitch and yaw"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.RecognitionConfidenceLevel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.RecognitionConfidenceLevel.html",
    "title": "Enum RecognitionConfidenceLevel | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RecognitionConfidenceLevel Indicates the confidence level of a recognized event. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum RecognitionConfidenceLevel Fields Name Description High Low Medium Unknown"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.RectangleLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.RectangleLineDataProvider.html",
    "title": "Class RectangleLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class RectangleLineDataProvider Defines a line in the shape of a rectangle. Inheritance Object BaseMixedRealityLineDataProvider RectangleLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class RectangleLineDataProvider : BaseMixedRealityLineDataProvider Properties Height Declaration public float Height { get; set; } Property Value Type Description Single Loops Declaration public override bool Loops { get; } Property Value Type Description Boolean Overrides BaseMixedRealityLineDataProvider.Loops PointCount Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Width Declaration public float Width { get; set; } Property Value Type Description Single ZOffset Declaration public float ZOffset { get; set; } Property Value Type Description Single Methods DrawUnselectedGizmosPreview() Declaration protected override void DrawUnselectedGizmosPreview() Overrides BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) When we get interpolated points we subdivide the square so our sampling has more to work with Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.RectTransformCubeScaler.html",
    "title": "Class RectTransformCubeScaler | Mixed Reality Toolkit Documentation",
    "keywords": "Class RectTransformCubeScaler RectTransforms do not scale 3d objects (such as unit cubes) to fit within their bounds. This helper class will apply a scale to fit a unit cube into the bounds specified by the RectTransform. The Z component is scaled to the min of the X and Y components. Inheritance Object RectTransformCubeScaler Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class RectTransformCubeScaler : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Response.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Response.html",
    "title": "Struct Response | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Response Response to a REST Call. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public struct Response Constructors Response(Boolean, String, Byte[], Int64) Constructor. Declaration public Response(bool successful, string responseBody, byte[] responseData, long responseCode) Parameters Type Name Description Boolean successful String responseBody Byte [] responseData Int64 responseCode Properties ResponseBody Response body from the resource. Declaration public string ResponseBody { get; } Property Value Type Description String ResponseCode Response code from the resource. Declaration public long ResponseCode { get; } Property Value Type Description Int64 ResponseData Response data from the resource. Declaration public byte[] ResponseData { get; } Property Value Type Description Byte [] Successful Was the REST call successful? Declaration public bool Successful { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Rest.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Rest.html",
    "title": "Class Rest | Mixed Reality Toolkit Documentation",
    "keywords": "Class Rest REST Class for CRUD Transactions. Inheritance Object Rest Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class Rest Properties UseSSL Use SSL Connections when making rest calls. Declaration public static bool UseSSL { get; set; } Property Value Type Description Boolean Methods DeleteAsync(String, Dictionary<String, String>, Int32) Rest DELETE. Declaration public static Task<Response> DeleteAsync(string query, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. GetAsync(String, Dictionary<String, String>, Int32) Rest GET. Declaration public static Task<Response> GetAsync(string query, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. GetBasicAuthentication(String, String) Gets the Basic auth header. Declaration public static string GetBasicAuthentication(string username, string password) Parameters Type Name Description String username The Username. String password The password. Returns Type Description String The Basic authorization header encoded to base 64. GetBearerOAuthToken(String) Gets the Bearer auth header. Declaration public static string GetBearerOAuthToken(string authToken) Parameters Type Name Description String authToken OAuth Token to be used. Returns Type Description String The Bearer authorization header. PostAsync(String, Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PostAsync(String, Byte[], Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, byte[] bodyData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Byte [] bodyData The raw data to post. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PostAsync(String, String, Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, string jsonData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. String jsonData JSON data for the request. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PostAsync(String, WWWForm, Dictionary<String, String>, Int32) Rest POST. Declaration public static Task<Response> PostAsync(string query, WWWForm formData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. WWWForm formData Form Data. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PutAsync(String, Byte[], Dictionary<String, String>, Int32) Rest PUT. Declaration public static Task<Response> PutAsync(string query, byte[] bodyData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. Byte [] bodyData Data to be submitted. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data. PutAsync(String, String, Dictionary<String, String>, Int32) Rest PUT. Declaration public static Task<Response> PutAsync(string query, string jsonData, Dictionary<string, string> headers = null, int timeout = -1) Parameters Type Name Description String query Finalized Endpoint Query with parameters. String jsonData Data to be submitted. Dictionary < String , String > headers Optional header information for the request. Int32 timeout Optional time in seconds before request expires. Returns Type Description Task < Response > The response data."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.RotationConstraintType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.RotationConstraintType.html",
    "title": "Enum RotationConstraintType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum RotationConstraintType Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum RotationConstraintType Fields Name Description None XAxisOnly YAxisOnly ZAxisOnly"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.RuntimeSceneUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.RuntimeSceneUtils.html",
    "title": "Class RuntimeSceneUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class RuntimeSceneUtils Inheritance Object RuntimeSceneUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class RuntimeSceneUtils Methods FindScene(String, out Scene, out Int32) Finds a scene in our build settings by name. Declaration public static bool FindScene(string sceneName, out Scene scene, out int sceneIndex) Parameters Type Name Description String sceneName Scene scene Int32 sceneIndex Returns Type Description Boolean GetRootGameObjectsInLoadedScenes() Returns all root GameObjects in all loaded scenes. Declaration public static IEnumerable<GameObject> GetRootGameObjectsInLoadedScenes() Returns Type Description IEnumerable < GameObject > GetSceneNameFromScenePath(String) Declaration public static string GetSceneNameFromScenePath(string scenePath) Parameters Type Name Description String scenePath Returns Type Description String SetActiveScene(Scene) Sets the active scene to the supplied scene. Returns true if successful. Declaration public static bool SetActiveScene(Scene scene) Parameters Type Name Description Scene scene Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ScaleState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ScaleState.html",
    "title": "Enum ScaleState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ScaleState Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum ScaleState Fields Name Description Growing Shrinking Static"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ScatterObjectCollection.html",
    "title": "Class ScatterObjectCollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScatterObjectCollection A Scatter Object Collection is simply a set of child objects randomly laid out within a radius. Pressing \"update collection\" will run the randomization, feel free to run as many times until you get the desired result. Inheritance Object BaseObjectCollection GridObjectCollection ScatterObjectCollection Inherited Members GridObjectCollection.SurfaceType GridObjectCollection.OrientType GridObjectCollection.Layout GridObjectCollection.Anchor GridObjectCollection.Radius GridObjectCollection.RadialRange GridObjectCollection.Distance GridObjectCollection.Rows GridObjectCollection.Columns GridObjectCollection.CellWidth GridObjectCollection.CellHeight GridObjectCollection.Width GridObjectCollection.Height GridObjectCollection.SphereMesh GridObjectCollection.CylinderMesh GridObjectCollection.HalfCell GridObjectCollection.ResolveGridLayout(Vector3[], LayoutOrder) GridObjectCollection.UpdateNodeFacing(ObjectCollectionNode) GridObjectCollection.OnDrawGizmosSelected() BaseObjectCollection.OnCollectionUpdated BaseObjectCollection.NodeList BaseObjectCollection.IgnoreInactiveTransforms BaseObjectCollection.SortType BaseObjectCollection.UpdateCollection() BaseObjectCollection.SortNodes() BaseObjectCollection.PruneEmptyNodes() BaseObjectCollection.ContainsNode(Transform) BaseObjectCollection.ContainsNode(Transform, Int32) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ScatterObjectCollection : GridObjectCollection Methods LayoutChildren() Overriding base function for laying out all the children when UpdateCollection is called. Declaration protected override void LayoutChildren() Overrides GridObjectCollection.LayoutChildren()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SerializableDictionary-2.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SerializableDictionary-2.html",
    "title": "Class SerializableDictionary<TKey, TValue> | Mixed Reality Toolkit Documentation",
    "keywords": "Class SerializableDictionary<TKey, TValue> Generic Dictionary helper class that handles serialization of keys and values into lists before/after serialization time since Dictionary by itself is not Serializable. Extends C# Dictionary class to support typical API access methods Inheritance Object SerializableDictionary<TKey, TValue> Implements ISerializationCallbackReceiver Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class SerializableDictionary<TKey, TValue> : Dictionary<TKey, TValue>, ISerializationCallbackReceiver Type Parameters Name Description TKey Key type for Dictionary TValue Value type for Dictionary Methods OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Implements ISerializationCallbackReceiver"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SimpleLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SimpleLineDataProvider.html",
    "title": "Class SimpleLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimpleLineDataProvider A simple line with two points. Inheritance Object BaseMixedRealityLineDataProvider SimpleLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class SimpleLineDataProvider : BaseMixedRealityLineDataProvider Properties EndPoint The point where this line will end. Declaration public MixedRealityPose EndPoint { get; set; } Property Value Type Description MixedRealityPose PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount StartPoint The Starting point of this line. Declaration public MixedRealityPose StartPoint { get; } Property Value Type Description MixedRealityPose Remarks Always located at this GameObject 's Transform.position Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SolverOrientationType.html",
    "title": "Enum SolverOrientationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SolverOrientationType Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum SolverOrientationType Fields Name Description CameraAligned Align parallel to the direction the camera is facing CameraFacing Orient toward the main camera instead of SolverHandler's properties. FaceTrackedObject Face toward the tracked object FollowTrackedObject Use the tracked object's pitch, yaw, and roll Unmodified Leave the object's rotation alone YawOnly Orient towards SolverHandler's tracked object or TargetTransform"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.ConstantViewSize.html",
    "title": "Class ConstantViewSize | Mixed Reality Toolkit Documentation",
    "keywords": "Class ConstantViewSize ConstantViewSize solver scales to maintain a constant size relative to the view (currently tied to the Camera) Inheritance Object Solver ConstantViewSize Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.OnEnable() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class ConstantViewSize : Solver Properties CurrentDistancePercent 0 to 1 between MinDistance and MaxDistance. If current is less than max, object is potentially on a surface [or some other condition like interpolating] (since it may still be on surface, but scale percent may be clamped at max). This value is subject to inaccuracies due to smoothing/interpolation/momentum. Declaration public float CurrentDistancePercent { get; } Property Value Type Description Single CurrentScalePercent 0 to 1 between MinScale and MaxScale. If current is less than max, then scaling is being applied. This value is subject to inaccuracies due to smoothing/interpolation/momentum. Declaration public float CurrentScalePercent { get; } Property Value Type Description Single FovScale Returns the scale to be applied based on the FOV. This scale will be multiplied by distance as part of the final scale calculation, so this is the ratio of vertical fov to distance. Declaration public float FovScale { get; } Property Value Type Description Single ManualObjectSize Overrides auto size calculation with provided manual size. If 0, solver calculates size Declaration public float ManualObjectSize { get; set; } Property Value Type Description Single MaxDistance If the object is farther than MaxDistance, the distance used is clamped here Declaration public float MaxDistance { get; set; } Property Value Type Description Single MaxScale Maximum scale value possible (world space scale) Declaration public float MaxScale { get; set; } Property Value Type Description Single MinDistance If the object is closer than MinDistance, the distance used is clamped here Declaration public float MinDistance { get; set; } Property Value Type Description Single MinScale Minimum scale value possible (world space scale) Declaration public float MinScale { get; set; } Property Value Type Description Single ScaleBuffer Used for dead zone for scaling Declaration public float ScaleBuffer { get; set; } Property Value Type Description Single ScaleState Declaration public ScaleState ScaleState { get; } Property Value Type Description ScaleState TargetViewPercentV The object take up this percent vertically in our view (not technically a percent use 0.5 for 50%) Declaration public float TargetViewPercentV { get; set; } Property Value Type Description Single Methods RecalculateBounds() Attempts to calculate the size of the bounds which contains all child renderers for attached GameObject. This information is used in the core solver calculations Declaration public void RecalculateBounds() SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate() Start() Declaration protected override void Start() Overrides Solver.Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.ControllerFinder.html",
    "title": "Class ControllerFinder | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerFinder ControllerFinder is a base class providing simple event handling for getting/releasing MotionController Transforms. Inheritance Object ControllerFinder Implements IMixedRealitySourceStateHandler Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public abstract class ControllerFinder : MonoBehaviour, IMixedRealitySourceStateHandler Fields ControllerTransform The Transform of the currently found controller. Declaration protected Transform ControllerTransform Field Value Type Description Transform Properties Handedness The handedness of the controller that should be found. Declaration public Handedness Handedness { get; set; } Property Value Type Description Handedness Methods AddControllerTransform(IMixedRealityController) Starts to track the passed in controller's transform, assuming it meets the previously set handedness criteria. Declaration protected virtual void AddControllerTransform(IMixedRealityController newController) Parameters Type Name Description IMixedRealityController newController The new controller to be tracked. OnControllerFound() Override this method to act when the correct controller is actually found. This provides similar functionality to overriding AddControllerTransform, without the overhead of needing to check that handedness matches. Declaration protected virtual void OnControllerFound() OnControllerLost() Override this method to act when the correct controller is actually lost. This provides similar functionality to overriding AddControllerTransform, without the overhead of needing to check that handedness matches. Declaration protected virtual void OnControllerLost() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnSourceDetected(SourceStateEventData) Declaration public void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Declaration public void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData RefreshControllerTransform() Remove whichever controller is currently tracked, if any, and try to add a new one based on existing sources. Declaration protected virtual void RefreshControllerTransform() RemoveControllerTransform() Remove whichever controller is currently tracked, if any. Declaration protected virtual void RemoveControllerTransform() TryAndAddControllerTransform() Looks to see if the controller model already exists and registers it if so. Declaration protected virtual void TryAndAddControllerTransform() Implements IMixedRealitySourceStateHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint.SolverRotationBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint.SolverRotationBehavior.html",
    "title": "Enum HandConstraint.SolverRotationBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Enum HandConstraint.SolverRotationBehavior Specifies how the solver should rotate when tracking the hand. Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public enum SolverRotationBehavior Fields Name Description LookAtMainCamera The solver faces the main camera (user). LookAtTrackedObject The solver faces the tracked object. A hand to world transformation is applied to work with traditional user facing UI (-z is forward). None The solver simply follows the rotation of the tracked object."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint.SolverSafeZone.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint.SolverSafeZone.html",
    "title": "Enum HandConstraint.SolverSafeZone | Mixed Reality Toolkit Documentation",
    "keywords": "Enum HandConstraint.SolverSafeZone Specifies a zone that is safe for the constraint to solve to without intersecting the hand. Safe zones may differ slightly from motion controller to motion controller, it's recommended to pick the safe zone best suited for your intended controller and application. Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public enum SolverSafeZone Fields Name Description AboveFingerTips Above the longest finger tips. BelowWrist Below where the controller meets the arm. RadialSide On the left controller with palm up, the area left of the palm. UlnarSide On the left controller with palm up, the area right of the palm."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraint.html",
    "title": "Class HandConstraint | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandConstraint Provides a solver that constrains the target to a region safe for hand constrained interactive content. This solver is intended to work with IMixedRealityHand but also works with IMixedRealityController . Inheritance Object Solver HandConstraint HandConstraintPalmUp Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class HandConstraint : Solver Fields handBounds Declaration protected HandBounds handBounds Field Value Type Description HandBounds trackedController Declaration protected IMixedRealityController trackedController Field Value Type Description IMixedRealityController Properties HideHandCursorsOnActivate When a hand is activated for tracking, should the cursor(s) be disabled on that hand? Declaration public bool HideHandCursorsOnActivate { get; set; } Property Value Type Description Boolean OnFirstHandDetected Event which is triggered when zero hands to one hand is tracked. Declaration public UnityEvent OnFirstHandDetected { get; set; } Property Value Type Description UnityEvent OnHandActivate Event which is triggered when a hand begins being tracked. Declaration public UnityEvent OnHandActivate { get; set; } Property Value Type Description UnityEvent OnHandDeactivate Event which is triggered when a hand stops being tracked. Declaration public UnityEvent OnHandDeactivate { get; set; } Property Value Type Description UnityEvent OnLastHandLost Event which is triggered when all hands are lost. Declaration public UnityEvent OnLastHandLost { get; set; } Property Value Type Description UnityEvent RotationBehavior Specifies how the solver should rotate when tracking the hand. Declaration public HandConstraint.SolverRotationBehavior RotationBehavior { get; set; } Property Value Type Description HandConstraint.SolverRotationBehavior SafeZone Which part of the hand to move the tracked object towards. The ulnar side of the hand is recommended for most situations. Declaration public HandConstraint.SolverSafeZone SafeZone { get; set; } Property Value Type Description HandConstraint.SolverSafeZone SafeZoneBuffer Additional offset to apply to the intersection point with the hand bounds. Declaration public float SafeZoneBuffer { get; set; } Property Value Type Description Single UpdateWhenOppositeHandNear Should the solver continue to move when the opposite hand (hand which is not being tracked) is near the tracked hand. This can improve stability when one hand occludes the other.\" Declaration public bool UpdateWhenOppositeHandNear { get; set; } Property Value Type Description Boolean Methods CalculateGoalPosition() Performs a ray vs AABB test to determine where the solver can constrain the tracked object without intersection. The \"safe zone\" is calculated as if projected into the horizontal and vertical plane of the camera. Declaration protected virtual Vector3 CalculateGoalPosition() Returns Type Description Vector3 The new goal position. CalculateGoalRotation() Determines the solver's goal rotation based off of the SolverRotationBehavior. Declaration protected virtual Quaternion CalculateGoalRotation() Returns Type Description Quaternion The new goal rotation. IsOppositeHandNear(IMixedRealityController) Performs an intersection test to see if the left hand is near the right hand or vice versa. Declaration protected virtual bool IsOppositeHandNear(IMixedRealityController controller) Parameters Type Name Description IMixedRealityController controller The hand to check against. Returns Type Description Boolean True, when hands are near each other. IsValidController(IMixedRealityController) Determines if a hand meets the requirements for use with constraining the tracked object. Declaration protected virtual bool IsValidController(IMixedRealityController controller) Parameters Type Name Description IMixedRealityController controller The controller to check against. Returns Type Description Boolean True if this hand should be used from tracking. OnEnable() Declaration protected override void OnEnable() Overrides Solver.OnEnable() SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate() ToggleCursors(IMixedRealityController, Boolean, Boolean) Enables/disables all cursors on the currently tracked hand. Declaration protected virtual IEnumerator ToggleCursors(IMixedRealityController controller, bool visible, bool frameDelay = false) Parameters Type Name Description IMixedRealityController controller Controller target to search for pointers Boolean visible Is the cursor visible? Boolean frameDelay Delay one frame before performing the toggle to allow the pointers to instantiate their cursors. Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.HandConstraintPalmUp.html",
    "title": "Class HandConstraintPalmUp | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandConstraintPalmUp Augments the HandConstraint to also check if the palm is facing the user before activation. This solver only works with IMixedRealityHand controllers, with other IMixedRealityController types this solver will behave just like it's base class. Inheritance Object Solver HandConstraint HandConstraintPalmUp Inherited Members HandConstraint.SafeZone HandConstraint.SafeZoneBuffer HandConstraint.UpdateWhenOppositeHandNear HandConstraint.HideHandCursorsOnActivate HandConstraint.RotationBehavior HandConstraint.OnHandActivate HandConstraint.OnHandDeactivate HandConstraint.OnFirstHandDetected HandConstraint.OnLastHandLost HandConstraint.trackedController HandConstraint.handBounds HandConstraint.SolverUpdate() HandConstraint.CalculateGoalPosition() HandConstraint.CalculateGoalRotation() HandConstraint.ToggleCursors(IMixedRealityController, Boolean, Boolean) HandConstraint.IsOppositeHandNear(IMixedRealityController) HandConstraint.OnEnable() Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class HandConstraintPalmUp : HandConstraint Properties FacingThreshold The angle (in degrees) of the cone between the palm's up and camera's forward have to match. Only supported by IMixedRealityHand controllers. Declaration public float FacingThreshold { get; set; } Property Value Type Description Single FlatHandThreshold The angle (in degrees) of the cone between the palm's up and triangle's normal formed from the palm, to index, to ring finger tip have to match. Only supported by IMixedRealityHand controllers. Declaration public float FlatHandThreshold { get; set; } Property Value Type Description Single RequireFlatHand Do the fingers on the hand need to be straightened, rather than curled, to form a flat hand shape. Only supported by IMixedRealityHand controllers. Declaration public bool RequireFlatHand { get; set; } Property Value Type Description Boolean Methods IsValidController(IMixedRealityController) Determines if a controller meets the requirements for use with constraining the tracked object and determines if the palm is currently facing the user. Declaration protected override bool IsValidController(IMixedRealityController controller) Parameters Type Name Description IMixedRealityController controller The hand to check against. Returns Type Description Boolean True if this hand should be used from tracking. Overrides HandConstraint.IsValidController(IMixedRealityController)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.InBetween.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.InBetween.html",
    "title": "Class InBetween | Mixed Reality Toolkit Documentation",
    "keywords": "Class InBetween InBetween solver positions an object in-between two tracked transforms. Inheritance Object Solver InBetween Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.OnEnable() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class InBetween : Solver Properties PartwayOffset Distance along the center line the object will be located. 0.5 is halfway, 1.0 is at the first transform, 0.0 is at the second transform. Declaration public float PartwayOffset { get; set; } Property Value Type Description Single SecondTrackedObjectType Tracked object to calculate position and orientation for the second object. If you want to manually override and use a scene object, use the TransformTarget field. Declaration public TrackedObjectType SecondTrackedObjectType { get; set; } Property Value Type Description TrackedObjectType SecondTransformOverride This transform overrides any Tracked Object as the second point for the In Between Declaration public Transform SecondTransformOverride { get; set; } Property Value Type Description Transform TrackedObjectForSecondTransform Tracked object to calculate position and orientation for the second object. If you want to manually override and use a scene object, use the TransformTarget field. Declaration public TrackedObjectType TrackedObjectForSecondTransform { get; set; } Property Value Type Description TrackedObjectType Methods OnValidate() Declaration protected void OnValidate() SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate() Start() Declaration protected override void Start() Overrides Solver.Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Momentum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Momentum.html",
    "title": "Class Momentum | Mixed Reality Toolkit Documentation",
    "keywords": "Class Momentum Applies acceleration/velocity/friction to simulate momentum for an object being moved by other solvers/components Inheritance Object Solver Momentum Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class Momentum : Solver Properties AccelerationRate Accelerate to goal position at this rate Declaration public float AccelerationRate { get; set; } Property Value Type Description Single Resistance Friction to slow down the current velocity Declaration public float Resistance { get; set; } Property Value Type Description Single ResistanceVelocityPower Apply more resistance when going faster- applied resistance is resistance * (velocity ^ resistanceVelocityPower) Declaration public float ResistanceVelocityPower { get; set; } Property Value Type Description Single SnapZ Instantly maintain a constant depth from the view point instead of simulating Z-velocity Declaration public bool SnapZ { get; set; } Property Value Type Description Boolean Springiness Apply more acceleration if farther from target- applied acceleration is accelerationRate + springiness * distance Declaration public float Springiness { get; set; } Property Value Type Description Single Methods OnEnable() Declaration protected override void OnEnable() Overrides Solver.OnEnable() SnapTo(Vector3, Quaternion, Vector3) Snaps the solver to the desired pose. Declaration public override void SnapTo(Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description Vector3 position Quaternion rotation Vector3 scale Overrides Solver.SnapTo(Vector3, Quaternion, Vector3) Remarks SnapTo may be used to bypass smoothing to a certain position if the object is teleported or spawned. SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Orbital.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Orbital.html",
    "title": "Class Orbital | Mixed Reality Toolkit Documentation",
    "keywords": "Class Orbital Provides a solver that follows the TrackedObject/TargetTransform in an orbital motion. Inheritance Object Solver Orbital Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.OnEnable() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class Orbital : Solver Properties LocalOffset XYZ offset for this object in relation to the TrackedObject/TargetTransform. Declaration public Vector3 LocalOffset { get; set; } Property Value Type Description Vector3 Remarks Mixing local and world offsets is not recommended. OrientationType The desired orientation of this object. Declaration public SolverOrientationType OrientationType { get; set; } Property Value Type Description SolverOrientationType Remarks Default sets the object to face the TrackedObject/TargetTransform. CameraFacing sets the object to always face the user. TetherAngleSteps The division of steps this object can tether to. Higher the number, the more snapple steps. Declaration public int TetherAngleSteps { get; set; } Property Value Type Description Int32 UseAngleStepping Lock the rotation to a specified number of steps around the tracked object. Declaration public bool UseAngleStepping { get; set; } Property Value Type Description Boolean WorldOffset XYZ offset for this object in worldspace, best used with the YawOnly orientationType. Declaration public Vector3 WorldOffset { get; set; } Property Value Type Description Vector3 Remarks Mixing local and world offsets is not recommended. Methods SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Overlap.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Overlap.html",
    "title": "Class Overlap | Mixed Reality Toolkit Documentation",
    "keywords": "Class Overlap Provides a solver that overlaps with the tracked object. Inheritance Object Solver Overlap Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.OnEnable() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class Overlap : Solver Methods SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.RadialView.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.RadialView.html",
    "title": "Class RadialView | Mixed Reality Toolkit Documentation",
    "keywords": "Class RadialView RadialViewPoser solver locks a tag-along type object within a view cone Inheritance Object Solver RadialView Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.OnEnable() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class RadialView : Solver Properties AspectV Apply a different clamp to vertical FOV than horizontal. Vertical = Horizontal * AspectV. Declaration public float AspectV { get; set; } Property Value Type Description Single FixedVerticalPosition Offset amount of the vertical position. Declaration public float FixedVerticalPosition { get; set; } Property Value Type Description Single IgnoreAngleClamp Option to ignore angle clamping. Declaration public bool IgnoreAngleClamp { get; set; } Property Value Type Description Boolean IgnoreDistanceClamp Option to ignore distance clamping. Declaration public bool IgnoreDistanceClamp { get; set; } Property Value Type Description Boolean MaxDistance Max distance from eye to element. Declaration public float MaxDistance { get; set; } Property Value Type Description Single MaxViewDegrees The element will stay at least this close to the center of view. Declaration public float MaxViewDegrees { get; set; } Property Value Type Description Single MinDistance Min distance from eye to position element around, i.e. the sphere radius. Declaration public float MinDistance { get; set; } Property Value Type Description Single MinViewDegrees The element will stay at least this far away from the center of view. Declaration public float MinViewDegrees { get; set; } Property Value Type Description Single OrientToReferenceDirection If true, element will orient to ReferenceDirection, otherwise it will orient to ref position. Declaration public bool OrientToReferenceDirection { get; set; } Property Value Type Description Boolean ReferenceDirection Which direction to position the element relative to: HeadOriented rolls with the head, HeadFacingWorldUp view direction but ignores head roll, and HeadMoveDirection uses the direction the head last moved without roll. Declaration public RadialViewReferenceDirection ReferenceDirection { get; set; } Property Value Type Description RadialViewReferenceDirection UseFixedVerticalPosition Ignore vertical movement and lock the Y position of the object. Declaration public bool UseFixedVerticalPosition { get; set; } Property Value Type Description Boolean Methods SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.Solver.html",
    "title": "Class Solver | Mixed Reality Toolkit Documentation",
    "keywords": "Class Solver The base abstract class for all Solvers to derive from. It provides state tracking, smoothing parameters and implementation, automatic solver system integration, and update order. Solvers may be used without a link, as long as updateLinkedTransform is false. Inheritance Object Solver ConstantViewSize HandConstraint InBetween Momentum Orbital Overlap RadialView SurfaceMagnetism Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public abstract class Solver : MonoBehaviour Fields SolverHandler The handler reference for this solver that's attached to this GameObject Declaration protected SolverHandler SolverHandler Field Value Type Description SolverHandler Properties GoalPosition The final position to be attained Declaration protected Vector3 GoalPosition { get; set; } Property Value Type Description Vector3 GoalRotation The final rotation to be attained Declaration protected Quaternion GoalRotation { get; set; } Property Value Type Description Quaternion GoalScale The final scale to be attained Declaration protected Vector3 GoalScale { get; set; } Property Value Type Description Vector3 MoveLerpTime If 0, the position will update immediately. Otherwise, the greater this attribute the slower the position updates Declaration public float MoveLerpTime { get; set; } Property Value Type Description Single RotateLerpTime If 0, the rotation will update immediately. Otherwise, the greater this attribute the slower the rotation updates\")] Declaration public float RotateLerpTime { get; set; } Property Value Type Description Single ScaleLerpTime If 0, the scale will update immediately. Otherwise, the greater this attribute the slower the scale updates Declaration public float ScaleLerpTime { get; set; } Property Value Type Description Single Smoothing If true, updates are smoothed to the target. Otherwise, they are snapped to the target Declaration public bool Smoothing { get; set; } Property Value Type Description Boolean UpdateLinkedTransform If true, the position and orientation will be calculated, but not applied, for other components to use Declaration public bool UpdateLinkedTransform { get; set; } Property Value Type Description Boolean WorkingPosition Automatically uses the shared position if the solver is set to use the 'linked transform'. UpdateLinkedTransform may be set to false, and a solver will automatically update the object directly, and not inherit work done by other solvers to the shared position Declaration public Vector3 WorkingPosition { get; protected set; } Property Value Type Description Vector3 WorkingRotation Rotation version of WorkingPosition Declaration public Quaternion WorkingRotation { get; protected set; } Property Value Type Description Quaternion WorkingScale Scale version of WorkingPosition Declaration public Vector3 WorkingScale { get; protected set; } Property Value Type Description Vector3 Methods AddOffset(Vector3) Add an offset position to the target goal position. Declaration public virtual void AddOffset(Vector3 offset) Parameters Type Name Description Vector3 offset Awake() Declaration protected virtual void Awake() OnDestroy() Declaration protected virtual void OnDestroy() OnEnable() Typically when a solver becomes enabled, it should update its internal state to the system, in case it was disabled far away Declaration protected virtual void OnEnable() SmoothTo(Quaternion, Quaternion, Single, Single) Slerps Quaternion source to goal, handles lerpTime of 0 Declaration public static Quaternion SmoothTo(Quaternion source, Quaternion goal, float deltaTime, float lerpTime) Parameters Type Name Description Quaternion source Quaternion goal Single deltaTime Single lerpTime Returns Type Description Quaternion SmoothTo(Vector3, Vector3, Single, Single) Lerps Vector3 source to goal. Declaration public static Vector3 SmoothTo(Vector3 source, Vector3 goal, float deltaTime, float lerpTime) Parameters Type Name Description Vector3 source Vector3 goal Single deltaTime Single lerpTime Returns Type Description Vector3 Remarks Handles lerpTime of 0. SnapGoalTo(Vector3, Quaternion) SnapGoalTo only sets the goal orientation. Not really useful. Declaration public virtual void SnapGoalTo(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation SnapGoalTo(Vector3, Quaternion, Vector3) SnapGoalTo only sets the goal orientation. Not really useful. Declaration public virtual void SnapGoalTo(Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description Vector3 position Quaternion rotation Vector3 scale SnapTo(Vector3, Quaternion) Snaps the solver to the desired pose. Declaration public virtual void SnapTo(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation Remarks SnapTo may be used to bypass smoothing to a certain position if the object is teleported or spawned. SnapTo(Vector3, Quaternion, Vector3) Snaps the solver to the desired pose. Declaration public virtual void SnapTo(Vector3 position, Quaternion rotation, Vector3 scale) Parameters Type Name Description Vector3 position Quaternion rotation Vector3 scale Remarks SnapTo may be used to bypass smoothing to a certain position if the object is teleported or spawned. SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public abstract void SolverUpdate() SolverUpdateEntry() Tracks lifetime of the solver, disabling it when expired, and finally runs the orientation update logic Declaration public void SolverUpdateEntry() Start() Declaration protected virtual void Start() UpdateTransformToGoal() Updates all object orientations to the goal orientation for this solver, with smoothing accounted for (smoothing may be off) Declaration protected void UpdateTransformToGoal() UpdateWorkingPositionToGoal() Updates only the working position to goal with smoothing, if enabled Declaration public void UpdateWorkingPositionToGoal() UpdateWorkingRotationToGoal() Updates only the working rotation to goal with smoothing, if enabled Declaration public void UpdateWorkingRotationToGoal() UpdateWorkingScaleToGoal() Updates only the working scale to goal with smoothing, if enabled Declaration public void UpdateWorkingScaleToGoal() UpdateWorkingToGoal() Updates the Working orientation (which may be the object, or the shared orientation) to the goal with smoothing, if enabled Declaration public void UpdateWorkingToGoal()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SolverHandler.html",
    "title": "Class SolverHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class SolverHandler This class handles the solver components that are attached to this GameObject Inheritance Object SolverHandler Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class SolverHandler : MonoBehaviour Fields currentTrackedHandedness Declaration protected Handedness currentTrackedHandedness Field Value Type Description Handedness preferredTrackedHandedness Declaration protected Handedness preferredTrackedHandedness Field Value Type Description Handedness solvers Declaration protected readonly List<Solver> solvers Field Value Type Description List < Solver > Properties AdditionalOffset Add an additional offset of the tracked object to base the solver on. Useful for tracking something like a halo position above your head or off the side of a controller. Declaration public Vector3 AdditionalOffset { get; set; } Property Value Type Description Vector3 AdditionalRotation Add an additional rotation on top of the tracked object. Useful for tracking what is essentially the up or right/left vectors. Declaration public Vector3 AdditionalRotation { get; set; } Property Value Type Description Vector3 AltScale Alternate scale. Declaration public Vector3Smoothed AltScale { get; set; } Property Value Type Description Vector3Smoothed CurrentTrackedHandedness Currently tracked hand or motion controller if applicable Declaration public Handedness CurrentTrackedHandedness { get; } Property Value Type Description Handedness Remarks Only possible values Left, Right, or None DeltaTime The timestamp the solvers will use to calculate with. Declaration public float DeltaTime { get; set; } Property Value Type Description Single GoalPosition The position the solver is trying to move to. Declaration public Vector3 GoalPosition { get; set; } Property Value Type Description Vector3 GoalRotation The rotation the solver is trying to rotate to. Declaration public Quaternion GoalRotation { get; set; } Property Value Type Description Quaternion GoalScale The scale the solver is trying to scale to. Declaration public Vector3 GoalScale { get; set; } Property Value Type Description Vector3 PreferredTrackedHandedness Controller side to favor and pick first if TrackedHandedness is set to both Declaration public Handedness PreferredTrackedHandedness { get; set; } Property Value Type Description Handedness Remarks Only possible values, Left or Right Solvers List of solvers that this handler will manage and update Declaration public IReadOnlyCollection<Solver> Solvers { get; set; } Property Value Type Description IReadOnlyCollection < Solver > TrackedHandJoint When TrackedTargetType is set to hands, use this specific joint to calculate position and orientation Declaration public TrackedHandJoint TrackedHandJoint { get; set; } Property Value Type Description TrackedHandJoint TrackedHandness If tracking hands or motion controllers, determines which hand(s) are valid attachments. Declaration public Handedness TrackedHandness { get; set; } Property Value Type Description Handedness Remarks Only None, Left, Right, and Both are valid values TrackedObjectToReference Tracked object to calculate position and orientation from. If you want to manually override and use a scene object, use the TransformTarget field. Declaration public TrackedObjectType TrackedObjectToReference { get; set; } Property Value Type Description TrackedObjectType TrackedTargetType Tracked object to calculate position and orientation from. If you want to manually override and use a scene object, use the TransformTarget field. Declaration public TrackedObjectType TrackedTargetType { get; set; } Property Value Type Description TrackedObjectType TransformOverride Manual override for when TrackedTargetType is set to CustomOverride Declaration public Transform TransformOverride { set; } Property Value Type Description Transform TransformTarget The target transform that the solvers will act upon. Declaration public Transform TransformTarget { get; } Property Value Type Description Transform UpdateSolvers Whether or not this SolverHandler calls SolverUpdate() every frame. Only one SolverHandler should manage SolverUpdate(). This setting does not affect whether the Target Transform of this SolverHandler gets updated or not. Declaration public bool UpdateSolvers { get; set; } Property Value Type Description Boolean Methods AttachToNewTrackedObject() Declaration protected virtual void AttachToNewTrackedObject() DetachFromCurrentTrackedObject() Declaration protected virtual void DetachFromCurrentTrackedObject() IsValidHandedness(Handedness) Declaration public static bool IsValidHandedness(Handedness hand) Parameters Type Name Description Handedness hand Returns Type Description Boolean IsValidTrackedObjectType(TrackedObjectType) Declaration public static bool IsValidTrackedObjectType(TrackedObjectType type) Parameters Type Name Description TrackedObjectType type Returns Type Description Boolean OnDestroy() Declaration protected void OnDestroy() RefreshTrackedObject() Clears the transform target and attaches to the current TrackedTargetType . Declaration public void RefreshTrackedObject() RegisterSolver(Solver) Adds solver to the list of Solvers guaranteeing inspector ordering. Declaration public void RegisterSolver(Solver solver) Parameters Type Name Description Solver solver Start() Declaration protected virtual void Start() UnregisterSolver(Solver) Removes solver from the list of Solvers . Declaration public void UnregisterSolver(Solver solver) Parameters Type Name Description Solver solver Update() Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SurfaceMagnetism.OrientationMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SurfaceMagnetism.OrientationMode.html",
    "title": "Enum SurfaceMagnetism.OrientationMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SurfaceMagnetism.OrientationMode Orientation mode for solver Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public enum OrientationMode Fields Name Description Blended Blend between tracked transform and the surface normal orientation None No orienting SurfaceNormal Aligned to surface normal completely TrackedTarget Face the tracked transform"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SurfaceMagnetism.RaycastDirectionMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SurfaceMagnetism.RaycastDirectionMode.html",
    "title": "Enum SurfaceMagnetism.RaycastDirectionMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SurfaceMagnetism.RaycastDirectionMode Raycast direction mode for solver Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public enum RaycastDirectionMode Fields Name Description ToLinkedPosition Cast from Tracked Target Position to linked solver position ToObject Cast from Tracked Target position to this object's position TrackedTargetForward Cast from Tracked Target in facing direction"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SurfaceMagnetism.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.SurfaceMagnetism.html",
    "title": "Class SurfaceMagnetism | Mixed Reality Toolkit Documentation",
    "keywords": "Class SurfaceMagnetism SurfaceMagnetism casts rays to Surfaces in the world and aligns the object to the hit surface. Inheritance Object Solver SurfaceMagnetism Inherited Members Solver.UpdateLinkedTransform Solver.MoveLerpTime Solver.RotateLerpTime Solver.ScaleLerpTime Solver.Smoothing Solver.SolverHandler Solver.GoalPosition Solver.GoalRotation Solver.GoalScale Solver.WorkingPosition Solver.WorkingRotation Solver.WorkingScale Solver.Awake() Solver.OnEnable() Solver.Start() Solver.OnDestroy() Solver.SolverUpdateEntry() Solver.SnapTo(Vector3, Quaternion, Vector3) Solver.SnapGoalTo(Vector3, Quaternion, Vector3) Solver.SnapTo(Vector3, Quaternion) Solver.SnapGoalTo(Vector3, Quaternion) Solver.AddOffset(Vector3) Solver.SmoothTo(Vector3, Vector3, Single, Single) Solver.SmoothTo(Quaternion, Quaternion, Single, Single) Solver.UpdateTransformToGoal() Solver.UpdateWorkingToGoal() Solver.UpdateWorkingPositionToGoal() Solver.UpdateWorkingRotationToGoal() Solver.UpdateWorkingScaleToGoal() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Solvers Assembly : cs.temp.dll.dll Syntax public class SurfaceMagnetism : Solver Properties BoxRaysPerEdge Number of rays per edge, should be odd. Total casts is n^2 Declaration public int BoxRaysPerEdge { get; set; } Property Value Type Description Int32 CloseDistance Closest distance to bring object Declaration public float CloseDistance { get; set; } Property Value Type Description Single ClosestDistance Closest distance to bring object Declaration public float ClosestDistance { get; set; } Property Value Type Description Single CurrentOrientationMode How solver will orient model. See OrientationMode enum for possible modes. When mode=Blended, use OrientationBlend property to define ratio for blending Declaration public SurfaceMagnetism.OrientationMode CurrentOrientationMode { get; set; } Property Value Type Description SurfaceMagnetism.OrientationMode CurrentRaycastDirectionMode Raycast direction type. Default is forward direction of Tracked Target transform Declaration public SurfaceMagnetism.RaycastDirectionMode CurrentRaycastDirectionMode { get; set; } Property Value Type Description SurfaceMagnetism.RaycastDirectionMode DebugEnabled If enabled, the debug lines will be drawn in the editor Declaration public bool DebugEnabled { get; set; } Property Value Type Description Boolean KeepOrientationVertical If true, ensures object is kept vertical for TrackedTarget, SurfaceNormal, and Blended Orientation Modes Declaration public bool KeepOrientationVertical { get; set; } Property Value Type Description Boolean MagneticSurfaces Array of LayerMask to execute from highest to lowest priority. First layermask to provide a raycast hit will be used by component Declaration public LayerMask[] MagneticSurfaces { get; set; } Property Value Type Description LayerMask [] MaxDistance Max distance for raycast to check for surfaces Declaration public float MaxDistance { get; set; } Property Value Type Description Single MaximumNormalVariance Align to ray cast direction if box cast hits many normals facing in varying directions Declaration public float MaximumNormalVariance { get; set; } Property Value Type Description Single MaxRaycastDistance Max distance for raycast to check for surfaces Declaration public float MaxRaycastDistance { get; set; } Property Value Type Description Single OnSurface Whether or not the object is currently magnetized to a surface. Declaration public bool OnSurface { get; } Property Value Type Description Boolean OrientationBlend Value used for when Orientation Mode=Blended. If 0.0 orientation is driven all by TrackedTarget mode and if 1.0 orientation is driven all by SurfaceNormal mode Declaration public float OrientationBlend { get; set; } Property Value Type Description Single OrthographicBoxCast If true, use orthographic casting for box lines instead of perspective Declaration public bool OrthographicBoxCast { get; set; } Property Value Type Description Boolean RaycastMode Surface raycast mode for solver Declaration public SceneQueryType RaycastMode { get; set; } Property Value Type Description SceneQueryType SphereSize Radius to use for sphere cast Declaration public float SphereSize { get; set; } Property Value Type Description Single SurfaceNormalOffset Offset from surface along surface normal Declaration public float SurfaceNormalOffset { get; set; } Property Value Type Description Single SurfaceRayOffset Offset from surface along ray cast direction Declaration public float SurfaceRayOffset { get; set; } Property Value Type Description Single UseLinkedAltScaleOverride When doing volume casts, use linked AltScale instead of object's current scale Declaration public bool UseLinkedAltScaleOverride { get; set; } Property Value Type Description Boolean VolumeCastSizeOverride When doing volume casts, use size override if non-zero instead of object's current scale Declaration public float VolumeCastSizeOverride { get; set; } Property Value Type Description Single Methods SolverUpdate() Should be implemented in derived classes, but Solver can be used to flush shared transform to real transform Declaration public override void SolverUpdate() Overrides Solver.SolverUpdate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Solvers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Solvers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Solvers Classes ConstantViewSize ConstantViewSize solver scales to maintain a constant size relative to the view (currently tied to the Camera) ControllerFinder ControllerFinder is a base class providing simple event handling for getting/releasing MotionController Transforms. HandConstraint Provides a solver that constrains the target to a region safe for hand constrained interactive content. This solver is intended to work with IMixedRealityHand but also works with IMixedRealityController . HandConstraintPalmUp Augments the HandConstraint to also check if the palm is facing the user before activation. This solver only works with IMixedRealityHand controllers, with other IMixedRealityController types this solver will behave just like it's base class. InBetween InBetween solver positions an object in-between two tracked transforms. Momentum Applies acceleration/velocity/friction to simulate momentum for an object being moved by other solvers/components Orbital Provides a solver that follows the TrackedObject/TargetTransform in an orbital motion. Overlap Provides a solver that overlaps with the tracked object. RadialView RadialViewPoser solver locks a tag-along type object within a view cone Solver The base abstract class for all Solvers to derive from. It provides state tracking, smoothing parameters and implementation, automatic solver system integration, and update order. Solvers may be used without a link, as long as updateLinkedTransform is false. SolverHandler This class handles the solver components that are attached to this GameObject SurfaceMagnetism SurfaceMagnetism casts rays to Surfaces in the world and aligns the object to the hit surface. Enums HandConstraint.SolverRotationBehavior Specifies how the solver should rotate when tracking the hand. HandConstraint.SolverSafeZone Specifies a zone that is safe for the constraint to solve to without intersecting the hand. Safe zones may differ slightly from motion controller to motion controller, it's recommended to pick the safe zone best suited for your intended controller and application. SurfaceMagnetism.OrientationMode Orientation mode for solver SurfaceMagnetism.RaycastDirectionMode Raycast direction mode for solver"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SplineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SplineDataProvider.html",
    "title": "Class SplineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class SplineDataProvider Creates a spline based on control points. Inheritance Object BaseMixedRealityLineDataProvider SplineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class SplineDataProvider : BaseMixedRealityLineDataProvider Properties AlignAllControlPoints Declaration public bool AlignAllControlPoints { get; set; } Property Value Type Description Boolean ControlPoints Declaration public MixedRealityPose[] ControlPoints { get; } Property Value Type Description MixedRealityPose [] PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Methods ForceUpdateAlignment() Forces all the control points into alignment. Declaration public void ForceUpdateAlignment() GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality.SpatialAwareness Classes WindowsMixedRealitySpatialMeshObserver"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityCameraSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityCameraSettings.html",
    "title": "Class WindowsMixedRealityCameraSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityCameraSettings Camera settings provider for use with Windows Mixed Reality. Inheritance Object WindowsMixedRealityCameraSettings Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityCameraSettings : BaseCameraSettingsProvider Constructors WindowsMixedRealityCameraSettings(IMixedRealityCameraSystem, String, UInt32, BaseCameraSettingsProfile) Constructor. Declaration public WindowsMixedRealityCameraSettings(IMixedRealityCameraSystem cameraSystem, string name = null, uint priority = default(uint), BaseCameraSettingsProfile profile = null) Parameters Type Name Description IMixedRealityCameraSystem cameraSystem The instance of the camera system which is managing this provider. String name Friendly name of the provider. UInt32 priority Provider priority. Used to determine order of instantiation. BaseCameraSettingsProfile profile The provider's configuration profile. Properties IsOpaque Declaration public override bool IsOpaque { get; } Property Value Type Description Boolean Methods ApplyConfiguration() Declaration public override void ApplyConfiguration() Disable() Declaration public override void Disable() Enable() Declaration public override void Enable()"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityCameraSettingsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityCameraSettingsProfile.html",
    "title": "Class WindowsMixedRealityCameraSettingsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityCameraSettingsProfile Configuration profile for the Windows Mixed Reality Camera settings provider. Inheritance Object WindowsMixedRealityCameraSettingsProfile Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityCameraSettingsProfile : BaseCameraSettingsProfile Properties RenderFromPVCameraForMixedRealityCapture Whether to use photo/video camera rendering for Mixed Reality Capture on Windows. Declaration public bool RenderFromPVCameraForMixedRealityCapture { get; } Property Value Type Description Boolean Remarks If true, the platform will provide an additional HolographicCamera to the app when a mixed reality capture photo or video is taken. This HolographicCamera provides view matrices corresponding to the photo/video camera location, and it provides projection matrices using the photo/video camera field of view. ReprojectionMethod Specifies the default depth reprojection method for HoloLens 2. Declaration public HolographicDepthReprojectionMethod ReprojectionMethod { get; } Property Value Type Description HolographicDepthReprojectionMethod Remarks AutoPlanar requires the DotNetWinRT adapter. DepthReprojection is the default if the adapter isn't present."
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityReprojectionUpdater.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.WindowsMixedRealityReprojectionUpdater.html",
    "title": "Class WindowsMixedRealityReprojectionUpdater | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityReprojectionUpdater Script used to update the reprojection method for Windows Mixed Reality devices. Inheritance Object WindowsMixedRealityReprojectionUpdater Namespace : Microsoft.MixedReality.Toolkit.WindowsMixedReality Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityReprojectionUpdater : MonoBehaviour Properties ReprojectionMethod Gets or sets the reprojection method used by Windows Mixed Reality. Declaration public HolographicDepthReprojectionMethod ReprojectionMethod { get; set; } Property Value Type Description HolographicDepthReprojectionMethod"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsMixedReality.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.WindowsMixedReality Classes WindowsMixedRealityCameraSettings Camera settings provider for use with Windows Mixed Reality. WindowsMixedRealityCameraSettingsProfile Configuration profile for the Windows Mixed Reality Camera settings provider. WindowsMixedRealityReprojectionUpdater Script used to update the reprojection method for Windows Mixed Reality devices. Structs HolographicFrameNativeData A representation of Windows Mixed Reality native data, provided as an IntPtr from Unity's UnityEngine.XR.XRDevice.GetNativePtr(). Enums HolographicDepthReprojectionMethod Enumeration defining how holograms are stabilized during reprojection."
  },
  "api/Microsoft.MixedReality.Toolkit.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit Classes AnimationCurveExtensions Extension methods for Unity's AnimationCurve class ArrayExtensions Array type method extensions. AssemblyExtensions BaseCoreSystem BaseDataProvider BaseDataProvider<T> The base data provider implements IMixedRealityDataProvider and provides default properties for all data providers. BaseDataProviderAccessCoreSystem Abstract class for core MRTK system with functionality defined for managing and accessing IMixedRealityDataProviders BaseEventSystem Base Event System that can be inherited from to give other system features event capabilities. BaseExtensionService The base extension service implements IMixedRealityExtensionService and provides default properties for all extension services. BaseMixedRealityProfile BaseService The base service implements IMixedRealityService and provides default properties for all services. BeginReadOnlyGroupAttribute BoundsExtensions Extension methods for Unity's Bounds struct CameraExtensions Extension methods for the Unity's Camera class CanvasExtensions Extensions for the Canvas class. CollectionsExtensions Extension methods for .Net Collection objects, e.g. Lists, Dictionaries, Arrays Color32Extensions Extension methods for Unity's Color32 struct ComparerExtensions Extension methods for .Net Comparer's ComponentExtensions Extensions methods for the Unity Component class. This also includes some component-related extensions for the GameObject class. CoreServices Utility class to easily access references to core runtime Mixed Reality Toolkit Services If deallocating and re-allocating a new system at runtime, ResetCacheReferences() should be used to get a proper reference DocLinkAttribute Defines a documentation link for a service. Used primarily by service inspector facades. DoubleExtensions Extension methods for the .Net Double struct EndReadOnlyGroupAttribute EnumerableExtensions Extension methods for the .Net IEnumerable class EnumFlagsAttribute An attribute that allows a particular field to be rendered as multi-selectable set of flags. EventSystemExtensions Extension methods for Unity's EventSystem ExperimentalAttribute A PropertyAttribute for showing a warning box that the tagged implementation is experimental. ExtendsAttribute Constraint that allows selection of classes that extend a specific class when selecting a SystemType with the Unity inspector. FloatExtensions Extension methods for the .Net Float struct GameObjectExtensions Extension methods for Unity's GameObject class GenericBaseEventData Generic Base Event Data for Sending Events through the Event System. HandednessExtensions Handedness type method extensions. HelpAttribute A PropertyAttribute for showing a collapsible Help section. ImplementsAttribute Constraint that allows selection of classes that implement a specific interface when selecting a SystemType with the Unity inspector. LayerExtensions Extension methods for Unity's LayerMask struct MathExtensions Extension methods and helper functions for various math data MixedRealityCameraProfile This Scriptable Object tells you if your head mounted display (HMD) is a transparent device or an occluded device. Based on those values, you can customize your camera and quality settings. MixedRealityDataProviderAttribute Attribute that defines the properties of a Mixed Reality Toolkit data provider. MixedRealityExtensionServiceAttribute Attribute that defines the properties of a Mixed Reality Toolkit extension service. MixedRealityPlayspace A static class encapsulating the Mixed Reality playspace. MixedRealityRegisteredServiceProvidersProfile MixedRealityServiceInspectorAttribute Attach to a class implementing IMixedRealityServiceInspector to generate a facade inspector. MixedRealityServiceProfileAttribute Attribute that defines which service a profile is meant to be consumed by. Only applies to profiles that are consumed by types implementing IMixedRealityService. A service must implement all required types and no excluded types to be considered compatible with the profile. MixedRealityServiceRegistry Static class that represents the Mixed Reality Toolkit service registry. MixedRealityToolkit This class is responsible for coordinating the operation of the Mixed Reality Toolkit. It is the only Singleton in the entire project. It provides a service registry for all active services that are used within a project as well as providing the active configuration profile for the project. The Profile can be swapped out at any time to meet the needs of your project. MixedRealityToolkitConfigurationProfile Configuration profile settings for the Mixed Reality Toolkit. PhysicalPressEventRouter This class exists to route PressableButton events through to Interactable . The result is being able to have physical touch call Interactable.OnPointerClicked. PlacementEventData Describes placement of objects events. PrefabAttribute Attribute used to ensure that a GameObject inspector slot only accepts prefabs. ProcessExtensions Process Extension class. QuaternionExtensions Extension methods for Unity's Quaternion struct. RayExtensions Extension methods for Unity's Ray struct ReadOnlyAttribute SceneAssetReferenceAttribute Attribute for using a SceneAssetReference property drawer. SceneAssetReferenceAttributeDrawer Draws an object field as a scene asset reference. This enables fields to store references to scene assets (which is an editor-only object) as unity objects (which work in both editor and runtime) ScenePickAttribute Attribute to mark up an int field to be drawn using the ScenePickPropertyDrawer This allows the UI to display a dropdown instead of a numeric entry field. StringBuilderExtensions StringBuilder Extensions. StringExtensions String Extensions. SubmitEventRouter This is a helper class to allow you to call OnSubmit() on a UnityEngine.UI.Button or other control derived from UnityEngine.EventSystems.ISubmitHandler on this gameObject. It exposes a public function that can be bound in the Editor to a Unity Event. SystemNumericsExtensions SystemTypeAttribute Base class for class selection constraints that can be applied when selecting a SystemType with the Unity inspector. TagPropertyAttribute A PropertyAttribute for Unity tags (a string field). Texture2DExtensions A collection of helper functions for Texture2D TransformExtensions Extension methods for Unity's Transform class TypeExtensions UnityObjectExtensions Extension methods for Unity's Object class Vector3RangeAttribute Attribute used to make a float or int variable in a script be restricted to a specific range. VectorExtensions Extension methods for Unity's Vector struct Structs BaseEventSystem.EventHandlerEntry MixedRealityServiceConfiguration Defines a system, feature, or manager to be registered with as a IMixedRealityExtensionService on startup. Interfaces IMixedRealityCapabilityCheck IMixedRealityDataProvider Required interface for all Mixed Reality data providers. Data providers are the components that supply services with required information (ex: input controller state). IMixedRealityDataProviderAccess Allows systems to provide access to their managed data providers. IMixedRealityEventHandler Interface to implement generic events. IMixedRealityEventSource Interface to implement an event source. IMixedRealityEventSystem Interface used to implement an Event System that is compatible with the Mixed Reality Toolkit. IMixedRealityExtensionService Generic interface for all optional Mixed Reality systems, components, or features that can be added to the MixedRealityServiceConfiguration IMixedRealityService Generic interface for all Mixed Reality Services IMixedRealityServiceConfiguration Defines a system, feature, or manager to be registered with as a IMixedRealityExtensionService on startup. IMixedRealityServiceRegistrar Interface for Mixed Reality Toolkit service registration. Enums BoundsExtensions.Axis DistortionMode How to apply the distortion along the line. InterpolationMode Default options for how to distribute interpolated points in a line renderer InterpolationType Defines the type of interpolation to use when calculating a spline. LinePointTransformMode Defines how a base line data provider will transform its points LineRotationMode Defines how to calculate the line's rotation at any given point. MixedRealityCapability Mixed reality platform capabilities. PhysicalPressEventRouter.PhysicalPressEventBehavior PointDistributionMode Defines how to get an interpolated point along a line SDKType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) StepMode Defines how to generate points in a line renderer TrackingState The Tracking State defines how a device is currently being tracked. This enables developers to be able to handle non-tracked situations and react accordingly."
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessObserver.html",
    "title": "Interface IMixedRealitySpatialAwarenessObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessObserver Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessObserver : IMixedRealityDataProvider, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Properties DefaultPhysicsLayer Get or sets the default Unity Physics Layer on which to set the spatial object. Declaration int DefaultPhysicsLayer { get; } Property Value Type Description Int32 IsRunning Is the observer running (actively accumulating spatial data)? Declaration bool IsRunning { get; } Property Value Type Description Boolean IsStationaryObserver Should the observer remain stationary in the scene? Declaration bool IsStationaryObserver { get; set; } Property Value Type Description Boolean Remarks Set IsStationaryObserver to false to move the volume with the user. If set to true, the origin will be 0,0,0 or the last known location. ObservationExtents Gets or sets the extents( 1/2 size) of the volume, in meters per axis, from which individual observations will be made. Declaration Vector3 ObservationExtents { get; set; } Property Value Type Description Vector3 Remarks When used when ObserverVolumeType is set to Sphere the X value of the extents will be used as the radius. ObserverOrigin Gets or sets the origin, in World Space, of the observer. Declaration Vector3 ObserverOrigin { get; set; } Property Value Type Description Vector3 Remarks Moving the observer origin allows the spatial awareness system to locate and discard meshes as the user navigates the environment. ObserverRotation Gets or sets the orientation of the volume in World Space. Declaration Quaternion ObserverRotation { get; set; } Property Value Type Description Quaternion Remarks This is only used when ObserverVolumeType is set to UserAlignedCube ObserverVolumeType Gets or sets the type of volume the observer should operate in. Declaration VolumeType ObserverVolumeType { get; set; } Property Value Type Description VolumeType StartupBehavior Indicates the developer's intended startup behavior. Declaration AutoStartBehavior StartupBehavior { get; set; } Property Value Type Description AutoStartBehavior UpdateInterval Gets or sets the frequency, in seconds, at which the spatial observer should update. Declaration float UpdateInterval { get; set; } Property Value Type Description Single Methods ClearObservations() Clears the observer's collection of observations. Declaration void ClearObservations() Remarks If the observer is currently running, calling ClearObservations will suspend it. Resume() Start | resume the observer. Declaration void Resume() Suspend() Stop | pause the observer Declaration void Suspend()"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessSystem.html",
    "title": "Interface IMixedRealitySpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessSystem Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessSystem : IMixedRealityEventSystem, IMixedRealityService, IDisposable Properties SpatialAwarenessObjectParent Gets the parent object to which all spatial awareness GameObject s are to be parented. Declaration GameObject SpatialAwarenessObjectParent { get; } Property Value Type Description GameObject SpatialAwarenessSystemProfile Typed representation of the ConfigurationProfile property. Declaration MixedRealitySpatialAwarenessSystemProfile SpatialAwarenessSystemProfile { get; } Property Value Type Description MixedRealitySpatialAwarenessSystemProfile Methods ClearObservations() Clears all registered observers' observations. Declaration void ClearObservations() ClearObservations<T>(String) Clears the observations of the specified observer. Declaration void ClearObservations<T>(string name = null) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The name of the observer. Type Parameters Name Description T The observer type. CreateSpatialAwarenessObservationParent(String) Creates the a parent, that is a child of the Spatial Awareness System parent so that the scene hierarchy does not get overly cluttered. Declaration GameObject CreateSpatialAwarenessObservationParent(string name) Parameters Type Name Description String name Returns Type Description GameObject The GameObject to which spatial awareness objects will be parented. Remarks This method is to be called by implementations of the IMixedRealitySpatialAwarenessObserver interface, not by application code. It is used to enable observations to be grouped by observer. GenerateNewSourceId() Generates a new source identifier for an IMixedRealitySpatialAwarenessObserver implementation. Declaration uint GenerateNewSourceId() Returns Type Description UInt32 The source identifier to be used by the IMixedRealitySpatialAwarenessObserver implementation. Remarks This method is to be called by implementations of the IMixedRealitySpatialAwarenessObserver interface, not by application code. GetObserver(String) Get the IMixedRealitySpatialAwarenessObserver that is registered under the specified name. Declaration IMixedRealitySpatialAwarenessObserver GetObserver(string name) Parameters Type Name Description String name The friendly name of the observer. Returns Type Description IMixedRealitySpatialAwarenessObserver The requested observer, or null if one cannot be found. Remarks If more than one observer is registered under the specified name, the first will be returned. GetObserver<T>(String) Get the observer that is registered under the specified name matching the specified type. Declaration T GetObserver<T>(string name = null) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Returns Type Description T The requested observer, or null if one cannot be found. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) Remarks If more than one observer is registered under the specified name, the first will be returned. GetObservers() Gets the collection of registered IMixedRealitySpatialAwarenessObserver data providers. Declaration IReadOnlyList<IMixedRealitySpatialAwarenessObserver> GetObservers() Returns Type Description IReadOnlyList < IMixedRealitySpatialAwarenessObserver > Read only copy of the list of registered observers. GetObservers<T>() Get the collection of registered observers of the specified type. Declaration IReadOnlyList<T> GetObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Returns Type Description IReadOnlyList <T> Readonly copy of the list of registered observers that implement the specified type. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) ResumeObserver<T>(String) Starts / restarts the spatial observer registered under the specified name matching the specified type. Declaration void ResumeObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) ResumeObservers() Starts / restarts all spatial observers of the specified type. Declaration void ResumeObservers() ResumeObservers<T>() Starts / restarts all spatial observers of the specified type. Declaration void ResumeObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) SuspendObserver<T>(String) Stops / pauses the spatial observer registered under the specified name matching the specified type. Declaration void SuspendObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) SuspendObservers() Stops / pauses all spatial observers. Declaration void SuspendObservers() SuspendObservers<T>() Stops / pauses all spatial observers of the specified type. Declaration void SuspendObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.GUIEnabledWrapper.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.GUIEnabledWrapper.html",
    "title": "Class GUIEnabledWrapper | Mixed Reality Toolkit Documentation",
    "keywords": "Class GUIEnabledWrapper Similar to the scope classes in Unity (i.e VerticalScope), This class is a helper class designed to force enable GUI.enabled over some lifetime Should be utilized with using{} code block Inheritance Object GUIEnabledWrapper Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class GUIEnabledWrapper : IDisposable Constructors GUIEnabledWrapper() Captures whether the Unity editor GUI state was enabled or not. Then forces enable to true Declaration public GUIEnabledWrapper() Methods Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InputManagerAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InputManagerAxis.html",
    "title": "Class InputManagerAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputManagerAxis Used to define an entire InputManagerAxis, with each variable defined by the same term the Inspector shows. Inheritance Object InputManagerAxis Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class InputManagerAxis Fields AltNegativeButton Declaration public string AltNegativeButton Field Value Type Description String AltPositiveButton Declaration public string AltPositiveButton Field Value Type Description String Axis Declaration public int Axis Field Value Type Description Int32 Dead Declaration public float Dead Field Value Type Description Single DescriptiveName Declaration public string DescriptiveName Field Value Type Description String DescriptiveNegativeName Declaration public string DescriptiveNegativeName Field Value Type Description String Gravity Declaration public float Gravity Field Value Type Description Single Invert Declaration public bool Invert Field Value Type Description Boolean JoyNum Declaration public int JoyNum Field Value Type Description Int32 Name Declaration public string Name Field Value Type Description String NegativeButton Declaration public string NegativeButton Field Value Type Description String PositiveButton Declaration public string PositiveButton Field Value Type Description String Sensitivity Declaration public float Sensitivity Field Value Type Description Single Snap Declaration public bool Snap Field Value Type Description Boolean Type Declaration public InputManagerAxisType Type Field Value Type Description InputManagerAxisType"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InputManagerAxisType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InputManagerAxisType.html",
    "title": "Enum InputManagerAxisType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InputManagerAxisType Used to map AxisType from a useful name to the int value the InputManager wants. Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public enum InputManagerAxisType Fields Name Description JoystickAxis KeyOrMouseButton MouseMovement"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorField.FieldTypes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorField.FieldTypes.html",
    "title": "Enum InspectorField.FieldTypes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InspectorField.FieldTypes Property types used for casting and defining property fields in the inspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public enum FieldTypes Fields Name Description AudioClip Bool Color Curve DropdownInt DropdownString Event Float GameObject Int Material Object Quaternion ScriptableObject String Texture Vector2 Vector3 Vector4"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionRulePoseAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionRulePoseAxis.html",
    "title": "Struct InputActionRulePoseAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRulePoseAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < MixedRealityPose > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionRulePoseAxis : IInputActionRule<MixedRealityPose> Constructors InputActionRulePoseAxis(MixedRealityInputAction, MixedRealityInputAction, MixedRealityPose) Constructor. Declaration public InputActionRulePoseAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, MixedRealityPose criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. MixedRealityPose criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public MixedRealityPose Criteria { get; } Property Value Type Description MixedRealityPose RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleQuaternionAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleQuaternionAxis.html",
    "title": "Struct InputActionRuleQuaternionAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleQuaternionAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Quaternion > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionRuleQuaternionAxis : IInputActionRule<Quaternion> Constructors InputActionRuleQuaternionAxis(MixedRealityInputAction, MixedRealityInputAction, Quaternion) Constructor. Declaration public InputActionRuleQuaternionAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, Quaternion criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Quaternion criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public Quaternion Criteria { get; } Property Value Type Description Quaternion RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputAction.html",
    "title": "Struct MixedRealityInputAction | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityInputAction An Input Action for mapping an action to an Input Sources Button, Joystick, Sensor, etc. Implements IEqualityComparer Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MixedRealityInputAction : IEqualityComparer Constructors MixedRealityInputAction(UInt32, String, AxisType) Constructor. Declaration public MixedRealityInputAction(uint id, string description, AxisType axisConstraint = null) Parameters Type Name Description UInt32 id String description AxisType axisConstraint Properties AxisConstraint The Axis constraint for the Input Action Declaration public AxisType AxisConstraint { get; } Property Value Type Description AxisType Description A short description of the Input Action. Declaration public string Description { get; } Property Value Type Description String Id The Unique Id of this Input Action. Declaration public uint Id { get; } Property Value Type Description UInt32 None Declaration public static MixedRealityInputAction None { get; } Property Value Type Description MixedRealityInputAction Methods Equals(MixedRealityInputAction) Declaration public bool Equals(MixedRealityInputAction other) Parameters Type Name Description MixedRealityInputAction other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() Operators Equality(MixedRealityInputAction, MixedRealityInputAction) Declaration public static bool operator ==(MixedRealityInputAction left, MixedRealityInputAction right) Parameters Type Name Description MixedRealityInputAction left MixedRealityInputAction right Returns Type Description Boolean Inequality(MixedRealityInputAction, MixedRealityInputAction) Declaration public static bool operator !=(MixedRealityInputAction left, MixedRealityInputAction right) Parameters Type Name Description MixedRealityInputAction left MixedRealityInputAction right Returns Type Description Boolean Implements IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputActionRulesProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputActionRulesProfile.html",
    "title": "Class MixedRealityInputActionRulesProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionRulesProfile Inheritance Object BaseMixedRealityProfile MixedRealityInputActionRulesProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionRulesProfile : BaseMixedRealityProfile Properties InputActionRulesDigital All the Input Action Rules for Boolean based MixedRealityInputAction s Declaration public InputActionRuleDigital[] InputActionRulesDigital { get; } Property Value Type Description InputActionRuleDigital [] InputActionRulesDualAxis All the Input Action Rules for Vector2 based MixedRealityInputAction s Declaration public InputActionRuleDualAxis[] InputActionRulesDualAxis { get; } Property Value Type Description InputActionRuleDualAxis [] InputActionRulesPoseAxis All the Input Action Rules for MixedRealityPose based MixedRealityInputAction s Declaration public InputActionRulePoseAxis[] InputActionRulesPoseAxis { get; } Property Value Type Description InputActionRulePoseAxis [] InputActionRulesQuaternionAxis All the Input Action Rules for Quaternion based MixedRealityInputAction s Declaration public InputActionRuleQuaternionAxis[] InputActionRulesQuaternionAxis { get; } Property Value Type Description InputActionRuleQuaternionAxis [] InputActionRulesSingleAxis All the Input Action Rules for Single based MixedRealityInputAction s Declaration public InputActionRuleSingleAxis[] InputActionRulesSingleAxis { get; } Property Value Type Description InputActionRuleSingleAxis [] InputActionRulesVectorAxis All the Input Action Rules for Vector3 based MixedRealityInputAction s Declaration public InputActionRuleVectorAxis[] InputActionRulesVectorAxis { get; } Property Value Type Description InputActionRuleVectorAxis []"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputActionsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputActionsProfile.html",
    "title": "Class MixedRealityInputActionsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionsProfile Configuration profile settings for setting up and consuming Input Actions. Inheritance Object BaseMixedRealityProfile MixedRealityInputActionsProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionsProfile : BaseMixedRealityProfile Properties InputActions The list of actions users can do in your application. Declaration public MixedRealityInputAction[] InputActions { get; } Property Value Type Description MixedRealityInputAction [] Remarks Input Actions are device agnostic and can be paired with any number of device inputs across all platforms. Methods LoadMixedRealityToolKitDefaults() Reset the current InputActions definitions to the Mixed Reality Toolkit defaults If existing mappings exist, they will be preserved and pushed to the end of the array Declaration public MixedRealityInputAction[] LoadMixedRealityToolKitDefaults() Returns Type Description MixedRealityInputAction [] Default MRTK Actions plus any custom actions (if already configured)"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputDataProviderConfiguration.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputDataProviderConfiguration.html",
    "title": "Struct MixedRealityInputDataProviderConfiguration | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityInputDataProviderConfiguration Implements IMixedRealityServiceConfiguration Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MixedRealityInputDataProviderConfiguration : IMixedRealityServiceConfiguration Constructors MixedRealityInputDataProviderConfiguration(SystemType, String, UInt32, SupportedPlatforms, BaseMixedRealityProfile) Constructor. Declaration public MixedRealityInputDataProviderConfiguration(SystemType componentType, string componentName, uint priority, SupportedPlatforms runtimePlatform, BaseMixedRealityProfile profile) Parameters Type Name Description SystemType componentType The SystemType of the data provider. String componentName The friendly name of the data provider. UInt32 priority The load priority of the data provider. SupportedPlatforms runtimePlatform The runtime platform(s) supported by the data provider. BaseMixedRealityProfile profile The configuration profile for the data provider. Properties ComponentName The name of the system, feature or manager. Declaration public string ComponentName { get; } Property Value Type Description String ComponentType The concrete type for the system, feature or manager. Declaration public SystemType ComponentType { get; } Property Value Type Description SystemType DeviceManagerProfile Device manager specific configuration profile. Declaration public BaseMixedRealityProfile DeviceManagerProfile { get; } Property Value Type Description BaseMixedRealityProfile Priority The priority this system, feature or manager will be initialized in. Declaration public uint Priority { get; } Property Value Type Description UInt32 RuntimePlatform The runtime platform(s) to run this service. Declaration public SupportedPlatforms RuntimePlatform { get; } Property Value Type Description SupportedPlatforms Implements IMixedRealityServiceConfiguration"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputModule.PointerData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputModule.PointerData.html",
    "title": "Class MixedRealityInputModule.PointerData | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputModule.PointerData Inheritance Object MixedRealityInputModule.PointerData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax protected class PointerData Constructors PointerData(IMixedRealityPointer, EventSystem) Declaration public PointerData(IMixedRealityPointer pointer, EventSystem eventSystem) Parameters Type Name Description IMixedRealityPointer pointer EventSystem eventSystem Fields eventDataLeft Declaration public PointerEventData eventDataLeft Field Value Type Description PointerEventData eventDataMiddle Declaration public PointerEventData eventDataMiddle Field Value Type Description PointerEventData eventDataRight Declaration public PointerEventData eventDataRight Field Value Type Description PointerEventData lastMousePoint3d Declaration public Vector3? lastMousePoint3d Field Value Type Description Nullable < Vector3 > mouseState Declaration public MouseState mouseState Field Value Type Description MouseState nextPressState Declaration public PointerEventData.FramePressState nextPressState Field Value Type Description PointerEventData.FramePressState pointer Declaration public IMixedRealityPointer pointer Field Value Type Description IMixedRealityPointer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputModule.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputModule.html",
    "title": "Class MixedRealityInputModule | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputModule Inheritance Object MixedRealityInputModule Implements IMixedRealityPointerHandler IMixedRealitySourceStateHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputModule : StandaloneInputModule, IMixedRealityPointerHandler, IMixedRealitySourceStateHandler, IEventSystemHandler Fields pointerDataToRemove List of pointers that need one last frame of updates to remove Declaration protected readonly List<MixedRealityInputModule.PointerData> pointerDataToRemove Field Value Type Description List < MixedRealityInputModule.PointerData > pointerDataToUpdate Mapping from pointer id to event data and click state Declaration protected readonly Dictionary<int, MixedRealityInputModule.PointerData> pointerDataToUpdate Field Value Type Description Dictionary < Int32 , MixedRealityInputModule.PointerData > Properties ActiveMixedRealityPointers Declaration public IEnumerable<IMixedRealityPointer> ActiveMixedRealityPointers { get; } Property Value Type Description IEnumerable < IMixedRealityPointer > RaycastCamera Declaration public Camera RaycastCamera { get; } Property Value Type Description Camera Methods ActivateModule() Declaration public override void ActivateModule() DeactivateModule() Declaration public override void DeactivateModule() GetMousePointerEventData(Int32) Adds MRTK pointer support as mouse input for Unity UI. Declaration protected override MouseState GetMousePointerEventData(int pointerId) Parameters Type Name Description Int32 pointerId Returns Type Description MouseState Process() Process the active pointers from MixedRealityInputManager and all other Unity input. Declaration public override void Process() ResetMousePointerEventData(MixedRealityInputModule.PointerData) Declaration protected void ResetMousePointerEventData(MixedRealityInputModule.PointerData pointerData) Parameters Type Name Description MixedRealityInputModule.PointerData pointerData StateForPointer(MixedRealityInputModule.PointerData) Declaration protected PointerEventData.FramePressState StateForPointer(MixedRealityInputModule.PointerData pointerData) Parameters Type Name Description MixedRealityInputModule.PointerData pointerData Returns Type Description PointerEventData.FramePressState UpdateMousePointerEventData(MixedRealityInputModule.PointerData) Declaration protected void UpdateMousePointerEventData(MixedRealityInputModule.PointerData pointerData) Parameters Type Name Description MixedRealityInputModule.PointerData pointerData Explicit Interface Implementations IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) Declaration void IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) Declaration void IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Implements IMixedRealityPointerHandler IMixedRealitySourceStateHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputModuleEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputModuleEditor.html",
    "title": "Class MixedRealityInputModuleEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputModuleEditor Inheritance Object MixedRealityInputModuleEditor Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputModuleEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI() RequiresConstantRepaint() Declaration public override bool RequiresConstantRepaint() Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputRecordingProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputRecordingProfile.html",
    "title": "Class MixedRealityInputRecordingProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputRecordingProfile Settings for recording input animation assets. Inheritance Object BaseMixedRealityProfile MixedRealityInputRecordingProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputRecordingProfile : BaseMixedRealityProfile Properties CameraPositionThreshold Declaration public float CameraPositionThreshold { get; } Property Value Type Description Single CameraRotationThreshold Declaration public float CameraRotationThreshold { get; } Property Value Type Description Single JointPositionThreshold Declaration public float JointPositionThreshold { get; } Property Value Type Description Single JointRotationThreshold Declaration public float JointRotationThreshold { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.TwoHandedManipulation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.TwoHandedManipulation.html",
    "title": "Enum ManipulationHandler.TwoHandedManipulation | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ManipulationHandler.TwoHandedManipulation Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum TwoHandedManipulation Fields Name Description MoveRotate MoveRotateScale MoveScale Rotate RotateScale Scale"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.html",
    "title": "Class ManipulationHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class ManipulationHandler This script allows for an object to be movable, scalable, and rotatable with one or two hands. You may also configure the script on only enable certain manipulations. The script works with both HoloLens' gesture input and immersive headset's motion controller input. Inheritance Object ManipulationHandler Implements IMixedRealityPointerHandler IMixedRealityFocusChangedHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ManipulationHandler : MonoBehaviour, IMixedRealityPointerHandler, IMixedRealityFocusChangedHandler Fields OnHoverEntered Declaration public ManipulationEvent OnHoverEntered Field Value Type Description ManipulationEvent OnHoverExited Declaration public ManipulationEvent OnHoverExited Field Value Type Description ManipulationEvent OnManipulationEnded Declaration public ManipulationEvent OnManipulationEnded Field Value Type Description ManipulationEvent OnManipulationStarted Declaration public ManipulationEvent OnManipulationStarted Field Value Type Description ManipulationEvent Properties AllowFarManipulation Declaration public bool AllowFarManipulation { get; set; } Property Value Type Description Boolean ConstraintOnMovement Declaration public MovementConstraintType ConstraintOnMovement { get; set; } Property Value Type Description MovementConstraintType ConstraintOnRotation Declaration public RotationConstraintType ConstraintOnRotation { get; set; } Property Value Type Description RotationConstraintType HostTransform Declaration public Transform HostTransform { get; set; } Property Value Type Description Transform ManipulationType Declaration public ManipulationHandler.HandMovementType ManipulationType { get; set; } Property Value Type Description ManipulationHandler.HandMovementType OneHandRotationModeFar Declaration public ManipulationHandler.RotateInOneHandType OneHandRotationModeFar { get; set; } Property Value Type Description ManipulationHandler.RotateInOneHandType OneHandRotationModeNear Declaration public ManipulationHandler.RotateInOneHandType OneHandRotationModeNear { get; set; } Property Value Type Description ManipulationHandler.RotateInOneHandType ReleaseBehavior Declaration public ManipulationHandler.ReleaseBehaviorType ReleaseBehavior { get; set; } Property Value Type Description ManipulationHandler.ReleaseBehaviorType SmoothingActive Declaration public bool SmoothingActive { get; set; } Property Value Type Description Boolean SmoothingAmoutOneHandManip Declaration public float SmoothingAmoutOneHandManip { get; set; } Property Value Type Description Single TwoHandedManipulationType Declaration public ManipulationHandler.TwoHandedManipulation TwoHandedManipulationType { get; set; } Property Value Type Description ManipulationHandler.TwoHandedManipulation UseLocalSpaceForConstraint Gets or sets whether the constraints should be applied in local space of the object being manipulated or world space. Declaration public bool UseLocalSpaceForConstraint { get; set; } Property Value Type Description Boolean Methods ForceEndManipulation() Releases the object that is currently manipulated Declaration public void ForceEndManipulation() GetPointerGrabPoint(UInt32) Gets the grab point for the given pointer id. Only use if you know that your given pointer id corresponds to a pointer that has grabbed this component. Declaration public Vector3 GetPointerGrabPoint(uint pointerId) Parameters Type Name Description UInt32 pointerId Returns Type Description Vector3 OnBeforeFocusChange(FocusEventData) Declaration public void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusChanged(FocusEventData) Declaration public void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnPointerClicked(MixedRealityPointerEventData) Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData Implements IMixedRealityPointerHandler IMixedRealityFocusChangedHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.PanUnityEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.PanUnityEvent.html",
    "title": "Class PanUnityEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class PanUnityEvent Unity event for a pan / zoom event. Contains the hand pan event data Inheritance Object PanUnityEvent Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class PanUnityEvent : UnityEvent<HandPanEventData>"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.PinchSlider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.PinchSlider.html",
    "title": "Class PinchSlider | Mixed Reality Toolkit Documentation",
    "keywords": "Class PinchSlider A slider that can be moved by grabbing / pinching a slider thumb Inheritance Object PinchSlider Implements IMixedRealityPointerHandler IMixedRealityFocusHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class PinchSlider : MonoBehaviour, IMixedRealityPointerHandler, IMixedRealityFocusHandler Fields OnHoverEntered Declaration public SliderEvent OnHoverEntered Field Value Type Description SliderEvent OnHoverExited Declaration public SliderEvent OnHoverExited Field Value Type Description SliderEvent OnInteractionEnded Declaration public SliderEvent OnInteractionEnded Field Value Type Description SliderEvent OnInteractionStarted Declaration public SliderEvent OnInteractionStarted Field Value Type Description SliderEvent OnValueUpdated Declaration public SliderEvent OnValueUpdated Field Value Type Description SliderEvent Properties SliderEndDistance Declaration public float SliderEndDistance { get; set; } Property Value Type Description Single SliderEndPosition Gets the end position of the slider, in world space, or zero if invalid. Sets the end position of the slider, in world space, projected to the slider's axis. Declaration public Vector3 SliderEndPosition { get; set; } Property Value Type Description Vector3 SliderStartDistance Declaration public float SliderStartDistance { get; set; } Property Value Type Description Single SliderStartPosition Gets the start position of the slider, in world space, or zero if invalid. Sets the start position of the slider, in world space, projected to the slider's axis. Declaration public Vector3 SliderStartPosition { get; set; } Property Value Type Description Vector3 SliderTrackDirection Returns the vector from the slider start to end positions Declaration public Vector3 SliderTrackDirection { get; } Property Value Type Description Vector3 SliderValue Declaration public float SliderValue { get; set; } Property Value Type Description Single ThumbRoot Declaration public GameObject ThumbRoot { get; set; } Property Value Type Description GameObject Methods OnFocusEnter(FocusEventData) Declaration public void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) Declaration public void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnPointerClicked(MixedRealityPointerEventData) Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData Start() Declaration public void Start() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.PointerBehaviorControls.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.PointerBehaviorControls.html",
    "title": "Class PointerBehaviorControls | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerBehaviorControls Utility class to control PointerBehavior of pointers. Hook up buttons to the public functions to turn rays on and off. Inheritance Object PointerBehaviorControls Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class PointerBehaviorControls : MonoBehaviour Methods SetControllerRayEnabled(Boolean) Sets the PointerBehavior for all controller rays to be AlwaysOff If true, behavior will be set to Default. Otherwise it will be set to AlwaysOff Declaration public void SetControllerRayEnabled(bool isEnabled) Parameters Type Name Description Boolean isEnabled SetFingerOnly() Sets pointer states to turn off all but the poke pointer Declaration public void SetFingerOnly() SetGazeEnabled(Boolean) Sets the PointerBehavior for the gaze pointer to be AlwaysOff If true, behavior will be set to Default. Otherwise it will be set to AlwaysOff Declaration public void SetGazeEnabled(bool isEnabled) Parameters Type Name Description Boolean isEnabled SetGrabEnabled(Boolean) Sets the PointerBehavior for the grab pointer to be AlwaysOff If true, behavior will be set to Default. Otherwise it will be set to AlwaysOff Declaration public void SetGrabEnabled(bool isEnabled) Parameters Type Name Description Boolean isEnabled SetHandRayEnabled(Boolean) Sets the PointerBehavior for all hand rays. If true, behavior will be set to Default. Otherwise it will be set to AlwaysOff Declaration public void SetHandRayEnabled(bool isEnabled) Parameters Type Name Description Boolean isEnabled SetHoloLens1() Sets pointer behavior to mimic HoloLens 1 interactions, useful for using Hololens 1 interactions on HoloLens 2. PokePointer will be off GrabPointer will be off HandRayPointer will be off MotionControllerRayPointer will be off GazePointer will be Default Declaration public void SetHoloLens1() SetHoloLens2() Sets pointer behavior to mimic HoloLens 2 PokePointer will be Default GrabPointer will be Default HandRayPointer will be Default MotionControllerRayPointer will be off GazePointer will be Off Declaration public void SetHoloLens2() SetPokeEnabled(Boolean) Sets the PointerBehavior for the poke pointer to be AlwaysOff If true, behavior will be set to Default. Otherwise it will be set to AlwaysOff Declaration public void SetPokeEnabled(bool isEnabled) Parameters Type Name Description Boolean isEnabled SetVR() Sets pointer states to mimic traditional vr behavior. PokePointer will be off GrabPointer will be off HandRayPointer will be off MotionControllerRayPointer will be Default GazePointef will be off Declaration public void SetVR() ToggleControllerRayEnabled() If controller ray PointerBehavior is AlwaysOn or Default, set it to off. Otherwise, set behavior to default Declaration public void ToggleControllerRayEnabled() ToggleHandGrabEnabled() If hand grab pointer PointerBehavior is AlwaysOn or Default, set it to off. Otherwise, set behavior to default Declaration public void ToggleHandGrabEnabled() ToggleHandPokeEnabled() If finger poke pointer PointerBehavior is AlwaysOn or Default, set it to off. Otherwise, set behavior to default Declaration public void ToggleHandPokeEnabled() ToggleHandRayEnabled() If hand ray PointerBehavior is AlwaysOn or Default, set it to off. Otherwise, set behavior to default Declaration public void ToggleHandRayEnabled() TogglePointerEnabled<T>(InputSourceType) Toggles a pointer's \"enabled\" behavior. If a pointer's PointerBehavior is Default or AlwaysOn, set it to AlwaysOff. Otherwise, set the pointer's behavior to Default. Will set this state for all matching pointers. Declaration public void TogglePointerEnabled<T>(InputSourceType inputType) where T : class, IMixedRealityPointer Parameters Type Name Description InputSourceType inputType Input type of pointer to set Type Parameters Name Description T Type of pointer to set"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.PressableButton.SpaceMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.PressableButton.SpaceMode.html",
    "title": "Enum PressableButton.SpaceMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PressableButton.SpaceMode Enum for defining space of plane distances. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum SpaceMode Fields Name Description Local World"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.PressableButton.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.PressableButton.html",
    "title": "Class PressableButton | Mixed Reality Toolkit Documentation",
    "keywords": "Class PressableButton A button that can be pushed via direct touch. You can use PhysicalPressEventRouter to route these events to Interactable . Inheritance Object PressableButton PressableButtonHoloLens2 Implements IMixedRealityTouchHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class PressableButton : MonoBehaviour, IMixedRealityTouchHandler Fields ButtonPressed Declaration public UnityEvent ButtonPressed Field Value Type Description UnityEvent ButtonReleased Declaration public UnityEvent ButtonReleased Field Value Type Description UnityEvent movingButtonVisuals The object that is being pushed. Declaration protected GameObject movingButtonVisuals Field Value Type Description GameObject startPushDistance Declaration protected float startPushDistance Field Value Type Description Single TouchBegin Declaration public UnityEvent TouchBegin Field Value Type Description UnityEvent TouchEnd Declaration public UnityEvent TouchEnd Field Value Type Description UnityEvent Properties CurrentPushDistance Current push distance relative to the start push plane. Declaration public float CurrentPushDistance { get; protected set; } Property Value Type Description Single DistanceSpaceMode Describes in which coordinate space the plane distances are stored and calculated Declaration public PressableButton.SpaceMode DistanceSpaceMode { get; set; } Property Value Type Description PressableButton.SpaceMode EnforceFrontPush Ensures that the button can only be pushed from the front. Touching the button from the back or side is prevented. Declaration public bool EnforceFrontPush { get; } Property Value Type Description Boolean IsPressing Represents the state of whether the button is currently being pressed. Declaration public bool IsPressing { get; } Property Value Type Description Boolean IsTouching Represents the state of whether or not a finger is currently touching this button. Declaration public bool IsTouching { get; } Property Value Type Description Boolean MaxPushDistance Maximum push distance. Distance is relative to the pivot of either the moving visuals if there's any or the button itself. Declaration public float MaxPushDistance { get; set; } Property Value Type Description Single PressDistance Distance the button must be pushed until it is considered pressed. Distance is relative to the pivot of either the moving visuals if there's any or the button itself. Declaration public float PressDistance { get; set; } Property Value Type Description Single ReleaseDistanceDelta Withdraw amount needed to transition from Pressed to Released. Declaration public float ReleaseDistanceDelta { get; set; } Property Value Type Description Single ReleaseOnTouchEnd Button will send the release event on touch end after successful press even if release plane hasn't been passed. Declaration public bool ReleaseOnTouchEnd { get; set; } Property Value Type Description Boolean StartPushDistance The offset at which pushing starts. Offset is relative to the pivot of either the moving visuals if there's any or the button itself. Declaration public float StartPushDistance { get; set; } Property Value Type Description Single Methods GetDistanceAlongPushDirection(Vector3) Returns the local distance along the push direction for the passed in world position Declaration public float GetDistanceAlongPushDirection(Vector3 positionWorldSpace) Parameters Type Name Description Vector3 positionWorldSpace Returns Type Description Single GetWorldPositionAlongPushDirection(Single) Returns world space position along the push direction for the given local distance Declaration public Vector3 GetWorldPositionAlongPushDirection(float localDistance) Parameters Type Name Description Single localDistance Returns Type Description Vector3 Start() Declaration protected virtual void Start() UpdateMovingVisualsPosition() Declaration protected virtual void UpdateMovingVisualsPosition() Implements IMixedRealityTouchHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.PressableButtonHoloLens2.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.PressableButtonHoloLens2.html",
    "title": "Class PressableButtonHoloLens2 | Mixed Reality Toolkit Documentation",
    "keywords": "Class PressableButtonHoloLens2 HoloLens 2 shell's style button specific elements Inheritance Object PressableButton PressableButtonHoloLens2 Implements IMixedRealityTouchHandler Inherited Members PressableButton.movingButtonVisuals PressableButton.DistanceSpaceMode PressableButton.startPushDistance PressableButton.StartPushDistance PressableButton.MaxPushDistance PressableButton.PressDistance PressableButton.ReleaseDistanceDelta PressableButton.ReleaseOnTouchEnd PressableButton.EnforceFrontPush PressableButton.TouchBegin PressableButton.TouchEnd PressableButton.ButtonPressed PressableButton.ButtonReleased PressableButton.CurrentPushDistance PressableButton.IsTouching PressableButton.IsPressing PressableButton.GetWorldPositionAlongPushDirection(Single) PressableButton.GetDistanceAlongPushDirection(Vector3) Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class PressableButtonHoloLens2 : PressableButton, IMixedRealityTouchHandler Properties CompressableButtonVisuals The visuals which become compressed (scaled) along the z-axis when pressed. Declaration public GameObject CompressableButtonVisuals { get; set; } Property Value Type Description GameObject MinCompressPercentage The minimum percentage of the original scale the compressableButtonVisuals can be compressed to. Declaration public float MinCompressPercentage { get; set; } Property Value Type Description Single MovingButtonIconText Public property to set the moving content part(icon and text) of the button. This content part moves 1/2 distance of the front cage Declaration public GameObject MovingButtonIconText { get; set; } Property Value Type Description GameObject Methods AnimateInHighlightPlate() Animates in the highlight plate. Declaration public void AnimateInHighlightPlate() AnimateOutHighlightPlate() Animates out the highlight plate and disables it when animated out. Declaration public void AnimateOutHighlightPlate() Start() Declaration protected override void Start() Overrides PressableButton.Start() UpdateMovingVisualsPosition() Declaration protected override void UpdateMovingVisualsPosition() Overrides PressableButton.UpdateMovingVisualsPosition() Implements IMixedRealityTouchHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorLoadingBar.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorLoadingBar.html",
    "title": "Class ProgressIndicatorLoadingBar | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProgressIndicatorLoadingBar Displays progress bar and (optionally) percentage text. Inheritance Object ProgressIndicatorLoadingBar Implements IProgressIndicator Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ProgressIndicatorLoadingBar : MonoBehaviour, IProgressIndicator Properties MainTransform The progress indicator's main transform. You can use this to attach follow scripts or solvers to the indicator. Declaration public Transform MainTransform { get; } Property Value Type Description Transform Message The message to display during loading. Declaration public string Message { set; } Property Value Type Description String Progress Loading progress value from 0 (just started) to 1 (complete) Declaration public float Progress { set; } Property Value Type Description Single State Used to determine whether it's appropriate to use this indicator. Declaration public ProgressIndicatorState State { get; } Property Value Type Description ProgressIndicatorState Methods CloseAsync() Closes the progress indicator after loading is finished. Method is async to allow for animation to complete. Declaration public Task CloseAsync() Returns Type Description Task OpenAsync() Opens the progress indicator before loading begins. Method is async to allow for animation to begin before loading. Declaration public Task OpenAsync() Returns Type Description Task Implements IProgressIndicator"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorObjectDisplay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorObjectDisplay.html",
    "title": "Class ProgressIndicatorObjectDisplay | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProgressIndicatorObjectDisplay This class manages how a GameObject rotates and/or scales when activated as part of a Progress Indicator effect. Inheritance Object ProgressIndicatorObjectDisplay Implements IProgressIndicator Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ProgressIndicatorObjectDisplay : MonoBehaviour, IProgressIndicator Properties MainTransform The progress indicator's main transform. You can use this to attach follow scripts or solvers to the indicator. Declaration public Transform MainTransform { get; } Property Value Type Description Transform Message The message to display during loading. Declaration public string Message { set; } Property Value Type Description String Progress Loading progress value from 0 (just started) to 1 (complete) Declaration public float Progress { set; } Property Value Type Description Single State Used to determine whether it's appropriate to use this indicator. Declaration public ProgressIndicatorState State { get; } Property Value Type Description ProgressIndicatorState Methods CloseAsync() Closes the progress indicator after loading is finished. Method is async to allow for animation to complete. Declaration public Task CloseAsync() Returns Type Description Task OpenAsync() Opens the progress indicator before loading begins. Method is async to allow for animation to begin before loading. Declaration public Task OpenAsync() Returns Type Description Task Implements IProgressIndicator"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorOrbsRotator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorOrbsRotator.html",
    "title": "Class ProgressIndicatorOrbsRotator | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProgressIndicatorOrbsRotator This class manages the 'rotating circle of dots' effect that is used as a Progress Indicator effect. Inheritance Object ProgressIndicatorOrbsRotator Implements IProgressIndicator Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ProgressIndicatorOrbsRotator : MonoBehaviour, IProgressIndicator Fields acceleration Declaration public float acceleration Field Value Type Description Single hasAnimationFinished Declaration public bool hasAnimationFinished Field Value Type Description Boolean revolutions Declaration public int revolutions Field Value Type Description Int32 rotationSpeedRawDegrees Declaration public float rotationSpeedRawDegrees Field Value Type Description Single spacingDegrees Declaration public float spacingDegrees Field Value Type Description Single testStop Declaration public bool testStop Field Value Type Description Boolean Properties MainTransform The progress indicator's main transform. You can use this to attach follow scripts or solvers to the indicator. Declaration public Transform MainTransform { get; } Property Value Type Description Transform Message The message to display during loading. Declaration public string Message { set; } Property Value Type Description String Progress Loading progress value from 0 (just started) to 1 (complete) Declaration public float Progress { set; } Property Value Type Description Single State Used to determine whether it's appropriate to use this indicator. Declaration public ProgressIndicatorState State { get; } Property Value Type Description ProgressIndicatorState Methods CloseAsync() Closes the progress indicator after loading is finished. Method is async to allow for animation to complete. Declaration public Task CloseAsync() Returns Type Description Task OpenAsync() Opens the progress indicator before loading begins. Method is async to allow for animation to begin before loading. Declaration public Task OpenAsync() Returns Type Description Task StopOrbs() Declaration public void StopOrbs() Implements IProgressIndicator"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ProgressIndicatorState.html",
    "title": "Enum ProgressIndicatorState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ProgressIndicatorState Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ProgressIndicatorState Fields Name Description Closed Closing Open Opening"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ReceiverBase.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ReceiverBase.html",
    "title": "Class ReceiverBase | Mixed Reality Toolkit Documentation",
    "keywords": "Class ReceiverBase The base class for all receivers that attach to Interactables Inheritance Object ReceiverBase CustomInteractablesReceiver InteractableAudioReceiver InteractableOnClickReceiver InteractableOnFocusReceiver InteractableOnGrabReceiver InteractableOnHoldReceiver InteractableOnPressReceiver InteractableOnToggleReceiver InteractableOnTouchReceiver Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public abstract class ReceiverBase Constructors ReceiverBase(UnityEvent, String) Constructs an interaction receiver that will raise unity event when triggered. Declaration protected ReceiverBase(UnityEvent ev, string name) Parameters Type Name Description UnityEvent ev Unity event to invoke. Add more events in deriving class. String name Name of the unity event that will get invoked (visible in editor). Fields uEvent Declaration protected UnityEvent uEvent Field Value Type Description UnityEvent Properties Event Each Receiver has a base Event it raises, (in addition to others). Declaration public UnityEvent Event { get; set; } Property Value Type Description UnityEvent HideUnityEvents Defines whether Unity Events should be hidden in inspector for this type of EventReceiver Declaration public virtual bool HideUnityEvents { get; } Property Value Type Description Boolean Host Targeted component for Event Receiver at runtime Declaration public MonoBehaviour Host { get; set; } Property Value Type Description MonoBehaviour Name Name of Event Receiver Declaration public string Name { get; protected set; } Property Value Type Description String Methods OnClick(InteractableStates, Interactable, IMixedRealityPointer) A click event happened Declaration public virtual void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer OnUpdate(InteractableStates, Interactable) The state has changed Declaration public abstract void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) A voice command was called Declaration public virtual void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index Int32 length"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ReceiverBaseMonoBehavior.SearchScopes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ReceiverBaseMonoBehavior.SearchScopes.html",
    "title": "Enum ReceiverBaseMonoBehavior.SearchScopes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ReceiverBaseMonoBehavior.SearchScopes Types of directions to search for Interactable component in transform hierarchy Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum SearchScopes Fields Name Description Children Parent Self"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityToolkitFiles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityToolkitFiles.html",
    "title": "Class MixedRealityToolkitFiles | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitFiles API for working with MixedRealityToolkit folders contained in the project. Inheritance Object MixedRealityToolkitFiles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class MixedRealityToolkitFiles Remarks This class works by looking for sentinel files (following the pattern MRTK.*.sentinel, for example, MRTK.Core.sentinel) in order to identify where the MRTK is located within the project. If the MRTK is being consumed as code that sits within the Assets folder, the \"root\" MRTK folder must be at most three directories deep - this search code will only reason over MRTK folders that sit in a depth range [0, 3]. Properties AreFoldersAvailable Are any of the MRTK directories available? Declaration public static bool AreFoldersAvailable { get; } Property Value Type Description Boolean Remarks If a search is currently in progress, then property will wait synchronously for the task to finish with timeout of 1 second MRTKDirectories Returns a collection of MRTK Core directories found in the project. Declaration public static IEnumerable<string> MRTKDirectories { get; } Property Value Type Description IEnumerable < String > Remarks File/Folder paths returned are absolute, not relative Methods GetAssetDatabasePath(String) Maps an absolute path to be relative to the Project Root path (the Unity folder that contains Assets) Declaration public static string GetAssetDatabasePath(string absolutePath) Parameters Type Name Description String absolutePath The absolute path to the project. Returns Type Description String The project relative path. Remarks This doesn't produce paths that contain step out '..' relative paths. GetDirectories(MixedRealityToolkitModuleType) Get list of discovered directories for provided module type Declaration public static IEnumerable<string> GetDirectories(MixedRealityToolkitModuleType module) Parameters Type Name Description MixedRealityToolkitModuleType module Module type to filter against Returns Type Description IEnumerable < String > string list of discovered directory paths Remarks File/Folder paths returned are absolute, not relative GetFiles(MixedRealityToolkitModuleType, String) Returns files from all folder instances of the MRTK folder relative path. Declaration public static string[] GetFiles(MixedRealityToolkitModuleType module, string mrtkRelativeFolder) Parameters Type Name Description MixedRealityToolkitModuleType module String mrtkRelativeFolder The MRTK folder relative path to the target folder. Returns Type Description String [] The array of files. GetFiles(String) Returns files from all folder instances of the core MRTK folder relative path. Declaration public static string[] GetFiles(string mrtkRelativeFolder) Parameters Type Name Description String mrtkRelativeFolder The core MRTK folder relative path to the target folder. Returns Type Description String [] The array of files. GetModuleFromPackageFolder(String) Finds the module type, if found, from the specified package folder name. Declaration public static MixedRealityToolkitModuleType GetModuleFromPackageFolder(string packageFolder) Parameters Type Name Description String packageFolder The asset folder name (ex: MixedRealityToolkit.Providers) Returns Type Description MixedRealityToolkitModuleType MixedRealityToolkitModuleType associated with the package folder name. Returns MixedRealityToolkitModuleType.None if an appropriate module type could not be found. MapModulePath(MixedRealityToolkitModuleType) Get the relative asset folder path to the provided Module type Declaration public static string MapModulePath(MixedRealityToolkitModuleType module) Parameters Type Name Description MixedRealityToolkitModuleType module Module type to search for Returns Type Description String Remarks Returns first valid module folder path (relative) found MapRelativeFilePath(MixedRealityToolkitModuleType, String) Maps a single relative path file to a concrete path from one of the MRTK folders, if found. Otherwise returns null. Declaration public static string MapRelativeFilePath(MixedRealityToolkitModuleType module, string mrtkPathToFile) Parameters Type Name Description MixedRealityToolkitModuleType module String mrtkPathToFile The MRTK folder relative path to the file. Returns Type Description String The project relative path to the file. MapRelativeFilePath(String) Maps a single relative path file to a concrete path from one of the core MRTK folders, if found. Otherwise returns null. Declaration public static string MapRelativeFilePath(string mrtkPathToFile) Parameters Type Name Description String mrtkPathToFile The core MRTK folder relative path to the file. Returns Type Description String The project relative path to the file. MapRelativeFilePathToAbsolutePath(MixedRealityToolkitModuleType, String) Overload of MapRelativeFilePathToAbsolutePath which provides the ability to specify the module that the file belongs to. Declaration public static string MapRelativeFilePathToAbsolutePath(MixedRealityToolkitModuleType module, string mrtkPathToFile) Parameters Type Name Description MixedRealityToolkitModuleType module String mrtkPathToFile Returns Type Description String Remarks When searching for a resource that lives in the MixedRealityToolkit.SDK folder, this could be invoked in this way: MapRelativeFilePathToAbsolutePath(MixedRealityToolkitModuleType.SDK, mrtkPathToFile) MapRelativeFilePathToAbsolutePath(String) Maps a single relative path file to MRTK folders to its absolute path, if found. Otherwise returns null. Declaration public static string MapRelativeFilePathToAbsolutePath(string mrtkPathToFile) Parameters Type Name Description String mrtkPathToFile Returns Type Description String Remarks For example, this will map \"Inspectors\\Data\\EditorWindowOptions.json\" to its full path like \"c:\\project\\Assets\\Libs\\MRTK\\MixedRealityToolkit\\Inspectors\\Data\\EditorWindowOptions.json\". This assumes that the passed in mrtkPathToFile is found under the \"MixedRealityToolkit\" folder (instead of the MixedRealityToolkit.SDK, or any of the other folders). MapRelativeFolderPathToAbsolutePath(MixedRealityToolkitModuleType, String) Similar to MapRelativeFilePathToAbsolutePath, except this checks for the existence of a folder instead of file. Declaration public static string MapRelativeFolderPathToAbsolutePath(MixedRealityToolkitModuleType module, string mrtkPathToFolder) Parameters Type Name Description MixedRealityToolkitModuleType module String mrtkPathToFolder Returns Type Description String Remarks Returns first valid path found RefreshFolders() Force refresh of MRTK tracked folders. Fires and forgets async call. Returns immediately Declaration public static void RefreshFolders() Remarks Kicks off async refresh of the MRTK folder database. WaitForFolderRefresh() Get task tracking folder refresh if component wants to wait for files to be ready Declaration public static Task WaitForFolderRefresh() Returns Type Description Task"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityToolkitModuleType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityToolkitModuleType.html",
    "title": "Enum MixedRealityToolkitModuleType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityToolkitModuleType Base folder types for modules searched by the MixedRealityToolkitFiles utility. Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public enum MixedRealityToolkitModuleType Fields Name Description AdhocTesting Core Examples Extensions Generated None Providers SDK Services Tests Tools"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.SpeechInputHandlerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.SpeechInputHandlerInspector.html",
    "title": "Class SpeechInputHandlerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechInputHandlerInspector Inheritance Object BaseInputHandlerInspector SpeechInputHandlerInspector Inherited Members BaseInputHandlerInspector.CheckMixedRealityToolkit() Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class SpeechInputHandlerInspector : BaseInputHandlerInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseInputHandlerInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseInputHandlerInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Input.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Input.Editor Classes BaseControllerPointerInspector BaseInputHandlerInspector ControllerInputActionOption Used to aid in layout of Controller Input Actions. ControllerInputActionOptions Used to aid in layout of Controller Input Actions. ControllerPoseSynchronizerInspector InputActionPropertyDrawer InputMappingAxisUtility Utility class for Unity's Input Manager Mappings. MixedRealityControllerMappingProfileInspector MixedRealityControllerVisualizationProfileInspector MixedRealityControllerVisualizerInspector MixedRealityGesturesProfileInspector MixedRealityInputActionRulesInspector MixedRealityInputActionsProfileInspector MixedRealityInputSystemProfileInspector MixedRealityPointerProfileInspector SpeechCommandPropertyDrawer SpeechInputHandlerInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.EyeTrackingTarget.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.EyeTrackingTarget.html",
    "title": "Class EyeTrackingTarget | Mixed Reality Toolkit Documentation",
    "keywords": "Class EyeTrackingTarget A game object with the \"EyeTrackingTarget\" script attached reacts to being looked at independent of other available inputs. Inheritance Object InputSystemGlobalHandlerListener EyeTrackingTarget Implements IMixedRealityPointerHandler IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler Inherited Members InputSystemGlobalHandlerListener.OnEnable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class EyeTrackingTarget : InputSystemGlobalHandlerListener, IMixedRealityPointerHandler, IMixedRealitySpeechHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Properties EyeCursorSnapToTargetCenter If true, the eye cursor (if enabled) will snap to the center of this object. Declaration public bool EyeCursorSnapToTargetCenter { get; set; } Property Value Type Description Boolean IsDwelledOn Returns true if the user has been looking at the target for a certain amount of time specified by dwellTimeInSec. Declaration public bool IsDwelledOn { get; } Property Value Type Description Boolean IsLookedAt Returns true if the user looks at the target or more specifically when the eye gaze ray intersects with the target's bounding box. Declaration public bool IsLookedAt { get; } Property Value Type Description Boolean LookedAtEyeTarget Declaration public static EyeTrackingTarget LookedAtEyeTarget { get; } Property Value Type Description EyeTrackingTarget LookedAtPoint Declaration public static Vector3 LookedAtPoint { get; } Property Value Type Description Vector3 LookedAtTarget Declaration public static GameObject LookedAtTarget { get; } Property Value Type Description GameObject OnDwell Event is triggered when the target has been looked at for a given predefined duration (dwellTimeInSec). Declaration public UnityEvent OnDwell { get; set; } Property Value Type Description UnityEvent OnLookAtStart Event is triggered when the user starts to look at the target. Declaration public UnityEvent OnLookAtStart { get; set; } Property Value Type Description UnityEvent OnLookAway Event to be triggered when the user is looking away from the target. Declaration public UnityEvent OnLookAway { get; set; } Property Value Type Description UnityEvent OnSelected Event is triggered when the looked at target is selected. Declaration public UnityEvent OnSelected { get; set; } Property Value Type Description UnityEvent WhileLookingAtTarget Event is triggered when the user continues to look at the target. Declaration public UnityEvent WhileLookingAtTarget { get; set; } Property Value Type Description UnityEvent Methods OnDisable() Declaration protected override void OnDisable() Overrides InputSystemGlobalHandlerListener.OnDisable() OnEyeFocusDwell() Declaration protected void OnEyeFocusDwell() OnEyeFocusStart() Declaration protected void OnEyeFocusStart() OnEyeFocusStay() Declaration protected void OnEyeFocusStay() OnEyeFocusStop() Declaration protected void OnEyeFocusStop() RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() Start() Declaration protected override void Start() Overrides InputSystemGlobalHandlerListener.Start() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Explicit Interface Implementations IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealitySpeechHandler.OnSpeechKeywordRecognized(SpeechEventData) Declaration void IMixedRealitySpeechHandler.OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData Implements IMixedRealityPointerHandler IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.FingerCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.FingerCursor.html",
    "title": "Class FingerCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class FingerCursor Cursor used to aide in near finger interactions. Inheritance Object BaseCursor FingerCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseCursor.CursorState BaseCursor.CursorContext BaseCursor.SurfaceCursorDistance BaseCursor.UseUnscaledTime BaseCursor.PositionLerpTime BaseCursor.ScaleLerpTime BaseCursor.RotationLerpTime BaseCursor.LookRotationBlend BaseCursor.ResizeCursorWithDistance BaseCursor.CursorAngularScale BaseCursor.CursorAngularSize BaseCursor.PrimaryCursorVisual BaseCursor.IsSourceDetected BaseCursor.SourceDownIds BaseCursor.IsPointerDown BaseCursor.TargetedObject BaseCursor.VisibleSourcesCount BaseCursor.targetPosition BaseCursor.targetScale BaseCursor.targetRotation BaseCursor.Pointer BaseCursor.IsPointerValid BaseCursor.DefaultCursorDistance BaseCursor.Position BaseCursor.Rotation BaseCursor.LocalScale BaseCursor.SetVisibility(Boolean) BaseCursor.Destroy() BaseCursor.IsVisible BaseCursor.SetVisibilityOnSourceDetected BaseCursor.GameObjectReference BaseCursor.OnSourceDetected(SourceStateEventData) BaseCursor.OnSourceLost(SourceStateEventData) BaseCursor.OnBeforeFocusChange(FocusEventData) BaseCursor.OnFocusChanged(FocusEventData) BaseCursor.OnPointerDown(MixedRealityPointerEventData) BaseCursor.OnPointerDragged(MixedRealityPointerEventData) BaseCursor.OnPointerClicked(MixedRealityPointerEventData) BaseCursor.OnPointerUp(MixedRealityPointerEventData) BaseCursor.Start() BaseCursor.OnEnable() BaseCursor.OnDisable() BaseCursor.RegisterManagers() BaseCursor.UnregisterManagers() BaseCursor.LerpToTargetTransform() BaseCursor.SnapToTargetTransform() BaseCursor.OnInputDisabled() BaseCursor.OnInputEnabled() BaseCursor.CheckCursorState() BaseCursor.CheckCursorContext() BaseCursor.OnCursorStateChange(CursorStateEnum) BaseCursor.OnCursorContextChange(CursorContextEnum) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class FingerCursor : BaseCursor, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Fields indexFingerRingRenderer Declaration protected Renderer indexFingerRingRenderer Field Value Type Description Renderer Methods Awake() Declaration protected virtual void Awake() IsNearGrabbableObject(out Single) Gets if the associated sphere pointer on this controller is near any grabbable objects. Declaration protected virtual bool IsNearGrabbableObject(out float dist) Parameters Type Name Description Single dist Out parameter gets the distance to the grabbable. Returns Type Description Boolean True if associated sphere pointer is near any grabbable objects, else false. TryGetJoint(TrackedHandJoint, out Vector3, out Quaternion) Tries and get's hand joints based on the current pointer. Declaration protected bool TryGetJoint(TrackedHandJoint joint, out Vector3 position, out Quaternion rotation) Parameters Type Name Description TrackedHandJoint joint The joint type to get. Vector3 position Out parameter filled with joint position, otherwise Vector3.zero Quaternion rotation Out parameter filled with joint rotation, otherwise Quaternion.identity Returns Type Description Boolean UpdateCursorTransform() Override base behavior to align the cursor with the finger, else perform normal cursor transformations. Declaration protected override void UpdateCursorTransform() Overrides BaseCursor.UpdateCursorTransform() UpdateVisuals(Renderer, Single, Boolean) Applies material overrides to a ring renderer. Declaration protected virtual void UpdateVisuals(Renderer ringRenderer, float distance, bool visible) Parameters Type Name Description Renderer ringRenderer Renderer using an MRTK/Standard material with the round corner feature enabled. Single distance Distance between the ring and surface. Boolean visible Should the ring be visible? Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.BaseMeshOutline.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.BaseMeshOutline.html",
    "title": "Class BaseMeshOutline | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMeshOutline Abstract component to encapsulate common functionality around outline components. Inheritance Object BaseMeshOutline MeshOutline MeshOutlineHierarchy Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class BaseMeshOutline : MonoBehaviour Fields outlineMaterial Declaration protected Material outlineMaterial Field Value Type Description Material outlineWidth Declaration protected float outlineWidth Field Value Type Description Single Properties OutlineMaterial The material used to render the outline. Outline materials should normal have \"Depth Write\" set to Off and \"Vertex Extrusion\" enabled. Most MRTK/Standard features should work as an outline material, but it is recommended to keep the outline material as simple as possible. Declaration public Material OutlineMaterial { get; set; } Property Value Type Description Material OutlineWidth How thick (in meters) should the outline be. Overrides the \"Extrusion Value\" in the MRTK/Standard material. Declaration public float OutlineWidth { get; set; } Property Value Type Description Single Methods ApplyOutlineMaterial() Declaration protected abstract void ApplyOutlineMaterial() ApplyOutlineWidth() Declaration protected abstract void ApplyOutlineWidth() OnValidate() Enables users to modify inspector properties while playing in the editor. Declaration protected virtual void OnValidate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.BaseMixedRealityLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.BaseMixedRealityLineDataProvider.html",
    "title": "Class BaseMixedRealityLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityLineDataProvider Base class that provides data about a line. Inheritance Object BaseMixedRealityLineDataProvider BezierDataProvider EllipseLineDataProvider ParabolaLineDataProvider RectangleLineDataProvider SimpleLineDataProvider SplineDataProvider Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityLineDataProvider : MonoBehaviour Remarks Data to be consumed by other classes like the BaseMixedRealityLineRenderer Fields UnclampedWorldLengthSearchSteps Declaration protected const int UnclampedWorldLengthSearchSteps = 10 Field Value Type Description Int32 Properties Distorters A list of distorters that apply to this line Declaration public List<Distorter> Distorters { get; } Property Value Type Description List < Distorter > DistortionEnabled Enabled / disables all distorters used by line. Declaration public bool DistortionEnabled { get; set; } Property Value Type Description Boolean DistortionMode NormalizedLength mode uses the DistortionStrength curve for distortion strength, Uniform uses UniformDistortionStrength along entire line Declaration public DistortionMode DistortionMode { get; set; } Property Value Type Description DistortionMode DistortionStrength Declaration public AnimationCurve DistortionStrength { get; set; } Property Value Type Description AnimationCurve FirstPoint Declaration public Vector3 FirstPoint { get; set; } Property Value Type Description Vector3 FlipUpVector Reverses up vector when determining rotation along line Declaration public bool FlipUpVector { get; set; } Property Value Type Description Boolean LastPoint Declaration public Vector3 LastPoint { get; set; } Property Value Type Description Vector3 LineEndClamp Clamps the line's normalized end point. This setting will affect line renderers. Declaration public float LineEndClamp { get; set; } Property Value Type Description Single LineStartClamp Clamps the line's normalized start point. This setting will affect line renderers. Declaration public float LineStartClamp { get; set; } Property Value Type Description Single LineTransform Transform to use when translating points from local to world space. If null, this object's transform is used. Declaration public Transform LineTransform { get; set; } Property Value Type Description Transform Loops Controls whether this line loops Declaration public virtual bool Loops { get; set; } Property Value Type Description Boolean Remarks Some classes override this setting. ManualUpVectorBlend The weight of manual up vectors in Velocity rotation mode Declaration public float ManualUpVectorBlend { get; set; } Property Value Type Description Single ManualUpVectors These vectors are used with ManualUpVectorBlend to determine rotation along the line in Velocity rotation mode. Vectors are distributed along the normalized length of the line. Declaration public Vector3[] ManualUpVectors { get; set; } Property Value Type Description Vector3 [] OriginOffset Local space offset to transform position. Used to determine rotation along line in RelativeToOrigin rotation mode Declaration public Vector3 OriginOffset { get; set; } Property Value Type Description Vector3 PointCount The number of points this line has. Declaration public abstract int PointCount { get; } Property Value Type Description Int32 RotationMode The rotation mode used in the GetRotation function. You can visualize rotations by checking Draw Rotations under Editor Settings. Declaration public LineRotationMode RotationMode { get; set; } Property Value Type Description LineRotationMode TransformMode Defines how a base line data provider will transform its points Declaration public LinePointTransformMode TransformMode { get; set; } Property Value Type Description LinePointTransformMode UnClampedWorldLength Declaration public float UnClampedWorldLength { get; } Property Value Type Description Single UniformDistortionStrength Declaration public float UniformDistortionStrength { get; set; } Property Value Type Description Single VelocitySearchRange Used in Velocity rotation mode. Declaration public float VelocitySearchRange { get; set; } Property Value Type Description Single Remarks Smaller values are more accurate but more expensive Methods DrawUnselectedGizmosPreview() Declaration protected virtual void DrawUnselectedGizmosPreview() GetClosestPoint(Vector3, Int32, Int32) Iterates along line until it finds the point closest to worldPosition Declaration public Vector3 GetClosestPoint(Vector3 worldPosition, int resolution = 5, int maxIterations = 5) Parameters Type Name Description Vector3 worldPosition Int32 resolution Int32 maxIterations Returns Type Description Vector3 GetNormalizedLengthFromWorldLength(Single, Int32) Returns a normalized length corresponding to a world length Useful for determining LineStartClamp / LineEndClamp values Declaration public float GetNormalizedLengthFromWorldLength(float worldLength, int searchResolution = 10) Parameters Type Name Description Single worldLength Int32 searchResolution Returns Type Description Single GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) Iterates along line until it finds the length closest to worldposition. Declaration public float GetNormalizedLengthFromWorldPos(Vector3 worldPosition, int resolution = 5, int maxIterations = 5) Parameters Type Name Description Vector3 worldPosition Int32 resolution Int32 maxIterations Returns Type Description Single GetPoint(Int32) Gets a point along the line at the specified index Declaration public Vector3 GetPoint(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 GetPoint(Single) Gets a point along the line at the specified normalized length. Declaration public Vector3 GetPoint(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected abstract Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected abstract Vector3 GetPointInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetRotation(Int32, LineRotationMode) Gets the rotation of a point along the line at the specified index Declaration public Quaternion GetRotation(int pointIndex, LineRotationMode lineRotationMode = LineRotationMode.None) Parameters Type Name Description Int32 pointIndex LineRotationMode lineRotationMode Returns Type Description Quaternion GetRotation(Single, LineRotationMode) Gets the rotation of a point along the line at the specified length Declaration public Quaternion GetRotation(float normalizedLength, LineRotationMode lineRotationMode = LineRotationMode.None) Parameters Type Name Description Single normalizedLength LineRotationMode lineRotationMode Returns Type Description Quaternion GetUnClampedPoint(Single) Gets a point along the line at the specified length without using LineStartClamp or LineEndClamp Declaration public Vector3 GetUnClampedPoint(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected abstract float GetUnClampedWorldLengthInternal() Returns Type Description Single GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected virtual Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 GetVelocity(Single) Gets the velocity along the line Declaration public Vector3 GetVelocity(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 LateUpdate() Declaration protected virtual void LateUpdate() OnEnable() Declaration protected virtual void OnEnable() SetPoint(Int32, Vector3) Sets a point in the line This function is not guaranteed to have an effect Declaration public void SetPoint(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected abstract void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point UpdateMatrix() Declaration public void UpdateMatrix()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.BaseMixedRealityLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.BaseMixedRealityLineRenderer.html",
    "title": "Class BaseMixedRealityLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityLineRenderer Base class for Mixed Reality Line Renderers. Inheritance Object BaseMixedRealityLineRenderer MeshLineRenderer MixedRealityLineRenderer ParticleSystemLineRenderer StripMeshLineRenderer Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityLineRenderer : MonoBehaviour Fields lineDataSource Declaration protected BaseMixedRealityLineDataProvider lineDataSource Field Value Type Description BaseMixedRealityLineDataProvider Properties ColorOffset Normalized offset for color gradient Declaration public float ColorOffset { get; set; } Property Value Type Description Single LineColor Color gradient applied to line's normalized length Declaration public Gradient LineColor { get; set; } Property Value Type Description Gradient LineDataSource The line data this component will render Declaration public BaseMixedRealityLineDataProvider LineDataSource { get; set; } Property Value Type Description BaseMixedRealityLineDataProvider LineStepCount Number of steps to interpolate along line in Interpolated step mode Declaration public int LineStepCount { get; set; } Property Value Type Description Int32 LineWidth Declaration public AnimationCurve LineWidth { get; set; } Property Value Type Description AnimationCurve PointDistributionMode Method for distributing rendered points along line. Declaration public PointDistributionMode PointDistributionMode { get; set; } Property Value Type Description PointDistributionMode StepMode Method for gathering points along line. Interpolated uses normalized length. FromSource uses line's base points. (FromSource may not look right for all LineDataProvider types.) Declaration public StepMode StepMode { get; set; } Property Value Type Description StepMode WidthMultiplier Declaration public float WidthMultiplier { get; set; } Property Value Type Description Single WidthOffset Normalized offset for width curve Declaration public float WidthOffset { get; set; } Property Value Type Description Single Methods GetColor(Single) Get the Color along the normalized length of the line. Declaration protected virtual Color GetColor(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Color GetNormalizedPointAlongLine(Int32) Declaration protected virtual float GetNormalizedPointAlongLine(int stepNum) Parameters Type Name Description Int32 stepNum Returns Type Description Single GetWidth(Single) Get the width of the line along the normalized length of the line. Declaration protected virtual float GetWidth(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Single UpdateLine() Declaration protected abstract void UpdateLine()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.BaseObjectCollection.html",
    "title": "Class BaseObjectCollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseObjectCollection Inheritance Object BaseObjectCollection GridObjectCollection Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class BaseObjectCollection : MonoBehaviour Properties IgnoreInactiveTransforms Whether to include space for inactive transforms in the layout Declaration public bool IgnoreInactiveTransforms { get; set; } Property Value Type Description Boolean NodeList List of objects with generated data on the object. Declaration protected List<ObjectCollectionNode> NodeList { get; } Property Value Type Description List < ObjectCollectionNode > OnCollectionUpdated Action called when collection is updated Declaration public Action<BaseObjectCollection> OnCollectionUpdated { get; set; } Property Value Type Description Action < BaseObjectCollection > SortType Type of sorting to use. Declaration public CollationOrder SortType { get; set; } Property Value Type Description CollationOrder Methods ContainsNode(Transform) Check if a node exists in the NodeList. Declaration protected bool ContainsNode(Transform node) Parameters Type Name Description Transform node The Transfrom belonging to the ObjectCollectionNode Returns Type Description Boolean true when node belongs to an element of the list. ContainsNode(Transform, out Int32) Check if a node exists in the NodeList. Declaration protected bool ContainsNode(Transform node, out int nodeIndex) Parameters Type Name Description Transform node The Transform belonging to ObjectCollectionNode Int32 nodeIndex The index of the element in NodeList Returns Type Description Boolean true when node belongs to an element of the list. LayoutChildren() Implement for laying out all children when UpdateCollection is called. Declaration protected abstract void LayoutChildren() PruneEmptyNodes() Checks for empty nodes and removes them Declaration protected void PruneEmptyNodes() SortNodes() Sorts NodeList based on SortType Declaration protected void SortNodes() UpdateCollection() Rebuilds / updates the collection layout. Update collection is called from the editor button on the inspector. Declaration public virtual void UpdateCollection()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.BezierDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.BezierDataProvider.html",
    "title": "Class BezierDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class BezierDataProvider Inheritance Object BaseMixedRealityLineDataProvider BezierDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class BezierDataProvider : BaseMixedRealityLineDataProvider Properties PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.BezierInertia.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.BezierInertia.html",
    "title": "Class BezierInertia | Mixed Reality Toolkit Documentation",
    "keywords": "Class BezierInertia Inheritance Object BezierInertia Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class BezierInertia : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.CameraCache.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.CameraCache.html",
    "title": "Class CameraCache | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraCache The purpose of this class is to provide a cached reference to the main camera. Calling Camera.main executes a FindByTag on the scene, which will get worse and worse with more tagged objects. Inheritance Object CameraCache Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class CameraCache Properties Main Returns a cached reference to the main camera and uses Camera.main if it hasn't been cached yet. Declaration public static Camera Main { get; } Property Value Type Description Camera"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.CameraEventRouter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.CameraEventRouter.html",
    "title": "Class CameraEventRouter | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraEventRouter A helper class to provide hooks into the Unity camera exclusive Lifecycle events Inheritance Object CameraEventRouter Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class CameraEventRouter : MonoBehaviour Events OnCameraPreRender A callback to act upon MonoBehaviour.OnPreRender() without a script needing to exist on a Camera component Declaration public event Action<CameraEventRouter> OnCameraPreRender Event Type Type Description Action < CameraEventRouter >"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingBox.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingBox.html",
    "title": "Class ClippingBox | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingBox Component to animate and visualize a box that can be used with per pixel based clipping. Inheritance Object ClippingPrimitive ClippingBox Implements IMaterialInstanceOwner Inherited Members ClippingPrimitive.renderers ClippingPrimitive.clippingSide ClippingPrimitive.ClippingSide ClippingPrimitive.UseOnPreRender ClippingPrimitive.materialPropertyBlock ClippingPrimitive.AddRenderer(Renderer) ClippingPrimitive.RemoveRenderer(Renderer) ClippingPrimitive.ClearRenderers() ClippingPrimitive.GetRenderersCopy() ClippingPrimitive.OnEnable() ClippingPrimitive.OnDisable() ClippingPrimitive.LateUpdate() ClippingPrimitive.OnCameraPreRender(CameraEventRouter) ClippingPrimitive.OnDestroy() ClippingPrimitive.OnMaterialChanged(MaterialInstance) ClippingPrimitive.UpdateRenderers() ClippingPrimitive.ToggleClippingFeature(Boolean) ClippingPrimitive.ToggleClippingFeature(Material[], Boolean) ClippingPrimitive.ToggleClippingFeature(Material, Boolean) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ClippingBox : ClippingPrimitive, IMaterialInstanceOwner Properties ClippingSideProperty Declaration protected override string ClippingSideProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.ClippingSideProperty Keyword Declaration protected override string Keyword { get; } Property Value Type Description String Overrides ClippingPrimitive.Keyword Methods Initialize() Declaration protected override void Initialize() Overrides ClippingPrimitive.Initialize() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Overrides ClippingPrimitive.UpdateShaderProperties(MaterialPropertyBlock) Implements IMaterialInstanceOwner"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingPlane.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingPlane.html",
    "title": "Class ClippingPlane | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPlane Component to animate and visualize a plane that can be used with per pixel based clipping. Inheritance Object ClippingPrimitive ClippingPlane Implements IMaterialInstanceOwner Inherited Members ClippingPrimitive.renderers ClippingPrimitive.clippingSide ClippingPrimitive.ClippingSide ClippingPrimitive.UseOnPreRender ClippingPrimitive.materialPropertyBlock ClippingPrimitive.AddRenderer(Renderer) ClippingPrimitive.RemoveRenderer(Renderer) ClippingPrimitive.ClearRenderers() ClippingPrimitive.GetRenderersCopy() ClippingPrimitive.OnEnable() ClippingPrimitive.OnDisable() ClippingPrimitive.LateUpdate() ClippingPrimitive.OnCameraPreRender(CameraEventRouter) ClippingPrimitive.OnDestroy() ClippingPrimitive.OnMaterialChanged(MaterialInstance) ClippingPrimitive.UpdateRenderers() ClippingPrimitive.ToggleClippingFeature(Boolean) ClippingPrimitive.ToggleClippingFeature(Material[], Boolean) ClippingPrimitive.ToggleClippingFeature(Material, Boolean) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ClippingPlane : ClippingPrimitive, IMaterialInstanceOwner Properties ClippingSideProperty Declaration protected override string ClippingSideProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.ClippingSideProperty Keyword Declaration protected override string Keyword { get; } Property Value Type Description String Overrides ClippingPrimitive.Keyword Methods Initialize() Declaration protected override void Initialize() Overrides ClippingPrimitive.Initialize() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Overrides ClippingPrimitive.UpdateShaderProperties(MaterialPropertyBlock) Implements IMaterialInstanceOwner"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingPrimitive.Side.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingPrimitive.Side.html",
    "title": "Enum ClippingPrimitive.Side | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ClippingPrimitive.Side Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum Side Fields Name Description Inside Outside"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingPrimitive.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingPrimitive.html",
    "title": "Class ClippingPrimitive | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPrimitive An abstract primitive component to animate and visualize a clipping primitive that can be used to drive per pixel based clipping. Inheritance Object ClippingPrimitive ClippingBox ClippingPlane ClippingSphere Implements IMaterialInstanceOwner Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class ClippingPrimitive : MonoBehaviour, IMaterialInstanceOwner Fields clippingSide Declaration protected ClippingPrimitive.Side clippingSide Field Value Type Description ClippingPrimitive.Side materialPropertyBlock Declaration protected MaterialPropertyBlock materialPropertyBlock Field Value Type Description MaterialPropertyBlock renderers Declaration protected List<Renderer> renderers Field Value Type Description List < Renderer > Properties ClippingSide The renderer(s) that should be affected by the primitive. Declaration public ClippingPrimitive.Side ClippingSide { get; set; } Property Value Type Description ClippingPrimitive.Side ClippingSideProperty Declaration protected abstract string ClippingSideProperty { get; } Property Value Type Description String Keyword Declaration protected abstract string Keyword { get; } Property Value Type Description String UseOnPreRender Toggles whether the primitive will use the Camera OnPreRender event. Declaration public bool UseOnPreRender { get; set; } Property Value Type Description Boolean Remarks This is especially helpful if you're trying to clip dynamically created objects that may be added to the scene after LateUpdate such as OnWillRender Methods AddRenderer(Renderer) Adds a renderer to the list of objects this clipping primitive clips. Declaration public void AddRenderer(Renderer _renderer) Parameters Type Name Description Renderer _renderer ClearRenderers() Removes all renderers in the list of objects this clipping primitive clips. Declaration public void ClearRenderers() GetRenderersCopy() Returns a copy of the current list of renderers. Declaration public IEnumerable<Renderer> GetRenderersCopy() Returns Type Description IEnumerable < Renderer > The current list of renderers. Initialize() Declaration protected virtual void Initialize() LateUpdate() Declaration protected void LateUpdate() OnCameraPreRender(CameraEventRouter) Declaration protected void OnCameraPreRender(CameraEventRouter router) Parameters Type Name Description CameraEventRouter router OnDestroy() Declaration protected void OnDestroy() OnDisable() Declaration protected void OnDisable() OnEnable() Declaration protected void OnEnable() OnMaterialChanged(MaterialInstance) Declaration public void OnMaterialChanged(MaterialInstance materialInstance) Parameters Type Name Description MaterialInstance materialInstance RemoveRenderer(Renderer) Removes a renderer to the list of objects this clipping primitive clips. Declaration public void RemoveRenderer(Renderer _renderer) Parameters Type Name Description Renderer _renderer ToggleClippingFeature(Material, Boolean) Declaration protected void ToggleClippingFeature(Material material, bool keywordOn) Parameters Type Name Description Material material Boolean keywordOn ToggleClippingFeature(Material[], Boolean) Declaration protected void ToggleClippingFeature(Material[] materials, bool keywordOn) Parameters Type Name Description Material [] materials Boolean keywordOn ToggleClippingFeature(Boolean) Declaration protected void ToggleClippingFeature(bool keywordOn) Parameters Type Name Description Boolean keywordOn UpdateRenderers() Declaration protected virtual void UpdateRenderers() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected abstract void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Implements IMaterialInstanceOwner"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.Interpolator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.Interpolator.html",
    "title": "Class Interpolator | Mixed Reality Toolkit Documentation",
    "keywords": "Class Interpolator A MonoBehaviour that interpolates a transform's position, rotation or scale. Inheritance Object Interpolator Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class Interpolator : MonoBehaviour Properties AnimatingLocalRotation True if the transform's local rotation is animating; false otherwise. Declaration public bool AnimatingLocalRotation { get; } Property Value Type Description Boolean AnimatingLocalScale True if the transform's scale is animating; false otherwise. Declaration public bool AnimatingLocalScale { get; } Property Value Type Description Boolean AnimatingPosition True if the transform's position is animating; false otherwise. Declaration public bool AnimatingPosition { get; } Property Value Type Description Boolean AnimatingRotation True if the transform's rotation is animating; false otherwise. Declaration public bool AnimatingRotation { get; } Property Value Type Description Boolean PositionVelocity The velocity of a transform whose position is being interpolated. Declaration public Vector3 PositionVelocity { get; } Property Value Type Description Vector3 Running True if position, rotation or scale are animating; false otherwise. Declaration public bool Running { get; } Property Value Type Description Boolean SmoothLerpToTarget Lerp the estimated targets towards the object each update, slowing and smoothing movement. Declaration public bool SmoothLerpToTarget { get; set; } Property Value Type Description Boolean SmoothPositionLerpRatio Declaration public float SmoothPositionLerpRatio { get; set; } Property Value Type Description Single SmoothRotationLerpRatio Declaration public float SmoothRotationLerpRatio { get; set; } Property Value Type Description Single SmoothScaleLerpRatio Declaration public float SmoothScaleLerpRatio { get; set; } Property Value Type Description Single TargetLocalRotation If animating local rotation, specifies the target local rotation as specified by SetTargetLocalRotation. Otherwise returns the current local rotation of the transform. Declaration public Quaternion TargetLocalRotation { get; } Property Value Type Description Quaternion TargetLocalScale If animating local scale, specifies the target local scale as specified by SetTargetLocalScale. Otherwise returns the current local scale of the transform. Declaration public Vector3 TargetLocalScale { get; } Property Value Type Description Vector3 TargetPosition If animating position, specifies the target position as specified by SetTargetPosition. Otherwise returns the current position of the transform. Declaration public Vector3 TargetPosition { get; } Property Value Type Description Vector3 TargetRotation If animating rotation, specifies the target rotation as specified by SetTargetRotation. Otherwise returns the current rotation of the transform. Declaration public Quaternion TargetRotation { get; } Property Value Type Description Quaternion Methods NonLinearInterpolateTo(Vector3, Vector3, Single, Single) Interpolates smoothly to a target position. Declaration public static Vector3 NonLinearInterpolateTo(Vector3 start, Vector3 target, float deltaTime, float speed) Parameters Type Name Description Vector3 start The starting position. Vector3 target The destination position. Single deltaTime Caller-provided Time.deltaTime. Single speed The speed to apply to the interpolation. Returns Type Description Vector3 New interpolated position closer to target Reset() Stops the transform in place and terminates any animations. Declaration public void Reset() Remarks Reset() is usually reserved as a MonoBehaviour API call in editor, but is used in this case as a convenience method. SetTargetLocalRotation(Quaternion) Sets the target local rotation for the transform and if rotation wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetLocalRotation(Quaternion target) Parameters Type Name Description Quaternion target The new target local rotation for the transform. SetTargetLocalScale(Vector3) Sets the target local scale for the transform and if scale wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetLocalScale(Vector3 target) Parameters Type Name Description Vector3 target The new target local rotation for the transform. SetTargetPosition(Vector3) Sets the target position for the transform and if position wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetPosition(Vector3 target) Parameters Type Name Description Vector3 target The new target position to for the transform. SetTargetRotation(Quaternion) Sets the target rotation for the transform and if rotation wasn't already animating, fires the InterpolationStarted event. Declaration public void SetTargetRotation(Quaternion target) Parameters Type Name Description Quaternion target The new target rotation for the transform. SnapToTarget() Snaps to the final target and stops interpolating Declaration public void SnapToTarget() StopInterpolating() Stops the interpolation regardless if it has reached the target Declaration public void StopInterpolating() Events InterpolationDone The event fired when an Interpolation is completed. Declaration public event Action InterpolationDone Event Type Type Description Action InterpolationStarted The event fired when an Interpolation is started. Declaration public event Action InterpolationStarted Event Type Type Description Action"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.MixedRealityRaycaster.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.MixedRealityRaycaster.html",
    "title": "Class MixedRealityRaycaster | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityRaycaster Inheritance Object MixedRealityRaycaster Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public static class MixedRealityRaycaster Fields DebugEnabled Declaration public static bool DebugEnabled Field Value Type Description Boolean Methods RaycastBoxPhysicsStep(RayStep, Vector3, Vector3, Matrix4x4, Single, LayerMask[], Int32, Boolean, Boolean, out Vector3[], out Vector3[], out Boolean[]) Box raycasts each physics RayStep . Declaration public static bool RaycastBoxPhysicsStep(RayStep step, Vector3 extents, Vector3 targetPosition, Matrix4x4 matrix, float maxDistance, LayerMask[] prioritizedLayerMasks, int raysPerEdge, bool isOrthographic, bool focusIndividualCompoundCollider, out Vector3[] points, out Vector3[] normals, out bool[] hits) Parameters Type Name Description RayStep step Vector3 extents Vector3 targetPosition Matrix4x4 matrix Single maxDistance LayerMask [] prioritizedLayerMasks Int32 raysPerEdge Boolean isOrthographic Boolean focusIndividualCompoundCollider Vector3 [] points Vector3 [] normals Boolean [] hits Returns Type Description Boolean Whether or not the raycast hit something. RaycastPlanePhysicsStep(RayStep, Plane, out Vector3) Intersection test of ray step with given plane. Declaration public static bool RaycastPlanePhysicsStep(RayStep step, Plane plane, out Vector3 hitPoint) Parameters Type Name Description RayStep step Plane plane Vector3 hitPoint Returns Type Description Boolean Whether the ray step intersects the ray step. RaycastSimplePhysicsStep(RayStep, LayerMask[], Boolean, out RaycastHit) Simple raycasts each physics RayStep . Declaration public static bool RaycastSimplePhysicsStep(RayStep step, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out RaycastHit physicsHit) Parameters Type Name Description RayStep step LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. RaycastSimplePhysicsStep(RayStep, Single, LayerMask[], Boolean, out RaycastHit) Simple raycasts each physics RayStep within a specified maximum distance. Declaration public static bool RaycastSimplePhysicsStep(RayStep step, float maxDistance, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out RaycastHit physicsHit) Parameters Type Name Description RayStep step Single maxDistance LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. RaycastSpherePhysicsStep(RayStep, Single, LayerMask[], Boolean, out RaycastHit) Sphere raycasts each physics RayStep . Declaration public static bool RaycastSpherePhysicsStep(RayStep step, float radius, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out RaycastHit physicsHit) Parameters Type Name Description RayStep step Single radius LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. RaycastSpherePhysicsStep(RayStep, Single, Single, LayerMask[], Boolean, out RaycastHit) Sphere raycasts each physics RayStep within a specified maximum distance. Declaration public static bool RaycastSpherePhysicsStep(RayStep step, float radius, float maxDistance, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out RaycastHit physicsHit) Parameters Type Name Description RayStep step Single radius Single maxDistance LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider RaycastHit physicsHit Returns Type Description Boolean Whether or not the raycast hit something. TryGetPrioritizedPhysicsHit(RaycastHit[], LayerMask[], Boolean, out RaycastHit) Tries to get the prioritized physics raycast hit based on the prioritized layer masks. Declaration public static bool TryGetPrioritizedPhysicsHit(RaycastHit[] hits, LayerMask[] priorityLayers, bool focusIndividualCompoundCollider, out RaycastHit raycastHit) Parameters Type Name Description RaycastHit [] hits LayerMask [] priorityLayers Boolean focusIndividualCompoundCollider RaycastHit raycastHit Returns Type Description Boolean The minimum distance hit within the first layer that has hits. Remarks Sorts all hit objects first by layerMask, then by distance."
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.PhysicsLayerAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.PhysicsLayerAttribute.html",
    "title": "Class PhysicsLayerAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class PhysicsLayerAttribute Attribute used to make an Int32 field render a dropdown generated from the current layers defined in the Tag Manager. Inheritance Object PhysicsLayerAttribute Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public sealed class PhysicsLayerAttribute : PropertyAttribute Constructors PhysicsLayerAttribute() Declaration public PhysicsLayerAttribute()"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.RaycastResultComparer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.RaycastResultComparer.html",
    "title": "Class RaycastResultComparer | Mixed Reality Toolkit Documentation",
    "keywords": "Class RaycastResultComparer Compares the Raycast Results from Unity's Graphic & Physics Raycasters. Inheritance Object RaycastResultComparer Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class RaycastResultComparer : IComparer<ComparableRaycastResult> Properties Comparers Declaration protected virtual List<Func<ComparableRaycastResult, ComparableRaycastResult, int>> Comparers { get; } Property Value Type Description List < Func < ComparableRaycastResult , ComparableRaycastResult , Int32 >> Methods Compare(ComparableRaycastResult, ComparableRaycastResult) Declaration public int Compare(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32 CompareRaycastsByCanvasDepth(ComparableRaycastResult, ComparableRaycastResult) Declaration protected static int CompareRaycastsByCanvasDepth(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32 CompareRaycastsByDistance(ComparableRaycastResult, ComparableRaycastResult) Declaration protected static int CompareRaycastsByDistance(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32 CompareRaycastsByLayerMaskPrioritization(ComparableRaycastResult, ComparableRaycastResult) Declaration protected static int CompareRaycastsByLayerMaskPrioritization(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32 CompareRaycastsBySortingLayer(ComparableRaycastResult, ComparableRaycastResult) Declaration protected static int CompareRaycastsBySortingLayer(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32 CompareRaycastsBySortingOrder(ComparableRaycastResult, ComparableRaycastResult) Declaration protected static int CompareRaycastsBySortingOrder(ComparableRaycastResult left, ComparableRaycastResult right) Parameters Type Name Description ComparableRaycastResult left ComparableRaycastResult right Returns Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.RayStep.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.RayStep.html",
    "title": "Struct RayStep | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RayStep Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public struct RayStep Constructors RayStep(Vector3, Vector3) Declaration public RayStep(Vector3 origin, Vector3 terminus) Parameters Type Name Description Vector3 origin Vector3 terminus Properties Direction Declaration public Vector3 Direction { get; } Property Value Type Description Vector3 Length Declaration public float Length { get; } Property Value Type Description Single Origin Declaration public Vector3 Origin { get; } Property Value Type Description Vector3 Terminus Declaration public Vector3 Terminus { get; } Property Value Type Description Vector3 Methods Contains(Vector3) Declaration public bool Contains(Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean CopyRay(Ray, Single) Declaration public void CopyRay(Ray ray, float rayLength) Parameters Type Name Description Ray ray Single rayLength GetDirectionByDistance(RayStep[], Single) Returns a direction along an array of RaySteps by distance Declaration public static Vector3 GetDirectionByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep [] steps Single distance Returns Type Description Vector3 GetPoint(Single) Declaration public Vector3 GetPoint(float distance) Parameters Type Name Description Single distance Returns Type Description Vector3 GetPointByDistance(RayStep[], Single) Returns a point along an array of RaySteps by distance Declaration public static Vector3 GetPointByDistance(RayStep[] steps, float distance) Parameters Type Name Description RayStep [] steps Single distance Returns Type Description Vector3 GetStepByDistance(RayStep[], Single, ref Single) Returns a RayStep along an array of RaySteps by distance Declaration public static RayStep GetStepByDistance(RayStep[] steps, float distance, ref float remainingDistance) Parameters Type Name Description RayStep [] steps Single distance Single remainingDistance Returns Type Description RayStep UpdateRayStep(ref Vector3, ref Vector3) Update current raystep with new origin and terminus points. Pass by ref to avoid unnecessary struct copy into function since values will be copied anyways locally Declaration public void UpdateRayStep(ref Vector3 origin, ref Vector3 terminus) Parameters Type Name Description Vector3 origin beginning of raystep origin Vector3 terminus end of raystep Operators Implicit(RayStep to Ray) Declaration public static implicit operator Ray(RayStep r) Parameters Type Name Description RayStep r Returns Type Description Ray"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.SceneQueryType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.SceneQueryType.html",
    "title": "Enum SceneQueryType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SceneQueryType Defines the different scene query types. Mostly used by pointers. Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public enum SceneQueryType Fields Name Description BoxRaycast Complex raycast from multiple points using a box collider. SimpleRaycast Use a simple raycast from a single point in a given direction. SphereCast Use Sphere cast. SphereOverlap Check for colliders within a specific radius."
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.TeleportSurfaceResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.TeleportSurfaceResult.html",
    "title": "Enum TeleportSurfaceResult | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TeleportSurfaceResult Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public enum TeleportSurfaceResult Fields Name Description HotSpot Invalid None Valid"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.TwoHandMoveLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.TwoHandMoveLogic.html",
    "title": "Class TwoHandMoveLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class TwoHandMoveLogic Implements a movement logic that uses the model of angular rotations along a sphere whose radius varies. The angle to move by is computed by looking at how much the hand changes relative to a pivot point (slightly below and in front of the head). Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. Inheritance Object TwoHandMoveLogic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class TwoHandMoveLogic Methods Setup(MixedRealityPose, Vector3, MixedRealityPose, Vector3) Setup function Declaration public void Setup(MixedRealityPose pointerCentroidPose, Vector3 grabCentroid, MixedRealityPose objectPose, Vector3 objectScale) Parameters Type Name Description MixedRealityPose pointerCentroidPose Vector3 grabCentroid MixedRealityPose objectPose Vector3 objectScale Update(MixedRealityPose, Quaternion, Vector3, Boolean, MovementConstraintType) Update the rotation based on input. Declaration public Vector3 Update(MixedRealityPose pointerCentroidPose, Quaternion objectRotation, Vector3 objectScale, bool usePointerRotation, MovementConstraintType movementConstraint) Parameters Type Name Description MixedRealityPose pointerCentroidPose Quaternion objectRotation Vector3 objectScale Boolean usePointerRotation MovementConstraintType movementConstraint Returns Type Description Vector3 A Vector3 describing the desired position"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.TwoHandRotateLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.TwoHandRotateLogic.html",
    "title": "Class TwoHandRotateLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class TwoHandRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. Inheritance Object TwoHandRotateLogic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class TwoHandRotateLogic Methods Setup(Dictionary<UInt32, Vector3>, Transform, RotationConstraintType) Setup the rotation logic. Declaration public void Setup(Dictionary<uint, Vector3> handsPressedMap, Transform t, RotationConstraintType rotationConstraint) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Transform t RotationConstraintType rotationConstraint Update(Dictionary<UInt32, Vector3>, Quaternion, RotationConstraintType, Boolean) Update the rotation based on input. Declaration public Quaternion Update(Dictionary<uint, Vector3> handsPressedMap, Quaternion currentRotation, RotationConstraintType rotationConstraint, bool useLocalSpaceForConstraint) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Quaternion currentRotation RotationConstraintType rotationConstraint Boolean useLocalSpaceForConstraint Returns Type Description Quaternion Desired rotation"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.TwoHandScaleLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.TwoHandScaleLogic.html",
    "title": "Class TwoHandScaleLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class TwoHandScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands. object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. Inheritance Object TwoHandScaleLogic Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class TwoHandScaleLogic Methods Setup(Dictionary<UInt32, Vector3>, Transform) Initialize system with source info from controllers/hands Declaration public virtual void Setup(Dictionary<uint, Vector3> handsPressedMap, Transform manipulationRoot) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Dictionary that maps inputSources to states Transform manipulationRoot Transform of gameObject to be manipulated UpdateMap(Dictionary<UInt32, Vector3>) update GameObject with new Scale state Declaration public virtual Vector3 UpdateMap(Dictionary<uint, Vector3> handsPressedMap) Parameters Type Name Description Dictionary < UInt32 , Vector3 > handsPressedMap Returns Type Description Vector3 a Vector3 describing the new Scale of the object being manipulated"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.VectorRollingStatistics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.VectorRollingStatistics.html",
    "title": "Class VectorRollingStatistics | Mixed Reality Toolkit Documentation",
    "keywords": "Class VectorRollingStatistics Vector Statistics used in gaze stabilization. Inheritance Object VectorRollingStatistics Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class VectorRollingStatistics Properties ActualSampleCount The number of samples in the current set (may be 0 - maxSamples) Declaration public float ActualSampleCount { get; } Property Value Type Description Single Average The average position. Declaration public Vector3 Average { get; } Property Value Type Description Vector3 CurrentStandardDeviation Current standard deviation of the positions of the vectors. Declaration public float CurrentStandardDeviation { get; } Property Value Type Description Single StandardDeviationDeltaAfterLatestSample Difference to standardDeviation when the latest sample was added. Declaration public float StandardDeviationDeltaAfterLatestSample { get; } Property Value Type Description Single StandardDeviationsAwayOfLatestSample How many standard deviations the latest sample was away. Declaration public float StandardDeviationsAwayOfLatestSample { get; } Property Value Type Description Single Methods AddSample(Vector3) Adds a new sample to the sample list and updates the stats. Declaration public void AddSample(Vector3 value) Parameters Type Name Description Vector3 value The new sample to add Init(Int32) Initialize the rolling stats. Declaration public void Init(int sampleCount) Parameters Type Name Description Int32 sampleCount Reset() Resets the stats to zero. Declaration public void Reset()"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Physics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Physics Classes BaseRayStabilizer A base class for a stabilizer that takes an input position and rotation, and performs operations on them to stabilize, or smooth deltas, in the data. Distorter DistorterBulge A Distorter that distorts points based on their distance and direction from the center of the bulge point. DistorterGravity A Distorter that distorts points based on their distance and direction to the world center of gravity as defined by WorldCenterOfGravity. DistorterSimplex A Distorter that randomly distorts points. DistorterSphere A Distorter that distorts points based on their distance and direction from the center of the sphere of size 2. DistorterWiggly GazeStabilizer GazeStabilizer iterates over samples of Raycast data and helps stabilize the user's gaze for precision targeting. InterpolationUtilities Static class containing interpolation-related utility functions. Interpolator A MonoBehaviour that interpolates a transform's position, rotation or scale. MixedRealityRaycaster PhysicsLayerAttribute Attribute used to make an Int32 field render a dropdown generated from the current layers defined in the Tag Manager. RaycastResultComparer Compares the Raycast Results from Unity's Graphic & Physics Raycasters. TwoHandMoveLogic Implements a movement logic that uses the model of angular rotations along a sphere whose radius varies. The angle to move by is computed by looking at how much the hand changes relative to a pivot point (slightly below and in front of the head). Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. TwoHandRotateLogic Implements common logic for rotating holograms using a handlebar metaphor. each frame, object_rotation_delta = rotation_delta(current_hands_vector, previous_hands_vector) where hands_vector is the vector between two hand/controller positions. Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. TwoHandScaleLogic Implements a scale logic that will scale an object based on the ratio of the distance between hands. object_scale = start_object_scale * curr_hand_dist / start_hand_dist Usage: When a manipulation starts, call Setup. Call Update any time to update the move logic and get a new rotation for the object. VectorRollingStatistics Vector Statistics used in gaze stabilization. Structs ComparableRaycastResult FocusDetails Contains information about which game object has the focus currently. Also contains information about the normal of that point. RayStep Interfaces IBaseRayStabilizer Enums SceneQueryType Defines the different scene query types. Mostly used by pointers. TeleportSurfaceResult"
  },
  "api/Microsoft.MixedReality.Toolkit.PlacementEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.PlacementEventData.html",
    "title": "Class PlacementEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class PlacementEventData Describes placement of objects events. Inheritance Object GenericBaseEventData PlacementEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class PlacementEventData : GenericBaseEventData Constructors PlacementEventData(EventSystem) Constructor. Declaration public PlacementEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Usually EventSystems.EventSystem.current Properties ObjectBeingPlaced The game object that is being placed. Declaration public GameObject ObjectBeingPlaced { get; } Property Value Type Description GameObject Methods Initialize(IMixedRealityEventSource, GameObject) Populates the event with data. Declaration public void Initialize(IMixedRealityEventSource eventSource, GameObject objectBeingPlaced) Parameters Type Name Description IMixedRealityEventSource eventSource GameObject objectBeingPlaced"
  },
  "api/Microsoft.MixedReality.Toolkit.PointDistributionMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.PointDistributionMode.html",
    "title": "Enum PointDistributionMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PointDistributionMode Defines how to get an interpolated point along a line Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum PointDistributionMode Fields Name Description Auto Adjust placement automatically (default) DistanceCurveValue Place based on curve DistanceSingleValue Place based on distance None Don't adjust placement"
  },
  "api/Microsoft.MixedReality.Toolkit.PrefabAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.PrefabAttribute.html",
    "title": "Class PrefabAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class PrefabAttribute Attribute used to ensure that a GameObject inspector slot only accepts prefabs. Inheritance Object PrefabAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public sealed class PrefabAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.ProcessExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ProcessExtensions.html",
    "title": "Class ProcessExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProcessExtensions Process Extension class. Inheritance Object ProcessExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class ProcessExtensions Methods StartProcessAsync(Process, ProcessStartInfo, Boolean, CancellationToken) Starts a process asynchronously. Declaration public static Task<ProcessResult> StartProcessAsync(this Process process, ProcessStartInfo startInfo, bool showDebug = false, CancellationToken cancellationToken = null) Parameters Type Name Description Process process This Process. ProcessStartInfo startInfo The Process start info. Boolean showDebug Should output debug code to Editor Console? CancellationToken cancellationToken Returns Type Description Task < ProcessResult > ProcessResult Remarks The provided Process Start Info must not use shell execution, and should redirect the standard output and errors. StartProcessAsync(Process, String, String, Boolean, CancellationToken) Starts a process asynchronously. Declaration public static Task<ProcessResult> StartProcessAsync(this Process process, string fileName, string args, bool showDebug = false, CancellationToken cancellationToken = null) Parameters Type Name Description Process process This Process. String fileName The process executable to run. String args The Process arguments. Boolean showDebug Should output debug code to Editor Console? CancellationToken cancellationToken Returns Type Description Task < ProcessResult > ProcessResult"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityControllerMappingProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityControllerMappingProfileInspector.html",
    "title": "Class MixedRealityControllerMappingProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerMappingProfileInspector Inheritance Object MixedRealityControllerMappingProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerMappingProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityDictationHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityDictationHandler.html",
    "title": "Interface IMixedRealityDictationHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDictationHandler Interface to implement dictation events. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDictationHandler : IEventSystemHandler Methods OnDictationComplete(DictationEventData) Declaration void OnDictationComplete(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData OnDictationError(DictationEventData) Declaration void OnDictationError(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData OnDictationHypothesis(DictationEventData) Declaration void OnDictationHypothesis(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData OnDictationResult(DictationEventData) Declaration void OnDictationResult(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityDictationSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityDictationSystem.html",
    "title": "Interface IMixedRealityDictationSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDictationSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDictationSystem : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties IsListening Is the system currently listing for dictation input? Declaration bool IsListening { get; } Property Value Type Description Boolean Methods StartRecording(GameObject, Single, Single, Int32, String) Turns on the dictation recognizer and begins recording audio from the default microphone. Declaration void StartRecording(GameObject listener, float initialSilenceTimeout = 5F, float autoSilenceTimeout = 20F, int recordingTime = 10, string micDeviceName = \"\") Parameters Type Name Description GameObject listener GameObject listening for the dictation input. Single initialSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input in case there was no audio heard in the current session. Single autoSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input. Int32 recordingTime Length in seconds for the manager to listen. String micDeviceName Optional: The microphone device to listen to. StartRecordingAsync(GameObject, Single, Single, Int32, String) Turns on the dictation recognizer and begins recording audio from the default microphone. Declaration Task StartRecordingAsync(GameObject listener, float initialSilenceTimeout = 5F, float autoSilenceTimeout = 20F, int recordingTime = 10, string micDeviceName = \"\") Parameters Type Name Description GameObject listener GameObject listening for the dictation input. Single initialSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input in case there was no audio heard in the current session. Single autoSilenceTimeout The time length in seconds before dictation recognizer session ends due to lack of audio input. Int32 recordingTime Length in seconds for the manager to listen. String micDeviceName Optional: The microphone device to listen to. Returns Type Description Task StopRecording() Ends the recording session. Declaration void StopRecording() StopRecordingAsync() Ends the recording session. Declaration Task<AudioClip> StopRecordingAsync() Returns Type Description Task < AudioClip > AudioClip of the last recording session."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityEyeGazeDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityEyeGazeDataProvider.html",
    "title": "Interface IMixedRealityEyeGazeDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEyeGazeDataProvider Provides eye tracking information. Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEyeGazeDataProvider : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties SaccadeProvider Declaration IMixedRealityEyeSaccadeProvider SaccadeProvider { get; } Property Value Type Description IMixedRealityEyeSaccadeProvider SmoothEyeTracking Declaration bool SmoothEyeTracking { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityEyeGazeProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityEyeGazeProvider.html",
    "title": "Interface IMixedRealityEyeGazeProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEyeGazeProvider Implements the Gaze Provider for an Input Source. Inherited Members IMixedRealityGazeProvider.Enabled IMixedRealityGazeProvider.GazeInputSource IMixedRealityGazeProvider.GazePointer IMixedRealityGazeProvider.GazeCursorPrefab IMixedRealityGazeProvider.GazeCursor IMixedRealityGazeProvider.GazeTarget IMixedRealityGazeProvider.HitInfo IMixedRealityGazeProvider.HitPosition IMixedRealityGazeProvider.HitNormal IMixedRealityGazeProvider.GazeOrigin IMixedRealityGazeProvider.GazeDirection IMixedRealityGazeProvider.HeadVelocity IMixedRealityGazeProvider.HeadMovementDirection IMixedRealityGazeProvider.GameObjectReference IMixedRealityGazeProvider.UpdateGazeInfoFromHit(MixedRealityRaycastHit) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEyeGazeProvider : IMixedRealityGazeProvider Properties IsEyeCalibrationValid Whether the user is eye calibrated. It returns 'null', if the value has not yet received data from the eye tracking system. Declaration bool? IsEyeCalibrationValid { get; } Property Value Type Description Nullable < Boolean > IsEyeGazeValid Whether eye gaze is valid. It may be invalid due to timeout or lack of tracking hardware or permissions. Declaration bool IsEyeGazeValid { get; } Property Value Type Description Boolean Timestamp DateTime in UTC when the signal was last updated. Declaration DateTime Timestamp { get; } Property Value Type Description DateTime UseEyeTracking If true, eye-based tracking will be used when available. Declaration bool UseEyeTracking { get; set; } Property Value Type Description Boolean Remarks The usage of eye-based tracking depends on having the Gaze Input permission set and user approved, along with proper device eye calibration. This will fallback to head-based gaze when eye-based tracking is not available. Methods UpdateEyeGaze(IMixedRealityEyeGazeDataProvider, Ray, DateTime) Tells the eye gaze provider that eye gaze has updated. Declaration void UpdateEyeGaze(IMixedRealityEyeGazeDataProvider provider, Ray eyeRay, DateTime timestamp) Parameters Type Name Description IMixedRealityEyeGazeDataProvider provider The provider raising the event. Ray eyeRay DateTime timestamp Remarks This method is to be called by implementations of the IMixedRealityEyeGazeDataProvider interface, not by application code. UpdateEyeTrackingStatus(IMixedRealityEyeGazeDataProvider, Boolean) Tells the eye gaze provider about the eye tracking status (e.g., whether the user is calibrated); Declaration void UpdateEyeTrackingStatus(IMixedRealityEyeGazeDataProvider provider, bool userIsEyeCalibrated) Parameters Type Name Description IMixedRealityEyeGazeDataProvider provider The provider raising the event. Boolean userIsEyeCalibrated Boolean whether the user is eye calibrated or not."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MeshCursor.MeshCursorDatum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MeshCursor.MeshCursorDatum.html",
    "title": "Struct MeshCursor.MeshCursorDatum | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MeshCursor.MeshCursorDatum Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MeshCursorDatum Fields CursorMesh Declaration public Mesh CursorMesh Field Value Type Description Mesh CursorState Declaration public CursorStateEnum CursorState Field Value Type Description CursorStateEnum LocalOffset Declaration public Vector3 LocalOffset Field Value Type Description Vector3 LocalScale Declaration public Vector3 LocalScale Field Value Type Description Vector3 Name Declaration public string Name Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MeshCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MeshCursor.html",
    "title": "Class MeshCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class MeshCursor Object that represents a cursor in 3D space controlled by gaze. Inheritance Object BaseCursor MeshCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseCursor.CursorState BaseCursor.CursorContext BaseCursor.SurfaceCursorDistance BaseCursor.UseUnscaledTime BaseCursor.PositionLerpTime BaseCursor.ScaleLerpTime BaseCursor.RotationLerpTime BaseCursor.LookRotationBlend BaseCursor.ResizeCursorWithDistance BaseCursor.CursorAngularScale BaseCursor.CursorAngularSize BaseCursor.PrimaryCursorVisual BaseCursor.IsSourceDetected BaseCursor.SourceDownIds BaseCursor.IsPointerDown BaseCursor.TargetedObject BaseCursor.VisibleSourcesCount BaseCursor.targetPosition BaseCursor.targetScale BaseCursor.targetRotation BaseCursor.Pointer BaseCursor.IsPointerValid BaseCursor.DefaultCursorDistance BaseCursor.Position BaseCursor.Rotation BaseCursor.LocalScale BaseCursor.SetVisibility(Boolean) BaseCursor.Destroy() BaseCursor.IsVisible BaseCursor.SetVisibilityOnSourceDetected BaseCursor.GameObjectReference BaseCursor.OnSourceDetected(SourceStateEventData) BaseCursor.OnSourceLost(SourceStateEventData) BaseCursor.OnBeforeFocusChange(FocusEventData) BaseCursor.OnFocusChanged(FocusEventData) BaseCursor.OnPointerDown(MixedRealityPointerEventData) BaseCursor.OnPointerDragged(MixedRealityPointerEventData) BaseCursor.OnPointerClicked(MixedRealityPointerEventData) BaseCursor.OnPointerUp(MixedRealityPointerEventData) BaseCursor.Start() BaseCursor.OnDisable() BaseCursor.RegisterManagers() BaseCursor.UnregisterManagers() BaseCursor.UpdateCursorTransform() BaseCursor.LerpToTargetTransform() BaseCursor.SnapToTargetTransform() BaseCursor.OnInputDisabled() BaseCursor.OnInputEnabled() BaseCursor.CheckCursorState() BaseCursor.CheckCursorContext() BaseCursor.OnCursorContextChange(CursorContextEnum) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MeshCursor : BaseCursor, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Fields CursorStateData Declaration public MeshCursor.MeshCursorDatum[] CursorStateData Field Value Type Description MeshCursor.MeshCursorDatum [] TargetRenderer Sprite renderer to change. If null find one in children Declaration public MeshRenderer TargetRenderer Field Value Type Description MeshRenderer Methods OnCursorStateChange(CursorStateEnum) Override OnCursorState change to set the correct animation state for the cursor Declaration public override void OnCursorStateChange(CursorStateEnum state) Parameters Type Name Description CursorStateEnum state Overrides BaseCursor.OnCursorStateChange(CursorStateEnum) OnEnable() On enable look for a sprite renderer on children Declaration protected override void OnEnable() Overrides BaseCursor.OnEnable() Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityCanvasInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityCanvasInspector.html",
    "title": "Class MixedRealityCanvasInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCanvasInspector Editor class used to edit UI Canvases. Inheritance Object MixedRealityCanvasInspector Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityCanvasInspector : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerAttribute.html",
    "title": "Class MixedRealityControllerAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerAttribute Attach to a controller device class to make it show up in the controller mapping profile. Inheritance Object MixedRealityControllerAttribute Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerAttribute : Attribute Constructors MixedRealityControllerAttribute(SupportedControllerType, Handedness[], String, MixedRealityControllerConfigurationFlags) Declaration public MixedRealityControllerAttribute(SupportedControllerType supportedControllerType, Handedness[] supportedHandedness, string texturePath = \"\", MixedRealityControllerConfigurationFlags flags = (MixedRealityControllerConfigurationFlags)0) Parameters Type Name Description SupportedControllerType supportedControllerType Handedness [] supportedHandedness String texturePath MixedRealityControllerConfigurationFlags flags Properties Flags Additional flags for configuring controller capabilities. Declaration public MixedRealityControllerConfigurationFlags Flags { get; } Property Value Type Description MixedRealityControllerConfigurationFlags SupportedControllerType The SupportedControllerType to which the controller device belongs to. Declaration public SupportedControllerType SupportedControllerType { get; } Property Value Type Description SupportedControllerType SupportedHandedness List of handedness values supported by the respective controller. Declaration public Handedness[] SupportedHandedness { get; } Property Value Type Description Handedness [] TexturePath Path to image file used when displaying an icon in the UI. Declaration public string TexturePath { get; } Property Value Type Description String Methods Find(Type) Convenience function for retrieving the attribute given a certain class type. Declaration public static MixedRealityControllerAttribute Find(Type type) Parameters Type Name Description Type type Returns Type Description MixedRealityControllerAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityEyeTrackingProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityEyeTrackingProfile.html",
    "title": "Class MixedRealityEyeTrackingProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityEyeTrackingProfile Inheritance Object BaseMixedRealityProfile MixedRealityEyeTrackingProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityEyeTrackingProfile : BaseMixedRealityProfile Properties SmoothEyeTracking Use smoothed eye tracking signal. Declaration public bool SmoothEyeTracking { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityGestureMapping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityGestureMapping.html",
    "title": "Struct MixedRealityGestureMapping | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityGestureMapping Data structure for mapping gestures to MixedRealityInputAction s that can be raised by the Input System. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MixedRealityGestureMapping Constructors MixedRealityGestureMapping(String, GestureInputType, MixedRealityInputAction) Constructor. Declaration public MixedRealityGestureMapping(string description, GestureInputType gestureType, MixedRealityInputAction action) Parameters Type Name Description String description GestureInputType gestureType MixedRealityInputAction action Properties Action Action for the associated gesture. Declaration public MixedRealityInputAction Action { get; } Property Value Type Description MixedRealityInputAction Description Simple, human readable description of the gesture. Declaration public string Description { get; } Property Value Type Description String GestureType Type of Gesture. Declaration public GestureInputType GestureType { get; } Property Value Type Description GestureInputType"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityGesturesProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityGesturesProfile.html",
    "title": "Class MixedRealityGesturesProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityGesturesProfile Configuration profile settings for setting up and consuming Input Actions. Inheritance Object BaseMixedRealityProfile MixedRealityGesturesProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityGesturesProfile : BaseMixedRealityProfile Properties Gestures The currently configured gestures for the application. Declaration public MixedRealityGestureMapping[] Gestures { get; } Property Value Type Description MixedRealityGestureMapping [] ManipulationGestures The recognizable Manipulation Gestures. Declaration public WindowsGestureSettings ManipulationGestures { get; } Property Value Type Description WindowsGestureSettings NavigationGestures The recognizable Navigation Gestures. Declaration public WindowsGestureSettings NavigationGestures { get; } Property Value Type Description WindowsGestureSettings RailsNavigationGestures The recognizable Navigation Gestures. Declaration public WindowsGestureSettings RailsNavigationGestures { get; } Property Value Type Description WindowsGestureSettings UseRailsNavigation Declaration public bool UseRailsNavigation { get; } Property Value Type Description Boolean WindowsGestureAutoStart Declaration public AutoStartBehavior WindowsGestureAutoStart { get; } Property Value Type Description AutoStartBehavior"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityHandTrackingProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityHandTrackingProfile.html",
    "title": "Class MixedRealityHandTrackingProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityHandTrackingProfile Inheritance Object BaseMixedRealityProfile MixedRealityHandTrackingProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityHandTrackingProfile : BaseMixedRealityProfile Properties EnableHandJointVisualization The hand joint visualization enable/disable state of the current application mode. Declaration public bool EnableHandJointVisualization { get; set; } Property Value Type Description Boolean Remarks If this property is called while in-editor, this will only affect the in-editor settings (i.e. the SupportedApplicationModes.Editor flag of HandJointVisualizationModes). If this property is called while in-player, this will only affect the in-player settings (i.e. the SupportedApplicationModes.Player flag of HandJointVisualizationModes). EnableHandMeshVisualization The hand mesh visualization enable/disable state of the current application mode. Declaration public bool EnableHandMeshVisualization { get; set; } Property Value Type Description Boolean Remarks If this property is called while in-editor, this will only affect the in-editor settings (i.e. the SupportedApplicationModes.Editor flag of HandMeshVisualizationModes). If this property is called while in-player, this will only affect the in-player settings (i.e. the SupportedApplicationModes.Player flag of HandMeshVisualizationModes). FingerTipPrefab The joint prefab to use for finger tip Declaration public GameObject FingerTipPrefab { get; } Property Value Type Description GameObject HandJointVisualizationModes Declaration public SupportedApplicationModes HandJointVisualizationModes { get; set; } Property Value Type Description SupportedApplicationModes HandMeshPrefab The hand mesh prefab to use to render the hand Declaration public GameObject HandMeshPrefab { get; } Property Value Type Description GameObject HandMeshVisualizationModes Declaration public SupportedApplicationModes HandMeshVisualizationModes { get; set; } Property Value Type Description SupportedApplicationModes JointPrefab The joint prefab to use. Declaration public GameObject JointPrefab { get; } Property Value Type Description GameObject PalmJointPrefab The joint prefab to use for palm Declaration public GameObject PalmJointPrefab { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PointerClickHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PointerClickHandler.html",
    "title": "Class PointerClickHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerClickHandler This component handles pointer clicks from all types of input sources. i.e. a primary mouse button click, motion controller selection press, or hand tap. Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler PointerClickHandler Implements IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseInputHandler.IsFocusRequired BaseInputHandler.OnEnable() BaseInputHandler.Start() BaseInputHandler.Update() BaseInputHandler.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use PointerHandler instead of PointerClickHandler\", true)] public class PointerClickHandler : BaseInputHandler, IMixedRealityPointerHandler, IEventSystemHandler Methods OnPointerClicked(MixedRealityPointerEventData) When a pointer clicked event is raised, this method is used to pass along the event data to the input handler. Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) When a pointer down event is raised, this method is used to pass along the event data to the input handler. Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Called every frame a pointer is down. Can be used to implement drag-like behaviors. Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) When a pointer up event is raised, this method is used to pass along the event data to the input handler. Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Implements IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PointerHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PointerHandler.html",
    "title": "Class PointerHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerHandler Script used to raise Unity Events in response to pointer events. Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler PointerHandler Implements IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseInputHandler.IsFocusRequired BaseInputHandler.OnEnable() BaseInputHandler.Start() BaseInputHandler.Update() BaseInputHandler.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class PointerHandler : BaseInputHandler, IMixedRealityPointerHandler, IEventSystemHandler Fields OnPointerClicked Unity event raised on pointer clicked. Declaration public PointerUnityEvent OnPointerClicked Field Value Type Description PointerUnityEvent OnPointerDown Unity event raised on pointer down. Declaration public PointerUnityEvent OnPointerDown Field Value Type Description PointerUnityEvent OnPointerDragged Unity event raised every frame the pointer is down. Declaration public PointerUnityEvent OnPointerDragged Field Value Type Description PointerUnityEvent OnPointerUp Unity event raised on pointer up. Declaration public PointerUnityEvent OnPointerUp Field Value Type Description PointerUnityEvent Methods RegisterHandlers() Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() UnregisterHandlers() Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Explicit Interface Implementations IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData Implements IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PointerOption.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PointerOption.html",
    "title": "Struct PointerOption | Mixed Reality Toolkit Documentation",
    "keywords": "Struct PointerOption Defines a pointer option to assign to a controller. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct PointerOption Constructors PointerOption(SupportedControllerType, Handedness, GameObject) Constructor. Declaration public PointerOption(SupportedControllerType controllerType, Handedness handedness, GameObject pointerPrefab) Parameters Type Name Description SupportedControllerType controllerType Handedness handedness GameObject pointerPrefab Properties ControllerType The type of Controller this pointer will attach itself to at runtime. Declaration public SupportedControllerType ControllerType { get; } Property Value Type Description SupportedControllerType Remarks If None is selected, then it will attach to any controller type Handedness Defines which hand to create the pointer prefab on. Declaration public Handedness Handedness { get; } Property Value Type Description Handedness PointerPrefab Declaration public GameObject PointerPrefab { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Physics.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Physics.Editor Classes PhysicsLayerAttributeDrawer Renders the physics layer dropdown based on the current layers set in the Tag Manager."
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.TouchEventCatcher.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.TouchEventCatcher.html",
    "title": "Class TouchEventCatcher | Mixed Reality Toolkit Documentation",
    "keywords": "Class TouchEventCatcher Utility for counting touch events. Inheritance Object FocusedObjectEventCatcher < TouchEventCatcher > TouchEventCatcher Implements IDisposable IMixedRealityTouchHandler Inherited Members FocusedObjectEventCatcher<TouchEventCatcher>.EventsStarted FocusedObjectEventCatcher<TouchEventCatcher>.EventsCompleted FocusedObjectEventCatcher<TouchEventCatcher>.Create(GameObject) FocusedObjectEventCatcher<TouchEventCatcher>.Dispose() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class TouchEventCatcher : FocusedObjectEventCatcher<TouchEventCatcher>, IDisposable, IMixedRealityTouchHandler Remarks Touching an object does not imply getting focus, so use a global event handler to be independent from focus. Fields OnTouchCompletedEvent Declaration public readonly UnityEvent OnTouchCompletedEvent Field Value Type Description UnityEvent OnTouchStartedEvent Declaration public readonly UnityEvent OnTouchStartedEvent Field Value Type Description UnityEvent Methods OnTouchCompleted(HandTrackingInputEventData) Declaration public void OnTouchCompleted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchStarted(HandTrackingInputEventData) Declaration public void OnTouchStarted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchUpdated(HandTrackingInputEventData) Declaration public void OnTouchUpdated(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Implements IDisposable IMixedRealityTouchHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.UnityButtonEventCatcher.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.UnityButtonEventCatcher.html",
    "title": "Class UnityButtonEventCatcher | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityButtonEventCatcher Base class for counting Unity button events. Inheritance Object UnityButtonEventCatcher Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class UnityButtonEventCatcher : IDisposable Constructors UnityButtonEventCatcher(Button) Declaration public UnityButtonEventCatcher(Button button) Parameters Type Name Description Button button Properties Click Declaration public int Click { get; protected set; } Property Value Type Description Int32 Methods Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.UnityToggleEventCatcher.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.UnityToggleEventCatcher.html",
    "title": "Class UnityToggleEventCatcher | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityToggleEventCatcher Base class for counting Unity button events. Inheritance Object UnityToggleEventCatcher Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class UnityToggleEventCatcher : IDisposable Constructors UnityToggleEventCatcher(Toggle) Declaration public UnityToggleEventCatcher(Toggle toggle) Parameters Type Name Description Toggle toggle Properties Changed Declaration public int Changed { get; protected set; } Property Value Type Description Int32 IsOn Declaration public bool IsOn { get; protected set; } Property Value Type Description Boolean Methods Dispose() Declaration public void Dispose()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.UnityUiUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.UnityUiUtilities.html",
    "title": "Class UnityUiUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityUiUtilities Inheritance Object UnityUiUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public static class UnityUiUtilities Methods CreateButton(Color, Color, Color) Declaration public static Button CreateButton(Color normalColor, Color highlightColor, Color pressedColor) Parameters Type Name Description Color normalColor Color highlightColor Color pressedColor Returns Type Description Button CreateCanvas(Single) Declaration public static Canvas CreateCanvas(float scale) Parameters Type Name Description Single scale Returns Type Description Canvas CreateImage(Color) Declaration public static Image CreateImage(Color color) Parameters Type Name Description Color color Returns Type Description Image CreateText(String) Declaration public static Text CreateText(string text) Parameters Type Name Description String text Returns Type Description Text CreateToggle(Color, Color, Color) Declaration public static Toggle CreateToggle(Color normalColor, Color highlightColor, Color pressedColor) Parameters Type Name Description Color normalColor Color highlightColor Color pressedColor Returns Type Description Toggle"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ReceiverBaseMonoBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ReceiverBaseMonoBehavior.html",
    "title": "Class ReceiverBaseMonoBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Class ReceiverBaseMonoBehavior A base class for detecting hand handling state changes from an Interactable Extend this class to build new events or receivers from Interactables InteractableReceiver or InteractableReceiverList can be used with ReceiverBase - built-in receivers Inheritance Object ReceiverBaseMonoBehavior InteractableReceiver InteractableReceiverList Implements IInteractableHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ReceiverBaseMonoBehavior : MonoBehaviour, IInteractableHandler Fields Interactable Interactable to target Declaration public Interactable Interactable Field Value Type Description Interactable InteractableSearchScope directions to search for Interactable component in transform hierarchy if none assigned Declaration public ReceiverBaseMonoBehavior.SearchScopes InteractableSearchScope Field Value Type Description ReceiverBaseMonoBehavior.SearchScopes lastState Declaration protected State lastState Field Value Type Description State Methods AddInteractable(Interactable) Add an interactable and add it as a handler Declaration public void AddInteractable(Interactable interactable) Parameters Type Name Description Interactable interactable OnClick(InteractableStates, Interactable, IMixedRealityPointer) A click event happened Declaration public virtual void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer OnDisable() Remove itself as a handler Declaration protected virtual void OnDisable() OnEnable() look for an Interactable if not assigned Declaration protected virtual void OnEnable() OnStateChange(InteractableStates, Interactable) a state has changed Declaration public virtual void OnStateChange(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) A voice command was called Declaration public virtual void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index Int32 length Update() Declaration protected virtual void Update() Implements IInteractableHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ScaleOffsetColorTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ScaleOffsetColorTheme.html",
    "title": "Class ScaleOffsetColorTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScaleOffsetColorTheme Theme Engine to control initialized GameObject's scale, local position offset, and color based on state changes For color, will try to set on first available text object in order of TextMesh, Text, TextMeshPro, and TextMeshProUGUI If none found, then Theme will target first Renderer component available and target the associated shader property found in ThemeDefinition Inheritance Object InteractableThemeBase InteractableShaderTheme InteractableColorTheme ScaleOffsetColorTheme Inherited Members InteractableColorTheme.DefaultShaderProperty InteractableColorTheme.TryGetTextColor(ThemeStateProperty, Color) InteractableColorTheme.TryGetTextMeshColor(ThemeStateProperty, Color) InteractableColorTheme.TryGetTextMeshProColor(ThemeStateProperty, Color) InteractableColorTheme.TryGetTextMeshProUGUIColor(ThemeStateProperty, Color) InteractableColorTheme.TryGetRendererColor(ThemeStateProperty, Color) InteractableColorTheme.TrySetTextColor(Color, ThemeStateProperty, Int32, Single) InteractableColorTheme.TrySetTextMeshColor(Color, ThemeStateProperty, Int32, Single) InteractableColorTheme.TrySetTextMeshProColor(Color, ThemeStateProperty, Int32, Single) InteractableColorTheme.TrySetTextMeshProUGUIColor(Color, ThemeStateProperty, Int32, Single) InteractableColorTheme.TrySetRendererColor(Color, ThemeStateProperty, Int32, Single) InteractableColorTheme.HasTextComponentOnObject(GameObject) InteractableShaderTheme.AreShadersSupported InteractableShaderTheme.propertyBlock InteractableShaderTheme.shaderProperties InteractableShaderTheme.renderer InteractableShaderTheme.GetFloat(GameObject, Int32) InteractableShaderTheme.GetColor(GameObject, Int32) InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ScaleOffsetColorTheme : InteractableColorTheme Constructors ScaleOffsetColorTheme() Declaration public ScaleOffsetColorTheme() Fields hostTransform Declaration protected Transform hostTransform Field Value Type Description Transform originalPosition Declaration protected Vector3 originalPosition Field Value Type Description Vector3 originalScale Declaration protected Vector3 originalScale Field Value Type Description Vector3 Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableColorTheme.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableColorTheme.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableColorTheme.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableColorTheme.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.SelectionModes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.SelectionModes.html",
    "title": "Enum SelectionModes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SelectionModes Values for user-friendly dimensions settings Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum SelectionModes Fields Name Description Button Just click, no selection Invalid Not a valid mode MultiDimension A selection with more than two dimensions, like one control for Small, Medium, and Large Toggle A selection with two dimensions, selected/unselection. A two mode switch, checkbox, toggle, radial"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ShaderProperties.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ShaderProperties.html",
    "title": "Struct ShaderProperties | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ShaderProperties Obsolete container. Only exists to support backward compatibility to copy values from old scriptableobjects Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ShaderProperties Fields Name Declaration public string Name Field Value Type Description String Range Declaration public Vector2 Range Field Value Type Description Vector2 Type Declaration public ShaderPropertyType Type Field Value Type Description ShaderPropertyType"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ShaderPropertyType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ShaderPropertyType.html",
    "title": "Enum ShaderPropertyType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ShaderPropertyType Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ShaderPropertyType Fields Name Description Color Float None Range TexEnv Vector"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.SliderEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.SliderEvent.html",
    "title": "Class SliderEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderEvent A UnityEvent callback containing a SliderEventData payload. Inheritance Object SliderEvent Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class SliderEvent : UnityEvent<SliderEventData>"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.SliderEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.SliderEventData.html",
    "title": "Class SliderEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderEventData Inheritance Object SliderEventData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class SliderEventData Constructors SliderEventData(Single, Single, IMixedRealityPointer, PinchSlider) Declaration public SliderEventData(float o, float n, IMixedRealityPointer pointer, PinchSlider slider) Parameters Type Name Description Single o Single n IMixedRealityPointer pointer PinchSlider slider Properties NewValue The current value of the slider Declaration public float NewValue { get; } Property Value Type Description Single OldValue The previous value of the slider Declaration public float OldValue { get; } Property Value Type Description Single Pointer The currently active pointer manipulating / hovering the slider, or null if no pointer is manipulating the slider. Note: OnSliderUpdated is called with .Pointer == null OnStart, so always check if this field is null before using! Declaration public IMixedRealityPointer Pointer { get; set; } Property Value Type Description IMixedRealityPointer Slider The slider that triggered this event Declaration public PinchSlider Slider { get; } Property Value Type Description PinchSlider"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.SliderSounds.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.SliderSounds.html",
    "title": "Class SliderSounds | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderSounds Component that plays sounds to communicate the state of a pinch slider Inheritance Object SliderSounds Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class SliderSounds : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.SpeechConfirmationTooltip.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.SpeechConfirmationTooltip.html",
    "title": "Class SpeechConfirmationTooltip | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechConfirmationTooltip Tooltip used for speech confirmation label. This inherits ToolTip class and provides generic text string interface for the label. To create your own speech confirmation label, override SpeechConfirmationTooltip and provide SetText(string s) and TriggerConfirmationAnimation() functions. Assign the prefab to the SpeechInputHandler.cs Inheritance Object ToolTip SpeechConfirmationTooltip Inherited Members ToolTip.ShowBackground ToolTip.ShowHighlight ToolTip.ShowConnector ToolTip.TipState ToolTip.GroupTipState ToolTip.MasterTipState ToolTip.Anchor ToolTip.Pivot ToolTip.ToolTipText ToolTip.LocalContentOffset ToolTip.ContentScale ToolTip.FontSize ToolTip.PivotType ToolTip.AttachPointPosition ToolTip.LocalContentSize ToolTip.PivotPosition ToolTip.AnchorPosition ToolTip.ContentParentTransform ToolTip.IsOn ToolTip.ResolveTipState(DisplayMode, DisplayMode, DisplayMode, Boolean) ToolTip.HasFocus ToolTip.OnEnable() ToolTip.Update() ToolTip.RefreshLocalContent() ToolTip.EnforceHierarchy() ToolTip.GetTextMeshLocalScale(TextMesh) Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class SpeechConfirmationTooltip : ToolTip Methods SetText(String) Declaration public virtual void SetText(string labelText) Parameters Type Name Description String labelText TriggerConfirmedAnimation() Declaration public virtual void TriggerConfirmedAnimation()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.State.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.State.html",
    "title": "Class State | Mixed Reality Toolkit Documentation",
    "keywords": "Class State State data model, state management and comparison instructions Inheritance Object State Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class State Fields ActiveIndex Index of state in current list Declaration public int ActiveIndex Field Value Type Description Int32 Bit Bitwise value of state for comparison Declaration public int Bit Field Value Type Description Int32 Index Index of State in all available state list Declaration public int Index Field Value Type Description Int32 Name Name of state Declaration public string Name Field Value Type Description String Value Current value of state (e.g on/off etc) Declaration public int Value Field Value Type Description Int32 Methods CompareState(State) Returns true if two state objects have identical internal values, false otherwise Declaration public bool CompareState(State s) Parameters Type Name Description State s other State object to compare against Returns Type Description Boolean true if identical internal values, false otherwise Copy() Create copy of current State with identical values Declaration public State Copy() Returns Type Description State copied instance of this State ToBit() Declaration [Obsolete(\"Use Bit property\")] public int ToBit() Returns Type Description Int32 ToInt() Declaration [Obsolete(\"Use Index property\")] public int ToInt() Returns Type Description Int32 ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.States.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.States.html",
    "title": "Class States | Mixed Reality Toolkit Documentation",
    "keywords": "Class States States scriptableObject for storing available states and related state model Inheritance Object States Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class States : ScriptableObject Constructors States() Declaration public States() Properties DefaultIndex Default index into state list Declaration public int DefaultIndex { get; set; } Property Value Type Description Int32 StateList List of available states defined by asset Declaration public List<State> StateList { get; set; } Property Value Type Description List < State > StateModelType Defines the type of State Model to associate with this States asset. Type must be a class that extends InteractableStateModel Declaration public Type StateModelType { get; set; } Property Value Type Description Type Methods CreateStateModel() Create a State Model class and initialize it with the configuration data from this States ScriptableObject Declaration public BaseStateModel CreateStateModel() Returns Type Description BaseStateModel BaseStateModel or inherited class implementation object initialized with the StateList in this ScriptableObject Equals(States) Test whether the current States object and the argument States object have the same internal values and configurations Declaration public bool Equals(States other) Parameters Type Name Description States other other States object to compare against self Returns Type Description Boolean true if internal list of state values and class configuration matches other, false otherwise GetStates() Declaration [Obsolete(\"Use the StateList property instead\")] public State[] GetStates() Returns Type Description State []"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.CapsLockHighlight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.CapsLockHighlight.html",
    "title": "Class CapsLockHighlight | Mixed Reality Toolkit Documentation",
    "keywords": "Class CapsLockHighlight This class toggles the Caps Lock image based on the NonNativeKeyboard's IsCapsLocked state Inheritance Object CapsLockHighlight Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class CapsLockHighlight : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardKeyFunc.Function.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardKeyFunc.Function.html",
    "title": "Enum KeyboardKeyFunc.Function | Mixed Reality Toolkit Documentation",
    "keywords": "Enum KeyboardKeyFunc.Function Possible functionality for a button. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public enum Function Fields Name Description ABC Backspace CapsLock Close Dictate Enter Next Previous Shift Space Symbol Tab UNDEFINED"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardKeyFunc.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardKeyFunc.html",
    "title": "Class KeyboardKeyFunc | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeyboardKeyFunc Represents a key on the keyboard that has a function. Inheritance Object KeyboardKeyFunc Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class KeyboardKeyFunc : MonoBehaviour Properties ButtonFunction Declaration public KeyboardKeyFunc.Function ButtonFunction { get; } Property Value Type Description KeyboardKeyFunc.Function"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardTest.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardTest.html",
    "title": "Class KeyboardTest | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeyboardTest This component links the NonNativeKeyboard to a TMP_InputField Put it on the TMP_InputField and assign the NonNativeKeyboard.prefab Inheritance Object KeyboardTest Implements IPointerDownHandler Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class KeyboardTest : MonoBehaviour, IPointerDownHandler Methods OnPointerDown(PointerEventData) Declaration public void OnPointerDown(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Implements IPointerDownHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardValueKey.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.KeyboardValueKey.html",
    "title": "Class KeyboardValueKey | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeyboardValueKey Represents a key on the keyboard that has a string value for input. Inheritance Object KeyboardValueKey Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class KeyboardValueKey : MonoBehaviour Fields ShiftValue The shifted string value for this key. Declaration public string ShiftValue Field Value Type Description String Value The default string value for this key. Declaration public string Value Field Value Type Description String Methods Shift(Boolean) Called by the Keyboard when the shift key is pressed. Updates the text for this key using the Value and ShiftValue fields. Declaration public void Shift(bool isShifted) Parameters Type Name Description Boolean isShifted Indicates the state of shift, the key needs to be changed to."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.StabilizationPlaneModifier.StabilizationPlaneMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.StabilizationPlaneModifier.StabilizationPlaneMode.html",
    "title": "Enum StabilizationPlaneModifier.StabilizationPlaneMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum StabilizationPlaneModifier.StabilizationPlaneMode Namespace : Microsoft.MixedReality.Toolkit.Experimental.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public enum StabilizationPlaneMode Fields Name Description Fixed Submits plane at a fixed distance based on DefaultPlaneDistance field along the users gaze. GazeHit Submits plane along the users gaze at the position of gaze hit. Off Does not call SetFocusPoint PlaneOverride Submits the plane based on the OverridePlane property. TargetOverride Submits the plane at a fixed position along the users gaze based on the TargetOverride property."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.StabilizationPlaneModifier.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.StabilizationPlaneModifier.html",
    "title": "Class StabilizationPlaneModifier | Mixed Reality Toolkit Documentation",
    "keywords": "Class StabilizationPlaneModifier StabilizationPlaneModifier handles the setting of the stabilization plane in several different modes. It does this via handling the platform call to HolographicPlatformSettings::SetFocusPointForFrame Using StabilizationPlaneModifier will override DepthLSR. This is automatically enabled via the depth buffer sharing in Unity build settings StabilizationPlaneModifier is recommended for HoloLens 1, can be used for HoloLens 2, and does a no op for WMR Inheritance Object StabilizationPlaneModifier Namespace : Microsoft.MixedReality.Toolkit.Experimental.Utilities Assembly : cs.temp.dll.dll Syntax public class StabilizationPlaneModifier : MonoBehaviour Properties OverridePlane Declaration public StabilizationPlaneOverride OverridePlane { get; set; } Property Value Type Description StabilizationPlaneOverride TargetOverride Declaration public Transform TargetOverride { get; set; } Property Value Type Description Transform TrackVelocity Declaration public bool TrackVelocity { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.StabilizationPlaneOverride.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.StabilizationPlaneOverride.html",
    "title": "Struct StabilizationPlaneOverride | Mixed Reality Toolkit Documentation",
    "keywords": "Struct StabilizationPlaneOverride Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Experimental.Utilities Assembly : cs.temp.dll.dll Syntax public struct StabilizationPlaneOverride Fields Center Center of the plane Declaration public Vector3 Center Field Value Type Description Vector3 Normal Normal of the plane Declaration public Vector3 Normal Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.WorldAnchorManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.WorldAnchorManager.html",
    "title": "Class WorldAnchorManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class WorldAnchorManager Wrapper around Unity's WorldAnchorStore to simplify usage of persistence operations. Inheritance Object WorldAnchorManager Namespace : Microsoft.MixedReality.Toolkit.Experimental.Utilities Assembly : cs.temp.dll.dll Syntax public class WorldAnchorManager : MonoBehaviour Remarks This class only functions when built for the WSA platform. It uses APIs that are only present on that platform. Properties AnchorDebugText If non-null, verbose logging messages will be displayed on this TextMesh. Declaration public TextMesh AnchorDebugText { get; } Property Value Type Description TextMesh Remarks Note that ShowDetailedLogs and AnchorDebugText will cause the same set of information to be displayed. PersistentAnchors Enables anchors to be stored from subsequent game sessions. Declaration public bool PersistentAnchors { get; } Property Value Type Description Boolean ShowDetailedLogs If true, more verbose logging messages will be written to the console window. Declaration public bool ShowDetailedLogs { get; } Property Value Type Description Boolean Remarks Note that ShowDetailedLogs and AnchorDebugText will cause the same set of information to be displayed. Methods AttachAnchor(GameObject, String) Attaches an anchor to the GameObject. If the anchor store has an anchor with the specified name it will load the anchor, otherwise a new anchor will be saved under the specified name. If no anchor name is provided, the name of the anchor will be the same as the GameObject. Declaration public string AttachAnchor(GameObject gameObjectToAnchor, string anchorName = null) Parameters Type Name Description GameObject gameObjectToAnchor The GameObject to attach the anchor to. String anchorName Name of the anchor. If none provided, the name of the GameObject will be used. Returns Type Description String The name of the newly attached anchor. RemoveAllAnchors() Removes all anchors from the scene and deletes them from the anchor store. Declaration public void RemoveAllAnchors() RemoveAnchor(GameObject) Removes the anchor component from the GameObject and deletes the anchor from the anchor store. Declaration public void RemoveAnchor(GameObject gameObjectToUnanchor) Parameters Type Name Description GameObject gameObjectToUnanchor The GameObject reference with valid anchor to remove from the anchor store. RemoveAnchor(String) Removes the anchor from the anchor store, without a GameObject reference. If a GameObject reference can be found, the anchor component will be removed. Declaration public void RemoveAnchor(string anchorName) Parameters Type Name Description String anchorName The name of the anchor to remove from the anchor store."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Utilities Classes DirectionalIndicator This solver determines the position and orientation of an object as a directional indicator. From the point of reference of the SolverHandler Tracked Target, this indicator will orient towards the DirectionalTarget supplied. If the Directional Target is deemed within view of our frame of reference, then all renderers under this Solver will be disabled. They will be enabled otherwise StabilizationPlaneModifier StabilizationPlaneModifier handles the setting of the stabilization plane in several different modes. It does this via handling the platform call to HolographicPlatformSettings::SetFocusPointForFrame Using StabilizationPlaneModifier will override DepthLSR. This is automatically enabled via the depth buffer sharing in Unity build settings StabilizationPlaneModifier is recommended for HoloLens 1, can be used for HoloLens 2, and does a no op for WMR WorldAnchorManager Wrapper around Unity's WorldAnchorStore to simplify usage of persistence operations. Structs StabilizationPlaneOverride Enums StabilizationPlaneModifier.StabilizationPlaneMode"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental Classes BaseServiceManager Base class providing service registration and management functionality. This class can be used to implement a custom service management component for one or more services, similar to the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.ExperimentalAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ExperimentalAttribute.html",
    "title": "Class ExperimentalAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ExperimentalAttribute A PropertyAttribute for showing a warning box that the tagged implementation is experimental. Inheritance Object ExperimentalAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class ExperimentalAttribute : PropertyAttribute Constructors ExperimentalAttribute(String) Constructor. Declaration public ExperimentalAttribute(string experimentalText = \"<b><color=yellow>This is an experimental feature.</color></b>\\nParts of the MRTK appear to have a lot of value even if the details haven’t fully been fleshed out. For these types of features, we want the community to see them and get value out of them early. Because they are early in the cycle, we label them as experimental to indicate that they are still evolving, and subject to change over time.\") Parameters Type Name Description String experimentalText The experimental text to display in the warning box. Fields Text The text to display in the warning box. Declaration public string Text Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.ExtendsAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ExtendsAttribute.html",
    "title": "Class ExtendsAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ExtendsAttribute Constraint that allows selection of classes that extend a specific class when selecting a SystemType with the Unity inspector. Inheritance Object SystemTypeAttribute ExtendsAttribute Inherited Members SystemTypeAttribute.Grouping SystemTypeAttribute.AllowAbstract Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public sealed class ExtendsAttribute : SystemTypeAttribute Constructors ExtendsAttribute(Type, TypeGrouping) Initializes a new instance of the ExtendsAttribute class. Declaration public ExtendsAttribute(Type baseType, TypeGrouping grouping) Parameters Type Name Description Type baseType Type of class that selectable classes must derive from. TypeGrouping grouping Gets or sets grouping of selectable classes. Defaults to ByNamespaceFlat unless explicitly specified. Properties BaseType Gets the type of class that selectable classes must derive from. Declaration public Type BaseType { get; } Property Value Type Description Type Methods IsConstraintSatisfied(Type) Determines whether the specified Type satisfies filter constraint. Declaration public override bool IsConstraintSatisfied(Type type) Parameters Type Name Description Type type Type to test. Returns Type Description Boolean A Boolean value indicating if the type specified by type satisfies this constraint and should thus be selectable. Overrides SystemTypeAttribute.IsConstraintSatisfied(Type)"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityEventSource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityEventSource.html",
    "title": "Interface IMixedRealityEventSource | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEventSource Interface to implement an event source. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEventSource : IEqualityComparer Properties SourceId The Unique Source Id of this Event Source. Declaration uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration string SourceName { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityEventSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityEventSystem.html",
    "title": "Interface IMixedRealityEventSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEventSystem Interface used to implement an Event System that is compatible with the Mixed Reality Toolkit. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEventSystem : IMixedRealityService, IDisposable Properties EventListeners List of event listeners that are registered to this Event System. Declaration List<GameObject> EventListeners { get; } Property Value Type Description List < GameObject > Remarks This collection is obsolete and is replaced by handler-based internal storage. It will be removed in a future release. Methods HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) The main function for handling and forwarding all events to their intended recipients. Declaration void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData Event Data ExecuteEvents.EventFunction <T> eventHandler Event Handler delegate Type Parameters Name Description T Event Handler Interface Type Remarks See: https://docs.unity3d.com/Manual/MessagingSystem.html Register(GameObject) Registers a GameObject to listen for events from this Event System. Declaration void Register(GameObject listener) Parameters Type Name Description GameObject listener GameObject to add to EventListeners . RegisterHandler<T>(IEventSystemHandler) Registers the given handler as a global listener for all events handled via the T interface. T must be an interface type, not a class type, derived from IEventSystemHandler. Declaration void RegisterHandler<T>(IEventSystemHandler handler) where T : IEventSystemHandler Parameters Type Name Description IEventSystemHandler handler Handler to receive global input events of specified handler type. Type Parameters Name Description T Remarks If you want to register a single C# object as global handler for several event handling interfaces, you must call this function for each interface type. Unregister(GameObject) Unregisters a GameObject from listening for events from this Event System. Declaration void Unregister(GameObject listener) Parameters Type Name Description GameObject listener GameObject to remove from EventListeners . UnregisterHandler<T>(IEventSystemHandler) Unregisters the given handler as a global listener for all events handled via the T interface. T must be an interface type, not a class type, derived from IEventSystemHandler. Declaration void UnregisterHandler<T>(IEventSystemHandler handler) where T : IEventSystemHandler Parameters Type Name Description IEventSystemHandler handler Handler to stop receiving global input events of specified handler type. Type Parameters Name Description T Remarks If a single C# object listens to global input events for several event handling interfaces, you must call this function for each interface type."
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityExtensionService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityExtensionService.html",
    "title": "Interface IMixedRealityExtensionService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityExtensionService Generic interface for all optional Mixed Reality systems, components, or features that can be added to the MixedRealityServiceConfiguration Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityExtensionService : IMixedRealityService, IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PlacementSurfaces.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PlacementSurfaces.html",
    "title": "Enum PlacementSurfaces | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PlacementSurfaces Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public enum PlacementSurfaces Fields Name Description Horizontal Vertical"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetMoveToCamera.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetMoveToCamera.html",
    "title": "Class TargetMoveToCamera | Mixed Reality Toolkit Documentation",
    "keywords": "Class TargetMoveToCamera Inheritance Object TargetMoveToCamera Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TargetMoveToCamera : BaseEyeFocusHandler Fields ActivateBehaviorsWhenInFront Declaration public MonoBehaviour[] ActivateBehaviorsWhenInFront Field Value Type Description MonoBehaviour [] currentlyFocusedTarget Declaration public static TargetMoveToCamera currentlyFocusedTarget Field Value Type Description TargetMoveToCamera DistanceToCamera Declaration public float DistanceToCamera Field Value Type Description Single Methods OnEyeFocusStop() Declaration protected override void OnEyeFocusStop() OnSelect() Declaration public void OnSelect() ReturnHome() Declaration public void ReturnHome() TransitionToUser() Declaration public void TransitionToUser() Update() Declaration protected override void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ToggleGameObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ToggleGameObject.html",
    "title": "Class ToggleGameObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToggleGameObject Inheritance Object ToggleGameObject Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ToggleGameObject : MonoBehaviour Methods HideIt() Declaration public void HideIt() ShowIt() Declaration public void ShowIt()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellHandler.html",
    "title": "Class DwellHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellHandler Use this component to add a Dwell modality ( https://docs.microsoft.com/windows/mixed-reality/gaze-and-dwell ) to the UI target. Inheritance Object DwellHandler CustomDwellHandler Implements IMixedRealityFocusHandler Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class DwellHandler : MonoBehaviour, IMixedRealityFocusHandler Fields CurrentDwellState Captures the dwell status Declaration protected DwellHandler.DwellStateType CurrentDwellState Field Value Type Description DwellHandler.DwellStateType dwellProfile Declaration protected DwellProfile dwellProfile Field Value Type Description DwellProfile FillTimer Abstracted value for the how long the dwelled object still needs to be focused to complete the dwell action Value ranges from 0 to \"TimeToCompleteDwell\" setting in the dwellprofile. This picks up the same unit as TimeToCompleteDwell Declaration protected float FillTimer Field Value Type Description Single Properties DwellProgress Property exposing the computation for what percentage of dwell has progressed. Declaration public virtual float DwellProgress { get; } Property Value Type Description Single HasFocus Exposes whether the target has focus from the pointer type defined in dwell profile settings Declaration protected bool HasFocus { get; } Property Value Type Description Boolean Methods CancelDwell() Method that can be invoked if external factors (e.g. alternate input modality preemptively invoked the target) force the dwell action to prematurely end Declaration public virtual void CancelDwell() OnFocusEnter(FocusEventData) Declaration public void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) Declaration public void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData UpdateFillTimer() Default FillTimer computation based on profile settings Declaration protected virtual void UpdateFillTimer() Implements IMixedRealityFocusHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellProfile.html",
    "title": "Class DwellProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellProfile Inheritance Object DwellProfile DwellProfileWithDecay Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class DwellProfile : ScriptableObject Properties DwellIntentDelay Declaration public TimeSpan DwellIntentDelay { get; } Property Value Type Description TimeSpan DwellPointerType Declaration public InputSourceType DwellPointerType { get; } Property Value Type Description InputSourceType DwellStartDelay Declaration public TimeSpan DwellStartDelay { get; } Property Value Type Description TimeSpan TimeToAllowDwellResume Declaration public TimeSpan TimeToAllowDwellResume { get; } Property Value Type Description TimeSpan TimeToCompleteDwell Declaration public TimeSpan TimeToCompleteDwell { get; } Property Value Type Description TimeSpan"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellProfileWithDecay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellProfileWithDecay.html",
    "title": "Class DwellProfileWithDecay | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellProfileWithDecay Custom profile for the extended dwell profile sample Inheritance Object DwellProfile DwellProfileWithDecay Inherited Members DwellProfile.DwellPointerType DwellProfile.DwellIntentDelay DwellProfile.DwellStartDelay DwellProfile.TimeToCompleteDwell DwellProfile.TimeToAllowDwellResume Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class DwellProfileWithDecay : DwellProfile Properties AllowDwellDecayOnCancel Declaration public bool AllowDwellDecayOnCancel { get; } Property Value Type Description Boolean TimeToAllowDwellDecay Declaration public float TimeToAllowDwellDecay { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellUnityEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellUnityEvent.html",
    "title": "Class DwellUnityEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellUnityEvent Unity event for a dwell event. Contains the pointer reference. Inheritance Object DwellUnityEvent Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class DwellUnityEvent : UnityEvent<IMixedRealityPointer>"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfNode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfNode.html",
    "title": "Class GltfNode | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfNode A node in the node hierarchy. When the node contains skin , all mesh.primitives must contain JOINT and WEIGHT attributes. A node can have either a matrix or any combination of translation / rotation / scale (TRS) properties. TRS properties are converted to matrices and postmultiplied in the T * R * S order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the Identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; matrix will not be present. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/node.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfNode Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfNode : GltfChildOfRootProperty Fields camera The index of the camera referenced by this node. Declaration public int camera Field Value Type Description Int32 children The indices of this node's children. Declaration public int[] children Field Value Type Description Int32 [] matrix A floating-point 4x4 transformation matrix stored in column-major order. Declaration public double[] matrix Field Value Type Description Double [] mesh The index of the mesh in this node. Declaration public int mesh Field Value Type Description Int32 rotation The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar. Declaration public float[] rotation Field Value Type Description Single [] scale The node's non-uniform scale. Declaration public float[] scale Field Value Type Description Single [] skin The index of the skin referenced by this node. Declaration public int skin Field Value Type Description Int32 translation The node's translation. Declaration public float[] translation Field Value Type Description Single [] useTRS If true, extracts transform, rotation, scale values from the Matrix4x4. Otherwise uses the Transform, Rotate, Scale directly as specified by the node. Declaration public bool useTRS Field Value Type Description Boolean weights The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh. Declaration public double[] weights Field Value Type Description Double [] Properties Matrix Declaration public Matrix4x4 Matrix { get; set; } Property Value Type Description Matrix4x4"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Vector3Smoothed.html",
    "title": "Struct Vector3Smoothed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Vector3Smoothed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public struct Vector3Smoothed Constructors Vector3Smoothed(Vector3, Single) Declaration public Vector3Smoothed(Vector3 value, float smoothingTime) Parameters Type Name Description Vector3 value Single smoothingTime Properties Current Declaration public Vector3 Current { get; set; } Property Value Type Description Vector3 Goal Declaration public Vector3 Goal { get; set; } Property Value Type Description Vector3 SmoothTime Declaration public float SmoothTime { get; set; } Property Value Type Description Single Methods SetGoal(Vector3) Declaration public void SetGoal(Vector3 newGoal) Parameters Type Name Description Vector3 newGoal Update(Single) Declaration public void Update(float deltaTime) Parameters Type Name Description Single deltaTime"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.VolumeType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.VolumeType.html",
    "title": "Enum VolumeType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum VolumeType todo Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum VolumeType Fields Name Description AxisAlignedCube Cubic volume aligned with the coordinate axes. None No Specified type. Sphere Spherical volume. UserAlignedCube Cubic volume aligned with the user."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.WaitForBackgroundThread.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.WaitForBackgroundThread.html",
    "title": "Class WaitForBackgroundThread | Mixed Reality Toolkit Documentation",
    "keywords": "Class WaitForBackgroundThread Inheritance Object WaitForBackgroundThread Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class WaitForBackgroundThread Methods GetAwaiter() Declaration public ConfiguredTaskAwaitable.ConfiguredTaskAwaiter GetAwaiter() Returns Type Description ConfiguredTaskAwaitable.ConfiguredTaskAwaiter"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.WaitForUpdate.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.WaitForUpdate.html",
    "title": "Class WaitForUpdate | Mixed Reality Toolkit Documentation",
    "keywords": "Class WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods. Inheritance Object WaitForUpdate Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class WaitForUpdate : CustomYieldInstruction Properties keepWaiting Declaration public override bool keepWaiting { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities Classes ArticulatedHandPose Shape of an articulated hand defined by joint poses. AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. BaseMeshOutline Abstract component to encapsulate common functionality around outline components. BaseMixedRealityLineDataProvider Base class that provides data about a line. BaseMixedRealityLineRenderer Base class for Mixed Reality Line Renderers. BaseObjectCollection BezierDataProvider BezierInertia CameraCache The purpose of this class is to provide a cached reference to the main camera. Calling Camera.main executes a FindByTag on the scene, which will get worse and worse with more tagged objects. CameraEventRouter A helper class to provide hooks into the Unity camera exclusive Lifecycle events ClippingBox Component to animate and visualize a box that can be used with per pixel based clipping. ClippingPlane Component to animate and visualize a plane that can be used with per pixel based clipping. ClippingPrimitive An abstract primitive component to animate and visualize a clipping primitive that can be used to drive per pixel based clipping. ClippingSphere Component to animate and visualize a sphere that can be used with per pixel based clipping. DebugUtilities Easing Ease settings and functionality for animation with curves EdgeUtilities The EdgeUtilities class provides functionality for working with Edge objects. EllipseLineDataProvider Creates an elliptical line shape. FastSimplexNoise A conglomeration of open-source simplex libraries in C# with an emphasis on performance GridObjectCollection A Grid Object Collection is simply a set of child objects organized with some layout parameters. The collection can be used to quickly create control panels or sets of prefab/objects. HeadPositionOffset Set the content around the camera height HoverLight Utility component to animate and visualize a light that can be used with the \"MixedRealityToolkit/Standard\" shader \"_HoverLight\" feature. LineFollower Synchronizes the follower's transform position with the point along the line. LineUtility Mixed Reality line utility class with helpful math functions for calculation, and other convenience methods. MaintainBorderLightWidth Utility component to keep the border light width a constant size no mater the object scale. This component should be used in conjunction with the \"MixedRealityToolkit/Standard\" shader \"_BorderLight\" feature. MathUtilities Math Utilities class. MeshLineRenderer Creates instances of a mesh along the line MeshOutline Component which can be used to render an outline around a mesh renderer. Enabling this component introduces an additional render pass of the object being outlined, but is designed to run performantly on mobile Mixed Reality devices and does not utilize any post processes. This behavior is designed to be used in conjunction with the MRTK/Standard shader. Limitations of this effect include it not working well on objects which are not watertight (or required to be two sided) and depth sorting issues can occur on overlapping objects. MeshOutlineHierarchy Component which can be used to render an outline around a hierarchy of mesh renderers using the MeshOutline component. MeshSmoother Component which can be used to automatically generate smoothed normals on a mesh and pack those normals into a UV set. Smoothed normals can be used for a variety of effects including extruding disjoint meshes along a vertex normal. This behavior is designed to be used in conjunction with the MRTK/Standard shader which assumes smoothed normals are packed into the 3rd UV set. MixedRealityLineRenderer Implements Unity's built in line renderer component, and applies the line data to it. MixedRealityOptimizeUtils ObjectCollectionNode Collection node is a data storage class for individual data about an object in a collection. OBJWriterUtility Utility for generating and saving OBJ files from GameObjects and their Meshes ParabolaConstrainedLineDataProvider Generates a parabolic line between two points. ParabolaLineDataProvider Base Parabola line data provider. ParabolaPhysicalLineDataProvider Creates a parabolic line based on physics. ParticleSystemLineRenderer attaches a set of particles to the line PlatformUtility ProximityLight Utility component to animate and visualize a light that can be used with the \"MixedRealityToolkit/Standard\" shader \"_ProximityLight\" feature. ProximityLight.LightSettings RectangleLineDataProvider Defines a line in the shape of a rectangle. RectTransformCubeScaler RectTransforms do not scale 3d objects (such as unit cubes) to fit within their bounds. This helper class will apply a scale to fit a unit cube into the bounds specified by the RectTransform. The Z component is scaled to the min of the X and Y components. Rest REST Class for CRUD Transactions. RuntimeSceneUtils ScatterObjectCollection A Scatter Object Collection is simply a set of child objects randomly laid out within a radius. Pressing \"update collection\" will run the randomization, feel free to run as many times until you get the desired result. SerializableDictionary<TKey, TValue> Generic Dictionary helper class that handles serialization of keys and values into lists before/after serialization time since Dictionary by itself is not Serializable. Extends C# Dictionary class to support typical API access methods SimpleLineDataProvider A simple line with two points. SplineDataProvider Creates a spline based on control points. StandardShaderUtility Mixed Reality standard shader utility class with commonly used constants, types and convenience methods. StripMeshLineRenderer Draws a strip of polygons along the line SyncContextUtility Utility class to assist in thread and context synchronization. SystemType Reference to a class Type with support for Unity serialization. TileGridObjectCollection A basic grid layout for game objects of a consistent size TypeCacheUtility Utility class to store subclasses of particular base class keys Reloads between play mode/edit mode and after re-compile of scripts WaitForBackgroundThread WaitForUpdate This can be used as a way to return to the main unity thread when using multiple threads with async methods. Structs AnimatorParameter A copy of the AnimatorControllerParameter because that class is not Serializable and cannot be modified in the editor. MixedRealityPose ProcessResult Result from a completed asynchronous process. Response Response to a REST Call. Vector3Smoothed Enums ArticulatedHandPose.GestureId Supported hand gestures. AutoStartBehavior This enumeration identifies two different ways to handle the startup behavior for a feature. Both will warm up the component, ready for it's use (e.g. connecting backend services or registering for events. The first causes the feature to start immediately. The second allows the feature to be manually started at a later time. AxisType The AxisType identifies the type of button or input being sent to the framework from a controller. This is mainly information only or for advanced users to understand the input coming directly from the controller. ClippingPrimitive.Side CollationOrder Collation order type used for sorting CreateProfileMenuItemIndices Defines the display order of the Assets > Create > Mixed Reality Toolkit > Profiles menu items. Easing.BasicEaseCurves basic ease curves for quick settings ExperienceScale The ExperienceScale identifies the environment for which the experience is designed. Handedness The Handedness defines which hand a controller is currently operating in. It is up to the developer to determine whether this affects the use of a controller or not. \"Other\" defines potential controllers that will offer a \"third\" hand, e.g. a full body tracking suit. LayoutAnchor Describes where parent should be located relative to child layout elements. LayoutOrder Collection layout type enum MovementConstraintType ObjectOrientationSurfaceType The type of surface to map the collect to. OrientationType Orientation type enum PivotAxis Rotational Pivot axis for orientating an object RadialViewReferenceDirection Which direction to orient the radial view object. RecognitionConfidenceLevel Indicates the confidence level of a recognized event. RotationConstraintType ScaleState SolverOrientationType SupportedApplicationModes The supported Application modes for specific features. SupportedPlatforms The supported platforms for Mixed Reality Toolkit Components and Features. TileGridObjectCollection.GridDivisions structure elements of a grid layout TrackedHandJoint The supported tracked hand joints. TrackedObjectType TypeGrouping Indicates how selectable classes should be collated in drop-down menu. VolumeType todo"
  },
  "api/Microsoft.MixedReality.Toolkit.Vector3RangeAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Vector3RangeAttribute.html",
    "title": "Class Vector3RangeAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class Vector3RangeAttribute Attribute used to make a float or int variable in a script be restricted to a specific range. Inheritance Object Vector3RangeAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public sealed class Vector3RangeAttribute : PropertyAttribute Constructors Vector3RangeAttribute(Single, Single) Attribute used to make a float or int variable in a script be restricted to a specific range. Declaration public Vector3RangeAttribute(float min, float max) Parameters Type Name Description Single min The minimum allowed value. Single max The maximum allowed value. Fields Max Maximum value. Declaration public readonly float Max Field Value Type Description Single Min Minimum value. Declaration public readonly float Min Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.VectorExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.VectorExtensions.html",
    "title": "Class VectorExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class VectorExtensions Extension methods for Unity's Vector struct Inheritance Object VectorExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class VectorExtensions Methods Average(ICollection<Vector2>) Declaration public static Vector2 Average(this ICollection<Vector2> vectors) Parameters Type Name Description ICollection < Vector2 > vectors Returns Type Description Vector2 Average(ICollection<Vector3>) Declaration public static Vector3 Average(this ICollection<Vector3> vectors) Parameters Type Name Description ICollection < Vector3 > vectors Returns Type Description Vector3 Average(IEnumerable<Vector2>) Declaration public static Vector2 Average(this IEnumerable<Vector2> vectors) Parameters Type Name Description IEnumerable < Vector2 > vectors Returns Type Description Vector2 Average(IEnumerable<Vector3>) Declaration public static Vector3 Average(this IEnumerable<Vector3> vectors) Parameters Type Name Description IEnumerable < Vector3 > vectors Returns Type Description Vector3 CylindricalMapping(Vector3, Single) Get the relative mapping based on a source Vec3 and a radius for cylinder mapping. Declaration public static Vector3 CylindricalMapping(Vector3 source, float radius) Parameters Type Name Description Vector3 source The source Vector3 to be mapped to cylinder Single radius This is a Single for the radius of the cylinder Returns Type Description Vector3 Div(Vector2, Vector2) Declaration public static Vector2 Div(this Vector2 value, Vector2 scale) Parameters Type Name Description Vector2 value Vector2 scale Returns Type Description Vector2 Div(Vector3, Vector3) Declaration public static Vector3 Div(this Vector3 value, Vector3 scale) Parameters Type Name Description Vector3 value Vector3 scale Returns Type Description Vector3 InverseTransformPoint(Vector3, Vector3, Quaternion, Vector3) Declaration public static Vector3 InverseTransformPoint(this Vector3 point, Vector3 translation, Quaternion rotation, Vector3 lossyScale) Parameters Type Name Description Vector3 point Vector3 translation Quaternion rotation Vector3 lossyScale Returns Type Description Vector3 IsValidVector(Vector3) Declaration public static bool IsValidVector(this Vector3 vector) Parameters Type Name Description Vector3 vector Returns Type Description Boolean Median(ICollection<Vector2>) Declaration public static Vector2 Median(this ICollection<Vector2> vectors) Parameters Type Name Description ICollection < Vector2 > vectors Returns Type Description Vector2 Median(ICollection<Vector3>) Declaration public static Vector3 Median(this ICollection<Vector3> vectors) Parameters Type Name Description ICollection < Vector3 > vectors Returns Type Description Vector3 Median(IEnumerable<Vector2>) Declaration public static Vector2 Median(this IEnumerable<Vector2> vectors) Parameters Type Name Description IEnumerable < Vector2 > vectors Returns Type Description Vector2 Median(IEnumerable<Vector3>) Declaration public static Vector3 Median(this IEnumerable<Vector3> vectors) Parameters Type Name Description IEnumerable < Vector3 > vectors Returns Type Description Vector3 Mul(Vector2, Vector2) Declaration public static Vector2 Mul(this Vector2 value, Vector2 scale) Parameters Type Name Description Vector2 value Vector2 scale Returns Type Description Vector2 Mul(Vector3, Vector3) Declaration public static Vector3 Mul(this Vector3 value, Vector3 scale) Parameters Type Name Description Vector3 value Vector3 scale Returns Type Description Vector3 RadialMapping(Vector3, Single, Single, Int32, Int32, Int32, Int32) Get the relative mapping based on a source Vec3 and a radius for radial mapping. Declaration public static Vector3 RadialMapping(Vector3 source, float radialRange, float radius, int row, int totalRows, int column, int totalColumns) Parameters Type Name Description Vector3 source The source Vector3 to be mapped to cylinder Single radialRange The total range of the radial in degrees as a Single Single radius This is a Single for the radius of the radial Int32 row The current row as a Int32 for the radial calculation Int32 totalRows The total rows as a Int32 for the radial calculation Int32 column The current column as a Int32 for the radial calculation Int32 totalColumns The total columns as a Int32 for the radial calculation Returns Type Description Vector3 RotateAround(Vector3, Vector3, Quaternion) Declaration public static Vector3 RotateAround(this Vector3 point, Vector3 pivot, Quaternion rotation) Parameters Type Name Description Vector3 point Vector3 pivot Quaternion rotation Returns Type Description Vector3 RotateAround(Vector3, Vector3, Vector3) Declaration public static Vector3 RotateAround(this Vector3 point, Vector3 pivot, Vector3 eulerAngles) Parameters Type Name Description Vector3 point Vector3 pivot Vector3 eulerAngles Returns Type Description Vector3 ScatterMapping(Vector3, Single) Randomized mapping based on a source Vec3 and a radius for randomization distance. Declaration public static Vector3 ScatterMapping(Vector3 source, float radius) Parameters Type Name Description Vector3 source The source Vector3 to be mapped to cylinder Single radius This is a Single for the radius of the cylinder Returns Type Description Vector3 SphericalMapping(Vector3, Single) Get the relative mapping based on a source Vec3 and a radius for spherical mapping. Declaration public static Vector3 SphericalMapping(Vector3 source, float radius) Parameters Type Name Description Vector3 source The source Vector3 to be mapped to sphere Single radius This is a Single for the radius of the sphere Returns Type Description Vector3 TransformPoint(Vector3, Vector3, Quaternion, Vector3) Declaration public static Vector3 TransformPoint(this Vector3 point, Vector3 translation, Quaternion rotation, Vector3 lossyScale) Parameters Type Name Description Vector3 point Vector3 translation Quaternion rotation Vector3 lossyScale Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Input.InteractionSourceExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Input.InteractionSourceExtensions.html",
    "title": "Class InteractionSourceExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractionSourceExtensions Extensions for the InteractionSource class to expose the renderable model. Inheritance Object InteractionSourceExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Windows.Input Assembly : cs.temp.dll.dll Syntax public static class InteractionSourceExtensions"
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Input.WindowsDictationInputProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Input.WindowsDictationInputProvider.html",
    "title": "Class WindowsDictationInputProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsDictationInputProvider Inheritance Object WindowsDictationInputProvider Implements IMixedRealityDictationSystem IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.Windows.Input Assembly : cs.temp.dll.dll Syntax public class WindowsDictationInputProvider : BaseInputDeviceManager, IMixedRealityDictationSystem, IMixedRealityCapabilityCheck Constructors WindowsDictationInputProvider(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsDictationInputProvider(IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. WindowsDictationInputProvider(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public WindowsDictationInputProvider(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties IsListening Declaration public bool IsListening { get; } Property Value Type Description Boolean Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. StartRecording(GameObject, Single, Single, Int32, String) Declaration public void StartRecording(GameObject listener, float initialSilenceTimeout = 5F, float autoSilenceTimeout = 20F, int recordingTime = 10, string micDeviceName = \"\") Parameters Type Name Description GameObject listener Single initialSilenceTimeout Single autoSilenceTimeout Int32 recordingTime String micDeviceName StartRecordingAsync(GameObject, Single, Single, Int32, String) Declaration public Task StartRecordingAsync(GameObject listener = null, float initialSilenceTimeout = 5F, float autoSilenceTimeout = 20F, int recordingTime = 10, string micDeviceName = \"\") Parameters Type Name Description GameObject listener Single initialSilenceTimeout Single autoSilenceTimeout Int32 recordingTime String micDeviceName Returns Type Description Task StopRecording() Declaration public void StopRecording() StopRecordingAsync() Declaration public Task<AudioClip> StopRecordingAsync() Returns Type Description Task < AudioClip > Implements IMixedRealityDictationSystem IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Input.WindowsGestureSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Input.WindowsGestureSettings.html",
    "title": "Enum WindowsGestureSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Enum WindowsGestureSettings Copy of Unity's GestureSettings Namespace : Microsoft.MixedReality.Toolkit.Windows.Input Assembly : cs.temp.dll.dll Syntax public enum WindowsGestureSettings Fields Name Description DoubleTap Enable support for the double-tap gesture. Hold Enable support for the hold gesture. ManipulationTranslate Enable support for the manipulation gesture which tracks changes to the hand's position. This gesture is relative to the start position of the gesture and measures an absolute movement through the world. NavigationRailsX Enable support for the navigation gesture, in the horizontal axis using rails (guides). NavigationRailsY Enable support for the navigation gesture, in the vertical axis using rails (guides). NavigationRailsZ Enable support for the navigation gesture, in the depth axis using rails (guides). NavigationX Enable support for the navigation gesture, in the horizontal axis. NavigationY Enable support for the navigation gesture, in the vertical axis. NavigationZ Enable support for the navigation gesture, in the depth axis. Tap Enable support for the tap gesture."
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Input.WindowsSpeechInputProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Input.WindowsSpeechInputProvider.html",
    "title": "Class WindowsSpeechInputProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsSpeechInputProvider Inheritance Object WindowsSpeechInputProvider Implements IMixedRealitySpeechSystem IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.Windows.Input Assembly : cs.temp.dll.dll Syntax public class WindowsSpeechInputProvider : BaseInputDeviceManager, IMixedRealitySpeechSystem, IMixedRealityCapabilityCheck Constructors WindowsSpeechInputProvider(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsSpeechInputProvider(IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. WindowsSpeechInputProvider(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public WindowsSpeechInputProvider(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Fields InputSource The Input Source for Windows Speech Input. Declaration public IMixedRealityInputSource InputSource Field Value Type Description IMixedRealityInputSource Properties IsRecognitionActive Declaration public bool IsRecognitionActive { get; } Property Value Type Description Boolean RecognitionConfidenceLevel The minimum confidence level for the recognizer to fire an event. Declaration public RecognitionConfidenceLevel RecognitionConfidenceLevel { get; set; } Property Value Type Description RecognitionConfidenceLevel Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. StartRecognition() Declaration public void StartRecognition() StopRecognition() Declaration public void StopRecognition() Implements IMixedRealitySpeechSystem IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Input.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Input.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Windows.Input | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Windows.Input Classes InteractionSourceExtensions Extensions for the InteractionSource class to expose the renderable model. WindowsDictationInputProvider WindowsSpeechInputProvider Enums WindowsGestureSettings Copy of Unity's GestureSettings"
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Utilities.WindowsApiChecker.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Utilities.WindowsApiChecker.html",
    "title": "Class WindowsApiChecker | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsApiChecker Helper class for determining if a Windows API contract is available. Inheritance Object WindowsApiChecker Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Windows.Utilities Assembly : cs.temp.dll.dll Syntax public static class WindowsApiChecker Remarks See https://docs.microsoft.com/uwp/extension-sdks/windows-universal-sdk for a full list of contracts. Properties UniversalApiContractV3_IsAvailable Is the Universal API Contract v3.0 Available? Declaration public static bool UniversalApiContractV3_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV4_IsAvailable Is the Universal API Contract v4.0 Available? Declaration public static bool UniversalApiContractV4_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV5_IsAvailable Is the Universal API Contract v5.0 Available? Declaration public static bool UniversalApiContractV5_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV6_IsAvailable Is the Universal API Contract v6.0 Available? Declaration public static bool UniversalApiContractV6_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV7_IsAvailable Is the Universal API Contract v7.0 Available? Declaration public static bool UniversalApiContractV7_IsAvailable { get; } Property Value Type Description Boolean UniversalApiContractV8_IsAvailable Is the Universal API Contract v8.0 Available? Declaration public static bool UniversalApiContractV8_IsAvailable { get; } Property Value Type Description Boolean Methods CheckApiContracts() Declaration public static void CheckApiContracts()"
  },
  "api/Microsoft.MixedReality.Toolkit.Windows.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Windows.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Windows.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Windows.Utilities Classes WindowsApiChecker Helper class for determining if a Windows API contract is available."
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ActivePowerSchemeInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ActivePowerSchemeInfo.html",
    "title": "Class ActivePowerSchemeInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ActivePowerSchemeInfo Inheritance Object ActivePowerSchemeInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class ActivePowerSchemeInfo Fields ActivePowerScheme Declaration public string ActivePowerScheme Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ClippingPlaneEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ClippingPlaneEditor.html",
    "title": "Class ClippingPlaneEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPlaneEditor A custom editor for the ClippingPlaneEditor to allow for specification of the framing bounds. Inheritance Object ClippingPrimitiveEditor ClippingPlaneEditor Inherited Members ClippingPrimitiveEditor.OnInspectorGUI() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ClippingPlaneEditor : ClippingPrimitiveEditor Methods HasFrameBounds() Notifies the Unity editor if this object has custom frame bounds. Declaration protected override bool HasFrameBounds() Returns Type Description Boolean True if custom frame bounds can be used from OnGetFrameBounds. Overrides ClippingPrimitiveEditor.HasFrameBounds() OnGetFrameBounds() Returns the bounds the editor should focus on. Declaration protected override Bounds OnGetFrameBounds() Returns Type Description Bounds The bounds of the clipping primitive. Overrides ClippingPrimitiveEditor.OnGetFrameBounds()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ClippingPrimitiveEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ClippingPrimitiveEditor.html",
    "title": "Class ClippingPrimitiveEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingPrimitiveEditor An abstract editor component to improve the editor experience with ClippingPrimitives. Inheritance Object ClippingPrimitiveEditor ClippingBoxEditor ClippingPlaneEditor ClippingSphereEditor Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public abstract class ClippingPrimitiveEditor : UnityEditor.Editor Methods HasFrameBounds() Notifies the Unity editor if this object has custom frame bounds. Declaration protected abstract bool HasFrameBounds() Returns Type Description Boolean True if custom frame bounds can be used from OnGetFrameBounds. OnGetFrameBounds() Returns the bounds the editor should focus on. Declaration protected abstract Bounds OnGetFrameBounds() Returns Type Description Bounds The bounds of the clipping primitive. OnInspectorGUI() Looks for changes to the list of renderers and gracefully adds and removes them. Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ExtensionServiceCreator.CreationStage.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ExtensionServiceCreator.CreationStage.html",
    "title": "Enum ExtensionServiceCreator.CreationStage | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ExtensionServiceCreator.CreationStage The current stage of the creation process Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public enum CreationStage Fields Name Description ChooseOutputFolders CreatingExtensionService CreatingProfileInstance Finished SelectNameAndPlatform"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ExtensionServiceCreator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ExtensionServiceCreator.html",
    "title": "Class ExtensionServiceCreator | Mixed Reality Toolkit Documentation",
    "keywords": "Class ExtensionServiceCreator Class used to generate service scripts and profile instances. Primarily designed for in-editor use Inheritance Object ExtensionServiceCreator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ExtensionServiceCreator Properties CreationLog Log of errors and updates thus far in the create operation of the new extension service classes Declaration public string CreationLog { get; } Property Value Type Description String InspectorFolderObject Unity object pointing to folder asset to place Inspector class file, if applicable Declaration public UnityEngine.Object InspectorFolderObject { get; set; } Property Value Type Description UnityEngine.Object InspectorName Name of Unity inspector class to create. Value is ServiceName concatenated with \"Inspector\" Declaration public string InspectorName { get; } Property Value Type Description String InterfaceFolderObject Unity object pointing to folder asset to place interface file, if applicable Declaration public UnityEngine.Object InterfaceFolderObject { get; set; } Property Value Type Description UnityEngine.Object InterfaceName Name of interface to create for new extension service. Value is ServiceName with leading \"I\" Declaration public string InterfaceName { get; } Property Value Type Description String Namespace Namespace to utilize for all classes Declaration public string Namespace { get; set; } Property Value Type Description String Platforms Supported platform flags for new extension service. Added to attribute on service class Declaration public SupportedPlatforms Platforms { get; set; } Property Value Type Description SupportedPlatforms ProfileAssetFolderObject Unity object pointing to folder asset to place ScriptableObject profile asset file, if applicable Declaration public UnityEngine.Object ProfileAssetFolderObject { get; set; } Property Value Type Description UnityEngine.Object ProfileAssetName Name of default ScriptableObject instance asset to create. Value is \"Default\" concatenated with ProfileName Declaration public string ProfileAssetName { get; } Property Value Type Description String ProfileFolderObject Unity object pointing to folder asset to place ScriptableObject profile class file, if applicable Declaration public UnityEngine.Object ProfileFolderObject { get; set; } Property Value Type Description UnityEngine.Object ProfileInstance Object instance of ScriptableObject profile class for extension service created Declaration public BaseMixedRealityProfile ProfileInstance { get; } Property Value Type Description BaseMixedRealityProfile ProfileName Name of ScriptableObject profile class to create. Value is ServiceName concatenated with \"Profile\" Declaration public string ProfileName { get; } Property Value Type Description String Result Current result of extension service file(s) create operation Declaration public ExtensionServiceCreator.CreateResult Result { get; } Property Value Type Description ExtensionServiceCreator.CreateResult SampleCode Sample code string demonstrating example usage for new Extension service created Declaration public string SampleCode { get; } Property Value Type Description String ServiceFolderObject Unity object pointing to folder asset to place Service class file Declaration public UnityEngine.Object ServiceFolderObject { get; set; } Property Value Type Description UnityEngine.Object ServiceName The name of the new extension service to build Declaration public string ServiceName { get; set; } Property Value Type Description String ServiceType System.Type of Extension Service created Declaration public Type ServiceType { get; } Property Value Type Description Type Stage Current stage in UI workflow for creation Declaration public ExtensionServiceCreator.CreationStage Stage { get; set; } Property Value Type Description ExtensionServiceCreator.CreationStage UsesInspector Should a custom editor inspector class be created for new extension service Declaration public bool UsesInspector { get; set; } Property Value Type Description Boolean UsesProfile Should a ScriptableObject profile class be created for new extension service Declaration public bool UsesProfile { get; set; } Property Value Type Description Boolean Methods BeginAssetCreationProcess() Start the creation process for all revelant extension service files based on current creator property settings Declaration public Task BeginAssetCreationProcess() Returns Type Description Task CanBuildAsset(UnityEngine.Object, String) Returns true if the asset supplied, via Folder object representing path and file name string (assumming .cs files only), does not exist. False otherwise Declaration public bool CanBuildAsset(UnityEngine.Object folder, string fileName) Parameters Type Name Description UnityEngine.Object folder String fileName Returns Type Description Boolean IsValidFolder(String) Returns true if the folder path string supplied is a valid location in the Unity project, false otherwise Declaration public bool IsValidFolder(string folderPath) Parameters Type Name Description String folderPath Returns Type Description Boolean IsValidFolder(UnityEngine.Object) Returns true if the folder path supplied by Folder object is a valid location in the Unity project, false otherwise Declaration public bool IsValidFolder(UnityEngine.Object folder) Parameters Type Name Description UnityEngine.Object folder Returns Type Description Boolean LoadStoredState() Load creator state from unity SessionState Declaration public void LoadStoredState() ResetState() Reset current creator state to default and save Declaration public void ResetState() SetAllFolders(String) Declaration public bool SetAllFolders(string path) Parameters Type Name Description String path Returns Type Description Boolean StoreState() Save current creator state to session registry in Unity Declaration public void StoreState() ValidateAssets(List<String>) Validate template assets Declaration public bool ValidateAssets(List<string> errors) Parameters Type Name Description List < String > errors Returns Type Description Boolean true if no errors encountered, false otherwise Remarks Adds items to errors log field if not valid ValidateName(List<String>) Return true if configured Extension Service class name is valid. False otherwise Declaration public bool ValidateName(List<string> errors) Parameters Type Name Description List < String > errors Returns Type Description Boolean Remarks Adds items to errors log field if not valid ValidateNamespace(List<String>) Validate namespace property with each class/interface file to be created for new extension service Declaration public bool ValidateNamespace(List<string> errors) Parameters Type Name Description List < String > errors Returns Type Description Boolean true if no errors, false otherwise Remarks Adds items to errors log field if not valid ValidatePlatforms(List<String>) Validate that SupportedPlatforms is not zero. Declaration public bool ValidatePlatforms(List<string> errors) Parameters Type Name Description List < String > errors Returns Type Description Boolean Remarks Adds items to errors log field if not valid"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityOptimizeWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityOptimizeWindow.html",
    "title": "Class MixedRealityOptimizeWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityOptimizeWindow Build window - Utility for developers to automate optimization of their Unity scene/project Inheritance Object MixedRealityOptimizeWindow Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityOptimizeWindow : EditorWindow Methods OpenWindow() Declaration public static void OpenWindow() StartUp() Declaration public void StartUp()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityPosePropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityPosePropertyDrawer.html",
    "title": "Class MixedRealityPosePropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPosePropertyDrawer Inheritance Object MixedRealityPosePropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityPosePropertyDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ColorChanger.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ColorChanger.html",
    "title": "Class ColorChanger | Mixed Reality Toolkit Documentation",
    "keywords": "Class ColorChanger Change the color of the material on a renderer. Useful for visualizing button presses. Inheritance Object ColorChanger Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class ColorChanger : MonoBehaviour Fields cur Declaration public int cur Field Value Type Description Int32 mats Declaration public Material[] mats Field Value Type Description Material [] rend Declaration public MeshRenderer rend Field Value Type Description MeshRenderer Methods Increment() Increments to the next material in the input list of materials and applies it to the renderer. Declaration public void Increment() RandomColor() Sets a random color on the renderer's material. Declaration public void RandomColor()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ColorChangerUnityUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ColorChangerUnityUI.html",
    "title": "Class ColorChangerUnityUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class ColorChangerUnityUI Change the color of the material on a UnityUI Graphic (ex. Image). Useful for visualizing button presses. Inheritance Object ColorChangerUnityUI Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class ColorChangerUnityUI : MonoBehaviour Methods RandomColor() Sets a random color on the renderer's material. Declaration public void RandomColor()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DebugTextOutput.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DebugTextOutput.html",
    "title": "Class DebugTextOutput | Mixed Reality Toolkit Documentation",
    "keywords": "Class DebugTextOutput Inheritance Object DebugTextOutput Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class DebugTextOutput : MonoBehaviour Fields textMesh Declaration protected TextMeshPro textMesh Field Value Type Description TextMeshPro Methods SetTextWithTimestamp(String) Declaration public void SetTextWithTimestamp(string text) Parameters Type Name Description String text"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.EyeCalibrationChecker.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.EyeCalibrationChecker.html",
    "title": "Class EyeCalibrationChecker | Mixed Reality Toolkit Documentation",
    "keywords": "Class EyeCalibrationChecker Checks whether the user is calibrated and prompts a notification to encourage the user to calibrate. Inheritance Object EyeCalibrationChecker Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class EyeCalibrationChecker : MonoBehaviour Fields OnEyeCalibrationDetected Declaration public UnityEvent OnEyeCalibrationDetected Field Value Type Description UnityEvent OnNoEyeCalibrationDetected Declaration public UnityEvent OnNoEyeCalibrationDetected Field Value Type Description UnityEvent"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.EyeTrackingDemoUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.EyeTrackingDemoUtils.html",
    "title": "Class EyeTrackingDemoUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class EyeTrackingDemoUtils General useful utility functions. Inheritance Object EyeTrackingDemoUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public static class EyeTrackingDemoUtils Methods GameObject_ChangeColor(GameObject, Color, ref Nullable<Color>, Boolean) Change the color of game object \"gobj\". Declaration public static void GameObject_ChangeColor(GameObject gobj, Color newColor, ref Color? originalColor, bool onlyApplyToRootObj) Parameters Type Name Description GameObject gobj Color newColor Nullable < Color > originalColor Enter \"null\" in case you're passing the original object and want to save the original color. Boolean onlyApplyToRootObj GameObject_ChangeTransparency(GameObject, Single) Change the transparency of game object \"gobj\" with a transparency value between 0 and 1; Declaration public static void GameObject_ChangeTransparency(GameObject gobj, float newTransparency) Parameters Type Name Description GameObject gobj Single newTransparency GameObject_ChangeTransparency(GameObject, Single, ref Single) Change the transparency of game object \"gobj\" with a transparency value between 0 and 255 with the option to receive the original transparency value back. Declaration public static void GameObject_ChangeTransparency(GameObject gobj, float transparency, ref float originalTransparency) Parameters Type Name Description GameObject gobj Single transparency Expected values range from 0 (fully transparent) to 1 (fully opaque). Single originalTransparency Input \"-1\" if you don't know the original transparency yet. GetFullName(GameObject) Returns the full name of a given GameObject in the scene graph. Declaration public static string GetFullName(GameObject go) Parameters Type Name Description GameObject go Returns Type Description String GetFullName(GameObject, out Boolean) Returns the full name of a given GameObject in the scene graph. Declaration public static string GetFullName(GameObject go, out bool valid) Parameters Type Name Description GameObject go Boolean valid Returns Type Description String GetValidFilename(String) Returns a correctly formatted filename removing invalid characters if necessary. Declaration public static string GetValidFilename(string unvalidatedFilename) Parameters Type Name Description String unvalidatedFilename The unvalidated filename Returns Type Description String Validated filename. LoadNewScene(String) Loads a Unity scene with the given name. Declaration public static IEnumerator LoadNewScene(string sceneToBeLoaded) Parameters Type Name Description String sceneToBeLoaded Name of the scene to be loaded. Returns Type Description IEnumerator LoadNewScene(String, Single) Loads a Unity scene with the given name after a given delay in seconds. Declaration public static IEnumerator LoadNewScene(string sceneToBeLoaded, float delayInSeconds) Parameters Type Name Description String sceneToBeLoaded Name of the scene to be loaded. Single delayInSeconds Delay in seconds to wait before loading the new scene. Returns Type Description IEnumerator Normalize(Single, Single, Single) Normalize the given value based on the provided min and max values. Declaration public static float Normalize(float value, float min, float max) Parameters Type Name Description Single value Single min Single max Returns Type Description Single RandomizeListOrder<T>(T[]) Shuffles the entries in a given array and returns the shuffled array. Declaration public static T[] RandomizeListOrder<T>(T[] array) Parameters Type Name Description T[] array Returns Type Description T[] Type Parameters Name Description T VisAngleInDegreesToMeters(Single, Single) Computes the metric size (in meters) for a given visual angle size. Declaration public static float VisAngleInDegreesToMeters(float visAngleInDegrees, float distInMeters) Parameters Type Name Description Single visAngleInDegrees In degrees. Single distInMeters In meters. Returns Type Description Single VisAngleInDegreesToMeters(Vector3, Single) Returns the metric size in meters of a given Vector3 in visual angle in degrees and a given viewing distance in meters. Declaration public static Vector3 VisAngleInDegreesToMeters(Vector3 visAngleInDegrees, float distInMeters) Parameters Type Name Description Vector3 visAngleInDegrees In degrees. Single distInMeters In meters. Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.FaceUser.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.FaceUser.html",
    "title": "Class FaceUser | Mixed Reality Toolkit Documentation",
    "keywords": "Class FaceUser The associated game object will turn depending on the user's eye gaze: The currently looked at part will move towards the front, facing the user. Inheritance Object FaceUser Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class FaceUser : MonoBehaviour Methods Disengage() Declaration public void Disengage() Engage() Declaration public void Engage() Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.FollowEyeGaze.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.FollowEyeGaze.html",
    "title": "Class FollowEyeGaze | Mixed Reality Toolkit Documentation",
    "keywords": "Class FollowEyeGaze Sample for allowing a GameObject to follow the user's eye gaze at a given distance of \"DefaultDistanceInMeters\". Inheritance Object FollowEyeGaze Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class FollowEyeGaze : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.LogStructure.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.LogStructure.html",
    "title": "Class LogStructure | Mixed Reality Toolkit Documentation",
    "keywords": "Class LogStructure Inheritance Object LogStructure LogStructureEyeGaze Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class LogStructure : MonoBehaviour Methods GetData(String, String, EyeTrackingTarget) Declaration public virtual object[] GetData(string inputType, string inputStatus, EyeTrackingTarget intTarget) Parameters Type Name Description String inputType String inputStatus EyeTrackingTarget intTarget Returns Type Description Object [] GetHeaderColumns() Declaration public virtual string[] GetHeaderColumns() Returns Type Description String []"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Rotator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Rotator.html",
    "title": "Class Rotator | Mixed Reality Toolkit Documentation",
    "keywords": "Class Rotator Inheritance Object Rotator Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class Rotator : MonoBehaviour Fields angle Declaration public float angle Field Value Type Description Single Methods Rotate() Declaration public void Rotate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ShowSliderValue.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ShowSliderValue.html",
    "title": "Class ShowSliderValue | Mixed Reality Toolkit Documentation",
    "keywords": "Class ShowSliderValue Inheritance Object ShowSliderValue Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class ShowSliderValue : MonoBehaviour Methods OnSliderUpdated(SliderEventData) Declaration public void OnSliderUpdated(SliderEventData eventData) Parameters Type Name Description SliderEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandDataProvider.html",
    "title": "Class SimulatedHandDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimulatedHandDataProvider Produces simulated data every frame that defines joint positions. Inheritance Object SimulatedHandDataProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SimulatedHandDataProvider Constructors SimulatedHandDataProvider(MixedRealityInputSimulationProfile) Declaration public SimulatedHandDataProvider(MixedRealityInputSimulationProfile _profile) Parameters Type Name Description MixedRealityInputSimulationProfile _profile Fields IsAlwaysVisibleLeft If true then the hand is always visible, regardless of simulating. Declaration public bool IsAlwaysVisibleLeft Field Value Type Description Boolean IsAlwaysVisibleRight If true then the hand is always visible, regardless of simulating. Declaration public bool IsAlwaysVisibleRight Field Value Type Description Boolean profile Declaration protected MixedRealityInputSimulationProfile profile Field Value Type Description MixedRealityInputSimulationProfile Properties IsSimulatingLeft Left hand is controlled by user input. Declaration public bool IsSimulatingLeft { get; } Property Value Type Description Boolean IsSimulatingRight Right hand is controlled by user input. Declaration public bool IsSimulatingRight { get; } Property Value Type Description Boolean Methods ResetHand(Handedness) Declaration public void ResetHand(Handedness handedness) Parameters Type Name Description Handedness handedness UpdateHandData(SimulatedHandData, SimulatedHandData, MouseDelta) Capture a snapshot of simulated hand data based on current state. Declaration public bool UpdateHandData(SimulatedHandData handDataLeft, SimulatedHandData handDataRight, MouseDelta mouseDelta) Parameters Type Name Description SimulatedHandData handDataLeft SimulatedHandData handDataRight MouseDelta mouseDelta Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandUtils.html",
    "title": "Class SimulatedHandUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimulatedHandUtils Inheritance Object SimulatedHandUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SimulatedHandUtils Methods CalculateJointRotations(Handedness, Vector3[], Quaternion[]) Compute the rotation of each joint, with the forward vector of the rotation pointing along the joint bone, and the up vector pointing up. The rotation of the base joints (thumb base, pinky base, etc) as well as the wrist joint is set to point in the direction of palm forward. Assumption: the position of each joint has been copied from handData joint positions Declaration public static void CalculateJointRotations(Handedness handedness, Vector3[] jointPositions, Quaternion[] jointOrientationsOut) Parameters Type Name Description Handedness handedness Vector3 [] jointPositions Quaternion [] jointOrientationsOut GetPalmForwardVector(Vector3[]) Gets vector corresponding to +z. Declaration public static Vector3 GetPalmForwardVector(Vector3[] jointPositions) Parameters Type Name Description Vector3 [] jointPositions Returns Type Description Vector3 GetPalmRightVector(Handedness, Vector3[]) Declaration public static Vector3 GetPalmRightVector(Handedness handedness, Vector3[] jointPositions) Parameters Type Name Description Handedness handedness Vector3 [] jointPositions Returns Type Description Vector3 GetPalmUpVector(Handedness, Vector3[]) Gets the vector corresponding to +y. Declaration public static Vector3 GetPalmUpVector(Handedness handedness, Vector3[] jointPositions) Parameters Type Name Description Handedness handedness Vector3 [] jointPositions Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityToolkit.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityToolkit.html",
    "title": "Class MixedRealityToolkit | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkit This class is responsible for coordinating the operation of the Mixed Reality Toolkit. It is the only Singleton in the entire project. It provides a service registry for all active services that are used within a project as well as providing the active configuration profile for the project. The Profile can be swapped out at any time to meet the needs of your project. Inheritance Object MixedRealityToolkit Implements IMixedRealityServiceRegistrar Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkit : MonoBehaviour, IMixedRealityServiceRegistrar Properties ActiveProfile The public property of the Active Profile, ensuring events are raised on the change of the configuration Declaration public MixedRealityToolkitConfigurationProfile ActiveProfile { get; set; } Property Value Type Description MixedRealityToolkitConfigurationProfile ActiveSystems Current active systems registered with the MixedRealityToolkit. Declaration public IReadOnlyDictionary<Type, IMixedRealityService> ActiveSystems { get; } Property Value Type Description IReadOnlyDictionary < Type , IMixedRealityService > Remarks Systems can only be registered once by Type BoundarySystem The current Boundary System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityBoundarySystem BoundarySystem { get; } Property Value Type Description IMixedRealityBoundarySystem CameraSystem The current Camera System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityCameraSystem CameraSystem { get; } Property Value Type Description IMixedRealityCameraSystem DiagnosticsSystem The current Diagnostics System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityDiagnosticsSystem DiagnosticsSystem { get; } Property Value Type Description IMixedRealityDiagnosticsSystem HasActiveProfile Checks if there is a valid instance of the MixedRealityToolkit, then checks if there is there a valid Active Profile. Declaration public bool HasActiveProfile { get; } Property Value Type Description Boolean InputSystem The current Input System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityInputSystem InputSystem { get; } Property Value Type Description IMixedRealityInputSystem Instance Returns the Singleton instance of the classes type. Declaration public static MixedRealityToolkit Instance { get; } Property Value Type Description MixedRealityToolkit IsActiveInstance Returns true if this is the active instance. Declaration public bool IsActiveInstance { get; } Property Value Type Description Boolean IsInitialized Returns whether the instance has been initialized or not. Declaration public static bool IsInitialized { get; } Property Value Type Description Boolean IsSceneSystemEnabled Returns true if the MixedRealityToolkit exists and has an active profile that has Scene system enabled. Declaration public static bool IsSceneSystemEnabled { get; } Property Value Type Description Boolean IsTeleportSystemEnabled Returns true if the MixedRealityToolkit exists and has an active profile that has Teleport system enabled. Declaration public static bool IsTeleportSystemEnabled { get; } Property Value Type Description Boolean RegisteredMixedRealityServices Local service registry for the Mixed Reality Toolkit, to allow runtime use of the IMixedRealityService . Declaration public IReadOnlyList<Tuple<Type, IMixedRealityService>> RegisteredMixedRealityServices { get; } Property Value Type Description IReadOnlyList < Tuple < Type , IMixedRealityService >> SceneSystem The current Scene System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealitySceneSystem SceneSystem { get; } Property Value Type Description IMixedRealitySceneSystem SpatialAwarenessSystem The current Spatial Awareness System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealitySpatialAwarenessSystem SpatialAwarenessSystem { get; } Property Value Type Description IMixedRealitySpatialAwarenessSystem TeleportSystem The current Teleport System registered with the Mixed Reality Toolkit. Declaration public static IMixedRealityTeleportSystem TeleportSystem { get; } Property Value Type Description IMixedRealityTeleportSystem Methods AssertIsInitialized() Expose an assertion whether the MixedRealityToolkit class is initialized. Declaration public static void AssertIsInitialized() ConfirmInitialized() Static function to determine if the MixedRealityToolkit class has been initialized or not. Declaration public static bool ConfirmInitialized() Returns Type Description Boolean DisableAllServicesByType(Type) Disable all services in the Mixed Reality Toolkit active service registry for a given type Declaration public void DisableAllServicesByType(Type interfaceType) Parameters Type Name Description Type interfaceType The interface type for the system to be removed. E.G. InputSystem, BoundarySystem DisableAllServicesByTypeAndName(Type, String) Disable all services in the Mixed Reality Toolkit active service registry for a given type and name Declaration public void DisableAllServicesByTypeAndName(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType The interface type for the system to be disabled. E.G. InputSystem, BoundarySystem String serviceName Name of the specific service EnableAllServicesByType(Type) Enable all services in the Mixed Reality Toolkit active service registry for a given type Declaration public void EnableAllServicesByType(Type interfaceType) Parameters Type Name Description Type interfaceType The interface type for the system to be enabled. E.G. InputSystem, BoundarySystem EnableAllServicesByTypeAndName(Type, String) Enable all services in the Mixed Reality Toolkit active service registry for a given type and name Declaration public void EnableAllServicesByTypeAndName(Type interfaceType, string serviceName) Parameters Type Name Description Type interfaceType The interface type for the system to be enabled. E.G. InputSystem, BoundarySystem String serviceName Name of the specific service GetService<T>(String, Boolean) Gets the instance of the registered service. Declaration public T GetService<T>(string name = null, bool showLogs = true) where T : IMixedRealityService Parameters Type Name Description String name The name of the service. Boolean showLogs Indicates whether or not diagnostic logging should be performed in case of an error Returns Type Description T The registered service instance as the requested type. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). GetServices<T>(String) Gets the collection of the registered service instances matching the requested type. Declaration public IReadOnlyList<T> GetServices<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name Friendly name of the service. Returns Type Description IReadOnlyList <T> Read-only collection of the service instances, as the requested type. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). IsServiceRegistered<T>(String) Checks to see if a service of the specified type has been registered. Declaration public bool IsServiceRegistered<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name The name of the service. Returns Type Description Boolean True if the service is registered, false otherwise. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). IsSystemRegistered<T>() Generic function used to interrogate the Mixed Reality Toolkit active system registry for the existence of a core system. Declaration public bool IsSystemRegistered<T>() where T : IMixedRealityService Returns Type Description Boolean True, there is a system registered with the selected interface, False, no system found for that interface Type Parameters Name Description T The interface type for the system to be retrieved. E.G. InputSystem, BoundarySystem. Remarks Note: type should be the Interface of the system to be retrieved and not the concrete class itself. RegisterService<T>(T) Declaration public bool RegisterService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Returns Type Description Boolean Type Parameters Name Description T RegisterService<T>(Type, SupportedPlatforms, Object[]) Registers a service of the specified type. Declaration public bool RegisterService<T>(Type concreteType, SupportedPlatforms supportedPlatforms = null, params object[] args) where T : IMixedRealityService Parameters Type Name Description Type concreteType The concrete type to instantiate. SupportedPlatforms supportedPlatforms The platform(s) on which the service is supported. Object [] args Optional arguments used when instantiating the concrete type. Returns Type Description Boolean True if the service was successfully registered, false otherwise. Type Parameters Name Description T The interface type of the service to be registered (ex: IMixedRealityBoundarySystem). ResetConfiguration(MixedRealityToolkitConfigurationProfile) When a configuration Profile is replaced with a new configuration, force all services to reset and read the new values Declaration public void ResetConfiguration(MixedRealityToolkitConfigurationProfile profile) Parameters Type Name Description MixedRealityToolkitConfigurationProfile profile SetActiveInstance(MixedRealityToolkit) Declaration public static void SetActiveInstance(MixedRealityToolkit toolkitInstance) Parameters Type Name Description MixedRealityToolkit toolkitInstance SetInstanceInactive(MixedRealityToolkit) Declaration public static void SetInstanceInactive(MixedRealityToolkit toolkitInstance) Parameters Type Name Description MixedRealityToolkit toolkitInstance UnregisterService<T>(T) Declaration public bool UnregisterService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Returns Type Description Boolean Type Parameters Name Description T UnregisterService<T>(String) Unregisters a service of the specified type. Declaration public bool UnregisterService<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name The name of the service to unregister. Returns Type Description Boolean True if the service was successfully unregistered, false otherwise. Type Parameters Name Description T The interface type of the service to be unregistered (ex: IMixedRealityBoundarySystem). Remarks If the name argument is not specified, the first instance will be unregistered Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityToolkitConfigurationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityToolkitConfigurationProfile.html",
    "title": "Class MixedRealityToolkitConfigurationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitConfigurationProfile Configuration profile settings for the Mixed Reality Toolkit. Inheritance Object BaseMixedRealityProfile MixedRealityToolkitConfigurationProfile Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitConfigurationProfile : BaseMixedRealityProfile Properties BoundarySystemSystemType Boundary System class to instantiate at runtime. Declaration public SystemType BoundarySystemSystemType { get; } Property Value Type Description SystemType BoundaryVisualizationProfile Active profile for boundary visualization Declaration public MixedRealityBoundaryVisualizationProfile BoundaryVisualizationProfile { get; } Property Value Type Description MixedRealityBoundaryVisualizationProfile CameraProfile Profile for customizing your camera and quality settings based on if your head mounted display (HMD) is a transparent device or an occluded device. Declaration public MixedRealityCameraProfile CameraProfile { get; } Property Value Type Description MixedRealityCameraProfile CameraSystemType Camera System class to instantiate at runtime. Declaration public SystemType CameraSystemType { get; } Property Value Type Description SystemType DiagnosticsSystemProfile Active profile for diagnostic configuration Declaration public MixedRealityDiagnosticsProfile DiagnosticsSystemProfile { get; } Property Value Type Description MixedRealityDiagnosticsProfile DiagnosticsSystemSystemType Diagnostics System Script File to instantiate at runtime Declaration public SystemType DiagnosticsSystemSystemType { get; } Property Value Type Description SystemType InputSystemProfile Input System profile for configuring events and actions to input devices. Declaration public MixedRealityInputSystemProfile InputSystemProfile { get; } Property Value Type Description MixedRealityInputSystemProfile InputSystemType Input System class to instantiate at runtime. Declaration public SystemType InputSystemType { get; } Property Value Type Description SystemType IsBoundarySystemEnabled Enable and configure the boundary system. Declaration public bool IsBoundarySystemEnabled { get; } Property Value Type Description Boolean IsCameraSystemEnabled Enable and configure the Camera Profile for the Mixed Reality Toolkit Declaration public bool IsCameraSystemEnabled { get; } Property Value Type Description Boolean IsDiagnosticsSystemEnabled Is the Diagnostics System enabled? Declaration public bool IsDiagnosticsSystemEnabled { get; } Property Value Type Description Boolean IsInputSystemEnabled Enable and configure the Input System component for the Mixed Reality Toolkit Declaration public bool IsInputSystemEnabled { get; } Property Value Type Description Boolean IsSceneSystemEnabled Is the Scene System enabled? Declaration public bool IsSceneSystemEnabled { get; } Property Value Type Description Boolean IsSpatialAwarenessSystemEnabled Enable and configure the spatial awareness system. Declaration public bool IsSpatialAwarenessSystemEnabled { get; } Property Value Type Description Boolean IsTeleportSystemEnabled Enable and configure the teleport system. Declaration public bool IsTeleportSystemEnabled { get; } Property Value Type Description Boolean RegisteredServiceProvidersProfile All the additional non-required systems, features, and managers registered with the Mixed Reality Toolkit. Declaration public MixedRealityRegisteredServiceProvidersProfile RegisteredServiceProvidersProfile { get; } Property Value Type Description MixedRealityRegisteredServiceProvidersProfile RenderDepthBuffer If true, MRTK will render the depth buffer as color. Only valid in editor. Declaration public bool RenderDepthBuffer { get; } Property Value Type Description Boolean SceneSystemProfile Active profile for scene configuration Declaration public MixedRealitySceneSystemProfile SceneSystemProfile { get; } Property Value Type Description MixedRealitySceneSystemProfile SceneSystemSystemType Scene System Script File to instantiate at runtime Declaration public SystemType SceneSystemSystemType { get; } Property Value Type Description SystemType SpatialAwarenessSystemProfile Active profile for spatial awareness system Declaration public MixedRealitySpatialAwarenessSystemProfile SpatialAwarenessSystemProfile { get; } Property Value Type Description MixedRealitySpatialAwarenessSystemProfile SpatialAwarenessSystemSystemType Spatial Awareness System class to instantiate at runtime. Declaration public SystemType SpatialAwarenessSystemSystemType { get; } Property Value Type Description SystemType TargetExperienceScale The desired the scale of the experience. Declaration public ExperienceScale TargetExperienceScale { get; set; } Property Value Type Description ExperienceScale TeleportSystemSystemType Teleport System class to instantiate at runtime. Declaration public SystemType TeleportSystemSystemType { get; } Property Value Type Description SystemType UseServiceInspectors If true, MRTK will generate components that let you to view the state of running services. These objects will not be generated at runtime. Declaration public bool UseServiceInspectors { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.AssemblyDefinitionInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.AssemblyDefinitionInfo.html",
    "title": "Class AssemblyDefinitionInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class AssemblyDefinitionInfo This class represents an AssemblyDefinition file of a Unity project. It can be used to parse the file contents using JsonUtility.FromJson . Inheritance Object AssemblyDefinitionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class AssemblyDefinitionInfo Fields allowUnsafeCode Declaration public bool allowUnsafeCode Field Value Type Description Boolean autoReferenced Declaration public bool autoReferenced Field Value Type Description Boolean defineConstraints Declaration public string[] defineConstraints Field Value Type Description String [] EditorPlatform Declaration public const string EditorPlatform = \"Editor\" Field Value Type Description String excludePlatforms Declaration public string[] excludePlatforms Field Value Type Description String [] includePlatforms Declaration public string[] includePlatforms Field Value Type Description String [] optionalUnityReferences Declaration public string[] optionalUnityReferences Field Value Type Description String [] overrideReferences Declaration public bool overrideReferences Field Value Type Description Boolean TestAssembliesReference Declaration public const string TestAssembliesReference = \"TestAssemblies\" Field Value Type Description String Properties BuiltInPackage Gets whether this represents a built-in package that lives in Editor installation folder. Declaration public bool BuiltInPackage { get; } Property Value Type Description Boolean Directory Gets the parent directory of the associated file, or returns the Assets folder if it's a DefaultAssembly. Declaration public DirectoryInfo Directory { get; } Property Value Type Description DirectoryInfo EditorPlatformSupported Gets whether the Editor platform is specified to be supported. Declaration public bool EditorPlatformSupported { get; } Property Value Type Description Boolean Guid Gets or sets the parsed Guid of the AssemblyDefinition asset. Declaration public Guid Guid { get; set; } Property Value Type Description Guid IsDefaultAssembly Gets whether this is a default assembly definition like Assembly-CSharp Declaration public bool IsDefaultAssembly { get; } Property Value Type Description Boolean Name Name of this assembly definition info Declaration public string Name { get; } Property Value Type Description String NonEditorPlatformSupported Gets whether any non-Editor platforms are specified to be supported. Declaration public bool NonEditorPlatformSupported { get; } Property Value Type Description Boolean PrecompiledAssemblyReferences Gets DLL references for this assembly definition. Declaration public HashSet<string> PrecompiledAssemblyReferences { get; } Property Value Type Description HashSet < String > References Gets AsmDef references for this assembly definition. Declaration public string[] References { get; } Property Value Type Description String [] TestAssembly Gets whether this is marked as a TestAssembly. Declaration public bool TestAssembly { get; } Property Value Type Description Boolean Methods GetDefaultAssemblyCSharpInfo(Assembly) Creates an instance of AssemblyDefinitionInfo for the default projects (such as Assembly-CSharp) Declaration public static AssemblyDefinitionInfo GetDefaultAssemblyCSharpInfo(Assembly assembly) Parameters Type Name Description Assembly assembly The Unity assembly reference. Returns Type Description AssemblyDefinitionInfo A new instance. GetSources() Gets the source files for this assembly definition. Declaration public SourceFileInfo[] GetSources() Returns Type Description SourceFileInfo [] The array of SourceFileInfo . Parse(FileInfo, UnityProjectInfo, Assembly, Boolean) Parses an asmdef file creating a new instance of AssemblyDefinitionInfo . Declaration public static AssemblyDefinitionInfo Parse(FileInfo file, UnityProjectInfo unityProjectInfo, Assembly assembly, bool isBuiltInPackage = false) Parameters Type Name Description FileInfo file The file representing asmdef. UnityProjectInfo unityProjectInfo Instance of UnityProjectInfo . Assembly assembly The Unity assembly reference. Boolean isBuiltInPackage True whether this asmdef lives in the editor installation folder. Returns Type Description AssemblyDefinitionInfo ToString() A more readable string representation for assembly definition. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() Validate(IEnumerable<CompilationPlatformInfo>) After it's parsed from JSON, this method should be invoked to validate some of the values and set additional properties. Declaration public void Validate(IEnumerable<CompilationPlatformInfo> availablePlatforms) Parameters Type Name Description IEnumerable < CompilationPlatformInfo > availablePlatforms"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.AssetLocation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.AssetLocation.html",
    "title": "Enum AssetLocation | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AssetLocation Represents where a Unity project reference asset is located. Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public enum AssetLocation Fields Name Description BuiltInPackage Inside the Packages folder shipped with the Unity version. Package Inside the Packages folder of the Unity project. Project Inside the Assets folder of the Unity project."
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.AssetScriptReferenceRetargeter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.AssetScriptReferenceRetargeter.html",
    "title": "Class AssetScriptReferenceRetargeter | Mixed Reality Toolkit Documentation",
    "keywords": "Class AssetScriptReferenceRetargeter Inheritance Object AssetScriptReferenceRetargeter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public static class AssetScriptReferenceRetargeter Methods RetargetAssets() Declaration public static void RetargetAssets()"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.CompilationPlatformInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.CompilationPlatformInfo.html",
    "title": "Class CompilationPlatformInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class CompilationPlatformInfo This contains parsed information using Unity configuration about a specific compilation platform. Inheritance Object CompilationPlatformInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class CompilationPlatformInfo Properties AdditionalInEditorDefines These defines are specific for this platform editor build. Declaration public HashSet<string> AdditionalInEditorDefines { get; } Property Value Type Description HashSet < String > AdditionalInEditorReferences These references are specific for this platform editor build. Declaration public IReadOnlyList<string> AdditionalInEditorReferences { get; } Property Value Type Description IReadOnlyList < String > AdditionalPlayerDefines These defines are specific for this platform player build. Declaration public HashSet<string> AdditionalPlayerDefines { get; } Property Value Type Description HashSet < String > AdditionalPlayerReferences These references are specific for this platform player build. Declaration public IReadOnlyList<string> AdditionalPlayerReferences { get; } Property Value Type Description IReadOnlyList < String > BuildTarget The BuildTarget this compilation platform represents. Declaration public BuildTarget BuildTarget { get; } Property Value Type Description BuildTarget BuildTargetGroup The BuildTargetGroup this compilation platform represents. Declaration public BuildTargetGroup BuildTargetGroup { get; } Property Value Type Description BuildTargetGroup CommonPlatformDefines These defines are specific for this platform and common or player/editor. Declaration public HashSet<string> CommonPlatformDefines { get; } Property Value Type Description HashSet < String > CommonPlatformReferences These references are specific for this platform and common or player/editor. Declaration public IReadOnlyList<string> CommonPlatformReferences { get; } Property Value Type Description IReadOnlyList < String > Name The name of this compilation platform. Declaration public string Name { get; } Property Value Type Description String TargetFramework The TargetFramework of this compilation platform. Declaration public TargetFramework TargetFramework { get; } Property Value Type Description TargetFramework Methods GetCompilationPlatform(AssemblyDefinitionPlatform) Given a non-editor AssemblyDefinitionPlatform platform, creates an instances of CompilationPlatform fetching defines and references. Declaration public static CompilationPlatformInfo GetCompilationPlatform(AssemblyDefinitionPlatform platform) Parameters Type Name Description AssemblyDefinitionPlatform platform The platform to use for parsing. Returns Type Description CompilationPlatformInfo The CompilationPlatformInfo containing building information for the platform. GetEditorPlatform() Creates an editor CompilationPlatformInfo (think Assembly-CSharp-Editor). Declaration public static CompilationPlatformInfo GetEditorPlatform() Returns Type Description CompilationPlatformInfo The editor CompilationPlatformInfo ."
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.CSProjectDependency-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.CSProjectDependency-1.html",
    "title": "Class CSProjectDependency<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class CSProjectDependency<T> A helper common class to reference dependencies for a CS Project. Inheritance Object CSProjectDependency<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class CSProjectDependency<T> Type Parameters Name Description T The type of dependency. Constructors CSProjectDependency(T, HashSet<BuildTarget>, HashSet<BuildTarget>) Creates a new dependency instance given a dependency, a set of editor supported platforms and player supported platforms. Declaration public CSProjectDependency(T dependency, HashSet<BuildTarget> inEditorSupportedPlatforms, HashSet<BuildTarget> playerSupportedPlatforms) Parameters Type Name Description T dependency HashSet < BuildTarget > inEditorSupportedPlatforms HashSet < BuildTarget > playerSupportedPlatforms Properties Dependency Get the actual dependency. Declaration public T Dependency { get; } Property Value Type Description T InEditorSupportedPlatforms Get a list of supported editor build targets. Declaration public HashSet<BuildTarget> InEditorSupportedPlatforms { get; } Property Value Type Description HashSet < BuildTarget > PlayerSupportedPlatforms Get a list of supported player build targets. Declaration public HashSet<BuildTarget> PlayerSupportedPlatforms { get; } Property Value Type Description HashSet < BuildTarget >"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.CSProjectInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.CSProjectInfo.html",
    "title": "Class CSProjectInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class CSProjectInfo A class representing a CSProject to be outputed. Inheritance Object ReferenceItemInfo CSProjectInfo Inherited Members ReferenceItemInfo.UnityProjectInfo ReferenceItemInfo.Guid ReferenceItemInfo.ReferencePath ReferenceItemInfo.Name ReferenceItemInfo.InEditorPlatforms ReferenceItemInfo.PlayerPlatforms ReferenceItemInfo.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class CSProjectInfo : ReferenceItemInfo Properties AssemblyDefinitionInfo The associated Assembly-Definition info if available. Declaration public AssemblyDefinitionInfo AssemblyDefinitionInfo { get; } Property Value Type Description AssemblyDefinitionInfo ProjectDependencies Gets a list of project dependencies. Declaration public IReadOnlyCollection<CSProjectDependency<CSProjectInfo>> ProjectDependencies { get; } Property Value Type Description IReadOnlyCollection < CSProjectDependency < CSProjectInfo >> ProjectType The type of the project. Declaration public ProjectType ProjectType { get; } Property Value Type Description ProjectType"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.MSBuildTools.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.MSBuildTools.html",
    "title": "Class MSBuildTools | Mixed Reality Toolkit Documentation",
    "keywords": "Class MSBuildTools Class that exposes the MSBuild project generation operation. Inheritance Object MSBuildTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public static class MSBuildTools Fields CSharpVersion Declaration public const string CSharpVersion = \"7.3\" Field Value Type Description String DefaultMinUWPSDK Declaration public static readonly Version DefaultMinUWPSDK Field Value Type Description Version Methods GenerateSDKProjects() Declaration public static void GenerateSDKProjects() GetReferenceEntries(String, IEnumerable<String>) Declaration public static IEnumerable<string> GetReferenceEntries(string template, IEnumerable<string> references) Parameters Type Name Description String template IEnumerable < String > references Returns Type Description IEnumerable < String >"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.PluginAssemblyInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.PluginAssemblyInfo.html",
    "title": "Class PluginAssemblyInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class PluginAssemblyInfo This is the information for the plugins in the Unity project. Inheritance Object ReferenceItemInfo PluginAssemblyInfo Inherited Members ReferenceItemInfo.UnityProjectInfo ReferenceItemInfo.Guid ReferenceItemInfo.ReferencePath ReferenceItemInfo.Name ReferenceItemInfo.InEditorPlatforms ReferenceItemInfo.PlayerPlatforms ReferenceItemInfo.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class PluginAssemblyInfo : ReferenceItemInfo Constructors PluginAssemblyInfo(UnityProjectInfo, Guid, String, PluginType) Creates a new instance of the PluginAssemblyInfo . Declaration public PluginAssemblyInfo(UnityProjectInfo unityProjectInfo, Guid guid, string fullPath, PluginType type) Parameters Type Name Description UnityProjectInfo unityProjectInfo Guid guid String fullPath PluginType type Properties AutoReferenced Gets whether this plugin is auto referenced, as in whether the generated projects will automatically reference this plugin. Declaration public bool AutoReferenced { get; } Property Value Type Description Boolean DefineConstraints If the plugin has define constraints, then it will only be referenced if the platform/project defines at least one of these constraints. ! operator means that the specified plugin must not be included https://docs.unity3d.com/ScriptReference/PluginImporter.DefineConstraints.html Declaration public HashSet<string> DefineConstraints { get; } Property Value Type Description HashSet < String > Type Gets the type of Plugin Declaration public PluginType Type { get; } Property Value Type Description PluginType"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.PluginType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.PluginType.html",
    "title": "Enum PluginType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PluginType Type of Plugin. Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public enum PluginType Fields Name Description Managed A .NET DLL. Native A native (C++) DLL."
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.ProjectType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.ProjectType.html",
    "title": "Enum ProjectType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ProjectType From which source was the project created. Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public enum ProjectType Fields Name Description AsmDef The project is backed by an Assembly-Definition file. EditorAsmDef The project is backed by an Assembly-Definition file that only targets editor. PredefinedAssembly The project is one of the pre-defined assemblies (Assembly-CSharp, etc). PredefinedEditorAssembly The project is one of the pre-defined editor assemblies (Assembly-CSharp-Editor, etc)."
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SanityTests.DemoSceneTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SanityTests.DemoSceneTests.html",
    "title": "Class DemoSceneTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class DemoSceneTests Inheritance Object DemoSceneTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.SanityTests Assembly : cs.temp.dll.dll Syntax public class DemoSceneTests Methods LoadHandInteractionExamplesScene() Declaration public IEnumerator LoadHandInteractionExamplesScene() Returns Type Description IEnumerator TearDown() Declaration public void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SanityTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SanityTests.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.SanityTests | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.SanityTests Classes DemoSceneTests"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.BatteryInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.BatteryInfo.html",
    "title": "Class BatteryInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class BatteryInfo Inheritance Object BatteryInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class BatteryInfo Fields AcOnline (0 | 1) Declaration public int AcOnline Field Value Type Description Int32 BatteryPresent (0 | 1) Declaration public int BatteryPresent Field Value Type Description Int32 Charging (0 | 1) Declaration public int Charging Field Value Type Description Int32 DefaultAlert1 Declaration public int DefaultAlert1 Field Value Type Description Int32 DefaultAlert2 Declaration public int DefaultAlert2 Field Value Type Description Int32 EstimatedTime Declaration public int EstimatedTime Field Value Type Description Int32 MaximumCapacity Declaration public int MaximumCapacity Field Value Type Description Int32 RemainingCapacity Declaration public int RemainingCapacity Field Value Type Description Int32 Properties IsCharging Declaration public bool IsCharging { get; } Property Value Type Description Boolean PercentRemaining Declaration public float PercentRemaining { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DeviceInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DeviceInfo.html",
    "title": "Class DeviceInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class DeviceInfo Inheritance Object DeviceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class DeviceInfo Constructors DeviceInfo(String, String, String, String) Constructor. Declaration public DeviceInfo(string ip, string user, string password, string machineName = \"\") Parameters Type Name Description String ip String user String password String machineName Fields CsrfToken The current CSRF Token for the device. Declaration public string CsrfToken Field Value Type Description String IP The IP Address of the device. Declaration public string IP Field Value Type Description String MachineName The machine name of the device. Declaration public string MachineName Field Value Type Description String Password The password for the device. Declaration public string Password Field Value Type Description String User The user name of the device. Declaration public string User Field Value Type Description String Properties Authorization The current authorization for the device. Declaration public Dictionary<string, string> Authorization { get; } Property Value Type Description Dictionary < String , String > BatteryInfo The last known battery state of the device. Declaration public BatteryInfo BatteryInfo { get; set; } Property Value Type Description BatteryInfo PowerState The last known power state of the device. Declaration public PowerStateInfo PowerState { get; set; } Property Value Type Description PowerStateInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.ArrayExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ArrayExtensions.html",
    "title": "Class ArrayExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ArrayExtensions Array type method extensions. Inheritance Object ArrayExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class ArrayExtensions Methods IsValidArray(Array) Checks whether the given array is not null and has at least one entry Declaration public static bool IsValidArray(this Array array) Parameters Type Name Description Array array Returns Type Description Boolean WrapIndex(Array, Int32) Wraps the index around to the beginning of the array if the provided index is longer than the array. Declaration public static int WrapIndex(this Array array, int index) Parameters Type Name Description Array array The array to wrap the index around. Int32 index The index to look for. Returns Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Audio.AudioLoFiSourceQuality.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Audio.AudioLoFiSourceQuality.html",
    "title": "Enum AudioLoFiSourceQuality | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AudioLoFiSourceQuality Source quality options, used by the AudioLoFiEffect, that match common telephony and radio broadcast options. Namespace : Microsoft.MixedReality.Toolkit.Audio Assembly : cs.temp.dll.dll Syntax public enum AudioLoFiSourceQuality Fields Name Description AmRadio AM radio. FmRadio FM radio. FullRange Full range of human hearing. NarrowBandTelephony Narrow frequency range telephony. WideBandTelephony Wide frequency range telephony."
  },
  "api/Microsoft.MixedReality.Toolkit.BaseDataProvider-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseDataProvider-1.html",
    "title": "Class BaseDataProvider<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseDataProvider<T> The base data provider implements IMixedRealityDataProvider and provides default properties for all data providers. Inheritance Object BaseService BaseDataProvider<T> BaseDataProvider BaseCameraSettingsProvider BaseInputDeviceManager BaseSpatialObserver TestBaseDataProvider Implements IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseDataProvider<T> : BaseService, IMixedRealityDataProvider, IMixedRealityService, IDisposable where T : IMixedRealityService Type Parameters Name Description T Constructors BaseDataProvider(T, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration protected BaseDataProvider(T service, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description T service The IMixedRealityService to which the provider is providing data. String name The friendly name of the data provider. UInt32 priority The registration priority of the data provider. BaseMixedRealityProfile profile The configuration profile for the data provider. Properties Registrar The service registrar instance that registered this service. Declaration [Obsolete(\"The Registrar property is obsolete and will be removed in a future version of the Microsoft Mixed Reality Toolkit\")] protected IMixedRealityServiceRegistrar Registrar { get; set; } Property Value Type Description IMixedRealityServiceRegistrar Service The service instance to which this provider is providing data. Declaration protected T Service { get; set; } Property Value Type Description T Implements IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.BaseEventSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseEventSystem.html",
    "title": "Class BaseEventSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseEventSystem Base Event System that can be inherited from to give other system features event capabilities. Inheritance Object BaseService BaseEventSystem BaseCoreSystem Implements IMixedRealityEventSystem IMixedRealityService IDisposable Inherited Members BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseEventSystem : BaseService, IMixedRealityEventSystem, IMixedRealityService, IDisposable Fields enableDanglingHandlerDiagnostics Declaration public static bool enableDanglingHandlerDiagnostics Field Value Type Description Boolean Properties EventHandlersByType List of all event handlers grouped by type that are registered to this Event System. Declaration public Dictionary<Type, List<BaseEventSystem.EventHandlerEntry>> EventHandlersByType { get; } Property Value Type Description Dictionary < Type , List < BaseEventSystem.EventHandlerEntry >> EventListeners List of event listeners that are registered to this Event System. Declaration public List<GameObject> EventListeners { get; } Property Value Type Description List < GameObject > Remarks This collection is obsolete and is replaced by handler-based internal storage. It will be removed in a future release. Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseService.Destroy() HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public virtual void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData ExecuteEvents.EventFunction <T> eventHandler Type Parameters Name Description T Register(GameObject) Registers a GameObject to listen for events from this Event System. Declaration public virtual void Register(GameObject listener) Parameters Type Name Description GameObject listener GameObject to add to EventListeners . RegisterHandler<T>(IEventSystemHandler) Registers the given handler as a global listener for all events handled via the T interface. T must be an interface type, not a class type, derived from IEventSystemHandler. Declaration public virtual void RegisterHandler<T>(IEventSystemHandler handler) where T : IEventSystemHandler Parameters Type Name Description IEventSystemHandler handler Handler to receive global input events of specified handler type. Type Parameters Name Description T Remarks If you want to register a single C# object as global handler for several event handling interfaces, you must call this function for each interface type. Unregister(GameObject) Unregisters a GameObject from listening for events from this Event System. Declaration public virtual void Unregister(GameObject listener) Parameters Type Name Description GameObject listener GameObject to remove from EventListeners . UnregisterHandler<T>(IEventSystemHandler) Unregisters the given handler as a global listener for all events handled via the T interface. T must be an interface type, not a class type, derived from IEventSystemHandler. Declaration public virtual void UnregisterHandler<T>(IEventSystemHandler handler) where T : IEventSystemHandler Parameters Type Name Description IEventSystemHandler handler Handler to stop receiving global input events of specified handler type. Type Parameters Name Description T Remarks If a single C# object listens to global input events for several event handling interfaces, you must call this function for each interface type. Implements IMixedRealityEventSystem IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.BaseService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseService.html",
    "title": "Class BaseService | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseService The base service implements IMixedRealityService and provides default properties for all services. Inheritance Object BaseService BaseDataProvider<T> BaseEventSystem BaseExtensionService Implements IMixedRealityService IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseService : IMixedRealityService, IDisposable Fields DefaultPriority Declaration public const uint DefaultPriority = 10U Field Value Type Description UInt32 disposed Value indicating if the object has completed disposal. Declaration protected bool disposed Field Value Type Description Boolean Remarks Set by derived classes to indicate that disposal has been completed. Properties ConfigurationProfile The configuration profile for the service. Declaration public virtual BaseMixedRealityProfile ConfigurationProfile { get; protected set; } Property Value Type Description BaseMixedRealityProfile Remarks Many services may wish to provide a typed version (ex: MixedRealityInputSystemProfile) that casts this value for ease of use in calling code. Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public virtual string Name { get; protected set; } Property Value Type Description String Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration public virtual uint Priority { get; protected set; } Property Value Type Description UInt32 Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public virtual void Destroy() Disable() Optional Disable function to pause the service. Declaration public virtual void Disable() Dispose() Cleanup resources used by this object. Declaration public void Dispose() Dispose(Boolean) Cleanup resources used by the object Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description Boolean disposing Are we fully disposing the object? True will release all managed resources, unmanaged resources are always released. Enable() Optional Enable function to enable / re-enable the service. Declaration public virtual void Enable() Finalize() Finalizer Declaration protected void Finalize() Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public virtual void Initialize() LateUpdate() Optional LateUpdate function to that is called after Update has been called on all services. Declaration public virtual void LateUpdate() Reset() Optional Reset function to perform that will Reset the service, for example, whenever there is a profile change. Declaration public virtual void Reset() Update() Optional Update function to perform per-frame updates of the service. Declaration public virtual void Update() Implements IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.BoundaryType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.BoundaryType.html",
    "title": "Enum BoundaryType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundaryType Defines different types of boundaries that can be requested. Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public enum BoundaryType Fields Name Description PlayArea A rectangular area calculated as the largest rectangle within the tracked area, good for placing content near the user. TrackedArea The full tracked boundary, typically manually drawn by a user while setting up their device."
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.MixedRealityBoundaryVisualizationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.MixedRealityBoundaryVisualizationProfile.html",
    "title": "Class MixedRealityBoundaryVisualizationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityBoundaryVisualizationProfile Configuration profile settings for setting up boundary visualizations. Inheritance Object BaseMixedRealityProfile MixedRealityBoundaryVisualizationProfile Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public class MixedRealityBoundaryVisualizationProfile : BaseMixedRealityProfile Properties BoundaryCeilingMaterial The material to use for displaying the boundary ceiling. Declaration public Material BoundaryCeilingMaterial { get; } Property Value Type Description Material BoundaryHeight The developer defined height of the boundary, in meters. Declaration public float BoundaryHeight { get; } Property Value Type Description Single Remarks The BoundaryHeight property is used to create a three dimensional volume for the play space. BoundaryWallMaterial The material to use for displaying the boundary geometry walls. Declaration public Material BoundaryWallMaterial { get; } Property Value Type Description Material BoundaryWallsPhysicsLayer The physics layer to assign to the generated boundary walls. Declaration public int BoundaryWallsPhysicsLayer { get; } Property Value Type Description Int32 CeilingPhysicsLayer The physics layer to assign to the generated boundary ceiling. Declaration public int CeilingPhysicsLayer { get; } Property Value Type Description Int32 FloorMaterial The material to use for the floor GameObject when created by the boundary system. Declaration public Material FloorMaterial { get; } Property Value Type Description Material FloorPhysicsLayer The physics layer to assign to the generated floor. Declaration public int FloorPhysicsLayer { get; } Property Value Type Description Int32 FloorScale The size at which to display the rectangular floor plane GameObject . Declaration public Vector2 FloorScale { get; } Property Value Type Description Vector2 PlayAreaMaterial The material to use for the rectangular play area GameObject . Declaration public Material PlayAreaMaterial { get; } Property Value Type Description Material PlayAreaPhysicsLayer The physics layer to assign to the generated play area. Declaration public int PlayAreaPhysicsLayer { get; } Property Value Type Description Int32 ShowBoundaryCeiling Should the boundary system display the boundary ceiling? Declaration public bool ShowBoundaryCeiling { get; } Property Value Type Description Boolean ShowBoundaryWalls Should the boundary system display the boundary geometry walls? Declaration public bool ShowBoundaryWalls { get; } Property Value Type Description Boolean ShowFloor Should the boundary system display the floor? Declaration public bool ShowFloor { get; } Property Value Type Description Boolean ShowPlayArea Should the boundary system display the play area? Declaration public bool ShowPlayArea { get; } Property Value Type Description Boolean ShowTrackedArea Should the boundary system display the tracked area? Declaration public bool ShowTrackedArea { get; } Property Value Type Description Boolean TrackedAreaMaterial The material to use for the boundary geometry GameObject . Declaration public Material TrackedAreaMaterial { get; } Property Value Type Description Material TrackedAreaPhysicsLayer The physics layer to assign to the generated tracked area. Declaration public int TrackedAreaPhysicsLayer { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildDeployPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildDeployPreferences.html",
    "title": "Class BuildDeployPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Class BuildDeployPreferences Build and Deploy Specific Editor Preferences for the Build and Deploy Window. Inheritance Object BuildDeployPreferences Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public static class BuildDeployPreferences Properties AbsoluteBuildDirectory The absolute path to BuildDirectory Declaration public static string AbsoluteBuildDirectory { get; } Property Value Type Description String BuildDirectory The Build Directory that the Mixed Reality Toolkit will build to. Declaration public static string BuildDirectory { get; set; } Property Value Type Description String Remarks This is a root build folder path. Each platform build will be put into a child directory with the name of the current active build target. IncrementBuildVersion Current setting to increment build visioning. Declaration public static bool IncrementBuildVersion { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.IBuildInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.IBuildInfo.html",
    "title": "Interface IBuildInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IBuildInfo The Build Info defines common properties for a build. Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public interface IBuildInfo Properties AutoIncrement Should the build auto increment the build version number? Declaration bool AutoIncrement { get; set; } Property Value Type Description Boolean BuildOptions Build options to include in the Unity player build pipeline. Declaration BuildOptions BuildOptions { get; set; } Property Value Type Description BuildOptions BuildPlatform The build platform (i.e. x86, x64) Declaration string BuildPlatform { get; set; } Property Value Type Description String BuildSymbols The symbols associated with this build. Declaration string BuildSymbols { get; set; } Property Value Type Description String BuildTarget The build target. Declaration BuildTarget BuildTarget { get; } Property Value Type Description BuildTarget ColorSpace Optional parameter to set the player's ColorSpace Declaration ColorSpace? ColorSpace { get; set; } Property Value Type Description Nullable < ColorSpace > Configuration The build configuration (i.e. debug, release, or master) Declaration string Configuration { get; set; } Property Value Type Description String IsCommandLine Is this build being issued from the command line? Declaration bool IsCommandLine { get; } Property Value Type Description Boolean LogDirectory The default location of log files generated by sub-processes of the build system. Declaration string LogDirectory { get; set; } Property Value Type Description String Remarks Note that this different from the Unity flag -logFile, which controls the location of the Unity log file. This is specifically for logs generated by other processes that the MRTK build tools produces (for example, when msbuild.exe is involved) OutputDirectory The directory to put the final build output. Declaration string OutputDirectory { get; set; } Property Value Type Description String Remarks Defaults to \" Application.dataPath /Builds/Platform Target/\" PostBuildAction A post-build action to raise after building the Unity player. Declaration Action<IBuildInfo, BuildReport> PostBuildAction { get; set; } Property Value Type Description Action < IBuildInfo , BuildReport > PreBuildAction A pre-build action to raise before building the Unity player. Declaration Action<IBuildInfo> PreBuildAction { get; set; } Property Value Type Description Action < IBuildInfo > Scenes The list of scenes to include in the build. Declaration IEnumerable<string> Scenes { get; set; } Property Value Type Description IEnumerable < String > ScriptingBackend Optional parameter to set the scripting backend Declaration ScriptingImplementation? ScriptingBackend { get; set; } Property Value Type Description Nullable < ScriptingImplementation >"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.UnityPlayerBuildTools.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.UnityPlayerBuildTools.html",
    "title": "Class UnityPlayerBuildTools | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityPlayerBuildTools Cross platform player build tools Inheritance Object UnityPlayerBuildTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public static class UnityPlayerBuildTools Fields BuildSymbolDebug Declaration public const string BuildSymbolDebug = \"debug\" Field Value Type Description String BuildSymbolMaster Declaration public const string BuildSymbolMaster = \"master\" Field Value Type Description String BuildSymbolRelease Declaration public const string BuildSymbolRelease = \"release\" Field Value Type Description String Methods BuildUnityPlayer(IBuildInfo) Starts the build process Declaration public static BuildReport BuildUnityPlayer(IBuildInfo buildInfo) Parameters Type Name Description IBuildInfo buildInfo Returns Type Description BuildReport The BuildReport from Unity's BuildPipeline BuildUnityPlayerSimplified() Declaration public static Task<bool> BuildUnityPlayerSimplified() Returns Type Description Task < Boolean > GetProjectPath() Get the Unity Project Root Path. Declaration public static string GetProjectPath() Returns Type Description String The full path to the project's root. ParseBuildCommandLine(ref IBuildInfo) Declaration public static void ParseBuildCommandLine(ref IBuildInfo buildInfo) Parameters Type Name Description IBuildInfo buildInfo RestoreNugetPackagesAsync(String, String) Restores any nuget packages at the path specified. Declaration public static Task<bool> RestoreNugetPackagesAsync(string nugetPath, string storePath) Parameters Type Name Description String nugetPath String storePath Returns Type Description Task < Boolean > True, if the nuget packages were successfully restored. StartCommandLineBuild() Start a build using Unity's command line. Declaration public static void StartCommandLineBuild() SyncSolution() Force Unity To Write Project Files Declaration public static void SyncSolution()"
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.BaseCameraSettingsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.BaseCameraSettingsProfile.html",
    "title": "Class BaseCameraSettingsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseCameraSettingsProfile Base class used to derive custom camera settings profiles. Inheritance Object BaseMixedRealityProfile BaseCameraSettingsProfile Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public class BaseCameraSettingsProfile : BaseMixedRealityProfile"
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.BaseCameraSettingsProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.BaseCameraSettingsProvider.html",
    "title": "Class BaseCameraSettingsProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseCameraSettingsProvider Inheritance Object BaseService BaseDataProvider < IMixedRealityCameraSystem > BaseCameraSettingsProvider Implements IMixedRealityCameraSettingsProvider IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseDataProvider<IMixedRealityCameraSystem>.Registrar BaseDataProvider<IMixedRealityCameraSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public abstract class BaseCameraSettingsProvider : BaseDataProvider<IMixedRealityCameraSystem>, IMixedRealityCameraSettingsProvider, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors BaseCameraSettingsProvider(IMixedRealityCameraSystem, String, UInt32, BaseCameraSettingsProfile) Constructor. Declaration protected BaseCameraSettingsProvider(IMixedRealityCameraSystem cameraSystem, string name = null, uint priority = 10U, BaseCameraSettingsProfile profile = null) Parameters Type Name Description IMixedRealityCameraSystem cameraSystem The instance of the camera system which is managing this provider. String name Friendly name of the provider. UInt32 priority Provider priority. Used to determine order of instantiation. BaseCameraSettingsProfile profile The provider's configuration profile. Properties IsOpaque Returns whether or not the current display rendering mode is opaque. Declaration public virtual bool IsOpaque { get; } Property Value Type Description Boolean Methods ApplyConfiguration() Applies provider specific configuration settings. Declaration public virtual void ApplyConfiguration() Implements IMixedRealityCameraSettingsProvider IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.CanvasExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CanvasExtensions.html",
    "title": "Class CanvasExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class CanvasExtensions Extensions for the Canvas class. Inheritance Object CanvasExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class CanvasExtensions Methods GetChildRectTransformAtPoint(RectTransform, Vector3, Boolean, Boolean, Boolean) Gets a child rect transform for the given point and parameters. Declaration public static RectTransform GetChildRectTransformAtPoint(this RectTransform rectTransformParent, Vector3 worldPoint, bool recursive, bool shouldReturnActive, bool shouldReturnRaycastable) Parameters Type Name Description RectTransform rectTransformParent The rect transform to look for children that may contain the projected (orthogonal to the child's normal) world point Vector3 worldPoint The world point Boolean recursive Indicates if the check should be done recursively Boolean shouldReturnActive If true, will only check children that are active, otherwise it will check all children. Boolean shouldReturnRaycastable If true, will only check children that if they have a graphic and have it's member raycastTarget set to true, otherwise will ignore the raycastTarget value. Will still allow children to be checked that do not have a graphic component. Returns Type Description RectTransform GetLocalCorners(Canvas) Convenience method for getting the corners of the canvas in local coordinates. Ordered clockwise from bottom-left. Declaration public static Vector3[] GetLocalCorners(this Canvas canvas) Parameters Type Name Description Canvas canvas The canvas to get the local corners from. Returns Type Description Vector3 [] An array of Vector3s that represent the corners of the canvas in local coordinates. GetPlane(Canvas) Convenience method for getting a plane for this canvas in world coordinates. Declaration public static Plane GetPlane(this Canvas canvas) Parameters Type Name Description Canvas canvas The canvas to get the plane from. Returns Type Description Plane A Plane for this canvas. GetScreenCorners(Canvas) Gets the position of the corners for a canvas in screen space. 1 -- 2 | | 0 -- 3 Declaration public static Vector3[] GetScreenCorners(this Canvas canvas) Parameters Type Name Description Canvas canvas The canvas to get the screen corners for. Returns Type Description Vector3 [] GetScreenRect(Canvas) Returns a rectangle in screen coordinates that encompasses the bounds of the target canvas. Declaration public static Rect GetScreenRect(this Canvas canvas) Parameters Type Name Description Canvas canvas The canvas the get the screen rect for Returns Type Description Rect GetViewportCorners(Canvas) Convenience method for getting the corners of the canvas in viewport coordinates. Note that the points have the same ordering as the array returned in GetWorldCorners() Declaration public static Vector3[] GetViewportCorners(this Canvas canvas) Parameters Type Name Description Canvas canvas The canvas to get the viewport corners from Returns Type Description Vector3 [] An array of Vector3s that represent the corners of the canvas in viewport coordinates GetWorldCorners(Canvas) Convenience method for getting the corners of the canvas in world coordinates. Ordered clockwise from bottom-left. Declaration public static Vector3[] GetWorldCorners(this Canvas canvas) Parameters Type Name Description Canvas canvas The canvas to get the world corners from. Returns Type Description Vector3 [] An array of Vector3s that represent the corners of the canvas in world coordinates. Raycast(Canvas, Vector3, Vector3, out Single, out Vector3, out GameObject) Raycast against a canvas using a ray. Declaration public static bool Raycast(this Canvas canvas, Vector3 rayOrigin, Vector3 rayDirection, out float distance, out Vector3 hitPoint, out GameObject hitChildObject) Parameters Type Name Description Canvas canvas The canvas to raycast against Vector3 rayOrigin The origin of the ray Vector3 rayDirection The direction of the ray Single distance The distance of the ray Vector3 hitPoint The hitpoint of the ray GameObject hitChildObject The child object that was hit or the canvas itself if it has no active children that were within the hit range. Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.CollectionsExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CollectionsExtensions.html",
    "title": "Class CollectionsExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class CollectionsExtensions Extension methods for .Net Collection objects, e.g. Lists, Dictionaries, Arrays Inheritance Object CollectionsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class CollectionsExtensions Methods AsReadOnly<TElement>(IList<TElement>) Creates a read-only wrapper around an existing collection. Declaration public static ReadOnlyCollection<TElement> AsReadOnly<TElement>(this IList<TElement> elements) Parameters Type Name Description IList <TElement> elements The collection to be wrapped. Returns Type Description ReadOnlyCollection <TElement> The new, read-only wrapper around elements . Type Parameters Name Description TElement The type of element in the collection. DisposeElements<TElement>(IEnumerable<TElement>) Disposes of all non-null elements in a collection. Declaration public static void DisposeElements<TElement>(this IEnumerable<TElement> elements) where TElement : IDisposable Parameters Type Name Description IEnumerable <TElement> elements The collection of elements to be disposed. Type Parameters Name Description TElement The type of element in the collection. DisposeElements<TElement>(IList<TElement>) Disposes of all non-null elements in a collection. Declaration public static void DisposeElements<TElement>(this IList<TElement> elements) where TElement : IDisposable Parameters Type Name Description IList <TElement> elements The collection of elements to be disposed. Type Parameters Name Description TElement The type of element in the collection. ExportDictionaryValuesAsArray<T>(Dictionary<UInt32, T>) Exports the values of a uint indexed Dictionary as an Array Declaration public static T[] ExportDictionaryValuesAsArray<T>(this Dictionary<uint, T> input) Parameters Type Name Description Dictionary < UInt32 , T> input Dictionary to be exported Returns Type Description T[] array in the type of data stored in the Dictionary Type Parameters Name Description T Type of data stored in the values of the Dictionary GetInteractionByType(MixedRealityInteractionMapping[], DeviceInputType) Overload extension to enable getting of an InteractionDefinition of a specific type Declaration public static MixedRealityInteractionMapping GetInteractionByType(this MixedRealityInteractionMapping[] input, DeviceInputType key) Parameters Type Name Description MixedRealityInteractionMapping [] input The InteractionDefinition array reference DeviceInputType key The specific DeviceInputType value to query Returns Type Description MixedRealityInteractionMapping SortedInsert<TElement>(List<TElement>, TElement, IComparer<TElement>) Inserts an item in its sorted position into an already sorted collection. This is useful if you need to consume the collection in between insertions and need it to stay correctly sorted the whole time. If you just need to insert a bunch of items and then consume the sorted collection at the end, it's faster to add all the elements and then use Sort() at the end. Declaration public static int SortedInsert<TElement>(this List<TElement> elements, TElement toInsert, IComparer<TElement> comparer = null) Parameters Type Name Description List <TElement> elements The collection of sorted elements to be inserted into. TElement toInsert The element to insert. IComparer <TElement> comparer The comparer to use when sorting or null to use Default . Returns Type Description Int32 Type Parameters Name Description TElement The type of element in the collection. SupportsInputType(MixedRealityInteractionMapping[], DeviceInputType) Overload extension to enable getting of an InteractionDefinition of a specific type Declaration public static bool SupportsInputType(this MixedRealityInteractionMapping[] input, DeviceInputType key) Parameters Type Name Description MixedRealityInteractionMapping [] input The InteractionDefinition array reference DeviceInputType key The specific DeviceInputType value to query Returns Type Description Boolean ToReadOnlyCollection<TElement>(IEnumerable<TElement>) Creates a read-only copy of an existing collection. Declaration public static ReadOnlyCollection<TElement> ToReadOnlyCollection<TElement>(this IEnumerable<TElement> elements) Parameters Type Name Description IEnumerable <TElement> elements The collection to be copied. Returns Type Description ReadOnlyCollection <TElement> The new, read-only copy of elements . Type Parameters Name Description TElement The type of element in the collection."
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.Editor.MixedRealityDiagnosticsSystemProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.Editor.MixedRealityDiagnosticsSystemProfileInspector.html",
    "title": "Class MixedRealityDiagnosticsSystemProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDiagnosticsSystemProfileInspector Inheritance Object MixedRealityDiagnosticsSystemProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Diagnostics.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityDiagnosticsSystemProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Diagnostics.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Diagnostics.Editor Classes MixedRealityDiagnosticsSystemProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Diagnostics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Diagnostics Classes DiagnosticsEventData DiagnosticsSystemVoiceControls Class that listens for and acts upon diagnostic system voice commands. MixedRealityDiagnosticsProfile Configuration profile settings for setting up diagnostics. MixedRealityDiagnosticsSystem The default implementation of the IMixedRealityDiagnosticsSystem MixedRealityToolkitVisualProfiler ABOUT: The VisualProfiler provides a drop in, single file, solution for viewing your Windows Mixed Reality Unity application's frame rate and memory usage. Missed frames are displayed over time to visually find problem areas. Memory is reported as current, peak and max usage in a bar graph. USAGE: To use this profiler simply add this script as a component of any GameObject in your Unity scene. The profiler is initially enabled (toggle-able via the initiallyActive property), but can be toggled via the enabled/disable voice commands keywords. VisualProfilerControl Class that exposes methods to show/hide the visual profiler Interfaces IMixedRealityDiagnosticsHandler IMixedRealityDiagnosticsSystem The interface contract that defines the Diagnostics system in the Mixed Reality Toolkit"
  },
  "api/Microsoft.MixedReality.Toolkit.DistortionMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.DistortionMode.html",
    "title": "Enum DistortionMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DistortionMode How to apply the distortion along the line. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum DistortionMode Fields Name Description NormalizedLength Use the normalized length of the line plus its distortion strength curve to determine distortion strength Uniform Use a single value to determine distortion strength"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType.html",
    "title": "Enum BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType Internal enum used for back navigation along profile hierarchy. Indicates what type of parent profile the current profile will return to for going back Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected enum BackProfileType Fields Name Description Configuration Input RegisteredServices SpatialAwareness"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityToolkitConfigurationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityToolkitConfigurationProfileInspector.html",
    "title": "Class BaseMixedRealityToolkitConfigurationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityToolkitConfigurationProfileInspector Base class for all Mixed Reality Toolkit specific BaseMixedRealityProfile inspectors to inherit from. Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityCameraProfileInspector MixedRealityRegisteredServiceProviderProfileInspector MixedRealitySceneSystemProfileInspector MixedRealitySpeechCommandsProfileInspector MixedRealityToolkitConfigurationProfileInspector MixedRealitySpatialAwarenessMeshObserverProfileInspector Inherited Members BaseMixedRealityProfileInspector.OnEnable() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityToolkitConfigurationProfileInspector : BaseMixedRealityProfileInspector Fields BackProfileDescriptions Declaration protected readonly string[] BackProfileDescriptions Field Value Type Description String [] Properties RenderAsSubProfile Declaration public bool RenderAsSubProfile { get; set; } Property Value Type Description Boolean Methods Awake() Declaration protected virtual void Awake() CheckEditorPlayMode() If application is playing, then show warning to the user and disable inspector GUI Declaration protected bool CheckEditorPlayMode() Returns Type Description Boolean true if application is playing, false otherwise CheckMixedRealityInputActions() Check if various input settings are set correctly to read the input actions for the active MRTK instance. If any failures, show appropriate error message Declaration protected void CheckMixedRealityInputActions() DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) Declaration protected bool DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType returnProfileTarget = BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType.Configuration) Parameters Type Name Description BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType returnProfileTarget Returns Type Description Boolean DrawBacktrackProfileButton(String, UnityEngine.Object) Renders a button that will take user back to a specified profile object Declaration protected bool DrawBacktrackProfileButton(string message, UnityEngine.Object activeObject) Parameters Type Name Description String message UnityEngine.Object activeObject Returns Type Description Boolean True if button was clicked IsProfileInActiveInstance() Helper function to determine if the current profile is assigned to the active instance of MRTK. In some cases profile data refers to other profile data in the MRTK config profile. In these cases, we don't want to render when the active instance isn't using this profile, because it may produce an inaccurate combination of settings. Declaration protected abstract bool IsProfileInActiveInstance() Returns Type Description Boolean RenderDocumentation(Object) Draws a documentation link for the service. Declaration protected void RenderDocumentation(Object profileObject) Parameters Type Name Description Object profileObject RenderMRTKLogoAndSearch() Render the Mixed Reality Toolkit Logo and search field. Declaration protected bool RenderMRTKLogoAndSearch() Returns Type Description Boolean True if the rest of the inspector should be drawn. RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) Helper function to render header correctly for all profiles Declaration protected bool RenderProfileHeader(string title, string description, Object selectionObject, bool isProfileInitialized = true, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType returnProfileTarget = BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType.Configuration) Parameters Type Name Description String title Title of profile String description profile tooltip describing purpose Object selectionObject The profile object. Used to re-select the object after MRTK instance is created. Boolean isProfileInitialized profile properties are full initialized for rendering BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType returnProfileTarget Returns Type Description Boolean True if the rest of the profile should be rendered."
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.EditorLayerExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.EditorLayerExtensions.html",
    "title": "Class EditorLayerExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorLayerExtensions Inheritance Object EditorLayerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorLayerExtensions Properties TagManagerLayers The current layers defined in the Tag Manager. Declaration public static UnityEditor.SerializedProperty TagManagerLayers { get; } Property Value Type Description UnityEditor.SerializedProperty Methods RemoveLayer(String) Attempts to remove the layer from the Project Settings Tag Manager. Declaration public static void RemoveLayer(string layerName) Parameters Type Name Description String layerName SetupLayer(Int32, String) Attempts to set the layer in Project Settings Tag Manager. Declaration public static bool SetupLayer(int layerId, string layerName) Parameters Type Name Description Int32 layerId The layer Id to attempt to set the layer on. String layerName The layer name to attempt to set the layer on. Returns Type Description Boolean True if the specified layerId was newly configured, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.EnumFlagsAttributeDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.EnumFlagsAttributeDrawer.html",
    "title": "Class EnumFlagsAttributeDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class EnumFlagsAttributeDrawer Renders enum flags on fields with the attribute. From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html Inheritance Object EnumFlagsAttributeDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class EnumFlagsAttributeDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.HelpDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.HelpDrawer.html",
    "title": "Class HelpDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class HelpDrawer Custom property drawer to show an optionally collapsible foldout help section in the Inspector Inheritance Object HelpDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class HelpDrawer : DecoratorDrawer Examples [Help(\"This is a multiline optionally collapsable help section.\\n • Great for providing simple instructions in Inspector.\\n • Easy to use.\\n • Saves space.\")] Methods GetHeight() Gets the height of the decorator Declaration public override float GetHeight() Returns Type Description Single OnGUI(Rect) Unity calls this function to draw the GUI Declaration public override void OnGUI(Rect position) Parameters Type Name Description Rect position Rectangle to display the GUI in"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.HoverLightInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.HoverLightInspector.html",
    "title": "Class HoverLightInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class HoverLightInspector Inheritance Object HoverLightInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class HoverLightInspector : UnityEditor.Editor"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityProjectPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityProjectPreferences.html",
    "title": "Class MixedRealityProjectPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityProjectPreferences MRTK project preferences access and inspector rendering logic Inheritance Object MixedRealityProjectPreferences Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public static class MixedRealityProjectPreferences Properties AutoEnableUWPCapabilities Should the settings prompt show on startup? Declaration public static bool AutoEnableUWPCapabilities { get; set; } Property Value Type Description Boolean IgnoreSettingsPrompt Should the settings prompt show on startup? Declaration public static bool IgnoreSettingsPrompt { get; set; } Property Value Type Description Boolean LockProfiles Should the default profile inspectors be disabled to prevent editing? Declaration public static bool LockProfiles { get; set; } Property Value Type Description Boolean RunOptimalConfiguration Should the settings prompt show on startup? Declaration public static bool RunOptimalConfiguration { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityRegisteredServiceProviderProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityRegisteredServiceProviderProfileInspector.html",
    "title": "Class MixedRealityRegisteredServiceProviderProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityRegisteredServiceProviderProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityRegisteredServiceProviderProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.RenderAsSubProfile BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileDescriptions BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMRTKLogoAndSearch() BaseMixedRealityToolkitConfigurationProfileInspector.RenderDocumentation(Object) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(String, UnityEngine.Object) BaseMixedRealityToolkitConfigurationProfileInspector.RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.CheckEditorPlayMode() BaseMixedRealityToolkitConfigurationProfileInspector.CheckMixedRealityInputActions() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityRegisteredServiceProviderProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean Overrides BaseMixedRealityToolkitConfigurationProfileInspector.IsProfileInActiveInstance() OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealitySceneSystemProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealitySceneSystemProfileInspector.html",
    "title": "Class MixedRealitySceneSystemProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySceneSystemProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealitySceneSystemProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.RenderAsSubProfile BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileDescriptions BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMRTKLogoAndSearch() BaseMixedRealityToolkitConfigurationProfileInspector.RenderDocumentation(Object) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(String, UnityEngine.Object) BaseMixedRealityToolkitConfigurationProfileInspector.RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.CheckEditorPlayMode() BaseMixedRealityToolkitConfigurationProfileInspector.CheckMixedRealityInputActions() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealitySceneSystemProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean Overrides BaseMixedRealityToolkitConfigurationProfileInspector.IsProfileInActiveInstance() OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.BaseStyles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.BaseStyles.html",
    "title": "Class MixedRealityShaderGUI.BaseStyles | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityShaderGUI.BaseStyles Inheritance Object MixedRealityShaderGUI.BaseStyles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected static class BaseStyles Fields advancedOptionsTitle Declaration public static string advancedOptionsTitle Field Value Type Description String alphaBlendOnName Declaration public static string alphaBlendOnName Field Value Type Description String alphaTestOnName Declaration public static string alphaTestOnName Field Value Type Description String blendOperation Declaration public static GUIContent blendOperation Field Value Type Description GUIContent blendOperationName Declaration public static string blendOperationName Field Value Type Description String colorWriteMask Declaration public static GUIContent colorWriteMask Field Value Type Description GUIContent colorWriteMaskName Declaration public static string colorWriteMaskName Field Value Type Description String cullMode Declaration public static GUIContent cullMode Field Value Type Description GUIContent cullModeName Declaration public static string cullModeName Field Value Type Description String customRenderingModeName Declaration public static string customRenderingModeName Field Value Type Description String customRenderingModeNames Declaration public static readonly string[] customRenderingModeNames Field Value Type Description String [] depthOffsetFactor Declaration public static GUIContent depthOffsetFactor Field Value Type Description GUIContent depthOffsetFactorName Declaration public static string depthOffsetFactorName Field Value Type Description String depthOffsetUnits Declaration public static GUIContent depthOffsetUnits Field Value Type Description GUIContent depthOffsetUnitsName Declaration public static string depthOffsetUnitsName Field Value Type Description String depthTest Declaration public static GUIContent depthTest Field Value Type Description GUIContent depthTestName Declaration public static string depthTestName Field Value Type Description String depthWrite Declaration public static GUIContent depthWrite Field Value Type Description GUIContent depthWriteName Declaration public static string depthWriteName Field Value Type Description String depthWriteNames Declaration public static readonly string[] depthWriteNames Field Value Type Description String [] destinationBlend Declaration public static GUIContent destinationBlend Field Value Type Description GUIContent destinationBlendName Declaration public static string destinationBlendName Field Value Type Description String renderingModeName Declaration public static string renderingModeName Field Value Type Description String renderingModeNames Declaration public static readonly string[] renderingModeNames Field Value Type Description String [] renderingOptionsTitle Declaration public static string renderingOptionsTitle Field Value Type Description String renderQueueOverride Declaration public static GUIContent renderQueueOverride Field Value Type Description GUIContent renderQueueOverrideName Declaration public static string renderQueueOverrideName Field Value Type Description String renderTypeName Declaration public static string renderTypeName Field Value Type Description String sourceBlend Declaration public static GUIContent sourceBlend Field Value Type Description GUIContent sourceBlendName Declaration public static string sourceBlendName Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRSystem.html",
    "title": "Struct IVRSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRSystem Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRSystem"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRTrackedCamera.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRTrackedCamera.html",
    "title": "Struct IVRTrackedCamera | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRTrackedCamera Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRTrackedCamera"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.OpenVR.Headers | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.OpenVR.Headers Classes CVRApplications CVRChaperone CVRChaperoneSetup CVRCompositor CVRDriverManager CVRExtendedDisplay CVRInput CVRIOBuffer CVRNotifications CVROverlay CVRRenderModels CVRResources CVRScreenshots CVRSettings CVRSpatialAnchors CVRSystem CVRTrackedCamera OpenVR OpenVRInterop Structs AppOverrideKeys_t CameraVideoStreamFrameHeader_t Compositor_CumulativeStats Compositor_FrameTiming Compositor_OverlaySettings COpenVRContext CVRSettingHelper D3D12TextureData_t DistortionCoordinates_t DriverDirectMode_FrameTiming HiddenAreaMesh_t HmdColor_t HmdMatrix33_t HmdMatrix34_t HmdMatrix44_t HmdQuad_t HmdQuaternion_t HmdQuaternionf_t HmdRect2_t HmdVector2_t HmdVector3_t HmdVector3d_t HmdVector4_t ImuSample_t InputAnalogActionData_t InputDigitalActionData_t InputOriginInfo_t InputPoseActionData_t InputSkeletalActionData_t IntersectionMaskCircle_t IntersectionMaskRectangle_t IVRApplications IVRChaperone IVRChaperoneSetup IVRCompositor IVRDriverManager IVRExtendedDisplay IVRInput IVRIOBuffer IVRNotifications IVROverlay IVRRenderModels IVRResources IVRScreenshots IVRSettings IVRSpatialAnchors IVRSystem IVRTrackedCamera NotificationBitmap_t RenderModel_ComponentState_t RenderModel_ControllerMode_State_t RenderModel_t RenderModel_t_Packed RenderModel_TextureMap_t RenderModel_TextureMap_t_Packed RenderModel_Vertex_t SpatialAnchorPose_t Texture_t TrackedDevicePose_t VRActiveActionSet_t VRBoneTransform_t VRControllerAxis_t VRControllerState_t VRControllerState_t_Packed VREvent_ApplicationLaunch_t VREvent_Chaperone_t VREvent_Controller_t VREvent_Data_t VREvent_DualAnalog_t VREvent_EditingCameraSurface_t VREvent_HapticVibration_t VREvent_InputActionManifestLoad_t VREvent_InputBindingLoad_t VREvent_Ipd_t VREvent_Keyboard_t VREvent_MessageOverlay_t VREvent_Mouse_t VREvent_Notification_t VREvent_Overlay_t VREvent_PerformanceTest_t VREvent_Process_t VREvent_ProgressUpdate_t VREvent_Property_t VREvent_Reserved_t VREvent_Screenshot_t VREvent_ScreenshotProgress_t VREvent_Scroll_t VREvent_SeatedZeroPoseReset_t VREvent_ShowUI_t VREvent_SpatialAnchor_t VREvent_Status_t VREvent_t VREvent_t_Packed VREvent_TouchPadMove_t VREvent_WebConsole_t VROverlayIntersectionMaskPrimitive_Data_t VROverlayIntersectionMaskPrimitive_t VROverlayIntersectionParams_t VROverlayIntersectionResults_t VRSkeletalSummaryData_t VRTextureBounds_t VRTextureDepthInfo_t VRTextureWithDepth_t VRTextureWithPose_t VRTextureWithPoseAndDepth_t VRVulkanTextureData_t Enums ChaperoneCalibrationState EChaperoneConfigFile EChaperoneImportFlags ECollisionBoundsStyle EColorSpace EDeviceActivityLevel EDualAnalogWhich EGamepadTextInputLineMode EGamepadTextInputMode EHiddenAreaMeshType EIOBufferError EIOBufferMode EOverlayDirection EShowUIType ETextureType ETrackedControllerRole ETrackedDeviceClass ETrackedDeviceProperty ETrackedPropertyError ETrackingResult ETrackingUniverseOrigin EVRApplicationError EVRApplicationProperty EVRApplicationTransitionState EVRApplicationType EVRButtonId EVRComponentProperty EVRCompositorError EVRCompositorTimingMode EVRControllerAxisType EVRControllerEventOutputType EVRDistortionFunctionType EVREventType EVREye EVRFinger EVRFingerSplay EVRFirmwareError EVRInitError EVRInputError EVRInputFilterCancelType EVRInputStringBits EVRMouseButton EVRMuraCorrectionMode EVRNotificationError EVRNotificationStyle EVRNotificationType EVROverlayError EVROverlayIntersectionMaskPrimitiveType EVRRenderModelError EVRScreenshotError EVRScreenshotPropertyFilenames EVRScreenshotType EVRSettingsError EVRSkeletalMotionRange EVRSkeletalReferencePose EVRSkeletalTrackingLevel EVRSkeletalTransformSpace EVRSpatialAnchorError EVRState EVRSubmitFlags EVRTrackedCameraError EVRTrackedCameraFrameLayout EVRTrackedCameraFrameType EVSync Imu_OffScaleFlags VRMessageOverlayResponse VROverlayFlags VROverlayInputMethod VROverlayTransformType"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.GenericOpenVRController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.GenericOpenVRController.html",
    "title": "Class GenericOpenVRController | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericOpenVRController Inheritance Object GenericOpenVRController OculusRemoteController OculusTouchController ViveKnucklesController ViveWandController WindowsMixedRealityOpenVRMotionController Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class GenericOpenVRController : GenericJoystickController Constructors GenericOpenVRController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Declaration public GenericOpenVRController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] DefaultRightHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] LastXrNodeStateReading The current source state reading for this OpenVR Controller. Declaration public XRNodeState LastXrNodeStateReading { get; protected set; } Property Value Type Description XRNodeState Methods SetupDefaultInteractions(Handedness) Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness TryRenderControllerModel(Type, InputSourceType) Declaration protected override bool TryRenderControllerModel(Type controllerType, InputSourceType inputSourceType) Parameters Type Name Description Type controllerType InputSourceType inputSourceType Returns Type Description Boolean UpdateController() Declaration public override void UpdateController() UpdateControllerData(XRNodeState) Update the \"Controller\" input from the device Declaration protected void UpdateControllerData(XRNodeState state) Parameters Type Name Description XRNodeState state"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OculusRemoteController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OculusRemoteController.html",
    "title": "Class OculusRemoteController | Mixed Reality Toolkit Documentation",
    "keywords": "Class OculusRemoteController Inheritance Object GenericOpenVRController OculusRemoteController Inherited Members GenericOpenVRController.LastXrNodeStateReading GenericOpenVRController.DefaultLeftHandedInteractions GenericOpenVRController.DefaultRightHandedInteractions GenericOpenVRController.UpdateController() GenericOpenVRController.UpdateControllerData(XRNodeState) GenericOpenVRController.TryRenderControllerModel(Type, InputSourceType) Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class OculusRemoteController : GenericOpenVRController Constructors OculusRemoteController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public OculusRemoteController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Methods SetupDefaultInteractions(Handedness) Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides GenericOpenVRController.SetupDefaultInteractions(Handedness)"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OculusTouchController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OculusTouchController.html",
    "title": "Class OculusTouchController | Mixed Reality Toolkit Documentation",
    "keywords": "Class OculusTouchController Inheritance Object GenericOpenVRController OculusTouchController Inherited Members GenericOpenVRController.LastXrNodeStateReading GenericOpenVRController.SetupDefaultInteractions(Handedness) GenericOpenVRController.UpdateController() GenericOpenVRController.UpdateControllerData(XRNodeState) GenericOpenVRController.TryRenderControllerModel(Type, InputSourceType) Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class OculusTouchController : GenericOpenVRController Constructors OculusTouchController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public OculusTouchController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultLeftHandedInteractions DefaultRightHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultRightHandedInteractions"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OpenVRDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OpenVRDeviceManager.html",
    "title": "Class OpenVRDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class OpenVRDeviceManager Manages Open VR Devices using unity's input system. Inheritance Object OpenVRDeviceManager Implements IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class OpenVRDeviceManager : UnityJoystickManager, IMixedRealityCapabilityCheck Constructors OpenVRDeviceManager(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public OpenVRDeviceManager(IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. OpenVRDeviceManager(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public OpenVRDeviceManager(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. GetCurrentControllerType(String) Declaration protected override SupportedControllerType GetCurrentControllerType(string joystickName) Parameters Type Name Description String joystickName Returns Type Description SupportedControllerType GetOrAddController(String) Declaration protected override GenericJoystickController GetOrAddController(string joystickName) Parameters Type Name Description String joystickName Returns Type Description GenericJoystickController RemoveController(String) Declaration protected override void RemoveController(string joystickName) Parameters Type Name Description String joystickName Implements IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OpenVRRenderModel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.OpenVRRenderModel.html",
    "title": "Class OpenVRRenderModel | Mixed Reality Toolkit Documentation",
    "keywords": "Class OpenVRRenderModel Represents and loads models from the OpenVR APIs. This class is based on the SteamVR_RenderModel class. Inheritance Object OpenVRRenderModel Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class OpenVRRenderModel : MonoBehaviour Methods LoadModel(Handedness) Attempts to load or reload a controller model based on the passed in handedness. Declaration public bool LoadModel(Handedness handedness) Parameters Type Name Description Handedness handedness The handedness of the controller model to load. Returns Type Description Boolean True if the controller model was found and loaded. False otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.ViveKnucklesController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.ViveKnucklesController.html",
    "title": "Class ViveKnucklesController | Mixed Reality Toolkit Documentation",
    "keywords": "Class ViveKnucklesController Inheritance Object GenericOpenVRController ViveKnucklesController Inherited Members GenericOpenVRController.LastXrNodeStateReading GenericOpenVRController.SetupDefaultInteractions(Handedness) GenericOpenVRController.UpdateController() GenericOpenVRController.UpdateControllerData(XRNodeState) GenericOpenVRController.TryRenderControllerModel(Type, InputSourceType) Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class ViveKnucklesController : GenericOpenVRController Constructors ViveKnucklesController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public ViveKnucklesController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultLeftHandedInteractions DefaultRightHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultRightHandedInteractions"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.ViveWandController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.ViveWandController.html",
    "title": "Class ViveWandController | Mixed Reality Toolkit Documentation",
    "keywords": "Class ViveWandController Inheritance Object GenericOpenVRController ViveWandController Inherited Members GenericOpenVRController.LastXrNodeStateReading GenericOpenVRController.SetupDefaultInteractions(Handedness) GenericOpenVRController.UpdateController() GenericOpenVRController.UpdateControllerData(XRNodeState) GenericOpenVRController.TryRenderControllerModel(Type, InputSourceType) Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class ViveWandController : GenericOpenVRController Constructors ViveWandController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public ViveWandController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultLeftHandedInteractions DefaultRightHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultRightHandedInteractions"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.WindowsMixedRealityOpenVRMotionController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.WindowsMixedRealityOpenVRMotionController.html",
    "title": "Class WindowsMixedRealityOpenVRMotionController | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityOpenVRMotionController Open VR Implementation of the Windows Mixed Reality Motion Controllers. Inheritance Object GenericOpenVRController WindowsMixedRealityOpenVRMotionController Inherited Members GenericOpenVRController.LastXrNodeStateReading GenericOpenVRController.UpdateController() GenericOpenVRController.UpdateControllerData(XRNodeState) GenericOpenVRController.TryRenderControllerModel(Type, InputSourceType) Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityOpenVRMotionController : GenericOpenVRController Constructors WindowsMixedRealityOpenVRMotionController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public WindowsMixedRealityOpenVRMotionController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultLeftHandedInteractions DefaultRightHandedInteractions Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides GenericOpenVRController.DefaultRightHandedInteractions Methods SetupDefaultInteractions(Handedness) Setup the default interactions, then update the spatial pointer rotation with the preconfigured offset angle. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides GenericOpenVRController.SetupDefaultInteractions(Handedness)"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Input.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.OpenVR.Input | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.OpenVR.Input Classes GenericOpenVRController OculusRemoteController OculusTouchController OpenVRDeviceManager Manages Open VR Devices using unity's input system. OpenVRRenderModel Represents and loads models from the OpenVR APIs. This class is based on the SteamVR_RenderModel class. ViveKnucklesController ViveWandController WindowsMixedRealityOpenVRMotionController Open VR Implementation of the Windows Mixed Reality Motion Controllers."
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.RuntimeRenderSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.RuntimeRenderSettings.html",
    "title": "Struct RuntimeRenderSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RuntimeRenderSettings A struct that mimics the render settings stored in a scene. Used to store, retrieve and interpolate render settings. Omits any editor-only settings, as well as some settings that are seldom used. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public struct RuntimeRenderSettings Fields AmbientEquatorColor Declaration public Color AmbientEquatorColor Field Value Type Description Color AmbientGroundColor Declaration public Color AmbientGroundColor Field Value Type Description Color AmbientIntensity Declaration public float AmbientIntensity Field Value Type Description Single AmbientLight Declaration public Color AmbientLight Field Value Type Description Color AmbientMode Declaration public int AmbientMode Field Value Type Description Int32 AmbientSkyColor Declaration public Color AmbientSkyColor Field Value Type Description Color CustomReflection Declaration public Cubemap CustomReflection Field Value Type Description Cubemap DefaultReflectionMode Declaration public DefaultReflectionMode DefaultReflectionMode Field Value Type Description DefaultReflectionMode DefaultReflectionResolution Declaration public int DefaultReflectionResolution Field Value Type Description Int32 Fog Declaration public bool Fog Field Value Type Description Boolean FogColor Declaration public Color FogColor Field Value Type Description Color FogDensity Declaration public float FogDensity Field Value Type Description Single FogMode Declaration public FogMode FogMode Field Value Type Description FogMode LinearFogEnd Declaration public float LinearFogEnd Field Value Type Description Single LinearFogStart Declaration public float LinearFogStart Field Value Type Description Single ReflectionBounces Declaration public int ReflectionBounces Field Value Type Description Int32 ReflectionIntensity Declaration public float ReflectionIntensity Field Value Type Description Single SkyboxMaterial Declaration public Material SkyboxMaterial Field Value Type Description Material SubtractiveShadowColor Declaration public Color SubtractiveShadowColor Field Value Type Description Color UseRadianceAmbientProbe Declaration public bool UseRadianceAmbientProbe Field Value Type Description Boolean Methods Black(RuntimeRenderSettings) Sets continuous settings to 'black' without changing any discrete features. Declaration public static RuntimeRenderSettings Black(RuntimeRenderSettings source) Parameters Type Name Description RuntimeRenderSettings source Returns Type Description RuntimeRenderSettings Lerp(RuntimeRenderSettings, RuntimeRenderSettings, Single) Lerps between two settings Declaration public static RuntimeRenderSettings Lerp(RuntimeRenderSettings from, RuntimeRenderSettings to, float t) Parameters Type Name Description RuntimeRenderSettings from RuntimeRenderSettings to Single t Value from 0 to 1 Returns Type Description RuntimeRenderSettings"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.RuntimeSunlightSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.RuntimeSunlightSettings.html",
    "title": "Struct RuntimeSunlightSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RuntimeSunlightSettings Struct for storing directional sunlight settings stored in a scene. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public struct RuntimeSunlightSettings Fields Color Declaration public Color Color Field Value Type Description Color Intensity Declaration public float Intensity Field Value Type Description Single UseSunlight Declaration public bool UseSunlight Field Value Type Description Boolean XRotation Declaration public float XRotation Field Value Type Description Single YRotation Declaration public float YRotation Field Value Type Description Single ZRotation Declaration public float ZRotation Field Value Type Description Single Methods Black(RuntimeSunlightSettings) Sets continuous settings to 'black' without changing any discrete features. Declaration public static RuntimeSunlightSettings Black(RuntimeSunlightSettings source) Parameters Type Name Description RuntimeSunlightSettings source Returns Type Description RuntimeSunlightSettings Lerp(RuntimeSunlightSettings, RuntimeSunlightSettings, Single) Lerps between two settings Declaration public static RuntimeSunlightSettings Lerp(RuntimeSunlightSettings from, RuntimeSunlightSettings to, float t) Parameters Type Name Description RuntimeSunlightSettings from RuntimeSunlightSettings to Single t Value from 0 to 1 Returns Type Description RuntimeSunlightSettings"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.SceneActivationToken.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.SceneActivationToken.html",
    "title": "Class SceneActivationToken | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneActivationToken Used by scene system to control when newly loaded scenes are activated. Inheritance Object SceneActivationToken Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public class SceneActivationToken Properties AllowSceneActivation Setting this to true grants permission for scene operation to activate loaded scenes. Declaration public bool AllowSceneActivation { get; set; } Property Value Type Description Boolean ReadyToProceed When true, the operation is waiting on AllowSceneActivation to be set to true before proceeding. Declaration public bool ReadyToProceed { get; } Property Value Type Description Boolean Methods SetReadyToProceed(Boolean) Sets ReadyToProceed value Declaration public void SetReadyToProceed(bool readyToProceed) Parameters Type Name Description Boolean readyToProceed"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.SceneInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.SceneInfo.html",
    "title": "Struct SceneInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Struct SceneInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public struct SceneInfo Fields Asset SceneAsset reference. Since SceneAsset is an editor-only asset, we store an object reference instead. Declaration public UnityEngine.Object Asset Field Value Type Description UnityEngine.Object BuildIndex Build index of the scene. If included in build settings and enabled, this will be a value greater than zero. If not included or disabled, this will be -1 Declaration public int BuildIndex Field Value Type Description Int32 Included True if scene is included in build (NOT necessarily enabled) Declaration public bool Included Field Value Type Description Boolean Name Name of the scene. Set by the property drawer. Declaration public string Name Field Value Type Description String Path Path of the scene. Set by the property drawer. Declaration public string Path Field Value Type Description String Tag Optional tag used to load and unload scenes in groups. Declaration public string Tag Field Value Type Description String Properties Empty Declaration public static SceneInfo Empty { get; } Property Value Type Description SceneInfo IsEmpty Scene asset is not set. Declaration public bool IsEmpty { get; } Property Value Type Description Boolean IsEnabled Declaration public bool IsEnabled { get; } Property Value Type Description Boolean IsInBuildSettings Returns true if the asset is not null and if the scene has a valid build index. Doesn't respect whether scene is enabled in build settings. Declaration public bool IsInBuildSettings { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.HeadPositionOffset.html",
    "title": "Class HeadPositionOffset | Mixed Reality Toolkit Documentation",
    "keywords": "Class HeadPositionOffset Set the content around the camera height Inheritance Object HeadPositionOffset Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class HeadPositionOffset : MonoBehaviour Fields HeadOffset Declaration public Vector3 HeadOffset Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.HoverLight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.HoverLight.html",
    "title": "Class HoverLight | Mixed Reality Toolkit Documentation",
    "keywords": "Class HoverLight Utility component to animate and visualize a light that can be used with the \"MixedRealityToolkit/Standard\" shader \"_HoverLight\" feature. Inheritance Object HoverLight Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class HoverLight : MonoBehaviour Properties Color Specifies the highlight color Declaration public Color Color { get; } Property Value Type Description Color Radius Specifies the Radius of the HoverLight effect Declaration public float Radius { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.OBJWriterUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.OBJWriterUtility.html",
    "title": "Class OBJWriterUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class OBJWriterUtility Utility for generating and saving OBJ files from GameObjects and their Meshes Inheritance Object OBJWriterUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class OBJWriterUtility Methods CreateOBJFileContentAsync(GameObject, Boolean) Coroutine async method that generates string in OBJ file format of provided GameObject's Mesh, and possibly children. Declaration public static IEnumerator<string> CreateOBJFileContentAsync(GameObject target, bool includeChildren) Parameters Type Name Description GameObject target GameObject to target for pulling MeshFilter data Boolean includeChildren Include Mesh data of children GameObjects as sub-meshes in output Returns Type Description IEnumerator < String > string of all mesh data (no materials) in OBJ file format ExportOBJAsync(GameObject, String, Boolean) Export mesh data of provided GameObject, and children if enabled, to file provided in OBJ format Declaration public static Task ExportOBJAsync(GameObject root, string filePath, bool includeChildren = true) Parameters Type Name Description GameObject root String filePath Boolean includeChildren Returns Type Description Task Remarks Traversal of GameObject mesh data is done via Coroutine on main Unity thread due to limitations by Unity. If a file does not exist at given file path, a new one is automatically created If applicable, children Mesh data will be bundled into same OBJ file."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.OrientationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.OrientationType.html",
    "title": "Enum OrientationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum OrientationType Orientation type enum Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum OrientationType Fields Name Description FaceCenterAxis Lay flat on the surface, facing in FaceCenterAxisReversed Lay flat on the surface, facing out FaceOrigin Rotate towards the origin FaceOriginReversed Rotate towards the origin + 180 degrees FaceParentDown Parent Relative Down FaceParentForwardReversed Zero rotation + 180 degrees FaceParentFoward Zero rotation FaceParentUp Parent Relative Up None Don't rotate at all"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ParabolaConstrainedLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ParabolaConstrainedLineDataProvider.html",
    "title": "Class ParabolaConstrainedLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaConstrainedLineDataProvider Generates a parabolic line between two points. Inheritance Object BaseMixedRealityLineDataProvider ParabolaLineDataProvider ParabolaConstrainedLineDataProvider Inherited Members ParabolaLineDataProvider.StartPoint ParabolaLineDataProvider.GetUnClampedWorldLengthInternal() ParabolaLineDataProvider.GetUpVectorInternal(Single) BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ParabolaConstrainedLineDataProvider : ParabolaLineDataProvider Properties EndPoint The point where this line will end. Declaration public MixedRealityPose EndPoint { get; set; } Property Value Type Description MixedRealityPose Height Declaration public float Height { get; set; } Property Value Type Description Single PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount UpDirection Declaration public Vector3 UpDirection { get; set; } Property Value Type Description Vector3 Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ParabolaLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ParabolaLineDataProvider.html",
    "title": "Class ParabolaLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaLineDataProvider Base Parabola line data provider. Inheritance Object BaseMixedRealityLineDataProvider ParabolaLineDataProvider ParabolaConstrainedLineDataProvider ParabolaPhysicalLineDataProvider Inherited Members BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.PointCount BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3) BaseMixedRealityLineDataProvider.GetPointInternal(Single) BaseMixedRealityLineDataProvider.GetPointInternal(Int32) BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class ParabolaLineDataProvider : BaseMixedRealityLineDataProvider Properties StartPoint The Starting point of this line. Declaration public MixedRealityPose StartPoint { get; } Property Value Type Description MixedRealityPose Remarks Always located at this GameObject 's Transform.position Methods GetUnClampedWorldLengthInternal() Get the UnClamped world length of the line Declaration protected override float GetUnClampedWorldLengthInternal() Returns Type Description Single Overrides BaseMixedRealityLineDataProvider.GetUnClampedWorldLengthInternal() GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetUpVectorInternal(Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ParabolaPhysicalLineDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ParabolaPhysicalLineDataProvider.html",
    "title": "Class ParabolaPhysicalLineDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaPhysicalLineDataProvider Creates a parabolic line based on physics. Inheritance Object BaseMixedRealityLineDataProvider ParabolaLineDataProvider ParabolaPhysicalLineDataProvider Inherited Members ParabolaLineDataProvider.StartPoint ParabolaLineDataProvider.GetUnClampedWorldLengthInternal() BaseMixedRealityLineDataProvider.UnclampedWorldLengthSearchSteps BaseMixedRealityLineDataProvider.UnClampedWorldLength BaseMixedRealityLineDataProvider.LineStartClamp BaseMixedRealityLineDataProvider.LineEndClamp BaseMixedRealityLineDataProvider.LineTransform BaseMixedRealityLineDataProvider.Loops BaseMixedRealityLineDataProvider.TransformMode BaseMixedRealityLineDataProvider.RotationMode BaseMixedRealityLineDataProvider.FlipUpVector BaseMixedRealityLineDataProvider.OriginOffset BaseMixedRealityLineDataProvider.ManualUpVectorBlend BaseMixedRealityLineDataProvider.ManualUpVectors BaseMixedRealityLineDataProvider.VelocitySearchRange BaseMixedRealityLineDataProvider.Distorters BaseMixedRealityLineDataProvider.DistortionEnabled BaseMixedRealityLineDataProvider.DistortionMode BaseMixedRealityLineDataProvider.DistortionStrength BaseMixedRealityLineDataProvider.UniformDistortionStrength BaseMixedRealityLineDataProvider.FirstPoint BaseMixedRealityLineDataProvider.LastPoint BaseMixedRealityLineDataProvider.OnEnable() BaseMixedRealityLineDataProvider.LateUpdate() BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldLength(Single, Int32) BaseMixedRealityLineDataProvider.GetVelocity(Single) BaseMixedRealityLineDataProvider.GetRotation(Single, LineRotationMode) BaseMixedRealityLineDataProvider.GetRotation(Int32, LineRotationMode) BaseMixedRealityLineDataProvider.GetPoint(Single) BaseMixedRealityLineDataProvider.GetUnClampedPoint(Single) BaseMixedRealityLineDataProvider.GetPoint(Int32) BaseMixedRealityLineDataProvider.SetPoint(Int32, Vector3) BaseMixedRealityLineDataProvider.GetClosestPoint(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.GetNormalizedLengthFromWorldPos(Vector3, Int32, Int32) BaseMixedRealityLineDataProvider.UpdateMatrix() BaseMixedRealityLineDataProvider.DrawUnselectedGizmosPreview() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ParabolaPhysicalLineDataProvider : ParabolaLineDataProvider Properties Direction Declaration public Vector3 Direction { get; set; } Property Value Type Description Vector3 DistanceMultiplier Declaration public float DistanceMultiplier { get; set; } Property Value Type Description Single Gravity Declaration public Vector3 Gravity { get; set; } Property Value Type Description Vector3 PointCount The number of points this line has. Declaration public override int PointCount { get; } Property Value Type Description Int32 Overrides BaseMixedRealityLineDataProvider.PointCount UseCustomGravity Declaration public bool UseCustomGravity { get; set; } Property Value Type Description Boolean Velocity Declaration public float Velocity { get; set; } Property Value Type Description Single Methods GetPointInternal(Int32) Get a point based on point index Point index will be pre-clamped Declaration protected override Vector3 GetPointInternal(int pointIndex) Parameters Type Name Description Int32 pointIndex Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Int32) GetPointInternal(Single) Get a point based on normalized distance along line Normalized distance will be pre-clamped Declaration protected override Vector3 GetPointInternal(float normalizedDistance) Parameters Type Name Description Single normalizedDistance Returns Type Description Vector3 Overrides BaseMixedRealityLineDataProvider.GetPointInternal(Single) GetUpVectorInternal(Single) Gets the up vector at a normalized length along line (used for rotation) Declaration protected override Vector3 GetUpVectorInternal(float normalizedLength) Parameters Type Name Description Single normalizedLength Returns Type Description Vector3 Overrides ParabolaLineDataProvider.GetUpVectorInternal(Single) SetPointInternal(Int32, Vector3) Sets the point at index. Declaration protected override void SetPointInternal(int pointIndex, Vector3 point) Parameters Type Name Description Int32 pointIndex Vector3 point Overrides BaseMixedRealityLineDataProvider.SetPointInternal(Int32, Vector3) Remarks This specific override doesn't set any points."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ParticleSystemLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ParticleSystemLineRenderer.html",
    "title": "Class ParticleSystemLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParticleSystemLineRenderer attaches a set of particles to the line Inheritance Object BaseMixedRealityLineRenderer ParticleSystemLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.PointDistributionMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) BaseMixedRealityLineRenderer.GetNormalizedPointAlongLine(Int32) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ParticleSystemLineRenderer : BaseMixedRealityLineRenderer Properties DecayGradient Declaration public Gradient DecayGradient { get; set; } Property Value Type Description Gradient LifetimeAfterDisabled Declaration public float LifetimeAfterDisabled { get; set; } Property Value Type Description Single LineMaterial Declaration public Material LineMaterial { get; set; } Property Value Type Description Material MainParticleRenderer Declaration public ParticleSystemRenderer MainParticleRenderer { get; set; } Property Value Type Description ParticleSystemRenderer MaxParticles Declaration public int MaxParticles { get; set; } Property Value Type Description Int32 NoiseFrequency Declaration public float NoiseFrequency { get; set; } Property Value Type Description Single NoiseOcatives Declaration public int NoiseOcatives { get; set; } Property Value Type Description Int32 NoiseSpeed Declaration public float NoiseSpeed { get; set; } Property Value Type Description Single NoiseStrength Declaration public Vector3 NoiseStrength { get; set; } Property Value Type Description Vector3 ParticleNoiseOnDisabled Declaration public bool ParticleNoiseOnDisabled { get; set; } Property Value Type Description Boolean Methods UpdateLine() Declaration protected override void UpdateLine() Overrides BaseMixedRealityLineRenderer.UpdateLine()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.PivotAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.PivotAxis.html",
    "title": "Enum PivotAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PivotAxis Rotational Pivot axis for orientating an object Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum PivotAxis Fields Name Description Free X XY XZ Y YZ Z"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.PlatformUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.PlatformUtility.html",
    "title": "Class PlatformUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class PlatformUtility Inheritance Object PlatformUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class PlatformUtility Methods IsPlatformSupported(RuntimePlatform, SupportedPlatforms) Declaration public static bool IsPlatformSupported(this RuntimePlatform runtimePlatform, SupportedPlatforms platforms) Parameters Type Name Description RuntimePlatform runtimePlatform SupportedPlatforms platforms Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ProcessResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ProcessResult.html",
    "title": "Struct ProcessResult | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ProcessResult Result from a completed asynchronous process. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public struct ProcessResult Constructors ProcessResult(Int32, String[], String[]) Constructor for Process Result. Declaration public ProcessResult(int exitCode, string[] errors, string[] output) Parameters Type Name Description Int32 exitCode Exit code from completed process. String [] errors Errors from completed process. String [] output Output from completed process. Properties Errors Errors from completed process. Declaration public string[] Errors { get; } Property Value Type Description String [] ExitCode Exit code from completed process. Declaration public int ExitCode { get; } Property Value Type Description Int32 Output Output from completed process. Declaration public string[] Output { get; } Property Value Type Description String []"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ProximityLight.LightSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ProximityLight.LightSettings.html",
    "title": "Class ProximityLight.LightSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProximityLight.LightSettings Inheritance Object ProximityLight.LightSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class LightSettings Properties CenterColor The color of the ProximityLight gradient at the center (RGB) and (A) is gradient extent. Declaration public Color CenterColor { get; set; } Property Value Type Description Color FarRadius Specifies the radius of the ProximityLight effect when far from a surface. Declaration public float FarRadius { get; set; } Property Value Type Description Single MiddleColor The color of the ProximityLight gradient at the center (RGB) and (A) is gradient extent. Declaration public Color MiddleColor { get; set; } Property Value Type Description Color MinNearSizePercentage When a ProximityLight is near, the smallest size percentage from the far size it can shrink to. Declaration public float MinNearSizePercentage { get; set; } Property Value Type Description Single NearDistance Specifies the distance a ProximityLight must be from a surface to be considered near. Declaration public float NearDistance { get; set; } Property Value Type Description Single NearRadius Specifies the radius of the ProximityLight effect when near to a surface. Declaration public float NearRadius { get; set; } Property Value Type Description Single OuterColor The color of the ProximityLight gradient at the center (RGB) and (A) is gradient extent. Declaration public Color OuterColor { get; set; } Property Value Type Description Color"
  },
  "api/Microsoft.MixedReality.Toolkit.AnimationCurveExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.AnimationCurveExtensions.html",
    "title": "Class AnimationCurveExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class AnimationCurveExtensions Extension methods for Unity's AnimationCurve class Inheritance Object AnimationCurveExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class AnimationCurveExtensions Methods Duration(AnimationCurve) Returns the absolute duration of the curve from first to last key frame Declaration public static float Duration(this AnimationCurve curve) Parameters Type Name Description AnimationCurve curve The animation curve to check duration of. Returns Type Description Single Returns 0 if the curve is null or has less than 1 frame, otherwise returns time difference between first and last frame."
  },
  "api/Microsoft.MixedReality.Toolkit.Audio.AudioLoFiEffect.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Audio.AudioLoFiEffect.html",
    "title": "Class AudioLoFiEffect | Mixed Reality Toolkit Documentation",
    "keywords": "Class AudioLoFiEffect An audio effect that limits the frequency range of a sound to simulate being played over various telephony or radio sources. Inheritance Object AudioLoFiEffect Namespace : Microsoft.MixedReality.Toolkit.Audio Assembly : cs.temp.dll.dll Syntax public class AudioLoFiEffect : MonoBehaviour Remarks For the best results, also attach an AudioInfluencerController to the sound source. This will ensure that the proper frequencies will be restored when audio influencers are used in the scene. Properties SourceQuality The quality level of the simulated audio source (ex: AM radio). Declaration public AudioLoFiSourceQuality SourceQuality { get; set; } Property Value Type Description AudioLoFiSourceQuality"
  },
  "api/Microsoft.MixedReality.Toolkit.Audio.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Audio.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Audio | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Audio Classes AudioInfluencerController Class which supports components implementing IAudioInfluencer being used with audio sources. AudioLoFiEffect An audio effect that limits the frequency range of a sound to simulate being played over various telephony or radio sources. AudioOccluder Class that implements IAudioInfluencer to provide an audio occlusion effect, similar to listening to sound from outside of an enclosed space. Interfaces IAudioInfluencer Interface that should be implemented by any class that wishes to influence how an audio source sounds. Enums AudioLoFiSourceQuality Source quality options, used by the AudioLoFiEffect, that match common telephony and radio broadcast options."
  },
  "api/Microsoft.MixedReality.Toolkit.BaseDataProviderAccessCoreSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseDataProviderAccessCoreSystem.html",
    "title": "Class BaseDataProviderAccessCoreSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseDataProviderAccessCoreSystem Abstract class for core MRTK system with functionality defined for managing and accessing IMixedRealityDataProviders Inheritance Object BaseService BaseEventSystem BaseCoreSystem BaseDataProviderAccessCoreSystem MixedRealityCameraSystem MixedRealityInputSystem MixedRealitySpatialAwarenessSystem Implements IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityDataProviderAccess Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseEventSystem.Destroy() BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseDataProviderAccessCoreSystem : BaseCoreSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityDataProviderAccess Constructors BaseDataProviderAccessCoreSystem(BaseMixedRealityProfile) Constructor. Declaration protected BaseDataProviderAccessCoreSystem(BaseMixedRealityProfile profile = null) Parameters Type Name Description BaseMixedRealityProfile profile The configuration profile for the service. BaseDataProviderAccessCoreSystem(IMixedRealityServiceRegistrar, BaseMixedRealityProfile) Constructor. Declaration protected BaseDataProviderAccessCoreSystem(IMixedRealityServiceRegistrar registrar, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. BaseMixedRealityProfile profile The configuration profile for the service. Methods Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseService.Enable() GetDataProvider(String) Get the data provider that is registered under the specified name. Declaration public virtual IMixedRealityDataProvider GetDataProvider(string name) Parameters Type Name Description String name The friendly name of the data provider. Returns Type Description IMixedRealityDataProvider The requested data provider, or null if one cannot be found. Remarks If more than one data provider is registered under the specified name, the first will be returned. GetDataProvider<T>(String) Get the data provider that is registered under the specified name (optional) and matching the specified type. Declaration public virtual T GetDataProvider<T>(string name = null) where T : IMixedRealityDataProvider Parameters Type Name Description String name The friendly name of the data provider. Returns Type Description T The requested data provider, or null if one cannot be found. Type Parameters Name Description T The desired data provider type. Remarks If more than one data provider is registered under the specified name, the first will be returned. GetDataProviders() Gets the collection of registered data providers. Declaration public virtual IReadOnlyList<IMixedRealityDataProvider> GetDataProviders() Returns Type Description IReadOnlyList < IMixedRealityDataProvider > Read only copy of the list of registered data providers. GetDataProviders<T>() Get the collection of registered observers of the specified type. Declaration public virtual IReadOnlyList<T> GetDataProviders<T>() where T : IMixedRealityDataProvider Returns Type Description IReadOnlyList <T> Read-only copy of the list of registered data providers that implement the specified type. Type Parameters Name Description T The desired data provider type LateUpdate() Optional LateUpdate function to that is called after Update has been called on all services. Declaration public override void LateUpdate() Overrides BaseService.LateUpdate() RegisterDataProvider<T>(T) Registers a service of the specified type. Declaration protected bool RegisterDataProvider<T>(T dataProviderInstance) where T : IMixedRealityDataProvider Parameters Type Name Description T dataProviderInstance An instance of the data provider to be registered. Returns Type Description Boolean Type Parameters Name Description T The interface type of the data provider to be registered. RegisterDataProvider<T>(Type, SupportedPlatforms, Object[]) Registers a data provider of the specified type. Declaration protected bool RegisterDataProvider<T>(Type concreteType, SupportedPlatforms supportedPlatforms = null, params object[] args) where T : IMixedRealityDataProvider Parameters Type Name Description Type concreteType SupportedPlatforms supportedPlatforms Object [] args Returns Type Description Boolean Type Parameters Name Description T Reset() Declaration public override void Reset() Overrides BaseService.Reset() UnregisterDataProvider<T>(T) Unregisters a data provider. Declaration protected bool UnregisterDataProvider<T>(T dataProviderInstance) where T : IMixedRealityDataProvider Parameters Type Name Description T dataProviderInstance Returns Type Description Boolean True if the data provider was successfully unregistered, false otherwise. Type Parameters Name Description T The interface type of the data provider to be unregistered. UnregisterDataProvider<T>(String) Unregisters a data provider of the specified type. Declaration protected bool UnregisterDataProvider<T>(string name = null) where T : IMixedRealityDataProvider Parameters Type Name Description String name The name of the data provider to unregister. Returns Type Description Boolean True if the data provider was successfully unregistered, false otherwise. Type Parameters Name Description T The interface type of the data provider to be unregistered. Remarks If the name argument is not specified, the first instance will be unregistered Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Implements IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityDataProviderAccess"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRChaperone.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRChaperone.html",
    "title": "Class CVRChaperone | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRChaperone Inheritance Object CVRChaperone Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRChaperone Methods AreBoundsVisible() Declaration public bool AreBoundsVisible() Returns Type Description Boolean ForceBoundsVisible(Boolean) Declaration public void ForceBoundsVisible(bool bForce) Parameters Type Name Description Boolean bForce GetBoundsColor(ref HmdColor_t, Int32, Single, ref HmdColor_t) Declaration public void GetBoundsColor(ref HmdColor_t pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, ref HmdColor_t pOutputCameraColor) Parameters Type Name Description HmdColor_t pOutputColorArray Int32 nNumOutputColors Single flCollisionBoundsFadeDistance HmdColor_t pOutputCameraColor GetCalibrationState() Declaration public ChaperoneCalibrationState GetCalibrationState() Returns Type Description ChaperoneCalibrationState GetPlayAreaRect(ref HmdQuad_t) Declaration public bool GetPlayAreaRect(ref HmdQuad_t rect) Parameters Type Name Description HmdQuad_t rect Returns Type Description Boolean GetPlayAreaSize(ref Single, ref Single) Declaration public bool GetPlayAreaSize(ref float pSizeX, ref float pSizeZ) Parameters Type Name Description Single pSizeX Single pSizeZ Returns Type Description Boolean ReloadInfo() Declaration public void ReloadInfo() SetSceneColor(HmdColor_t) Declaration public void SetSceneColor(HmdColor_t color) Parameters Type Name Description HmdColor_t color"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRChaperoneSetup.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRChaperoneSetup.html",
    "title": "Class CVRChaperoneSetup | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRChaperoneSetup Inheritance Object CVRChaperoneSetup Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRChaperoneSetup Methods CommitWorkingCopy(EChaperoneConfigFile) Declaration public bool CommitWorkingCopy(EChaperoneConfigFile configFile) Parameters Type Name Description EChaperoneConfigFile configFile Returns Type Description Boolean ExportLiveToBuffer(StringBuilder, ref UInt32) Declaration public bool ExportLiveToBuffer(StringBuilder pBuffer, ref uint pnBufferLength) Parameters Type Name Description StringBuilder pBuffer UInt32 pnBufferLength Returns Type Description Boolean GetLiveCollisionBoundsInfo(out HmdQuad_t[]) Declaration public bool GetLiveCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer) Parameters Type Name Description HmdQuad_t [] pQuadsBuffer Returns Type Description Boolean GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t) Declaration public bool GetLiveSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose) Parameters Type Name Description HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose Returns Type Description Boolean GetWorkingCollisionBoundsInfo(out HmdQuad_t[]) Declaration public bool GetWorkingCollisionBoundsInfo(out HmdQuad_t[] pQuadsBuffer) Parameters Type Name Description HmdQuad_t [] pQuadsBuffer Returns Type Description Boolean GetWorkingPlayAreaRect(ref HmdQuad_t) Declaration public bool GetWorkingPlayAreaRect(ref HmdQuad_t rect) Parameters Type Name Description HmdQuad_t rect Returns Type Description Boolean GetWorkingPlayAreaSize(ref Single, ref Single) Declaration public bool GetWorkingPlayAreaSize(ref float pSizeX, ref float pSizeZ) Parameters Type Name Description Single pSizeX Single pSizeZ Returns Type Description Boolean GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t) Declaration public bool GetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose) Parameters Type Name Description HmdMatrix34_t pmatSeatedZeroPoseToRawTrackingPose Returns Type Description Boolean GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t) Declaration public bool GetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose) Parameters Type Name Description HmdMatrix34_t pmatStandingZeroPoseToRawTrackingPose Returns Type Description Boolean HideWorkingSetPreview() Declaration public void HideWorkingSetPreview() ImportFromBufferToWorking(String, UInt32) Declaration public bool ImportFromBufferToWorking(string pBuffer, uint nImportFlags) Parameters Type Name Description String pBuffer UInt32 nImportFlags Returns Type Description Boolean ReloadFromDisk(EChaperoneConfigFile) Declaration public void ReloadFromDisk(EChaperoneConfigFile configFile) Parameters Type Name Description EChaperoneConfigFile configFile RevertWorkingCopy() Declaration public void RevertWorkingCopy() SetWorkingCollisionBoundsInfo(HmdQuad_t[]) Declaration public void SetWorkingCollisionBoundsInfo(HmdQuad_t[] pQuadsBuffer) Parameters Type Name Description HmdQuad_t [] pQuadsBuffer SetWorkingPerimeter(HmdVector2_t[]) Declaration public void SetWorkingPerimeter(HmdVector2_t[] pPointBuffer) Parameters Type Name Description HmdVector2_t [] pPointBuffer SetWorkingPlayAreaSize(Single, Single) Declaration public void SetWorkingPlayAreaSize(float sizeX, float sizeZ) Parameters Type Name Description Single sizeX Single sizeZ SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t) Declaration public void SetWorkingSeatedZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose) Parameters Type Name Description HmdMatrix34_t pMatSeatedZeroPoseToRawTrackingPose SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t) Declaration public void SetWorkingStandingZeroPoseToRawTrackingPose(ref HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose) Parameters Type Name Description HmdMatrix34_t pMatStandingZeroPoseToRawTrackingPose ShowWorkingSetPreview() Declaration public void ShowWorkingSetPreview()"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRDistortionFunctionType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRDistortionFunctionType.html",
    "title": "Enum EVRDistortionFunctionType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRDistortionFunctionType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRDistortionFunctionType Fields Name Description FTheta MAX_DISTORTION_FUNCTION_TYPES None VRDistortionFucntionType_Extended_FTheta"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVREventType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVREventType.html",
    "title": "Enum EVREventType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVREventType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVREventType Fields Name Description VREvent_ActionBindingReloaded VREvent_ApplicationListUpdated VREvent_ApplicationMimeTypeLoad VREvent_ApplicationTransitionAborted VREvent_ApplicationTransitionNewAppLaunchComplete VREvent_ApplicationTransitionNewAppStarted VREvent_ApplicationTransitionStarted VREvent_AudioSettingsHaveChanged VREvent_BackgroundSettingHasChanged VREvent_ButtonPress VREvent_ButtonTouch VREvent_ButtonUnpress VREvent_ButtonUntouch VREvent_CameraSettingsHaveChanged VREvent_ChaperoneDataHasChanged VREvent_ChaperoneFlushCache VREvent_ChaperoneSettingsHaveChanged VREvent_ChaperoneTempDataHasChanged VREvent_ChaperoneUniverseHasChanged VREvent_Compositor_ChaperoneBoundsHidden VREvent_Compositor_ChaperoneBoundsShown VREvent_Compositor_MirrorWindowHidden VREvent_Compositor_MirrorWindowShown VREvent_ConsoleClosed VREvent_ConsoleOpened VREvent_DashboardActivated VREvent_DashboardDeactivated VREvent_DashboardOverlayCreated VREvent_DashboardRequested VREvent_DashboardSectionSettingChanged VREvent_DashboardThumbSelected VREvent_DriverRequestedQuit VREvent_DualAnalog_Cancel VREvent_DualAnalog_ModeSwitch1 VREvent_DualAnalog_ModeSwitch2 VREvent_DualAnalog_Move VREvent_DualAnalog_Press VREvent_DualAnalog_Touch VREvent_DualAnalog_Unpress VREvent_DualAnalog_Untouch VREvent_EnableHomeAppSettingsHaveChanged VREvent_EnterStandbyMode VREvent_EnvironmentSettingsHaveChanged VREvent_FirmwareUpdateFinished VREvent_FirmwareUpdateStarted VREvent_FocusEnter VREvent_FocusLeave VREvent_HideKeyboard VREvent_HideRenderModels VREvent_ImageFailed VREvent_ImageLoaded VREvent_Input_ActionManifestLoadFailed VREvent_Input_ActionManifestReloaded VREvent_Input_BindingLoadFailed VREvent_Input_BindingLoadSuccessful VREvent_Input_HapticVibration VREvent_Input_ProgressUpdate VREvent_Input_TrackerActivated VREvent_InputFocusCaptured VREvent_InputFocusChanged VREvent_InputFocusReleased VREvent_IpdChanged VREvent_KeyboardCharInput VREvent_KeyboardClosed VREvent_KeyboardDone VREvent_KeyboardSectionSettingChanged VREvent_LastKnownSectionSettingChanged VREvent_LeaveStandbyMode VREvent_LensDistortionChanged VREvent_LighthouseSectionSettingChanged VREvent_MCImageUpdated VREvent_MessageOverlay_Closed VREvent_MessageOverlayCloseRequested VREvent_ModelSkinSettingsHaveChanged VREvent_MouseButtonDown VREvent_MouseButtonUp VREvent_MouseMove VREvent_None VREvent_Notification_BeginInteraction VREvent_Notification_Destroyed VREvent_Notification_Hidden VREvent_Notification_Shown VREvent_NotificationsSectionSettingChanged VREvent_NullSectionSettingChanged VREvent_OverlayFocusChanged VREvent_OverlayGamepadFocusGained VREvent_OverlayGamepadFocusLost VREvent_OverlayHidden VREvent_OverlaySharedTextureChanged VREvent_OverlayShown VREvent_PerformanceTest_DisableCapture VREvent_PerformanceTest_EnableCapture VREvent_PerformanceTest_FidelityLevel VREvent_PerfSectionSettingChanged VREvent_PowerSettingsHaveChanged VREvent_PrimaryDashboardDeviceChanged VREvent_ProcessConnected VREvent_ProcessDisconnected VREvent_ProcessQuit VREvent_PropertyChanged VREvent_Quit VREvent_QuitAborted_UserPrompt VREvent_QuitAcknowledged VREvent_ReloadOverlays VREvent_RenderToast VREvent_ReprojectionSettingHasChanged VREvent_RequestScreenshot VREvent_ResetDashboard VREvent_RoomViewHidden VREvent_RoomViewShown VREvent_SceneApplicationChanged VREvent_SceneApplicationSecondaryRenderingStarted VREvent_SceneApplicationUsingWrongGraphicsAdapter VREvent_SceneFocusChanged VREvent_SceneFocusGained VREvent_SceneFocusLost VREvent_ScreenshotFailed VREvent_ScreenshotProgressToDashboard VREvent_ScreenshotTaken VREvent_ScreenshotTriggered VREvent_Scroll VREvent_SeatedZeroPoseReset VREvent_ShowKeyboard VREvent_ShowRenderModels VREvent_ShowUI VREvent_SpatialAnchors_DescriptorUpdated VREvent_SpatialAnchors_PoseUpdated VREvent_SpatialAnchors_RequestDescriptorUpdate VREvent_SpatialAnchors_RequestPoseUpdate VREvent_StatusUpdate VREvent_SteamVRSectionSettingChanged VREvent_SubmitScreenshotToDashboard VREvent_SwitchGamepadFocus VREvent_TouchPadMove VREvent_TrackedCamera_EditingSurface VREvent_TrackedCamera_PauseVideoStream VREvent_TrackedCamera_ResumeVideoStream VREvent_TrackedCamera_StartVideoStream VREvent_TrackedCamera_StopVideoStream VREvent_TrackedDeviceActivated VREvent_TrackedDeviceDeactivated VREvent_TrackedDeviceRoleChanged VREvent_TrackedDeviceUpdated VREvent_TrackedDeviceUserInteractionEnded VREvent_TrackedDeviceUserInteractionStarted VREvent_TrackersSectionSettingChanged VREvent_UserInterfaceSectionSettingChanged VREvent_VendorSpecific_Reserved_End VREvent_VendorSpecific_Reserved_Start VREvent_WatchdogWakeUpRequested VREvent_WebInterface_InstallDriverCompleted VREvent_WebInterfaceSectionSettingChanged VREvent_WirelessDisconnect VREvent_WirelessReconnect"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputOriginInfo_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputOriginInfo_t.html",
    "title": "Struct InputOriginInfo_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputOriginInfo_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct InputOriginInfo_t Fields devicePath Declaration public ulong devicePath Field Value Type Description UInt64 rchRenderModelComponentName0 Declaration public byte rchRenderModelComponentName0 Field Value Type Description Byte rchRenderModelComponentName1 Declaration public byte rchRenderModelComponentName1 Field Value Type Description Byte rchRenderModelComponentName10 Declaration public byte rchRenderModelComponentName10 Field Value Type Description Byte rchRenderModelComponentName100 Declaration public byte rchRenderModelComponentName100 Field Value Type Description Byte rchRenderModelComponentName101 Declaration public byte rchRenderModelComponentName101 Field Value Type Description Byte rchRenderModelComponentName102 Declaration public byte rchRenderModelComponentName102 Field Value Type Description Byte rchRenderModelComponentName103 Declaration public byte rchRenderModelComponentName103 Field Value Type Description Byte rchRenderModelComponentName104 Declaration public byte rchRenderModelComponentName104 Field Value Type Description Byte rchRenderModelComponentName105 Declaration public byte rchRenderModelComponentName105 Field Value Type Description Byte rchRenderModelComponentName106 Declaration public byte rchRenderModelComponentName106 Field Value Type Description Byte rchRenderModelComponentName107 Declaration public byte rchRenderModelComponentName107 Field Value Type Description Byte rchRenderModelComponentName108 Declaration public byte rchRenderModelComponentName108 Field Value Type Description Byte rchRenderModelComponentName109 Declaration public byte rchRenderModelComponentName109 Field Value Type Description Byte rchRenderModelComponentName11 Declaration public byte rchRenderModelComponentName11 Field Value Type Description Byte rchRenderModelComponentName110 Declaration public byte rchRenderModelComponentName110 Field Value Type Description Byte rchRenderModelComponentName111 Declaration public byte rchRenderModelComponentName111 Field Value Type Description Byte rchRenderModelComponentName112 Declaration public byte rchRenderModelComponentName112 Field Value Type Description Byte rchRenderModelComponentName113 Declaration public byte rchRenderModelComponentName113 Field Value Type Description Byte rchRenderModelComponentName114 Declaration public byte rchRenderModelComponentName114 Field Value Type Description Byte rchRenderModelComponentName115 Declaration public byte rchRenderModelComponentName115 Field Value Type Description Byte rchRenderModelComponentName116 Declaration public byte rchRenderModelComponentName116 Field Value Type Description Byte rchRenderModelComponentName117 Declaration public byte rchRenderModelComponentName117 Field Value Type Description Byte rchRenderModelComponentName118 Declaration public byte rchRenderModelComponentName118 Field Value Type Description Byte rchRenderModelComponentName119 Declaration public byte rchRenderModelComponentName119 Field Value Type Description Byte rchRenderModelComponentName12 Declaration public byte rchRenderModelComponentName12 Field Value Type Description Byte rchRenderModelComponentName120 Declaration public byte rchRenderModelComponentName120 Field Value Type Description Byte rchRenderModelComponentName121 Declaration public byte rchRenderModelComponentName121 Field Value Type Description Byte rchRenderModelComponentName122 Declaration public byte rchRenderModelComponentName122 Field Value Type Description Byte rchRenderModelComponentName123 Declaration public byte rchRenderModelComponentName123 Field Value Type Description Byte rchRenderModelComponentName124 Declaration public byte rchRenderModelComponentName124 Field Value Type Description Byte rchRenderModelComponentName125 Declaration public byte rchRenderModelComponentName125 Field Value Type Description Byte rchRenderModelComponentName126 Declaration public byte rchRenderModelComponentName126 Field Value Type Description Byte rchRenderModelComponentName127 Declaration public byte rchRenderModelComponentName127 Field Value Type Description Byte rchRenderModelComponentName13 Declaration public byte rchRenderModelComponentName13 Field Value Type Description Byte rchRenderModelComponentName14 Declaration public byte rchRenderModelComponentName14 Field Value Type Description Byte rchRenderModelComponentName15 Declaration public byte rchRenderModelComponentName15 Field Value Type Description Byte rchRenderModelComponentName16 Declaration public byte rchRenderModelComponentName16 Field Value Type Description Byte rchRenderModelComponentName17 Declaration public byte rchRenderModelComponentName17 Field Value Type Description Byte rchRenderModelComponentName18 Declaration public byte rchRenderModelComponentName18 Field Value Type Description Byte rchRenderModelComponentName19 Declaration public byte rchRenderModelComponentName19 Field Value Type Description Byte rchRenderModelComponentName2 Declaration public byte rchRenderModelComponentName2 Field Value Type Description Byte rchRenderModelComponentName20 Declaration public byte rchRenderModelComponentName20 Field Value Type Description Byte rchRenderModelComponentName21 Declaration public byte rchRenderModelComponentName21 Field Value Type Description Byte rchRenderModelComponentName22 Declaration public byte rchRenderModelComponentName22 Field Value Type Description Byte rchRenderModelComponentName23 Declaration public byte rchRenderModelComponentName23 Field Value Type Description Byte rchRenderModelComponentName24 Declaration public byte rchRenderModelComponentName24 Field Value Type Description Byte rchRenderModelComponentName25 Declaration public byte rchRenderModelComponentName25 Field Value Type Description Byte rchRenderModelComponentName26 Declaration public byte rchRenderModelComponentName26 Field Value Type Description Byte rchRenderModelComponentName27 Declaration public byte rchRenderModelComponentName27 Field Value Type Description Byte rchRenderModelComponentName28 Declaration public byte rchRenderModelComponentName28 Field Value Type Description Byte rchRenderModelComponentName29 Declaration public byte rchRenderModelComponentName29 Field Value Type Description Byte rchRenderModelComponentName3 Declaration public byte rchRenderModelComponentName3 Field Value Type Description Byte rchRenderModelComponentName30 Declaration public byte rchRenderModelComponentName30 Field Value Type Description Byte rchRenderModelComponentName31 Declaration public byte rchRenderModelComponentName31 Field Value Type Description Byte rchRenderModelComponentName32 Declaration public byte rchRenderModelComponentName32 Field Value Type Description Byte rchRenderModelComponentName33 Declaration public byte rchRenderModelComponentName33 Field Value Type Description Byte rchRenderModelComponentName34 Declaration public byte rchRenderModelComponentName34 Field Value Type Description Byte rchRenderModelComponentName35 Declaration public byte rchRenderModelComponentName35 Field Value Type Description Byte rchRenderModelComponentName36 Declaration public byte rchRenderModelComponentName36 Field Value Type Description Byte rchRenderModelComponentName37 Declaration public byte rchRenderModelComponentName37 Field Value Type Description Byte rchRenderModelComponentName38 Declaration public byte rchRenderModelComponentName38 Field Value Type Description Byte rchRenderModelComponentName39 Declaration public byte rchRenderModelComponentName39 Field Value Type Description Byte rchRenderModelComponentName4 Declaration public byte rchRenderModelComponentName4 Field Value Type Description Byte rchRenderModelComponentName40 Declaration public byte rchRenderModelComponentName40 Field Value Type Description Byte rchRenderModelComponentName41 Declaration public byte rchRenderModelComponentName41 Field Value Type Description Byte rchRenderModelComponentName42 Declaration public byte rchRenderModelComponentName42 Field Value Type Description Byte rchRenderModelComponentName43 Declaration public byte rchRenderModelComponentName43 Field Value Type Description Byte rchRenderModelComponentName44 Declaration public byte rchRenderModelComponentName44 Field Value Type Description Byte rchRenderModelComponentName45 Declaration public byte rchRenderModelComponentName45 Field Value Type Description Byte rchRenderModelComponentName46 Declaration public byte rchRenderModelComponentName46 Field Value Type Description Byte rchRenderModelComponentName47 Declaration public byte rchRenderModelComponentName47 Field Value Type Description Byte rchRenderModelComponentName48 Declaration public byte rchRenderModelComponentName48 Field Value Type Description Byte rchRenderModelComponentName49 Declaration public byte rchRenderModelComponentName49 Field Value Type Description Byte rchRenderModelComponentName5 Declaration public byte rchRenderModelComponentName5 Field Value Type Description Byte rchRenderModelComponentName50 Declaration public byte rchRenderModelComponentName50 Field Value Type Description Byte rchRenderModelComponentName51 Declaration public byte rchRenderModelComponentName51 Field Value Type Description Byte rchRenderModelComponentName52 Declaration public byte rchRenderModelComponentName52 Field Value Type Description Byte rchRenderModelComponentName53 Declaration public byte rchRenderModelComponentName53 Field Value Type Description Byte rchRenderModelComponentName54 Declaration public byte rchRenderModelComponentName54 Field Value Type Description Byte rchRenderModelComponentName55 Declaration public byte rchRenderModelComponentName55 Field Value Type Description Byte rchRenderModelComponentName56 Declaration public byte rchRenderModelComponentName56 Field Value Type Description Byte rchRenderModelComponentName57 Declaration public byte rchRenderModelComponentName57 Field Value Type Description Byte rchRenderModelComponentName58 Declaration public byte rchRenderModelComponentName58 Field Value Type Description Byte rchRenderModelComponentName59 Declaration public byte rchRenderModelComponentName59 Field Value Type Description Byte rchRenderModelComponentName6 Declaration public byte rchRenderModelComponentName6 Field Value Type Description Byte rchRenderModelComponentName60 Declaration public byte rchRenderModelComponentName60 Field Value Type Description Byte rchRenderModelComponentName61 Declaration public byte rchRenderModelComponentName61 Field Value Type Description Byte rchRenderModelComponentName62 Declaration public byte rchRenderModelComponentName62 Field Value Type Description Byte rchRenderModelComponentName63 Declaration public byte rchRenderModelComponentName63 Field Value Type Description Byte rchRenderModelComponentName64 Declaration public byte rchRenderModelComponentName64 Field Value Type Description Byte rchRenderModelComponentName65 Declaration public byte rchRenderModelComponentName65 Field Value Type Description Byte rchRenderModelComponentName66 Declaration public byte rchRenderModelComponentName66 Field Value Type Description Byte rchRenderModelComponentName67 Declaration public byte rchRenderModelComponentName67 Field Value Type Description Byte rchRenderModelComponentName68 Declaration public byte rchRenderModelComponentName68 Field Value Type Description Byte rchRenderModelComponentName69 Declaration public byte rchRenderModelComponentName69 Field Value Type Description Byte rchRenderModelComponentName7 Declaration public byte rchRenderModelComponentName7 Field Value Type Description Byte rchRenderModelComponentName70 Declaration public byte rchRenderModelComponentName70 Field Value Type Description Byte rchRenderModelComponentName71 Declaration public byte rchRenderModelComponentName71 Field Value Type Description Byte rchRenderModelComponentName72 Declaration public byte rchRenderModelComponentName72 Field Value Type Description Byte rchRenderModelComponentName73 Declaration public byte rchRenderModelComponentName73 Field Value Type Description Byte rchRenderModelComponentName74 Declaration public byte rchRenderModelComponentName74 Field Value Type Description Byte rchRenderModelComponentName75 Declaration public byte rchRenderModelComponentName75 Field Value Type Description Byte rchRenderModelComponentName76 Declaration public byte rchRenderModelComponentName76 Field Value Type Description Byte rchRenderModelComponentName77 Declaration public byte rchRenderModelComponentName77 Field Value Type Description Byte rchRenderModelComponentName78 Declaration public byte rchRenderModelComponentName78 Field Value Type Description Byte rchRenderModelComponentName79 Declaration public byte rchRenderModelComponentName79 Field Value Type Description Byte rchRenderModelComponentName8 Declaration public byte rchRenderModelComponentName8 Field Value Type Description Byte rchRenderModelComponentName80 Declaration public byte rchRenderModelComponentName80 Field Value Type Description Byte rchRenderModelComponentName81 Declaration public byte rchRenderModelComponentName81 Field Value Type Description Byte rchRenderModelComponentName82 Declaration public byte rchRenderModelComponentName82 Field Value Type Description Byte rchRenderModelComponentName83 Declaration public byte rchRenderModelComponentName83 Field Value Type Description Byte rchRenderModelComponentName84 Declaration public byte rchRenderModelComponentName84 Field Value Type Description Byte rchRenderModelComponentName85 Declaration public byte rchRenderModelComponentName85 Field Value Type Description Byte rchRenderModelComponentName86 Declaration public byte rchRenderModelComponentName86 Field Value Type Description Byte rchRenderModelComponentName87 Declaration public byte rchRenderModelComponentName87 Field Value Type Description Byte rchRenderModelComponentName88 Declaration public byte rchRenderModelComponentName88 Field Value Type Description Byte rchRenderModelComponentName89 Declaration public byte rchRenderModelComponentName89 Field Value Type Description Byte rchRenderModelComponentName9 Declaration public byte rchRenderModelComponentName9 Field Value Type Description Byte rchRenderModelComponentName90 Declaration public byte rchRenderModelComponentName90 Field Value Type Description Byte rchRenderModelComponentName91 Declaration public byte rchRenderModelComponentName91 Field Value Type Description Byte rchRenderModelComponentName92 Declaration public byte rchRenderModelComponentName92 Field Value Type Description Byte rchRenderModelComponentName93 Declaration public byte rchRenderModelComponentName93 Field Value Type Description Byte rchRenderModelComponentName94 Declaration public byte rchRenderModelComponentName94 Field Value Type Description Byte rchRenderModelComponentName95 Declaration public byte rchRenderModelComponentName95 Field Value Type Description Byte rchRenderModelComponentName96 Declaration public byte rchRenderModelComponentName96 Field Value Type Description Byte rchRenderModelComponentName97 Declaration public byte rchRenderModelComponentName97 Field Value Type Description Byte rchRenderModelComponentName98 Declaration public byte rchRenderModelComponentName98 Field Value Type Description Byte rchRenderModelComponentName99 Declaration public byte rchRenderModelComponentName99 Field Value Type Description Byte trackedDeviceIndex Declaration public uint trackedDeviceIndex Field Value Type Description UInt32 Properties rchRenderModelComponentName Declaration public string rchRenderModelComponentName { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputPoseActionData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputPoseActionData_t.html",
    "title": "Struct InputPoseActionData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputPoseActionData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct InputPoseActionData_t Fields activeOrigin Declaration public ulong activeOrigin Field Value Type Description UInt64 bActive Declaration public bool bActive Field Value Type Description Boolean pose Declaration public TrackedDevicePose_t pose Field Value Type Description TrackedDevicePose_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputSkeletalActionData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputSkeletalActionData_t.html",
    "title": "Struct InputSkeletalActionData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputSkeletalActionData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct InputSkeletalActionData_t Fields activeOrigin Declaration public ulong activeOrigin Field Value Type Description UInt64 bActive Declaration public bool bActive Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IntersectionMaskCircle_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IntersectionMaskCircle_t.html",
    "title": "Struct IntersectionMaskCircle_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IntersectionMaskCircle_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IntersectionMaskCircle_t Fields m_flCenterX Declaration public float m_flCenterX Field Value Type Description Single m_flCenterY Declaration public float m_flCenterY Field Value Type Description Single m_flRadius Declaration public float m_flRadius Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IntersectionMaskRectangle_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IntersectionMaskRectangle_t.html",
    "title": "Struct IntersectionMaskRectangle_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IntersectionMaskRectangle_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IntersectionMaskRectangle_t Fields m_flHeight Declaration public float m_flHeight Field Value Type Description Single m_flTopLeftX Declaration public float m_flTopLeftX Field Value Type Description Single m_flTopLeftY Declaration public float m_flTopLeftY Field Value Type Description Single m_flWidth Declaration public float m_flWidth Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRApplications.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRApplications.html",
    "title": "Struct IVRApplications | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRApplications Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRApplications"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRChaperone.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRChaperone.html",
    "title": "Struct IVRChaperone | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRChaperone Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRChaperone"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRChaperoneSetup.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRChaperoneSetup.html",
    "title": "Struct IVRChaperoneSetup | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRChaperoneSetup Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRChaperoneSetup"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRCompositor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRCompositor.html",
    "title": "Struct IVRCompositor | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRCompositor Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRCompositor"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRDriverManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRDriverManager.html",
    "title": "Struct IVRDriverManager | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRDriverManager Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRDriverManager"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRExtendedDisplay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRExtendedDisplay.html",
    "title": "Struct IVRExtendedDisplay | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRExtendedDisplay Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRExtendedDisplay"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRInput.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRInput.html",
    "title": "Struct IVRInput | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRInput Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRInput"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRIOBuffer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRIOBuffer.html",
    "title": "Struct IVRIOBuffer | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRIOBuffer Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRIOBuffer"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRNotifications.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRNotifications.html",
    "title": "Struct IVRNotifications | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRNotifications Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRNotifications"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.MixedRealityToolkitVisualProfiler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.MixedRealityToolkitVisualProfiler.html",
    "title": "Class MixedRealityToolkitVisualProfiler | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitVisualProfiler ABOUT: The VisualProfiler provides a drop in, single file, solution for viewing your Windows Mixed Reality Unity application's frame rate and memory usage. Missed frames are displayed over time to visually find problem areas. Memory is reported as current, peak and max usage in a bar graph. USAGE: To use this profiler simply add this script as a component of any GameObject in your Unity scene. The profiler is initially enabled (toggle-able via the initiallyActive property), but can be toggled via the enabled/disable voice commands keywords. Inheritance Object MixedRealityToolkitVisualProfiler Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitVisualProfiler : MonoBehaviour Properties FrameInfoVisible Declaration public bool FrameInfoVisible { get; set; } Property Value Type Description Boolean FrameSampleRate Declaration public float FrameSampleRate { get; set; } Property Value Type Description Single IsVisible Declaration public bool IsVisible { get; set; } Property Value Type Description Boolean MemoryStatsVisible Declaration public bool MemoryStatsVisible { get; set; } Property Value Type Description Boolean WindowAnchor Declaration public TextAnchor WindowAnchor { get; set; } Property Value Type Description TextAnchor WindowFollowSpeed Declaration public float WindowFollowSpeed { get; set; } Property Value Type Description Single WindowOffset Declaration public Vector2 WindowOffset { get; set; } Property Value Type Description Vector2 WindowParent Declaration public Transform WindowParent { get; set; } Property Value Type Description Transform WindowScale Declaration public float WindowScale { get; set; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.VisualProfilerControl.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.VisualProfilerControl.html",
    "title": "Class VisualProfilerControl | Mixed Reality Toolkit Documentation",
    "keywords": "Class VisualProfilerControl Class that exposes methods to show/hide the visual profiler Inheritance Object VisualProfilerControl Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public class VisualProfilerControl : MonoBehaviour Methods SetProfilerVisibility(Boolean) Declaration public void SetProfilerVisibility(bool isVisible) Parameters Type Name Description Boolean isVisible ToggleProfiler() Declaration public void ToggleProfiler()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityProfileInspector.html",
    "title": "Class BaseMixedRealityProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityProfileInspector Base class for all BaseMixedRealityProfile Inspectors to inherit from. Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityProfileInspector : UnityEditor.Editor Methods IsProfileLock(BaseMixedRealityProfile) Checks if the profile is locked Declaration protected static bool IsProfileLock(BaseMixedRealityProfile profile) Parameters Type Name Description BaseMixedRealityProfile profile Returns Type Description Boolean OnEnable() Declaration protected virtual void OnEnable() RenderFoldout(ref Boolean, String, Action, String) Render Bold/HelpBox style Foldout Declaration protected static void RenderFoldout(ref bool currentState, string title, Action renderContent, string preferenceKey = null) Parameters Type Name Description Boolean currentState reference bool for current visibility state of foldout String title Title in foldout Action renderContent code to execute to render inside of foldout String preferenceKey optional argument, current show/hide state will be tracked associated with provided preference key RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) Renders a BaseMixedRealityProfile . Declaration protected static bool RenderProfile(SerializedProperty property, Type profileType, bool showAddButton = true, bool renderProfileInBox = false, Type serviceType = null) Parameters Type Name Description SerializedProperty property the BaseMixedRealityProfile property. Type profileType Profile type to filter available values to set on the provided property. If null, defaults to type BaseMixedRealityProfile Boolean showAddButton If true, draw the clone button, if false, don't Boolean renderProfileInBox if true, render box around profile content, if false, don't Type serviceType Optional service type to limit available profile types. Returns Type Description Boolean True, if the profile changed. RenderReadOnlyProfile(SerializedProperty) Renders a non-editable object field and an editable dropdown of a profile. Declaration public static void RenderReadOnlyProfile(SerializedProperty property) Parameters Type Name Description SerializedProperty property"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityServiceInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.BaseMixedRealityServiceInspector.html",
    "title": "Class BaseMixedRealityServiceInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityServiceInspector Inheritance Object BaseMixedRealityServiceInspector FocusProviderInspector HandJointServiceInspector SceneSystemInspector SpatialAwarenessSystemInspector TeleportSystemInspector Implements IMixedRealityServiceInspector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class BaseMixedRealityServiceInspector : IMixedRealityServiceInspector Properties AlwaysDrawSceneGUI Declaration public virtual bool AlwaysDrawSceneGUI { get; } Property Value Type Description Boolean DrawProfileField Declaration public virtual bool DrawProfileField { get; } Property Value Type Description Boolean Methods DrawGizmos(Object) Declaration public virtual void DrawGizmos(object target) Parameters Type Name Description Object target DrawInspectorGUI(Object) Declaration public virtual void DrawInspectorGUI(object target) Parameters Type Name Description Object target DrawSceneGUI(Object, SceneView) Declaration public virtual void DrawSceneGUI(object target, SceneView sceneView) Parameters Type Name Description Object target SceneView sceneView Implements IMixedRealityServiceInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ClippingSphereEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ClippingSphereEditor.html",
    "title": "Class ClippingSphereEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingSphereEditor A custom editor for the ClippingSphere to allow for specification of the framing bounds. Inheritance Object ClippingPrimitiveEditor ClippingSphereEditor Inherited Members ClippingPrimitiveEditor.OnInspectorGUI() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ClippingSphereEditor : ClippingPrimitiveEditor Methods HasFrameBounds() Notifies the Unity editor if this object has custom frame bounds. Declaration protected override bool HasFrameBounds() Returns Type Description Boolean True if custom frame bounds can be used from OnGetFrameBounds. Overrides ClippingPrimitiveEditor.HasFrameBounds() OnGetFrameBounds() Returns the bounds the editor should focus on. Declaration protected override Bounds OnGetFrameBounds() Returns Type Description Bounds The bounds of the clipping primitive. Overrides ClippingPrimitiveEditor.OnGetFrameBounds()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ControllerPopupWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ControllerPopupWindow.html",
    "title": "Class ControllerPopupWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerPopupWindow Inheritance Object ControllerPopupWindow Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ControllerPopupWindow : EditorWindow Methods Show(MixedRealityControllerMapping, SerializedProperty, Handedness) Declaration public static void Show(MixedRealityControllerMapping controllerMapping, SerializedProperty interactionsList, Handedness handedness = null) Parameters Type Name Description MixedRealityControllerMapping controllerMapping SerializedProperty interactionsList Handedness handedness"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.FocusProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.FocusProviderInspector.html",
    "title": "Class FocusProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusProviderInspector Inheritance Object BaseMixedRealityServiceInspector FocusProviderInspector Implements IMixedRealityServiceInspector Inherited Members BaseMixedRealityServiceInspector.DrawProfileField BaseMixedRealityServiceInspector.AlwaysDrawSceneGUI BaseMixedRealityServiceInspector.DrawGizmos(Object) BaseMixedRealityServiceInspector.DrawSceneGUI(Object, SceneView) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class FocusProviderInspector : BaseMixedRealityServiceInspector, IMixedRealityServiceInspector Methods DrawInspectorGUI(Object) Declaration public override void DrawInspectorGUI(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawInspectorGUI(Object) Implements IMixedRealityServiceInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.HandJointServiceInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.HandJointServiceInspector.html",
    "title": "Class HandJointServiceInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandJointServiceInspector Inheritance Object BaseMixedRealityServiceInspector HandJointServiceInspector Implements IMixedRealityServiceInspector Inherited Members BaseMixedRealityServiceInspector.DrawProfileField Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class HandJointServiceInspector : BaseMixedRealityServiceInspector, IMixedRealityServiceInspector Properties AlwaysDrawSceneGUI Declaration public override bool AlwaysDrawSceneGUI { get; } Property Value Type Description Boolean Overrides BaseMixedRealityServiceInspector.AlwaysDrawSceneGUI Methods DrawGizmos(Object) Declaration public override void DrawGizmos(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawGizmos(Object) DrawHandPreview(IMixedRealityHandJointService, Handedness) Declaration public static void DrawHandPreview(IMixedRealityHandJointService handJointService, Handedness handedness) Parameters Type Name Description IMixedRealityHandJointService handJointService Handedness handedness DrawInspectorGUI(Object) Declaration public override void DrawInspectorGUI(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawInspectorGUI(Object) DrawSceneGUI(Object, SceneView) Declaration public override void DrawSceneGUI(object target, SceneView sceneView) Parameters Type Name Description Object target SceneView sceneView Overrides BaseMixedRealityServiceInspector.DrawSceneGUI(Object, SceneView) Implements IMixedRealityServiceInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityCameraProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityCameraProfileInspector.html",
    "title": "Class MixedRealityCameraProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCameraProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityCameraProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.RenderAsSubProfile BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileDescriptions BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMRTKLogoAndSearch() BaseMixedRealityToolkitConfigurationProfileInspector.RenderDocumentation(Object) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(String, UnityEngine.Object) BaseMixedRealityToolkitConfigurationProfileInspector.RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.CheckEditorPlayMode() BaseMixedRealityToolkitConfigurationProfileInspector.CheckMixedRealityInputActions() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityCameraProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean Overrides BaseMixedRealityToolkitConfigurationProfileInspector.IsProfileInActiveInstance() OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityOptimizeWindow.PerformanceTarget.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityOptimizeWindow.PerformanceTarget.html",
    "title": "Enum MixedRealityOptimizeWindow.PerformanceTarget | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityOptimizeWindow.PerformanceTarget Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected enum PerformanceTarget Fields Name Description AR_Headsets VR_Standalone VR_Tethered"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealitySpeechCommandsProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealitySpeechCommandsProfileInspector.html",
    "title": "Class MixedRealitySpeechCommandsProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpeechCommandsProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealitySpeechCommandsProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.RenderAsSubProfile BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileDescriptions BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMRTKLogoAndSearch() BaseMixedRealityToolkitConfigurationProfileInspector.RenderDocumentation(Object) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(String, UnityEngine.Object) BaseMixedRealityToolkitConfigurationProfileInspector.RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.CheckEditorPlayMode() BaseMixedRealityToolkitConfigurationProfileInspector.CheckMixedRealityInputActions() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpeechCommandsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean Overrides BaseMixedRealityToolkitConfigurationProfileInspector.IsProfileInActiveInstance() OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityStandardShaderGUI.AlbedoAlphaMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityStandardShaderGUI.AlbedoAlphaMode.html",
    "title": "Enum MixedRealityStandardShaderGUI.AlbedoAlphaMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityStandardShaderGUI.AlbedoAlphaMode Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected enum AlbedoAlphaMode Fields Name Description Metallic Smoothness Transparency"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityStandardShaderGUI.Styles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityStandardShaderGUI.Styles.html",
    "title": "Class MixedRealityStandardShaderGUI.Styles | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityStandardShaderGUI.Styles Inheritance Object MixedRealityStandardShaderGUI.Styles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected static class Styles Fields advancedOptionsTitle Declaration public static string advancedOptionsTitle Field Value Type Description String albedo Declaration public static GUIContent albedo Field Value Type Description GUIContent albedoAlphaModeNames Declaration public static readonly string[] albedoAlphaModeNames Field Value Type Description String [] albedoAssignedAtRuntime Declaration public static GUIContent albedoAssignedAtRuntime Field Value Type Description GUIContent albedoMapAlphaMetallicName Declaration public static string albedoMapAlphaMetallicName Field Value Type Description String albedoMapAlphaSmoothnessName Declaration public static string albedoMapAlphaSmoothnessName Field Value Type Description String alphaCutoff Declaration public static GUIContent alphaCutoff Field Value Type Description GUIContent blendedClippingWidth Declaration public static GUIContent blendedClippingWidth Field Value Type Description GUIContent borderLight Declaration public static GUIContent borderLight Field Value Type Description GUIContent borderLightOpaque Declaration public static GUIContent borderLightOpaque Field Value Type Description GUIContent borderLightOpaqueAlpha Declaration public static GUIContent borderLightOpaqueAlpha Field Value Type Description GUIContent borderLightReplacesAlbedo Declaration public static GUIContent borderLightReplacesAlbedo Field Value Type Description GUIContent borderLightUsesHoverColor Declaration public static GUIContent borderLightUsesHoverColor Field Value Type Description GUIContent borderMinValue Declaration public static GUIContent borderMinValue Field Value Type Description GUIContent borderWidth Declaration public static GUIContent borderWidth Field Value Type Description GUIContent channelMap Declaration public static GUIContent channelMap Field Value Type Description GUIContent clippingBorder Declaration public static GUIContent clippingBorder Field Value Type Description GUIContent clippingBorderColor Declaration public static GUIContent clippingBorderColor Field Value Type Description GUIContent clippingBorderWidth Declaration public static GUIContent clippingBorderWidth Field Value Type Description GUIContent directionalLight Declaration public static GUIContent directionalLight Field Value Type Description GUIContent disableAlbedoMapName Declaration public static string disableAlbedoMapName Field Value Type Description String edgeSmoothingValue Declaration public static GUIContent edgeSmoothingValue Field Value Type Description GUIContent emissiveColor Declaration public static GUIContent emissiveColor Field Value Type Description GUIContent enableChannelMap Declaration public static GUIContent enableChannelMap Field Value Type Description GUIContent enableEmission Declaration public static GUIContent enableEmission Field Value Type Description GUIContent enableHoverColorOverride Declaration public static GUIContent enableHoverColorOverride Field Value Type Description GUIContent enableLocalSpaceTriplanarMapping Declaration public static GUIContent enableLocalSpaceTriplanarMapping Field Value Type Description GUIContent enableNormalMap Declaration public static GUIContent enableNormalMap Field Value Type Description GUIContent enableProximityLightColorOverride Declaration public static GUIContent enableProximityLightColorOverride Field Value Type Description GUIContent enableTriplanarMapping Declaration public static GUIContent enableTriplanarMapping Field Value Type Description GUIContent environmentColoring Declaration public static GUIContent environmentColoring Field Value Type Description GUIContent environmentColorIntensity Declaration public static GUIContent environmentColorIntensity Field Value Type Description GUIContent environmentColorThreshold Declaration public static GUIContent environmentColorThreshold Field Value Type Description GUIContent environmentColorX Declaration public static GUIContent environmentColorX Field Value Type Description GUIContent environmentColorY Declaration public static GUIContent environmentColorY Field Value Type Description GUIContent environmentColorZ Declaration public static GUIContent environmentColorZ Field Value Type Description GUIContent fadeBeginDistance Declaration public static GUIContent fadeBeginDistance Field Value Type Description GUIContent fadeCompleteDistance Declaration public static GUIContent fadeCompleteDistance Field Value Type Description GUIContent fadeMinValue Declaration public static GUIContent fadeMinValue Field Value Type Description GUIContent fluentLightIntensity Declaration public static GUIContent fluentLightIntensity Field Value Type Description GUIContent fluentOptionsTitle Declaration public static string fluentOptionsTitle Field Value Type Description String hoverColorOverride Declaration public static GUIContent hoverColorOverride Field Value Type Description GUIContent hoverLight Declaration public static GUIContent hoverLight Field Value Type Description GUIContent ignoreZScale Declaration public static GUIContent ignoreZScale Field Value Type Description GUIContent innerGlow Declaration public static GUIContent innerGlow Field Value Type Description GUIContent innerGlowColor Declaration public static GUIContent innerGlowColor Field Value Type Description GUIContent innerGlowPower Declaration public static GUIContent innerGlowPower Field Value Type Description GUIContent instancedColor Declaration public static GUIContent instancedColor Field Value Type Description GUIContent instancedColorFeatureName Declaration public static string instancedColorFeatureName Field Value Type Description String instancedColorName Declaration public static string instancedColorName Field Value Type Description String iridescence Declaration public static GUIContent iridescence Field Value Type Description GUIContent iridescenceAngle Declaration public static GUIContent iridescenceAngle Field Value Type Description GUIContent iridescenceIntensity Declaration public static GUIContent iridescenceIntensity Field Value Type Description GUIContent iridescenceThreshold Declaration public static GUIContent iridescenceThreshold Field Value Type Description GUIContent iridescentSpectrumMap Declaration public static GUIContent iridescentSpectrumMap Field Value Type Description GUIContent metallic Declaration public static GUIContent metallic Field Value Type Description GUIContent nearLightFade Declaration public static GUIContent nearLightFade Field Value Type Description GUIContent nearPlaneFade Declaration public static GUIContent nearPlaneFade Field Value Type Description GUIContent normalMap Declaration public static GUIContent normalMap Field Value Type Description GUIContent normalMapScale Declaration public static GUIContent normalMapScale Field Value Type Description GUIContent primaryMapsTitle Declaration public static string primaryMapsTitle Field Value Type Description String propertiesComponentHelp Declaration public static string propertiesComponentHelp Field Value Type Description String proximityLight Declaration public static GUIContent proximityLight Field Value Type Description GUIContent proximityLightCenterColorOverride Declaration public static GUIContent proximityLightCenterColorOverride Field Value Type Description GUIContent proximityLightMiddleColorOverride Declaration public static GUIContent proximityLightMiddleColorOverride Field Value Type Description GUIContent proximityLightOuterColorOverride Declaration public static GUIContent proximityLightOuterColorOverride Field Value Type Description GUIContent proximityLightSubtractive Declaration public static GUIContent proximityLightSubtractive Field Value Type Description GUIContent proximityLightTwoSided Declaration public static GUIContent proximityLightTwoSided Field Value Type Description GUIContent reflections Declaration public static GUIContent reflections Field Value Type Description GUIContent refraction Declaration public static GUIContent refraction Field Value Type Description GUIContent refractiveIndex Declaration public static GUIContent refractiveIndex Field Value Type Description GUIContent renderingOptionsTitle Declaration public static string renderingOptionsTitle Field Value Type Description String rimColor Declaration public static GUIContent rimColor Field Value Type Description GUIContent rimLight Declaration public static GUIContent rimLight Field Value Type Description GUIContent rimPower Declaration public static GUIContent rimPower Field Value Type Description GUIContent roundCornerMargin Declaration public static GUIContent roundCornerMargin Field Value Type Description GUIContent roundCornerRadius Declaration public static GUIContent roundCornerRadius Field Value Type Description GUIContent roundCorners Declaration public static GUIContent roundCorners Field Value Type Description GUIContent smoothness Declaration public static GUIContent smoothness Field Value Type Description GUIContent specularHighlights Declaration public static GUIContent specularHighlights Field Value Type Description GUIContent sphericalHarmonics Declaration public static GUIContent sphericalHarmonics Field Value Type Description GUIContent stencil Declaration public static GUIContent stencil Field Value Type Description GUIContent stencilComparison Declaration public static GUIContent stencilComparison Field Value Type Description GUIContent stencilComparisonName Declaration public static string stencilComparisonName Field Value Type Description String stencilOperation Declaration public static GUIContent stencilOperation Field Value Type Description GUIContent stencilOperationName Declaration public static string stencilOperationName Field Value Type Description String stencilReference Declaration public static GUIContent stencilReference Field Value Type Description GUIContent triplanarMappingBlendSharpness Declaration public static GUIContent triplanarMappingBlendSharpness Field Value Type Description GUIContent vertexColors Declaration public static GUIContent vertexColors Field Value Type Description GUIContent vertexExtrusion Declaration public static GUIContent vertexExtrusion Field Value Type Description GUIContent vertexExtrusionSmoothNormals Declaration public static GUIContent vertexExtrusionSmoothNormals Field Value Type Description GUIContent vertexExtrusionValue Declaration public static GUIContent vertexExtrusionValue Field Value Type Description GUIContent"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityStandardShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityStandardShaderGUI.html",
    "title": "Class MixedRealityStandardShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityStandardShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/Standard\" shader. Inheritance Object MixedRealityShaderGUI MixedRealityStandardShaderGUI Inherited Members MixedRealityShaderGUI.initialized MixedRealityShaderGUI.renderingMode MixedRealityShaderGUI.customRenderingMode MixedRealityShaderGUI.sourceBlend MixedRealityShaderGUI.destinationBlend MixedRealityShaderGUI.blendOperation MixedRealityShaderGUI.depthTest MixedRealityShaderGUI.depthWrite MixedRealityShaderGUI.depthOffsetFactor MixedRealityShaderGUI.depthOffsetUnits MixedRealityShaderGUI.colorWriteMask MixedRealityShaderGUI.cullMode MixedRealityShaderGUI.renderQueueOverride MixedRealityShaderGUI.LegacyShadersPath MixedRealityShaderGUI.TransparentShadersPath MixedRealityShaderGUI.TransparentCutoutShadersPath MixedRealityShaderGUI.Initialize(Material) MixedRealityShaderGUI.RenderingModeOptions(MaterialEditor) MixedRealityShaderGUI.SetupMaterialWithRenderingMode(Material, MixedRealityShaderGUI.RenderingMode, MixedRealityShaderGUI.CustomRenderingMode, Int32) MixedRealityShaderGUI.PropertyEnabled(MaterialProperty) MixedRealityShaderGUI.GetFloatProperty(Material, String) MixedRealityShaderGUI.GetVectorProperty(Material, String) MixedRealityShaderGUI.GetColorProperty(Material, String) MixedRealityShaderGUI.SetShaderFeatureActive(Material, String, String, Nullable<Single>) MixedRealityShaderGUI.SetVectorProperty(Material, String, Nullable<Vector4>) MixedRealityShaderGUI.SetColorProperty(Material, String, Nullable<Color>) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityStandardShaderGUI : MixedRealityShaderGUI Fields albedoAlphaMode Declaration protected MaterialProperty albedoAlphaMode Field Value Type Description MaterialProperty albedoAssignedAtRuntime Declaration protected MaterialProperty albedoAssignedAtRuntime Field Value Type Description MaterialProperty albedoColor Declaration protected MaterialProperty albedoColor Field Value Type Description MaterialProperty albedoMap Declaration protected MaterialProperty albedoMap Field Value Type Description MaterialProperty alphaCutoff Declaration protected MaterialProperty alphaCutoff Field Value Type Description MaterialProperty blendedClippingWidth Declaration protected MaterialProperty blendedClippingWidth Field Value Type Description MaterialProperty borderLight Declaration protected MaterialProperty borderLight Field Value Type Description MaterialProperty borderLightOpaque Declaration protected MaterialProperty borderLightOpaque Field Value Type Description MaterialProperty borderLightOpaqueAlpha Declaration protected MaterialProperty borderLightOpaqueAlpha Field Value Type Description MaterialProperty borderLightReplacesAlbedo Declaration protected MaterialProperty borderLightReplacesAlbedo Field Value Type Description MaterialProperty borderLightUsesHoverColor Declaration protected MaterialProperty borderLightUsesHoverColor Field Value Type Description MaterialProperty borderMinValue Declaration protected MaterialProperty borderMinValue Field Value Type Description MaterialProperty borderWidth Declaration protected MaterialProperty borderWidth Field Value Type Description MaterialProperty channelMap Declaration protected MaterialProperty channelMap Field Value Type Description MaterialProperty clippingBorder Declaration protected MaterialProperty clippingBorder Field Value Type Description MaterialProperty clippingBorderColor Declaration protected MaterialProperty clippingBorderColor Field Value Type Description MaterialProperty clippingBorderWidth Declaration protected MaterialProperty clippingBorderWidth Field Value Type Description MaterialProperty directionalLight Declaration protected MaterialProperty directionalLight Field Value Type Description MaterialProperty edgeSmoothingValue Declaration protected MaterialProperty edgeSmoothingValue Field Value Type Description MaterialProperty emissiveColor Declaration protected MaterialProperty emissiveColor Field Value Type Description MaterialProperty enableChannelMap Declaration protected MaterialProperty enableChannelMap Field Value Type Description MaterialProperty enableEmission Declaration protected MaterialProperty enableEmission Field Value Type Description MaterialProperty enableHoverColorOverride Declaration protected MaterialProperty enableHoverColorOverride Field Value Type Description MaterialProperty enableLocalSpaceTriplanarMapping Declaration protected MaterialProperty enableLocalSpaceTriplanarMapping Field Value Type Description MaterialProperty enableNormalMap Declaration protected MaterialProperty enableNormalMap Field Value Type Description MaterialProperty enableProximityLightColorOverride Declaration protected MaterialProperty enableProximityLightColorOverride Field Value Type Description MaterialProperty enableTriplanarMapping Declaration protected MaterialProperty enableTriplanarMapping Field Value Type Description MaterialProperty environmentColoring Declaration protected MaterialProperty environmentColoring Field Value Type Description MaterialProperty environmentColorIntensity Declaration protected MaterialProperty environmentColorIntensity Field Value Type Description MaterialProperty environmentColorThreshold Declaration protected MaterialProperty environmentColorThreshold Field Value Type Description MaterialProperty environmentColorX Declaration protected MaterialProperty environmentColorX Field Value Type Description MaterialProperty environmentColorY Declaration protected MaterialProperty environmentColorY Field Value Type Description MaterialProperty environmentColorZ Declaration protected MaterialProperty environmentColorZ Field Value Type Description MaterialProperty fadeBeginDistance Declaration protected MaterialProperty fadeBeginDistance Field Value Type Description MaterialProperty fadeCompleteDistance Declaration protected MaterialProperty fadeCompleteDistance Field Value Type Description MaterialProperty fadeMinValue Declaration protected MaterialProperty fadeMinValue Field Value Type Description MaterialProperty fluentLightIntensity Declaration protected MaterialProperty fluentLightIntensity Field Value Type Description MaterialProperty hoverColorOverride Declaration protected MaterialProperty hoverColorOverride Field Value Type Description MaterialProperty hoverLight Declaration protected MaterialProperty hoverLight Field Value Type Description MaterialProperty ignoreZScale Declaration protected MaterialProperty ignoreZScale Field Value Type Description MaterialProperty innerGlow Declaration protected MaterialProperty innerGlow Field Value Type Description MaterialProperty innerGlowColor Declaration protected MaterialProperty innerGlowColor Field Value Type Description MaterialProperty innerGlowPower Declaration protected MaterialProperty innerGlowPower Field Value Type Description MaterialProperty instancedColor Declaration protected MaterialProperty instancedColor Field Value Type Description MaterialProperty iridescence Declaration protected MaterialProperty iridescence Field Value Type Description MaterialProperty iridescenceAngle Declaration protected MaterialProperty iridescenceAngle Field Value Type Description MaterialProperty iridescenceIntensity Declaration protected MaterialProperty iridescenceIntensity Field Value Type Description MaterialProperty iridescenceThreshold Declaration protected MaterialProperty iridescenceThreshold Field Value Type Description MaterialProperty iridescentSpectrumMap Declaration protected MaterialProperty iridescentSpectrumMap Field Value Type Description MaterialProperty metallic Declaration protected MaterialProperty metallic Field Value Type Description MaterialProperty nearLightFade Declaration protected MaterialProperty nearLightFade Field Value Type Description MaterialProperty nearPlaneFade Declaration protected MaterialProperty nearPlaneFade Field Value Type Description MaterialProperty normalMap Declaration protected MaterialProperty normalMap Field Value Type Description MaterialProperty normalMapScale Declaration protected MaterialProperty normalMapScale Field Value Type Description MaterialProperty proximityLight Declaration protected MaterialProperty proximityLight Field Value Type Description MaterialProperty proximityLightCenterColorOverride Declaration protected MaterialProperty proximityLightCenterColorOverride Field Value Type Description MaterialProperty proximityLightMiddleColorOverride Declaration protected MaterialProperty proximityLightMiddleColorOverride Field Value Type Description MaterialProperty proximityLightOuterColorOverride Declaration protected MaterialProperty proximityLightOuterColorOverride Field Value Type Description MaterialProperty proximityLightSubtractive Declaration protected MaterialProperty proximityLightSubtractive Field Value Type Description MaterialProperty proximityLightTwoSided Declaration protected MaterialProperty proximityLightTwoSided Field Value Type Description MaterialProperty reflections Declaration protected MaterialProperty reflections Field Value Type Description MaterialProperty refraction Declaration protected MaterialProperty refraction Field Value Type Description MaterialProperty refractiveIndex Declaration protected MaterialProperty refractiveIndex Field Value Type Description MaterialProperty rimColor Declaration protected MaterialProperty rimColor Field Value Type Description MaterialProperty rimLight Declaration protected MaterialProperty rimLight Field Value Type Description MaterialProperty rimPower Declaration protected MaterialProperty rimPower Field Value Type Description MaterialProperty roundCornerMargin Declaration protected MaterialProperty roundCornerMargin Field Value Type Description MaterialProperty roundCornerRadius Declaration protected MaterialProperty roundCornerRadius Field Value Type Description MaterialProperty roundCorners Declaration protected MaterialProperty roundCorners Field Value Type Description MaterialProperty smoothness Declaration protected MaterialProperty smoothness Field Value Type Description MaterialProperty specularHighlights Declaration protected MaterialProperty specularHighlights Field Value Type Description MaterialProperty sphericalHarmonics Declaration protected MaterialProperty sphericalHarmonics Field Value Type Description MaterialProperty stencil Declaration protected MaterialProperty stencil Field Value Type Description MaterialProperty stencilComparison Declaration protected MaterialProperty stencilComparison Field Value Type Description MaterialProperty stencilOperation Declaration protected MaterialProperty stencilOperation Field Value Type Description MaterialProperty stencilReference Declaration protected MaterialProperty stencilReference Field Value Type Description MaterialProperty triplanarMappingBlendSharpness Declaration protected MaterialProperty triplanarMappingBlendSharpness Field Value Type Description MaterialProperty vertexColors Declaration protected MaterialProperty vertexColors Field Value Type Description MaterialProperty vertexExtrusion Declaration protected MaterialProperty vertexExtrusion Field Value Type Description MaterialProperty vertexExtrusionSmoothNormals Declaration protected MaterialProperty vertexExtrusionSmoothNormals Field Value Type Description MaterialProperty vertexExtrusionValue Declaration protected MaterialProperty vertexExtrusionValue Field Value Type Description MaterialProperty Methods AdvancedOptions(MaterialEditor, Material) Declaration protected void AdvancedOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material AssignNewShaderToMaterial(Material, Shader, Shader) Declaration public override void AssignNewShaderToMaterial(Material material, Shader oldShader, Shader newShader) Parameters Type Name Description Material material Shader oldShader Shader newShader FindProperties(MaterialProperty[]) Declaration protected override void FindProperties(MaterialProperty[] props) Parameters Type Name Description MaterialProperty [] props Overrides MixedRealityShaderGUI.FindProperties(MaterialProperty[]) FluentOptions(MaterialEditor, Material) Declaration protected void FluentOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material MainMapOptions(MaterialEditor, Material) Declaration protected void MainMapOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material MaterialChanged(Material) Declaration protected override void MaterialChanged(Material material) Parameters Type Name Description Material material Overrides MixedRealityShaderGUI.MaterialChanged(Material) OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] props) Parameters Type Name Description MaterialEditor materialEditor MaterialProperty [] props Overrides MixedRealityShaderGUI.OnGUI(MaterialEditor, MaterialProperty[]) RenderingOptions(MaterialEditor, Material) Declaration protected void RenderingOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material ScaleRequired() Declaration protected bool ScaleRequired() Returns Type Description Boolean SetupMaterialWithAlbedo(Material, MaterialProperty, MaterialProperty, MaterialProperty) Declaration protected static void SetupMaterialWithAlbedo(Material material, MaterialProperty albedoMap, MaterialProperty albedoAlphaMode, MaterialProperty albedoAssignedAtRuntime) Parameters Type Name Description Material material MaterialProperty albedoMap MaterialProperty albedoAlphaMode MaterialProperty albedoAssignedAtRuntime UpgradeShaderForLightweightRenderPipeline() Declaration protected static void UpgradeShaderForLightweightRenderPipeline() UpgradeShaderForLightweightRenderPipelineValidate() Declaration protected static bool UpgradeShaderForLightweightRenderPipelineValidate() Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SceneInfoUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SceneInfoUtils.html",
    "title": "Class SceneInfoUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneInfoUtils Class responsible for updating scene info structs to reflect changes made to scene assets. Extends AssetPostprocessor so it can respond to asset changes. Inheritance Object SceneInfoUtils Implements IProcessSceneWithReport Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class SceneInfoUtils : AssetPostprocessor, IProcessSceneWithReport Properties CachedScenes Cached scenes used by SceneInfoDrawer to keep property drawer performant. Declaration public static EditorBuildSettingsScene[] CachedScenes { get; } Property Value Type Description EditorBuildSettingsScene [] callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 Methods FindScene(SerializedProperty, SerializedProperty, ref UnityEngine.Object) Finds a missing scene asset reference for a SceneInfo struct. Declaration public static bool FindScene(SerializedProperty nameProperty, SerializedProperty pathProperty, ref UnityEngine.Object asset) Parameters Type Name Description SerializedProperty nameProperty SerializedProperty pathProperty UnityEngine.Object asset Returns Type Description Boolean True if scene was found. GetSceneInfoRelativeProperties(SerializedProperty, out SerializedProperty, out SerializedProperty, out SerializedProperty, out SerializedProperty, out SerializedProperty, out SerializedProperty) Finds all relative properties of a SceneInfo struct. Declaration public static void GetSceneInfoRelativeProperties(SerializedProperty property, out SerializedProperty assetProperty, out SerializedProperty nameProperty, out SerializedProperty pathProperty, out SerializedProperty buildIndexProperty, out SerializedProperty includedProperty, out SerializedProperty tagProperty) Parameters Type Name Description SerializedProperty property SerializedProperty assetProperty SerializedProperty nameProperty SerializedProperty pathProperty SerializedProperty buildIndexProperty SerializedProperty includedProperty SerializedProperty tagProperty OnPostProcessScene() Searches for all components in a scene and refreshes any SceneInfo fields found. Declaration public static void OnPostProcessScene() OnProcessScene(Scene, BuildReport) Implements IProcessSceneWithReport.OnProcessScene Declaration public void OnProcessScene(Scene scene, BuildReport report) Parameters Type Name Description Scene scene BuildReport report RefreshCachedScenes() Call this when you make a change to the build settings and need those changes to be reflected immediately. Declaration public static void RefreshCachedScenes() RefreshSceneInfo(UnityEngine.Object, SerializedProperty, SerializedProperty, SerializedProperty, SerializedProperty, SerializedProperty) Updates all the serialized properties for a SceneInfo struct. Declaration public static bool RefreshSceneInfo(UnityEngine.Object asset, SerializedProperty nameProperty, SerializedProperty pathProperty, SerializedProperty buildIndexProperty, SerializedProperty includedProperty, SerializedProperty tagProperty) Parameters Type Name Description UnityEngine.Object asset SerializedProperty nameProperty SerializedProperty pathProperty SerializedProperty buildIndexProperty SerializedProperty includedProperty SerializedProperty tagProperty Returns Type Description Boolean True if a property has changed. Implements IProcessSceneWithReport"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ScenePickPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ScenePickPropertyDrawer.html",
    "title": "Class ScenePickPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScenePickPropertyDrawer Creates a custom picker based on the list of scene in the build settings. Inheritance Object ScenePickPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ScenePickPropertyDrawer : PropertyDrawer Examples [ScenePick] public int SceneId; Methods OnGUI(Rect, SerializedProperty, GUIContent) Function called by unity to draw the GUI for this property We are replacing the int value of the backing field with a dropdown list of scene names Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position See base class SerializedProperty property See base class GUIContent label See base class"
  },
  "Assets/MixedRealityToolkit/EventDatum/README.html": {
    "href": "Assets/MixedRealityToolkit/EventDatum/README.html",
    "title": "Mixed Reality Toolkit - EventDatum | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - EventDatum Data model classes for the inner workings of the Mixed Reality Toolkit and it's supported Core systems. All data models required for system use within the MRTK should be recorded here."
  },
  "Assets/MixedRealityToolkit/Providers/Hands/README.html": {
    "href": "Assets/MixedRealityToolkit/Providers/Hands/README.html",
    "title": "Hand Devices | Mixed Reality Toolkit Documentation",
    "keywords": "Hand Devices Base class for all hand devices, to act be implemented by all backends that want to provide hand input in MRTK. Simulated hands can be used if no hand tracking device is available. Simulated Hands Hand input can be simulated in Unity using the \"In-Editor Input Simulation\" service. This service is enabled by default. When enabled, virtual left and/or right hands can be moved in the scene using the mouse. Clicking mouse buttons will perform gestures for interacting with objects. Press shift to control the left hand and/or space to control the right hand. By pressing shift and space simultaneously both hands can be moved at the same time. The hand simulation has two modes: Quick mode: Hands are shown only as long as they are moved by the mouse. This mode is useful for simple testing of buttons with a single hand. Persistent mode: Hands stay visible on the screen, even if they are not moved. This mode is useful for testing two-hand manipulation and accurate placement. Gestures are toggled on/off by mouse clicks. The simulation mode can be switched for the left/right hand individually by pressing the T/Y keys respectively. Detailed settings for hand simulation can be found in the SimulatedHandAPI prefab, which is instantiated through the hand tracking profile. This includes key bindings for hand movement and mouse button bindings for gestures."
  },
  "Assets/MixedRealityToolkit/StandardAssets/README.html": {
    "href": "Assets/MixedRealityToolkit/StandardAssets/README.html",
    "title": "Mixed Reality Toolkit - Resources | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Resources A unique set of critical resources to the Mixed Reality Toolkit's operation. Note This should contain standard or reusable assets, as they should be catered for within the SDK project's \"Standard Assets\" Folder"
  },
  "Assets/MixedRealityToolkit/Utilities/README.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/README.html",
    "title": "Mixed Reality Toolkit - Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - Utilities This folder contains all the MRTK reusable / comment functionality"
  },
  "Assets/MixedRealityToolkit/Utilities/Async/License.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/Async/License.html",
    "title": "| Mixed Reality Toolkit Documentation",
    "keywords": "MIT License Copyright (c) 2016 Modest Tree Media Inc Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "Assets/MixedRealityToolkit/Utilities/Async/ReadMe.html": {
    "href": "Assets/MixedRealityToolkit/Utilities/Async/ReadMe.html",
    "title": "| Mixed Reality Toolkit Documentation",
    "keywords": "Adapted from https://github.com/svermeulen/Unity3dAsyncAwaitUtil For details on usage see the associated blog post here ."
  },
  "Assets/MixedRealityToolkit.Examples/Demos/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/Demos/README.html",
    "title": "Mixed Reality Toolkit Examples - Demos | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Examples - Demos This folder contains demonstrations of the currently implemented features supplied with the Mixed Reality Toolkit. These include: Audio The MRTK provides 3D spatial audio capabilities and utilities to aid you in the production of 3D audio in a Mixed Reality environment. This folder contains two demonstration implementations for: Audio LoFi Effects Audio Occlusion Boundary The MRTK provides several capabilities to both represent and manage the boundary provided by the various implemented systems. This folder provides a simple demonstration to visualize the boundary reported by the active system, if provided. Solvers Solvers provide many advanced ways to link or place objects within a scene and to attach them to other objects or even the player. Solvers also allow objects to be aware of their surroundings and moved with / against them in various ways. This folder contains a simple demonstration scene showing several of the solver options and how they can be applied in a scene. Standard Shader The MRTK standard shader is specifically customized for use in Mixed Reality environments and enabling several advanced effects \"out of the box\". This folder includes three demonstrations to show off the capabilities of the MRTK Standard Shader and how to configure it for each effect, namely: Material Gallery A full gallery of all the effects supported by the MRTK Standard Shader. Standard Material Comparison A side by side comparison of the Unity Standard Shader and the MRTK Standard Shader. Standard materials A gallery of the standards material assets provided with the MRTK and how they look using the MRTK Standard Shader. UX The Mixed Reality Toolkit provides several aids to build the UX in your Mixed Reality Solution, these currently include: Object Collections Several mechanisms to orientate and place object in a scene relative to each other. E.G. Side by side arrays, spherical arrays and much more. Lines Several default line drawing options for use in your project. Also utilized by the MRTK itself for controller pointer and teleportation use. Keep checking back often as more UX controls are added."
  },
  "Assets/MixedRealityToolkit.Examples/Demos/Gltf/Models/Avocado/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/Demos/Gltf/Models/Avocado/README.html",
    "title": "Avocado | Mixed Reality Toolkit Documentation",
    "keywords": "Avocado Screenshot License Information To the extent possible under law, Microsoft has waived all copyright and related or neighboring rights to this asset."
  },
  "Assets/MixedRealityToolkit.Examples/Demos/StandardShader/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/Demos/StandardShader/README.html",
    "title": "What is the \"MixedRealityToolkit/Standard\" shader? | Mixed Reality Toolkit Documentation",
    "keywords": "What is the \"MixedRealityToolkit/Standard\" shader? The MixedRealityToolkit/Standard shader is a collection of shading techniques for mimicking Microsoft's Fluent Design System within Unity 3D. The goal of this shader is to have a single, flexible shader that can achieve visuals similar to Unity's Standard Shader, implement Fluent Design System principles, and remain performant on mixed reality devices. Example Scenes To explore a Unity scene demonstrating materials which use many of the MixedRealityToolkit/Standard's features open Scenes\\MaterialGallery.unity within Unity's editor, or deploy to a mixed reality device. To compare the Unity Standard shader to the MRTK Standard shader open Scenes\\StandardMaterialComparison.unity within Unity's editor, or deploy to a mixed reality device. For a gallery of common MRTK materials open Scenes\\StandardMaterials.unity within Unity's editor, or deploy to a mixed reality device. Limitations Only one light source is supported, the directional light (additional light can be achieved using lightmapping)."
  },
  "Assets/MixedRealityToolkit.Examples/StandardAssets/README.html": {
    "href": "Assets/MixedRealityToolkit.Examples/StandardAssets/README.html",
    "title": "Mixed Reality Toolkit Examples - Standard Assets | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Examples - Standard Assets This folder contains general use assets only used in the example and demonstration scenes. These are simply a small subset of the larger gallery of standard assets provided in the MRTK SDK library."
  },
  "Assets/MixedRealityToolkit.SDK/Experimental/PulseShader/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Experimental/PulseShader/README.html",
    "title": "Pulse Shader | Mixed Reality Toolkit Documentation",
    "keywords": "Pulse Shader Use the pulse shader to animate a visual pulse effect over surface reconstruction, articulated hand mesh, or any other meshes. Shader and material MRTK_SurfaceReconstruction.mat and MRTK_ArticulatedHandMeshPulse.mat uses SR_Triangles shader. You can configure various options such as fill color, line color, and pulse color. Example scene Open PulseShaderExamples.unity scene, and observe the pulsing effect on the spheres, surface reconstruction, and the articulated hand mesh. Use the SurfacePulse.cs script to animate the pulse effect on the assigned material, or turn on \"Auto Pulse\" in the material itself. Prerequisites For surface reconstruction, ensure that MRTK_SurfaceReconstruction.mat is assigned under MRTK Settings -> Spatial Awareness -> Display Settings -> Visible Material. For articulated hand, ensure that MRTK_ArticulatedHandMeshPulse.mat is assigned in ArticulatedHandMesh.prefab, which itself should be assigned in MRTK Settings -> Input -> Hand Tracking -> Hand Mesh Prefab. How it works The hand mesh shader uses UVs to map the pulse along the hand mesh, and to fade out the wrist. The surface reconstruction shader uses the vertex positions to map the pulse."
  },
  "Assets/MixedRealityToolkit.SDK/Experimental/ScrollingObjectCollection/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Experimental/ScrollingObjectCollection/README.html",
    "title": "Scrolling Object Collection | Mixed Reality Toolkit Documentation",
    "keywords": "Scrolling Object Collection The ScrollingObjectCollection is an Object Collection that natively scrolls 3D objects. It supports scrolling pressable buttons and Interactables as well as non-interactive objects. This collection supports both near and far input. In order to use ScrollingObjectCollection, objects must use the MRTK Standard Shader in order for the clipping effect to work properly. Getting started with Scrolling Object Collection For convenience, there are two ScrollingObjectCollection Prefabs available to use. One is configured to work with 32x92mm PressableButton prefabs, and the other is for any object in a 32x32x32mm container. Simply drop these prefabs into a scene, add the desired objects, and press \"UpdateCollection\" to finalize the set up and layout of the Collection. Prerequisites All objects in collection must use the MRTK standard shader Every object in the collection must have a collider with a NearInteractionTouchable . All collision testing is currently done using these colliders; ScrollingObjectCollection does not yet support a static/nonmoving backing collider. All objects in collection need to be the same size currently, additionally you may get unexpected results if your objects aren't centered in a gameObject. For a seamless touchable surface, the 'cell size' in the scrolling collection should match the size of every object in the collection. There are additional requirements when using buttons: PressableButton.ReleaseOnTouch must be disabled. PhysicalPressEventRouter.InteractableOnClick most be set to EventOnClickCompletion or EventOnPress. At edit time, ScrollingObjectCollection can automatically fix these components. But when dynamically instantiating Prefabs or components, make sure these properties are set properly. How it works ScrollingObjectCollection subscribes itself as a global listener for Touch and Pointer events, filtering for events that correspond to the items in the list. Initially, the Collection doesn't do anything and lets events pass through to the child objects, this allows child objects to be poked and selected as expected. Once the ScrollingObjectCollection has deemed an interaction as a \"drag\", the collection begins marking all subsequent eventData as used and begins scrolling the list on the set axis. When using touch, the list will continue to scroll, until the PokePointer has crossed the touch plane in front of the list."
  },
  "Assets/MixedRealityToolkit.SDK/Features/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/README.html",
    "title": "Mixed Reality Toolkit SDK - Features | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit SDK - Features This folder contains the core mixed Reality Feature concrete implementations. These are completely optional to use and can be replaced with your own system should you wish to. More details needed on creating your own system, or replacing one."
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX This folder contains all the individual assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Interactable/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Interactable/README.html",
    "title": "Interactables | Mixed Reality Toolkit Documentation",
    "keywords": "Interactables The Interactable is a base component for building interactive content, like buttons and UI controls, with feedback based on interactive states. Interactables can have voice commands added to them and offers a deep theming system for all types of snesory feedback. Button - a standard UI button with basic feedback Toggle Button - an advanced button with multiple dimensions Animated Button - a button that uses an Animator theme for feedback Simple Button - a bare bones button with a mesh and label using the Default theme Holographic Button - an example of shell like buttons with a speech prompt Toggle Switch - a toggle switch UI control example Checkbox - an example of a checkbox toggle control Radial and Radial Set - an example of a button collection or tab system where only one button can be toggled at a time"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Prefabs/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Prefabs/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX - Prefabs | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX - Prefabs This folder contains all the individual prefab assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Controllers/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Controllers/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX - Controller support | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX - Controller support As part of the Mixed Reality Toolkit SDK, we provide scripts / controls for managing and implementing controllers in your Mixed Reality project. Currently we provide components for: Controller Visualizer Provides a singular function for rendering controller models in a scene, whether it's a generic model for all controller, or controller specific models. The framework is flexible enough to allow you to provide offsets to rotate and reposition the model as it's drawn Scaling isn't affected, it's up to you to pre-scale models appropriate to use in your Mixed Reality Scene Controller Visualizer usage Using the visualizer is extremely simple, just add it to an existing GameObject in your scene and provided you have configured your controller correctly, they will simply be instantiated into the scene at runtime when controllers are detected. Check the documentation on configuring Controller Profiles for more details: MixedReality Controller Configuration Profile configuration Controller Visualizer notes The controller visualizer is still in active development, new features that will be added in the future include: Ability to interrogate a given model to extract attachment nodes Ability to use Animation configuration for a given model Configuration to be able to animate models from actions by animation or change in pose"
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/PressableButtons/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/PressableButtons/README.html",
    "title": "Pressable buttons | Mixed Reality Toolkit Documentation",
    "keywords": "Pressable buttons This folder contains the scripts necessary for making Interactable buttons that support Speech, Far Interaction and Near Interaction (Physical hand pressing) High Level Description PhysicalButtonMovement is similar to HandInteractionPress. It uses External Object Targeting (EOT) to move an Interactable element along a press direction vector. PhysicalButtonMovement needs a large BoxCollider on the Ignore Raycast layer (which it sets automatically) It tracks the position of both index tip fingers and uses this to move the button as needed. States and Events It then calls into a PhysicalPressEventRouter and calls events related to Touch, Press, Unpress (Default Click), and Untouch. Touch: When a finger is contacting with the button. Press: After the button has been pressed more than a threshold amount. Unpress/Click: When the button has been released while in Press state. Untouch: When the finger is no longer touching the button. The PhysicalPressEventRouter receives events and sets Interactable's InteractableState accordingly. It also calls OnPointerClicked events, allowing for the PhysicalButtonMovement script to trigger Interactable.OnClicked UnityEvents (which speech/far interaction also execute) If PhysicalPressEventRouter does not satisfy your use case, you can write your own and utilize it instead. Touch Button & Button Cage Pressable buttons feature a normally invisible mesh called a 'Button Cage' or a 'Button Box' This mesh has one direction as the button face (Negative Z). This mesh has a button shader applied to it. The shader observes the position of several global positions (assigned in the GlobalShaderProximityAssigner) TouchButton triggers the glow splash when the joint positions enter into a collider or meshrenderer's bounds. Prefabs A Prefab is provide in MRTK.Examples/Demos/HandTracking/Prefabs/PressableButtons. PhysicalButtonMovement Customization You can customize variables within the PressableButtons, such as the dimensions of the detection box collider. PhysicalButtonMovement's box collider can have a variety of dimensions. It usually wants to be several times deeper than the button itself (whose box collider dimensions matter for gaze/far interaction) PhysicalButtonMovement's box collider can be larger on the X and Y axes if you want to have a more generous pressable region. This can result in close neighbor buttons getting pressed simultaneously, so be sure to avoid that case. PhysicalButtonMovement's Z size controls how deep the user can press before the button is released (a continuous depth press does not trigger a default click). Be sure to update ButtonSizeRelativeToCollider in PhysicalButtonMovement.cs Dimensions The sizing of .032 x .032 x .016 Unity units is the default dimensions of a button. The default sizing of the EOT Collider is .032 x .032 x .128 Unity units. This gives a decent pressable depth even if a developer adjusts the maximum press depth beyond the default .05 Unity units."
  },
  "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Tooltips/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Tooltips/README.html",
    "title": "Mixed Reality Toolkit - SDK - UX - Tooltips support | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - UX - Tooltips support As part of the Mixed Reality Toolkit SDK, we provide scripts / controls for managing and implementing tooltips in your Mixed Reality project. Currently we provide components for: Tooltips Manages the bulk of the tooltip display, content sizing and anchor behaviors. Also contains the text field for what a tooltip's text field should convey. Provides a field to show the connected Line Data Provider (see Lines section) Lines Mixed Reality Toolkit has a line concept built on top of Unity's LineRenderer concept allowing for more expressive lines. Begin with a LineDataProvider (Such as SimpleLine, Spline, or Parabola). A tooltip will look for a LineDataProvider automatically and then attempt to use it to connect the tooltip to the indicated Anchor. The line appearance and behavior can be styled and controlled in a MixedRealityLineRenderer component. Note: Not all LineDataProviders will work with Tooltips in a predictable manner. SimpleLine, Spline, ParabolaConstrained are the reasonable examples (and a prefab for each exists) Ellipse, Rectangle, ParabolaLine and ParabolaPhysicalLine tend to be less reliable or produce non-useful results. TooltipSpawner A TooltipSpawner is a mostly standalone script that receives Focus or Input events (assuming it has a collider) that can be used to instantiate a tooltip at a particular location with certain behaviors. You can control the appear and vanish conditions as well as how it responds to input. If you are using a TooltipSpawner, customize the tooltip prefab in the [Tool Tip Prefab] field to change the line/tooltip appearance."
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Audio/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Audio/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Audio | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Audio This folder contains all the individual audio assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Fonts/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Fonts/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Fonts | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Fonts This folder contains all the individual font assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Materials/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Materials/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Materials | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Materials This folder contains all the individual material assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Models/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Models/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Models | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Models This folder contains all the individual model assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Shaders/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Shaders/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Shaders | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Shaders This folder contains all the individual shader assets used to build MRTK solutions"
  },
  "Assets/MixedRealityToolkit.SDK/StandardAssets/Textures/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/StandardAssets/Textures/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Textures | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Textures This folder contains all the individual texture assets used to build MRTK solutions"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityWireframeShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityWireframeShaderGUI.html",
    "title": "Class MixedRealityWireframeShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityWireframeShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/Wireframe\" shader. Inheritance Object MixedRealityShaderGUI MixedRealityWireframeShaderGUI Inherited Members MixedRealityShaderGUI.initialized MixedRealityShaderGUI.renderingMode MixedRealityShaderGUI.customRenderingMode MixedRealityShaderGUI.sourceBlend MixedRealityShaderGUI.destinationBlend MixedRealityShaderGUI.blendOperation MixedRealityShaderGUI.depthTest MixedRealityShaderGUI.depthWrite MixedRealityShaderGUI.depthOffsetFactor MixedRealityShaderGUI.depthOffsetUnits MixedRealityShaderGUI.colorWriteMask MixedRealityShaderGUI.cullMode MixedRealityShaderGUI.renderQueueOverride MixedRealityShaderGUI.LegacyShadersPath MixedRealityShaderGUI.TransparentShadersPath MixedRealityShaderGUI.TransparentCutoutShadersPath MixedRealityShaderGUI.Initialize(Material) MixedRealityShaderGUI.MaterialChanged(Material) MixedRealityShaderGUI.RenderingModeOptions(MaterialEditor) MixedRealityShaderGUI.SetupMaterialWithRenderingMode(Material, MixedRealityShaderGUI.RenderingMode, MixedRealityShaderGUI.CustomRenderingMode, Int32) MixedRealityShaderGUI.PropertyEnabled(MaterialProperty) MixedRealityShaderGUI.GetFloatProperty(Material, String) MixedRealityShaderGUI.GetVectorProperty(Material, String) MixedRealityShaderGUI.GetColorProperty(Material, String) MixedRealityShaderGUI.SetShaderFeatureActive(Material, String, String, Nullable<Single>) MixedRealityShaderGUI.SetVectorProperty(Material, String, Nullable<Vector4>) MixedRealityShaderGUI.SetColorProperty(Material, String, Nullable<Color>) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityWireframeShaderGUI : MixedRealityShaderGUI Fields baseColor Declaration protected MaterialProperty baseColor Field Value Type Description MaterialProperty wireColor Declaration protected MaterialProperty wireColor Field Value Type Description MaterialProperty wireThickness Declaration protected MaterialProperty wireThickness Field Value Type Description MaterialProperty Methods AdvancedOptions(MaterialEditor, Material) Declaration protected void AdvancedOptions(MaterialEditor materialEditor, Material material) Parameters Type Name Description MaterialEditor materialEditor Material material AssignNewShaderToMaterial(Material, Shader, Shader) Declaration public override void AssignNewShaderToMaterial(Material material, Shader oldShader, Shader newShader) Parameters Type Name Description Material material Shader oldShader Shader newShader FindProperties(MaterialProperty[]) Declaration protected override void FindProperties(MaterialProperty[] props) Parameters Type Name Description MaterialProperty [] props Overrides MixedRealityShaderGUI.FindProperties(MaterialProperty[]) OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] props) Parameters Type Name Description MaterialEditor materialEditor MaterialProperty [] props Overrides MixedRealityShaderGUI.OnGUI(MaterialEditor, MaterialProperty[])"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.PinchSliderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.PinchSliderInspector.html",
    "title": "Class PinchSliderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class PinchSliderInspector Inheritance Object PinchSliderInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class PinchSliderInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ScriptedImporterAssetReimporter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ScriptedImporterAssetReimporter.html",
    "title": "Class ScriptedImporterAssetReimporter | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScriptedImporterAssetReimporter Unity has a strange bug when it tries to import a DLL with a ScriptedImporter and an asset that importer is targeting. The first time, it will not invoke the ScriptedImporter as it's just being imported itself; the second time the ScriptedImporter will be constructed but Unity thinks it fails. The third time, the import will succeed. This class will invoke the third time import for .gltf, .glb and .room extensions. Inheritance Object ScriptedImporterAssetReimporter Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ScriptedImporterAssetReimporter : AssetPostprocessor Methods OnPostprocessAllAssets(String[], String[], String[], String[]) Declaration public static void OnPostprocessAllAssets(string[] importedAssets, string[] deletedAssets, string[] movedAssets, string[] movedFromAssetPaths) Parameters Type Name Description String [] importedAssets String [] deletedAssets String [] movedAssets String [] movedFromAssetPaths"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SelectRepairedTypeWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SelectRepairedTypeWindow.html",
    "title": "Class SelectRepairedTypeWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class SelectRepairedTypeWindow Inheritance Object SelectRepairedTypeWindow Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class SelectRepairedTypeWindow : EditorWindow Properties WindowOpen Declaration public static bool WindowOpen { get; } Property Value Type Description Boolean Methods Display(Type[], SerializedProperty) Declaration public static void Display(Type[] repairedTypeOptions, SerializedProperty property) Parameters Type Name Description Type [] repairedTypeOptions SerializedProperty property"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness.MixedRealitySpatialAwarenessMeshObserverProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness.MixedRealitySpatialAwarenessMeshObserverProfileInspector.html",
    "title": "Class MixedRealitySpatialAwarenessMeshObserverProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessMeshObserverProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealitySpatialAwarenessMeshObserverProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.RenderAsSubProfile BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileDescriptions BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMRTKLogoAndSearch() BaseMixedRealityToolkitConfigurationProfileInspector.RenderDocumentation(Object) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(String, UnityEngine.Object) BaseMixedRealityToolkitConfigurationProfileInspector.RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.CheckEditorPlayMode() BaseMixedRealityToolkitConfigurationProfileInspector.CheckMixedRealityInputActions() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessMeshObserverProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean Overrides BaseMixedRealityToolkitConfigurationProfileInspector.IsProfileInActiveInstance() OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Editor.SpatialAwareness Classes MixedRealitySpatialAwarenessMeshObserverProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.EventSystemExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.EventSystemExtensions.html",
    "title": "Class EventSystemExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class EventSystemExtensions Extension methods for Unity's EventSystem Inheritance Object EventSystemExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class EventSystemExtensions Methods Raycast(EventSystem, PointerEventData, LayerMask[], RaycastResultComparer) Executes a raycast all and returns the closest element. Fixes the current issue with Unity's raycast sorting which does not consider separate canvases. Declaration public static RaycastResult Raycast(this EventSystem eventSystem, PointerEventData pointerEventData, LayerMask[] layerMasks, RaycastResultComparer raycastResultComparer = null) Parameters Type Name Description EventSystem eventSystem PointerEventData pointerEventData LayerMask [] layerMasks RaycastResultComparer raycastResultComparer Returns Type Description RaycastResult RaycastResult if hit, or an empty RaycastResult if nothing was hit Remarks Takes an optional RaycastResultComparer, which will be used to select the highest priority raycast result."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.BoundaryVisualizationDemo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.BoundaryVisualizationDemo.html",
    "title": "Class BoundaryVisualizationDemo | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundaryVisualizationDemo Demo class to show different ways of using the boundary system and visualizing the data. Inheritance Object BoundaryVisualizationDemo Implements IMixedRealityBoundaryHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class BoundaryVisualizationDemo : MonoBehaviour, IMixedRealityBoundaryHandler Methods OnBoundaryVisualizationChanged(BoundaryEventData) Declaration public void OnBoundaryVisualizationChanged(BoundaryEventData eventData) Parameters Type Name Description BoundaryEventData eventData Implements IMixedRealityBoundaryHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.BoundingBoxExampleTest.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.BoundingBoxExampleTest.html",
    "title": "Class BoundingBoxExampleTest | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundingBoxExampleTest Inheritance Object BoundingBoxExampleTest Implements IMixedRealitySpeechHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class BoundingBoxExampleTest : MonoBehaviour, IMixedRealitySpeechHandler Fields cyanMaterial Declaration public Material cyanMaterial Field Value Type Description Material darkGrayMaterial Declaration public Material darkGrayMaterial Field Value Type Description Material redMaterial Declaration public Material redMaterial Field Value Type Description Material scaleWidget Declaration public GameObject scaleWidget Field Value Type Description GameObject statusText Declaration public TextMeshPro statusText Field Value Type Description TextMeshPro Methods OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnSpeechKeywordRecognized(SpeechEventData) Declaration public void OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData Start() Declaration protected virtual void Start() Implements IMixedRealitySpeechHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ChangeManipulation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ChangeManipulation.html",
    "title": "Class ChangeManipulation | Mixed Reality Toolkit Documentation",
    "keywords": "Class ChangeManipulation Test script that forcefully stops manipulation on the manipulatedObject when it collides with the collisionTrigger Inheritance Object ChangeManipulation Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class ChangeManipulation : MonoBehaviour Fields collisionTrigger Declaration public Collider collisionTrigger Field Value Type Description Collider manipulatedObject Declaration public ManipulationHandler manipulatedObject Field Value Type Description ManipulationHandler Methods TryStopManipulation() Declaration public void TryStopManipulation()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ColorTap.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ColorTap.html",
    "title": "Class ColorTap | Mixed Reality Toolkit Documentation",
    "keywords": "Class ColorTap Inheritance Object ColorTap Implements IMixedRealityFocusHandler IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ColorTap : MonoBehaviour, IMixedRealityFocusHandler, IMixedRealityPointerHandler Implements IMixedRealityFocusHandler IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.DoNotRender.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.DoNotRender.html",
    "title": "Class DoNotRender | Mixed Reality Toolkit Documentation",
    "keywords": "Class DoNotRender Simple class that automatically hides a target on startup. This is, for example, useful for trigger zones and visual guides that are useful to show in the Editor, but not in the final application. Inheritance Object DoNotRender Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class DoNotRender : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.DrawOnTexture.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.DrawOnTexture.html",
    "title": "Class DrawOnTexture | Mixed Reality Toolkit Documentation",
    "keywords": "Class DrawOnTexture Inheritance Object DrawOnTexture Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class DrawOnTexture : MonoBehaviour Fields HeatmapLookUpTable Declaration public Texture2D HeatmapLookUpTable Field Value Type Description Texture2D HeatmapOverlayMaterialTemplate Declaration public Material HeatmapOverlayMaterialTemplate Field Value Type Description Material UseLiveInputStream Declaration public bool UseLiveInputStream Field Value Type Description Boolean Methods DrawAtThisHitPos(Vector3) Declaration public void DrawAtThisHitPos(Vector3 hitPosition) Parameters Type Name Description Vector3 hitPosition OnLookAt() Declaration public void OnLookAt()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.DwellSelection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.DwellSelection.html",
    "title": "Class DwellSelection | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellSelection Inheritance Object DwellSelection Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class DwellSelection : BaseEyeFocusHandler, IMixedRealityPointerHandler Properties TextureShaderProperty Declaration public string TextureShaderProperty { get; set; } Property Value Type Description String Methods DisableDwell() Declaration public void DisableDwell() EnableDwell() Declaration public void EnableDwell() OnEyeFocusStart() Declaration protected override void OnEyeFocusStart() OnEyeFocusStay() Declaration protected override void OnEyeFocusStay() OnEyeFocusStop() Declaration protected override void OnEyeFocusStop() Update() Declaration protected override void Update() Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.BasicInputLogger.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.BasicInputLogger.html",
    "title": "Class BasicInputLogger | Mixed Reality Toolkit Documentation",
    "keywords": "Class BasicInputLogger Inheritance Object BasicInputLogger CustomInputLogger Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public abstract class BasicInputLogger : MonoBehaviour Fields addTimestampToLogfileName Declaration public bool addTimestampToLogfileName Field Value Type Description Boolean sessionDescr Declaration protected string sessionDescr Field Value Type Description String UserName Declaration public string UserName Field Value Type Description String Properties FilenameNoTimestamp Declaration protected string FilenameNoTimestamp { get; } Property Value Type Description String FilenameWithTimestamp Declaration protected string FilenameWithTimestamp { get; } Property Value Type Description String LogDirectory Declaration public string LogDirectory { get; } Property Value Type Description String Methods Append(String) Declaration public bool Append(string msg) Parameters Type Name Description String msg Returns Type Description Boolean GetFileName() Declaration protected abstract string GetFileName() Returns Type Description String GetHeader() Declaration public abstract string GetHeader() Returns Type Description String OnDestroy() Declaration public virtual void OnDestroy() ResetLog() Declaration public void ResetLog() SaveLogs() Declaration public void SaveLogs() SetSessionDescr(String) Declaration public void SetSessionDescr(string descr) Parameters Type Name Description String descr SetUserName(String) Declaration public void SetUserName(string name) Parameters Type Name Description String name"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.CustomInputLogger.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.CustomInputLogger.html",
    "title": "Class CustomInputLogger | Mixed Reality Toolkit Documentation",
    "keywords": "Class CustomInputLogger Inheritance Object BasicInputLogger CustomInputLogger UserInputRecorder Inherited Members BasicInputLogger.addTimestampToLogfileName BasicInputLogger.SetUserName(String) BasicInputLogger.SetSessionDescr(String) BasicInputLogger.UserName BasicInputLogger.sessionDescr BasicInputLogger.LogDirectory BasicInputLogger.GetHeader() BasicInputLogger.GetFileName() BasicInputLogger.ResetLog() BasicInputLogger.Append(String) BasicInputLogger.SaveLogs() BasicInputLogger.FilenameWithTimestamp BasicInputLogger.FilenameNoTimestamp BasicInputLogger.OnDestroy() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public abstract class CustomInputLogger : BasicInputLogger Fields filename Declaration protected string filename Field Value Type Description String printedHeader Declaration protected bool printedHeader Field Value Type Description Boolean TimerStart Declaration protected static DateTime TimerStart Field Value Type Description DateTime Methods CancelLogging() Declaration public void CancelLogging() CreateNewLog() Declaration protected void CreateNewLog() CustomAppend(String) Declaration protected virtual void CustomAppend(string msg) Parameters Type Name Description String msg StartLogging() Declaration public void StartLogging() StopLoggingAndSave() Declaration public void StopLoggingAndSave()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.InputPointerVisualizer.VisModes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.InputPointerVisualizer.VisModes.html",
    "title": "Enum InputPointerVisualizer.VisModes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InputPointerVisualizer.VisModes Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public enum VisModes Fields Name Description ShowAll ShowNone ShowOnlyDestinations"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.InputPointerVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.InputPointerVisualizer.html",
    "title": "Class InputPointerVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputPointerVisualizer This visualizer can be used to represent pointer input data, e.g., from a handheld controller, from hand, head or eye tracking. In general, it assumes a pointing origin and direction, Inheritance Object InputPointerVisualizer Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class InputPointerVisualizer : MonoBehaviour Fields cursorDist Declaration public float cursorDist Field Value Type Description Single distThresh Declaration public float distThresh Field Value Type Description Single minNrOfSamples Declaration public float minNrOfSamples Field Value Type Description Single nhist Declaration public float nhist Field Value Type Description Single saccadeThresh Declaration public float saccadeThresh Field Value Type Description Single ShowVisMode Declaration public InputPointerVisualizer.VisModes ShowVisMode Field Value Type Description InputPointerVisualizer.VisModes textOutput Declaration public TextMesh textOutput Field Value Type Description TextMesh Properties AmountOfSamples Declaration public int AmountOfSamples { get; set; } Property Value Type Description Int32 Methods IsDwelling() Declaration public bool IsDwelling() Returns Type Description Boolean PauseApp() Declaration public void PauseApp() ResetVisualizations() Declaration public void ResetVisualizations() SetAppState(Boolean) Declaration public void SetAppState(bool pauseIt) Parameters Type Name Description Boolean pauseIt ToggleAppState() Declaration public void ToggleAppState() UnpauseApp() Declaration public void UnpauseApp() UpdateDataVis(Ray) Declaration public void UpdateDataVis(Ray cursorRay) Parameters Type Name Description Ray cursorRay"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomBase.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomBase.html",
    "title": "Class PanZoomBase | Mixed Reality Toolkit Documentation",
    "keywords": "Class PanZoomBase This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. Inheritance Object PanZoomBase PanZoomBaseRectTransf PanZoomBaseTexture Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public abstract class PanZoomBase : MonoBehaviour, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Fields cursorPos Declaration protected Vector2 cursorPos Field Value Type Description Vector2 dynaZoomInvert Declaration protected int dynaZoomInvert Field Value Type Description Int32 limitPanning Declaration public bool limitPanning Field Value Type Description Boolean myEyeTarget Declaration protected EyeTrackingTarget myEyeTarget Field Value Type Description EyeTrackingTarget offset Declaration protected Vector2 offset Field Value Type Description Vector2 offsetRate_Pan Declaration protected Vector2 offsetRate_Pan Field Value Type Description Vector2 offsetRate_Zoom Declaration protected Vector2 offsetRate_Zoom Field Value Type Description Vector2 originalOffset Declaration protected Vector2 originalOffset Field Value Type Description Vector2 originalPivot Declaration protected Vector2 originalPivot Field Value Type Description Vector2 originalRatio Declaration protected Vector3 originalRatio Field Value Type Description Vector3 originalScale Declaration protected Vector2 originalScale Field Value Type Description Vector2 scale Declaration protected Vector2 scale Field Value Type Description Vector2 zoomDir Declaration protected float zoomDir Field Value Type Description Single zoomSpeed Declaration protected float zoomSpeed Field Value Type Description Single Properties EyeSaccadeProvider Declaration protected IMixedRealityEyeSaccadeProvider EyeSaccadeProvider { get; } Property Value Type Description IMixedRealityEyeSaccadeProvider MyCollider Returns the collider of this GameObject. Declaration protected BoxCollider MyCollider { get; set; } Property Value Type Description BoxCollider Methods AutoPan() Declaration public void AutoPan() ComputePanSpeed(Single, Single, Single) Declaration public abstract float ComputePanSpeed(float cursorPosInOneDir, float maxSpeed, float minDistFromCenterForAutoPan) Parameters Type Name Description Single cursorPosInOneDir Single maxSpeed Single minDistFromCenterForAutoPan Returns Type Description Single DisableHandZoom() Declaration public void DisableHandZoom() EnableHandZoom() Declaration public void EnableHandZoom() IncrementNormFixator() Declaration public void IncrementNormFixator() Initialize() Declaration public abstract void Initialize() LimitScaling(Vector2) Declaration protected Vector2 LimitScaling(Vector2 newScale) Parameters Type Name Description Vector2 newScale Returns Type Description Vector2 PanHorizontally(Single) Scroll sideways. Declaration public void PanHorizontally(float speed) Parameters Type Name Description Single speed PanVertically(Single) Scroll from top to bottom Declaration public void PanVertically(float speed) Parameters Type Name Description Single speed ResetNormFixator() Declaration public void ResetNormFixator() Start() Declaration protected virtual void Start() StartFocusing() Declaration public void StartFocusing() StopFocusing() Declaration public void StopFocusing() Update() Declaration protected virtual void Update() UpdateCursorPosInHitBox() Declaration public abstract bool UpdateCursorPosInHitBox() Returns Type Description Boolean UpdatePanZoom() Declaration public abstract void UpdatePanZoom() ZoomDir(Boolean) Declaration public abstract int ZoomDir(bool zoomIn) Parameters Type Name Description Boolean zoomIn Returns Type Description Int32 ZoomIn() Declaration public abstract void ZoomIn() ZoomIn_Timed() Declaration public void ZoomIn_Timed() ZoomInStart() Declaration public void ZoomInStart() ZoomOut() Declaration public abstract void ZoomOut() ZoomOut_Timed() Declaration public void ZoomOut_Timed() ZoomOutStart() Declaration public void ZoomOutStart() ZoomStop() No matter if the user is still looking at the currently active pan-zoom panel, once the \"zoom stop\" action has been triggered, reset the active target. Declaration public void ZoomStop() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomBaseRectTransf.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomBaseRectTransf.html",
    "title": "Class PanZoomBaseRectTransf | Mixed Reality Toolkit Documentation",
    "keywords": "Class PanZoomBaseRectTransf This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. Inheritance Object PanZoomBase PanZoomBaseRectTransf PanZoomRectTransf ScrollRectTransf Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Inherited Members PanZoomBase.cursorPos PanZoomBase.scale PanZoomBase.offset PanZoomBase.offsetRate_Zoom PanZoomBase.offsetRate_Pan PanZoomBase.limitPanning PanZoomBase.myEyeTarget PanZoomBase.zoomSpeed PanZoomBase.zoomDir PanZoomBase.dynaZoomInvert PanZoomBase.originalRatio PanZoomBase.originalPivot PanZoomBase.originalScale PanZoomBase.originalOffset PanZoomBase.EyeSaccadeProvider PanZoomBase.Start() PanZoomBase.AutoPan() PanZoomBase.PanHorizontally(Single) PanZoomBase.PanVertically(Single) PanZoomBase.EnableHandZoom() PanZoomBase.DisableHandZoom() PanZoomBase.ZoomInStart() PanZoomBase.ZoomOutStart() PanZoomBase.ZoomStop() PanZoomBase.Update() PanZoomBase.ResetNormFixator() PanZoomBase.IncrementNormFixator() PanZoomBase.MyCollider PanZoomBase.LimitScaling(Vector2) PanZoomBase.ZoomIn_Timed() PanZoomBase.ZoomOut_Timed() PanZoomBase.StartFocusing() PanZoomBase.StopFocusing() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class PanZoomBaseRectTransf : PanZoomBase, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Methods ComputePanSpeed(Single, Single, Single) Declaration public override float ComputePanSpeed(float uvCursorPos, float maxSpeed, float minDistFromCenterForAutoPan) Parameters Type Name Description Single uvCursorPos Single maxSpeed Single minDistFromCenterForAutoPan Returns Type Description Single Overrides PanZoomBase.ComputePanSpeed(Single, Single, Single) Initialize() Declaration public override void Initialize() Overrides PanZoomBase.Initialize() UpdateCursorPosInHitBox() Determine the position of the cursor within the hitbox. Declaration public override bool UpdateCursorPosInHitBox() Returns Type Description Boolean True if this GameObject is hit. Overrides PanZoomBase.UpdateCursorPosInHitBox() UpdatePanZoom() Declaration public override void UpdatePanZoom() Overrides PanZoomBase.UpdatePanZoom() ZoomDir(Boolean) Declaration public override int ZoomDir(bool zoomIn) Parameters Type Name Description Boolean zoomIn Returns Type Description Int32 Overrides PanZoomBase.ZoomDir(Boolean) ZoomIn() Declaration public override void ZoomIn() Overrides PanZoomBase.ZoomIn() ZoomOut() Declaration public override void ZoomOut() Overrides PanZoomBase.ZoomOut() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomBaseTexture.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomBaseTexture.html",
    "title": "Class PanZoomBaseTexture | Mixed Reality Toolkit Documentation",
    "keywords": "Class PanZoomBaseTexture This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. Inheritance Object PanZoomBase PanZoomBaseTexture PanZoomTexture ScrollTexture Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Inherited Members PanZoomBase.cursorPos PanZoomBase.scale PanZoomBase.offset PanZoomBase.offsetRate_Zoom PanZoomBase.offsetRate_Pan PanZoomBase.limitPanning PanZoomBase.myEyeTarget PanZoomBase.zoomSpeed PanZoomBase.zoomDir PanZoomBase.dynaZoomInvert PanZoomBase.originalRatio PanZoomBase.originalPivot PanZoomBase.originalScale PanZoomBase.originalOffset PanZoomBase.EyeSaccadeProvider PanZoomBase.Start() PanZoomBase.AutoPan() PanZoomBase.PanHorizontally(Single) PanZoomBase.PanVertically(Single) PanZoomBase.EnableHandZoom() PanZoomBase.DisableHandZoom() PanZoomBase.ZoomInStart() PanZoomBase.ZoomOutStart() PanZoomBase.ZoomStop() PanZoomBase.Update() PanZoomBase.ResetNormFixator() PanZoomBase.IncrementNormFixator() PanZoomBase.MyCollider PanZoomBase.LimitScaling(Vector2) PanZoomBase.ZoomIn_Timed() PanZoomBase.ZoomOut_Timed() PanZoomBase.StartFocusing() PanZoomBase.StopFocusing() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class PanZoomBaseTexture : PanZoomBase, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Fields textureRenderer Declaration protected Renderer textureRenderer Field Value Type Description Renderer Properties TextureShaderProperty Declaration public string TextureShaderProperty { get; set; } Property Value Type Description String Methods ComputePanSpeed(Single, Single, Single) Returns the pan speed. Declaration public override float ComputePanSpeed(float uvCursorPos, float maxSpeed, float minDistFromCenterForAutoPan) Parameters Type Name Description Single uvCursorPos Single maxSpeed Single minDistFromCenterForAutoPan Returns Type Description Single Overrides PanZoomBase.ComputePanSpeed(Single, Single, Single) Initialize() Declaration public override void Initialize() Overrides PanZoomBase.Initialize() Initialize(Single) Declaration public void Initialize(float newAspectRatio) Parameters Type Name Description Single newAspectRatio UpdateCursorPosInHitBox() Determine the position of the cursor within the texture in UV space. Declaration public override bool UpdateCursorPosInHitBox() Returns Type Description Boolean True if this GameObject is hit. Overrides PanZoomBase.UpdateCursorPosInHitBox() UpdatePanZoom() Declaration public override void UpdatePanZoom() Overrides PanZoomBase.UpdatePanZoom() ZoomDir(Boolean) Declaration public override int ZoomDir(bool zoomIn) Parameters Type Name Description Boolean zoomIn Returns Type Description Int32 Overrides PanZoomBase.ZoomDir(Boolean) ZoomIn() Declaration public override void ZoomIn() Overrides PanZoomBase.ZoomIn() ZoomOut() Declaration public override void ZoomOut() Overrides PanZoomBase.ZoomOut() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomRectTransf.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomRectTransf.html",
    "title": "Class PanZoomRectTransf | Mixed Reality Toolkit Documentation",
    "keywords": "Class PanZoomRectTransf This script allows to scroll a texture both horizontally and vertically. Inheritance Object PanZoomBase PanZoomBaseRectTransf PanZoomRectTransf Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Inherited Members PanZoomBaseRectTransf.Initialize() PanZoomBaseRectTransf.ComputePanSpeed(Single, Single, Single) PanZoomBaseRectTransf.ZoomDir(Boolean) PanZoomBaseRectTransf.ZoomIn() PanZoomBaseRectTransf.ZoomOut() PanZoomBaseRectTransf.UpdatePanZoom() PanZoomBaseRectTransf.UpdateCursorPosInHitBox() PanZoomBase.cursorPos PanZoomBase.scale PanZoomBase.offset PanZoomBase.offsetRate_Zoom PanZoomBase.offsetRate_Pan PanZoomBase.limitPanning PanZoomBase.myEyeTarget PanZoomBase.zoomSpeed PanZoomBase.zoomDir PanZoomBase.dynaZoomInvert PanZoomBase.originalRatio PanZoomBase.originalPivot PanZoomBase.originalScale PanZoomBase.originalOffset PanZoomBase.EyeSaccadeProvider PanZoomBase.AutoPan() PanZoomBase.PanHorizontally(Single) PanZoomBase.PanVertically(Single) PanZoomBase.EnableHandZoom() PanZoomBase.DisableHandZoom() PanZoomBase.ZoomInStart() PanZoomBase.ZoomOutStart() PanZoomBase.ZoomStop() PanZoomBase.ResetNormFixator() PanZoomBase.IncrementNormFixator() PanZoomBase.MyCollider PanZoomBase.LimitScaling(Vector2) PanZoomBase.ZoomIn_Timed() PanZoomBase.ZoomOut_Timed() PanZoomBase.StartFocusing() PanZoomBase.StopFocusing() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class PanZoomRectTransf : PanZoomBaseRectTransf, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Methods Start() Declaration protected override void Start() Overrides PanZoomBase.Start() Update() Declaration protected override void Update() Overrides PanZoomBase.Update() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetGroupIterator.TargetGroupEventHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetGroupIterator.TargetGroupEventHandler.html",
    "title": "Delegate TargetGroupIterator.TargetGroupEventHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate TargetGroupIterator.TargetGroupEventHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public delegate void TargetGroupEventHandler();"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetGroupIterator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetGroupIterator.html",
    "title": "Class TargetGroupIterator | Mixed Reality Toolkit Documentation",
    "keywords": "Class TargetGroupIterator Iterates through a given set of targets based on a required TargetGroupCreator. Inheritance Object TargetGroupIterator Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TargetGroupIterator : MonoBehaviour, IMixedRealityPointerHandler Properties CurrentTarget Property which returns the current query target. Declaration public GameObject CurrentTarget { get; } Property Value Type Description GameObject CurrentTargetIsValid Property which returns whether the current query target is valid. Declaration public bool CurrentTargetIsValid { get; } Property Value Type Description Boolean HighlightColor Property that returns the highlight color. Declaration public Color HighlightColor { get; } Property Value Type Description Color PreviousTarget Property which returns the previous query target or 'null' in case there is no previous target. Declaration public GameObject PreviousTarget { get; } Property Value Type Description GameObject Methods ResetIterator() Reset the target group iterator. Declaration public void ResetIterator() Events OnAllTargetsSelected Declaration public event TargetGroupIterator.TargetGroupEventHandler OnAllTargetsSelected Event Type Type Description TargetGroupIterator.TargetGroupEventHandler OnTargetSelected Declaration public event TargetGroupIterator.TargetGroupEventHandler OnTargetSelected Event Type Type Description TargetGroupIterator.TargetGroupEventHandler Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting.OnLookAtShowHoverFeedback.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting.OnLookAtShowHoverFeedback.html",
    "title": "Class OnLookAtShowHoverFeedback | Mixed Reality Toolkit Documentation",
    "keywords": "Class OnLookAtShowHoverFeedback Handles visual feedback for when a target is looked at, such as the option to highlight the looked at target or to show a visual anchor at the target's center. Different fade in and fade out options are also available. Inheritance Object OnLookAtShowHoverFeedback Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting Assembly : cs.temp.dll.dll Syntax public class OnLookAtShowHoverFeedback : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Targeting Classes OnLookAtShowHoverFeedback Handles visual feedback for when a target is looked at, such as the option to highlight the looked at target or to show a visual anchor at the target's center. Different fade in and fade out options are also available."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.HandInteractionTouch.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.HandInteractionTouch.html",
    "title": "Class HandInteractionTouch | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandInteractionTouch Inheritance Object HandInteractionTouch HandInteractionTouchRotate Implements IMixedRealityTouchHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class HandInteractionTouch : MonoBehaviour, IMixedRealityTouchHandler Fields duration Declaration protected float duration Field Value Type Description Single OnTouchCompleted Declaration public TouchEvent OnTouchCompleted Field Value Type Description TouchEvent OnTouchStarted Declaration public TouchEvent OnTouchStarted Field Value Type Description TouchEvent OnTouchUpdated Declaration public TouchEvent OnTouchUpdated Field Value Type Description TouchEvent t Declaration protected float t Field Value Type Description Single Implements IMixedRealityTouchHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.HandInteractionTouchRotate.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.HandInteractionTouchRotate.html",
    "title": "Class HandInteractionTouchRotate | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandInteractionTouchRotate Inheritance Object HandInteractionTouch HandInteractionTouchRotate Implements IMixedRealityTouchHandler Inherited Members HandInteractionTouch.OnTouchCompleted HandInteractionTouch.OnTouchStarted HandInteractionTouch.OnTouchUpdated HandInteractionTouch.duration HandInteractionTouch.t Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class HandInteractionTouchRotate : HandInteractionTouch, IMixedRealityTouchHandler Implements IMixedRealityTouchHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.InputDataExample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.InputDataExample.html",
    "title": "Class InputDataExample | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputDataExample This class demonstrates how to query input data either by using InputUtils or by directly accessing InteractionMappings from all active controllers. Inheritance Object InputDataExample Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class InputDataExample : MonoBehaviour Fields inputUtilsText Declaration public TextMesh inputUtilsText Field Value Type Description TextMesh rawDataText Declaration public TextMesh rawDataText Field Value Type Description TextMesh Methods Start() Declaration public void Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.InputDataExampleGizmo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.InputDataExampleGizmo.html",
    "title": "Class InputDataExampleGizmo | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputDataExampleGizmo Attach this component to a game object to synchronize the objects position and rotation to the given input type. If the input data is not available, the component will hide the object by disabling all renderers. Inheritance Object InputDataExampleGizmo Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class InputDataExampleGizmo : MonoBehaviour Fields handedness Declaration public Handedness handedness Field Value Type Description Handedness sourceType Declaration public InputSourceType sourceType Field Value Type Description InputSourceType Methods Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVROverlay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVROverlay.html",
    "title": "Class CVROverlay | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVROverlay Inheritance Object CVROverlay Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVROverlay Methods ClearOverlayTexture(UInt64) Declaration public EVROverlayError ClearOverlayTexture(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description EVROverlayError CloseMessageOverlay() Declaration public void CloseMessageOverlay() ComputeOverlayIntersection(UInt64, ref VROverlayIntersectionParams_t, ref VROverlayIntersectionResults_t) Declaration public bool ComputeOverlayIntersection(ulong ulOverlayHandle, ref VROverlayIntersectionParams_t pParams, ref VROverlayIntersectionResults_t pResults) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayIntersectionParams_t pParams VROverlayIntersectionResults_t pResults Returns Type Description Boolean CreateDashboardOverlay(String, String, ref UInt64, ref UInt64) Declaration public EVROverlayError CreateDashboardOverlay(string pchOverlayKey, string pchOverlayFriendlyName, ref ulong pMainHandle, ref ulong pThumbnailHandle) Parameters Type Name Description String pchOverlayKey String pchOverlayFriendlyName UInt64 pMainHandle UInt64 pThumbnailHandle Returns Type Description EVROverlayError CreateOverlay(String, String, ref UInt64) Declaration public EVROverlayError CreateOverlay(string pchOverlayKey, string pchOverlayName, ref ulong pOverlayHandle) Parameters Type Name Description String pchOverlayKey String pchOverlayName UInt64 pOverlayHandle Returns Type Description EVROverlayError DestroyOverlay(UInt64) Declaration public EVROverlayError DestroyOverlay(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description EVROverlayError FindOverlay(String, ref UInt64) Declaration public EVROverlayError FindOverlay(string pchOverlayKey, ref ulong pOverlayHandle) Parameters Type Name Description String pchOverlayKey UInt64 pOverlayHandle Returns Type Description EVROverlayError GetDashboardOverlaySceneProcess(UInt64, ref UInt32) Declaration public EVROverlayError GetDashboardOverlaySceneProcess(ulong ulOverlayHandle, ref uint punProcessId) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 punProcessId Returns Type Description EVROverlayError GetGamepadFocusOverlay() Declaration public ulong GetGamepadFocusOverlay() Returns Type Description UInt64 GetHighQualityOverlay() Declaration public ulong GetHighQualityOverlay() Returns Type Description UInt64 GetKeyboardText(StringBuilder, UInt32) Declaration public uint GetKeyboardText(StringBuilder pchText, uint cchText) Parameters Type Name Description StringBuilder pchText UInt32 cchText Returns Type Description UInt32 GetOverlayAlpha(UInt64, ref Single) Declaration public EVROverlayError GetOverlayAlpha(ulong ulOverlayHandle, ref float pfAlpha) Parameters Type Name Description UInt64 ulOverlayHandle Single pfAlpha Returns Type Description EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(UInt64, ref Single, ref Single) Declaration public EVROverlayError GetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, ref float pfMinDistanceInMeters, ref float pfMaxDistanceInMeters) Parameters Type Name Description UInt64 ulOverlayHandle Single pfMinDistanceInMeters Single pfMaxDistanceInMeters Returns Type Description EVROverlayError GetOverlayColor(UInt64, ref Single, ref Single, ref Single) Declaration public EVROverlayError GetOverlayColor(ulong ulOverlayHandle, ref float pfRed, ref float pfGreen, ref float pfBlue) Parameters Type Name Description UInt64 ulOverlayHandle Single pfRed Single pfGreen Single pfBlue Returns Type Description EVROverlayError GetOverlayDualAnalogTransform(UInt64, EDualAnalogWhich, ref HmdVector2_t, ref Single) Declaration public EVROverlayError GetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, ref float pfRadius) Parameters Type Name Description UInt64 ulOverlay EDualAnalogWhich eWhich HmdVector2_t pvCenter Single pfRadius Returns Type Description EVROverlayError GetOverlayErrorNameFromEnum(EVROverlayError) Declaration public string GetOverlayErrorNameFromEnum(EVROverlayError error) Parameters Type Name Description EVROverlayError error Returns Type Description String GetOverlayFlag(UInt64, VROverlayFlags, ref Boolean) Declaration public EVROverlayError GetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, ref bool pbEnabled) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayFlags eOverlayFlag Boolean pbEnabled Returns Type Description EVROverlayError GetOverlayFlags(UInt64, ref UInt32) Declaration public EVROverlayError GetOverlayFlags(ulong ulOverlayHandle, ref uint pFlags) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 pFlags Returns Type Description EVROverlayError GetOverlayImageData(UInt64, IntPtr, UInt32, ref UInt32, ref UInt32) Declaration public EVROverlayError GetOverlayImageData(ulong ulOverlayHandle, IntPtr pvBuffer, uint unBufferSize, ref uint punWidth, ref uint punHeight) Parameters Type Name Description UInt64 ulOverlayHandle IntPtr pvBuffer UInt32 unBufferSize UInt32 punWidth UInt32 punHeight Returns Type Description EVROverlayError GetOverlayInputMethod(UInt64, ref VROverlayInputMethod) Declaration public EVROverlayError GetOverlayInputMethod(ulong ulOverlayHandle, ref VROverlayInputMethod peInputMethod) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayInputMethod peInputMethod Returns Type Description EVROverlayError GetOverlayKey(UInt64, StringBuilder, UInt32, ref EVROverlayError) Declaration public uint GetOverlayKey(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError) Parameters Type Name Description UInt64 ulOverlayHandle StringBuilder pchValue UInt32 unBufferSize EVROverlayError pError Returns Type Description UInt32 GetOverlayMouseScale(UInt64, ref HmdVector2_t) Declaration public EVROverlayError GetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale) Parameters Type Name Description UInt64 ulOverlayHandle HmdVector2_t pvecMouseScale Returns Type Description EVROverlayError GetOverlayName(UInt64, StringBuilder, UInt32, ref EVROverlayError) Declaration public uint GetOverlayName(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref EVROverlayError pError) Parameters Type Name Description UInt64 ulOverlayHandle StringBuilder pchValue UInt32 unBufferSize EVROverlayError pError Returns Type Description UInt32 GetOverlayRenderingPid(UInt64) Declaration public uint GetOverlayRenderingPid(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description UInt32 GetOverlayRenderModel(UInt64, StringBuilder, UInt32, ref HmdColor_t, ref EVROverlayError) Declaration public uint GetOverlayRenderModel(ulong ulOverlayHandle, StringBuilder pchValue, uint unBufferSize, ref HmdColor_t pColor, ref EVROverlayError pError) Parameters Type Name Description UInt64 ulOverlayHandle StringBuilder pchValue UInt32 unBufferSize HmdColor_t pColor EVROverlayError pError Returns Type Description UInt32 GetOverlaySortOrder(UInt64, ref UInt32) Declaration public EVROverlayError GetOverlaySortOrder(ulong ulOverlayHandle, ref uint punSortOrder) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 punSortOrder Returns Type Description EVROverlayError GetOverlayTexelAspect(UInt64, ref Single) Declaration public EVROverlayError GetOverlayTexelAspect(ulong ulOverlayHandle, ref float pfTexelAspect) Parameters Type Name Description UInt64 ulOverlayHandle Single pfTexelAspect Returns Type Description EVROverlayError GetOverlayTexture(UInt64, ref IntPtr, IntPtr, ref UInt32, ref UInt32, ref UInt32, ref ETextureType, ref EColorSpace, ref VRTextureBounds_t) Declaration public EVROverlayError GetOverlayTexture(ulong ulOverlayHandle, ref IntPtr pNativeTextureHandle, IntPtr pNativeTextureRef, ref uint pWidth, ref uint pHeight, ref uint pNativeFormat, ref ETextureType pAPIType, ref EColorSpace pColorSpace, ref VRTextureBounds_t pTextureBounds) Parameters Type Name Description UInt64 ulOverlayHandle IntPtr pNativeTextureHandle IntPtr pNativeTextureRef UInt32 pWidth UInt32 pHeight UInt32 pNativeFormat ETextureType pAPIType EColorSpace pColorSpace VRTextureBounds_t pTextureBounds Returns Type Description EVROverlayError GetOverlayTextureBounds(UInt64, ref VRTextureBounds_t) Declaration public EVROverlayError GetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds) Parameters Type Name Description UInt64 ulOverlayHandle VRTextureBounds_t pOverlayTextureBounds Returns Type Description EVROverlayError GetOverlayTextureColorSpace(UInt64, ref EColorSpace) Declaration public EVROverlayError GetOverlayTextureColorSpace(ulong ulOverlayHandle, ref EColorSpace peTextureColorSpace) Parameters Type Name Description UInt64 ulOverlayHandle EColorSpace peTextureColorSpace Returns Type Description EVROverlayError GetOverlayTextureSize(UInt64, ref UInt32, ref UInt32) Declaration public EVROverlayError GetOverlayTextureSize(ulong ulOverlayHandle, ref uint pWidth, ref uint pHeight) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 pWidth UInt32 pHeight Returns Type Description EVROverlayError GetOverlayTransformAbsolute(UInt64, ref ETrackingUniverseOrigin, ref HmdMatrix34_t) Declaration public EVROverlayError GetOverlayTransformAbsolute(ulong ulOverlayHandle, ref ETrackingUniverseOrigin peTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform) Parameters Type Name Description UInt64 ulOverlayHandle ETrackingUniverseOrigin peTrackingOrigin HmdMatrix34_t pmatTrackingOriginToOverlayTransform Returns Type Description EVROverlayError GetOverlayTransformOverlayRelative(UInt64, ref UInt64, ref HmdMatrix34_t) Declaration public EVROverlayError GetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ref ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform) Parameters Type Name Description UInt64 ulOverlayHandle UInt64 ulOverlayHandleParent HmdMatrix34_t pmatParentOverlayToOverlayTransform Returns Type Description EVROverlayError GetOverlayTransformTrackedDeviceComponent(UInt64, ref UInt32, StringBuilder, UInt32) Declaration public EVROverlayError GetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, ref uint punDeviceIndex, StringBuilder pchComponentName, uint unComponentNameSize) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 punDeviceIndex StringBuilder pchComponentName UInt32 unComponentNameSize Returns Type Description EVROverlayError GetOverlayTransformTrackedDeviceRelative(UInt64, ref UInt32, ref HmdMatrix34_t) Declaration public EVROverlayError GetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, ref uint punTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 punTrackedDevice HmdMatrix34_t pmatTrackedDeviceToOverlayTransform Returns Type Description EVROverlayError GetOverlayTransformType(UInt64, ref VROverlayTransformType) Declaration public EVROverlayError GetOverlayTransformType(ulong ulOverlayHandle, ref VROverlayTransformType peTransformType) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayTransformType peTransformType Returns Type Description EVROverlayError GetOverlayWidthInMeters(UInt64, ref Single) Declaration public EVROverlayError GetOverlayWidthInMeters(ulong ulOverlayHandle, ref float pfWidthInMeters) Parameters Type Name Description UInt64 ulOverlayHandle Single pfWidthInMeters Returns Type Description EVROverlayError GetPrimaryDashboardDevice() Declaration public uint GetPrimaryDashboardDevice() Returns Type Description UInt32 GetTransformForOverlayCoordinates(UInt64, ETrackingUniverseOrigin, HmdVector2_t, ref HmdMatrix34_t) Declaration public EVROverlayError GetTransformForOverlayCoordinates(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, HmdVector2_t coordinatesInOverlay, ref HmdMatrix34_t pmatTransform) Parameters Type Name Description UInt64 ulOverlayHandle ETrackingUniverseOrigin eTrackingOrigin HmdVector2_t coordinatesInOverlay HmdMatrix34_t pmatTransform Returns Type Description EVROverlayError HideKeyboard() Declaration public void HideKeyboard() HideOverlay(UInt64) Declaration public EVROverlayError HideOverlay(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description EVROverlayError IsActiveDashboardOverlay(UInt64) Declaration public bool IsActiveDashboardOverlay(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description Boolean IsDashboardVisible() Declaration public bool IsDashboardVisible() Returns Type Description Boolean IsHoverTargetOverlay(UInt64) Declaration public bool IsHoverTargetOverlay(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description Boolean IsOverlayVisible(UInt64) Declaration public bool IsOverlayVisible(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description Boolean MoveGamepadFocusToNeighbor(EOverlayDirection, UInt64) Declaration public EVROverlayError MoveGamepadFocusToNeighbor(EOverlayDirection eDirection, ulong ulFrom) Parameters Type Name Description EOverlayDirection eDirection UInt64 ulFrom Returns Type Description EVROverlayError PollNextOverlayEvent(UInt64, ref VREvent_t, UInt32) Declaration public bool PollNextOverlayEvent(ulong ulOverlayHandle, ref VREvent_t pEvent, uint uncbVREvent) Parameters Type Name Description UInt64 ulOverlayHandle VREvent_t pEvent UInt32 uncbVREvent Returns Type Description Boolean ReleaseNativeOverlayHandle(UInt64, IntPtr) Declaration public EVROverlayError ReleaseNativeOverlayHandle(ulong ulOverlayHandle, IntPtr pNativeTextureHandle) Parameters Type Name Description UInt64 ulOverlayHandle IntPtr pNativeTextureHandle Returns Type Description EVROverlayError SetDashboardOverlaySceneProcess(UInt64, UInt32) Declaration public EVROverlayError SetDashboardOverlaySceneProcess(ulong ulOverlayHandle, uint unProcessId) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 unProcessId Returns Type Description EVROverlayError SetGamepadFocusOverlay(UInt64) Declaration public EVROverlayError SetGamepadFocusOverlay(ulong ulNewFocusOverlay) Parameters Type Name Description UInt64 ulNewFocusOverlay Returns Type Description EVROverlayError SetHighQualityOverlay(UInt64) Declaration public EVROverlayError SetHighQualityOverlay(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description EVROverlayError SetKeyboardPositionForOverlay(UInt64, HmdRect2_t) Declaration public void SetKeyboardPositionForOverlay(ulong ulOverlayHandle, HmdRect2_t avoidRect) Parameters Type Name Description UInt64 ulOverlayHandle HmdRect2_t avoidRect SetKeyboardTransformAbsolute(ETrackingUniverseOrigin, ref HmdMatrix34_t) Declaration public void SetKeyboardTransformAbsolute(ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToKeyboardTransform) Parameters Type Name Description ETrackingUniverseOrigin eTrackingOrigin HmdMatrix34_t pmatTrackingOriginToKeyboardTransform SetOverlayAlpha(UInt64, Single) Declaration public EVROverlayError SetOverlayAlpha(ulong ulOverlayHandle, float fAlpha) Parameters Type Name Description UInt64 ulOverlayHandle Single fAlpha Returns Type Description EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(UInt64, Single, Single) Declaration public EVROverlayError SetOverlayAutoCurveDistanceRangeInMeters(ulong ulOverlayHandle, float fMinDistanceInMeters, float fMaxDistanceInMeters) Parameters Type Name Description UInt64 ulOverlayHandle Single fMinDistanceInMeters Single fMaxDistanceInMeters Returns Type Description EVROverlayError SetOverlayColor(UInt64, Single, Single, Single) Declaration public EVROverlayError SetOverlayColor(ulong ulOverlayHandle, float fRed, float fGreen, float fBlue) Parameters Type Name Description UInt64 ulOverlayHandle Single fRed Single fGreen Single fBlue Returns Type Description EVROverlayError SetOverlayDualAnalogTransform(UInt64, EDualAnalogWhich, ref HmdVector2_t, Single) Declaration public EVROverlayError SetOverlayDualAnalogTransform(ulong ulOverlay, EDualAnalogWhich eWhich, ref HmdVector2_t pvCenter, float fRadius) Parameters Type Name Description UInt64 ulOverlay EDualAnalogWhich eWhich HmdVector2_t pvCenter Single fRadius Returns Type Description EVROverlayError SetOverlayFlag(UInt64, VROverlayFlags, Boolean) Declaration public EVROverlayError SetOverlayFlag(ulong ulOverlayHandle, VROverlayFlags eOverlayFlag, bool bEnabled) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayFlags eOverlayFlag Boolean bEnabled Returns Type Description EVROverlayError SetOverlayFromFile(UInt64, String) Declaration public EVROverlayError SetOverlayFromFile(ulong ulOverlayHandle, string pchFilePath) Parameters Type Name Description UInt64 ulOverlayHandle String pchFilePath Returns Type Description EVROverlayError SetOverlayInputMethod(UInt64, VROverlayInputMethod) Declaration public EVROverlayError SetOverlayInputMethod(ulong ulOverlayHandle, VROverlayInputMethod eInputMethod) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayInputMethod eInputMethod Returns Type Description EVROverlayError SetOverlayIntersectionMask(UInt64, ref VROverlayIntersectionMaskPrimitive_t, UInt32, UInt32) Declaration public EVROverlayError SetOverlayIntersectionMask(ulong ulOverlayHandle, ref VROverlayIntersectionMaskPrimitive_t pMaskPrimitives, uint unNumMaskPrimitives, uint unPrimitiveSize) Parameters Type Name Description UInt64 ulOverlayHandle VROverlayIntersectionMaskPrimitive_t pMaskPrimitives UInt32 unNumMaskPrimitives UInt32 unPrimitiveSize Returns Type Description EVROverlayError SetOverlayMouseScale(UInt64, ref HmdVector2_t) Declaration public EVROverlayError SetOverlayMouseScale(ulong ulOverlayHandle, ref HmdVector2_t pvecMouseScale) Parameters Type Name Description UInt64 ulOverlayHandle HmdVector2_t pvecMouseScale Returns Type Description EVROverlayError SetOverlayName(UInt64, String) Declaration public EVROverlayError SetOverlayName(ulong ulOverlayHandle, string pchName) Parameters Type Name Description UInt64 ulOverlayHandle String pchName Returns Type Description EVROverlayError SetOverlayNeighbor(EOverlayDirection, UInt64, UInt64) Declaration public EVROverlayError SetOverlayNeighbor(EOverlayDirection eDirection, ulong ulFrom, ulong ulTo) Parameters Type Name Description EOverlayDirection eDirection UInt64 ulFrom UInt64 ulTo Returns Type Description EVROverlayError SetOverlayRaw(UInt64, IntPtr, UInt32, UInt32, UInt32) Declaration public EVROverlayError SetOverlayRaw(ulong ulOverlayHandle, IntPtr pvBuffer, uint unWidth, uint unHeight, uint unDepth) Parameters Type Name Description UInt64 ulOverlayHandle IntPtr pvBuffer UInt32 unWidth UInt32 unHeight UInt32 unDepth Returns Type Description EVROverlayError SetOverlayRenderingPid(UInt64, UInt32) Declaration public EVROverlayError SetOverlayRenderingPid(ulong ulOverlayHandle, uint unPID) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 unPID Returns Type Description EVROverlayError SetOverlayRenderModel(UInt64, String, ref HmdColor_t) Declaration public EVROverlayError SetOverlayRenderModel(ulong ulOverlayHandle, string pchRenderModel, ref HmdColor_t pColor) Parameters Type Name Description UInt64 ulOverlayHandle String pchRenderModel HmdColor_t pColor Returns Type Description EVROverlayError SetOverlaySortOrder(UInt64, UInt32) Declaration public EVROverlayError SetOverlaySortOrder(ulong ulOverlayHandle, uint unSortOrder) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 unSortOrder Returns Type Description EVROverlayError SetOverlayTexelAspect(UInt64, Single) Declaration public EVROverlayError SetOverlayTexelAspect(ulong ulOverlayHandle, float fTexelAspect) Parameters Type Name Description UInt64 ulOverlayHandle Single fTexelAspect Returns Type Description EVROverlayError SetOverlayTexture(UInt64, ref Texture_t) Declaration public EVROverlayError SetOverlayTexture(ulong ulOverlayHandle, ref Texture_t pTexture) Parameters Type Name Description UInt64 ulOverlayHandle Texture_t pTexture Returns Type Description EVROverlayError SetOverlayTextureBounds(UInt64, ref VRTextureBounds_t) Declaration public EVROverlayError SetOverlayTextureBounds(ulong ulOverlayHandle, ref VRTextureBounds_t pOverlayTextureBounds) Parameters Type Name Description UInt64 ulOverlayHandle VRTextureBounds_t pOverlayTextureBounds Returns Type Description EVROverlayError SetOverlayTextureColorSpace(UInt64, EColorSpace) Declaration public EVROverlayError SetOverlayTextureColorSpace(ulong ulOverlayHandle, EColorSpace eTextureColorSpace) Parameters Type Name Description UInt64 ulOverlayHandle EColorSpace eTextureColorSpace Returns Type Description EVROverlayError SetOverlayTransformAbsolute(UInt64, ETrackingUniverseOrigin, ref HmdMatrix34_t) Declaration public EVROverlayError SetOverlayTransformAbsolute(ulong ulOverlayHandle, ETrackingUniverseOrigin eTrackingOrigin, ref HmdMatrix34_t pmatTrackingOriginToOverlayTransform) Parameters Type Name Description UInt64 ulOverlayHandle ETrackingUniverseOrigin eTrackingOrigin HmdMatrix34_t pmatTrackingOriginToOverlayTransform Returns Type Description EVROverlayError SetOverlayTransformOverlayRelative(UInt64, UInt64, ref HmdMatrix34_t) Declaration public EVROverlayError SetOverlayTransformOverlayRelative(ulong ulOverlayHandle, ulong ulOverlayHandleParent, ref HmdMatrix34_t pmatParentOverlayToOverlayTransform) Parameters Type Name Description UInt64 ulOverlayHandle UInt64 ulOverlayHandleParent HmdMatrix34_t pmatParentOverlayToOverlayTransform Returns Type Description EVROverlayError SetOverlayTransformTrackedDeviceComponent(UInt64, UInt32, String) Declaration public EVROverlayError SetOverlayTransformTrackedDeviceComponent(ulong ulOverlayHandle, uint unDeviceIndex, string pchComponentName) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 unDeviceIndex String pchComponentName Returns Type Description EVROverlayError SetOverlayTransformTrackedDeviceRelative(UInt64, UInt32, ref HmdMatrix34_t) Declaration public EVROverlayError SetOverlayTransformTrackedDeviceRelative(ulong ulOverlayHandle, uint unTrackedDevice, ref HmdMatrix34_t pmatTrackedDeviceToOverlayTransform) Parameters Type Name Description UInt64 ulOverlayHandle UInt32 unTrackedDevice HmdMatrix34_t pmatTrackedDeviceToOverlayTransform Returns Type Description EVROverlayError SetOverlayWidthInMeters(UInt64, Single) Declaration public EVROverlayError SetOverlayWidthInMeters(ulong ulOverlayHandle, float fWidthInMeters) Parameters Type Name Description UInt64 ulOverlayHandle Single fWidthInMeters Returns Type Description EVROverlayError ShowDashboard(String) Declaration public void ShowDashboard(string pchOverlayToShow) Parameters Type Name Description String pchOverlayToShow ShowKeyboard(Int32, Int32, String, UInt32, String, Boolean, UInt64) Declaration public EVROverlayError ShowKeyboard(int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue) Parameters Type Name Description Int32 eInputMode Int32 eLineInputMode String pchDescription UInt32 unCharMax String pchExistingText Boolean bUseMinimalMode UInt64 uUserValue Returns Type Description EVROverlayError ShowKeyboardForOverlay(UInt64, Int32, Int32, String, UInt32, String, Boolean, UInt64) Declaration public EVROverlayError ShowKeyboardForOverlay(ulong ulOverlayHandle, int eInputMode, int eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText, bool bUseMinimalMode, ulong uUserValue) Parameters Type Name Description UInt64 ulOverlayHandle Int32 eInputMode Int32 eLineInputMode String pchDescription UInt32 unCharMax String pchExistingText Boolean bUseMinimalMode UInt64 uUserValue Returns Type Description EVROverlayError ShowMessageOverlay(String, String, String, String, String, String) Declaration public VRMessageOverlayResponse ShowMessageOverlay(string pchText, string pchCaption, string pchButton0Text, string pchButton1Text, string pchButton2Text, string pchButton3Text) Parameters Type Name Description String pchText String pchCaption String pchButton0Text String pchButton1Text String pchButton2Text String pchButton3Text Returns Type Description VRMessageOverlayResponse ShowOverlay(UInt64) Declaration public EVROverlayError ShowOverlay(ulong ulOverlayHandle) Parameters Type Name Description UInt64 ulOverlayHandle Returns Type Description EVROverlayError"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRRenderModels.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRRenderModels.html",
    "title": "Class CVRRenderModels | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRRenderModels Inheritance Object CVRRenderModels Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRRenderModels Methods FreeRenderModel(IntPtr) Declaration public void FreeRenderModel(IntPtr pRenderModel) Parameters Type Name Description IntPtr pRenderModel FreeTexture(IntPtr) Declaration public void FreeTexture(IntPtr pTexture) Parameters Type Name Description IntPtr pTexture FreeTextureD3D11(IntPtr) Declaration public void FreeTextureD3D11(IntPtr pD3D11Texture2D) Parameters Type Name Description IntPtr pD3D11Texture2D GetComponentButtonMask(String, String) Declaration public ulong GetComponentButtonMask(string pchRenderModelName, string pchComponentName) Parameters Type Name Description String pchRenderModelName String pchComponentName Returns Type Description UInt64 GetComponentCount(String) Declaration public uint GetComponentCount(string pchRenderModelName) Parameters Type Name Description String pchRenderModelName Returns Type Description UInt32 GetComponentName(String, UInt32, StringBuilder, UInt32) Declaration public uint GetComponentName(string pchRenderModelName, uint unComponentIndex, StringBuilder pchComponentName, uint unComponentNameLen) Parameters Type Name Description String pchRenderModelName UInt32 unComponentIndex StringBuilder pchComponentName UInt32 unComponentNameLen Returns Type Description UInt32 GetComponentRenderModelName(String, String, StringBuilder, UInt32) Declaration public uint GetComponentRenderModelName(string pchRenderModelName, string pchComponentName, StringBuilder pchComponentRenderModelName, uint unComponentRenderModelNameLen) Parameters Type Name Description String pchRenderModelName String pchComponentName StringBuilder pchComponentRenderModelName UInt32 unComponentRenderModelNameLen Returns Type Description UInt32 GetComponentState(String, String, ref VRControllerState_t, ref RenderModel_ControllerMode_State_t, ref RenderModel_ComponentState_t) Declaration public bool GetComponentState(string pchRenderModelName, string pchComponentName, ref VRControllerState_t pControllerState, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState) Parameters Type Name Description String pchRenderModelName String pchComponentName VRControllerState_t pControllerState RenderModel_ControllerMode_State_t pState RenderModel_ComponentState_t pComponentState Returns Type Description Boolean GetComponentStateForDevicePath(String, String, UInt64, ref RenderModel_ControllerMode_State_t, ref RenderModel_ComponentState_t) Declaration public bool GetComponentStateForDevicePath(string pchRenderModelName, string pchComponentName, ulong devicePath, ref RenderModel_ControllerMode_State_t pState, ref RenderModel_ComponentState_t pComponentState) Parameters Type Name Description String pchRenderModelName String pchComponentName UInt64 devicePath RenderModel_ControllerMode_State_t pState RenderModel_ComponentState_t pComponentState Returns Type Description Boolean GetRenderModelCount() Declaration public uint GetRenderModelCount() Returns Type Description UInt32 GetRenderModelErrorNameFromEnum(EVRRenderModelError) Declaration public string GetRenderModelErrorNameFromEnum(EVRRenderModelError error) Parameters Type Name Description EVRRenderModelError error Returns Type Description String GetRenderModelName(UInt32, StringBuilder, UInt32) Declaration public uint GetRenderModelName(uint unRenderModelIndex, StringBuilder pchRenderModelName, uint unRenderModelNameLen) Parameters Type Name Description UInt32 unRenderModelIndex StringBuilder pchRenderModelName UInt32 unRenderModelNameLen Returns Type Description UInt32 GetRenderModelOriginalPath(String, StringBuilder, UInt32, ref EVRRenderModelError) Declaration public uint GetRenderModelOriginalPath(string pchRenderModelName, StringBuilder pchOriginalPath, uint unOriginalPathLen, ref EVRRenderModelError peError) Parameters Type Name Description String pchRenderModelName StringBuilder pchOriginalPath UInt32 unOriginalPathLen EVRRenderModelError peError Returns Type Description UInt32 GetRenderModelThumbnailURL(String, StringBuilder, UInt32, ref EVRRenderModelError) Declaration public uint GetRenderModelThumbnailURL(string pchRenderModelName, StringBuilder pchThumbnailURL, uint unThumbnailURLLen, ref EVRRenderModelError peError) Parameters Type Name Description String pchRenderModelName StringBuilder pchThumbnailURL UInt32 unThumbnailURLLen EVRRenderModelError peError Returns Type Description UInt32 LoadIntoTextureD3D11_Async(Int32, IntPtr) Declaration public EVRRenderModelError LoadIntoTextureD3D11_Async(int textureId, IntPtr pDstTexture) Parameters Type Name Description Int32 textureId IntPtr pDstTexture Returns Type Description EVRRenderModelError LoadRenderModel_Async(String, ref IntPtr) Declaration public EVRRenderModelError LoadRenderModel_Async(string pchRenderModelName, ref IntPtr ppRenderModel) Parameters Type Name Description String pchRenderModelName IntPtr ppRenderModel Returns Type Description EVRRenderModelError LoadTexture_Async(Int32, ref IntPtr) Declaration public EVRRenderModelError LoadTexture_Async(int textureId, ref IntPtr ppTexture) Parameters Type Name Description Int32 textureId IntPtr ppTexture Returns Type Description EVRRenderModelError LoadTextureD3D11_Async(Int32, IntPtr, ref IntPtr) Declaration public EVRRenderModelError LoadTextureD3D11_Async(int textureId, IntPtr pD3D11Device, ref IntPtr ppD3D11Texture2D) Parameters Type Name Description Int32 textureId IntPtr pD3D11Device IntPtr ppD3D11Texture2D Returns Type Description EVRRenderModelError RenderModelHasComponent(String, String) Declaration public bool RenderModelHasComponent(string pchRenderModelName, string pchComponentName) Parameters Type Name Description String pchRenderModelName String pchComponentName Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Headset.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Headset.html",
    "title": "Struct Headset | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Headset The headset definition defines the headset as defined by the SDK / Unity. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct Headset Properties HeadsetSDKType The designated hand that the controller is managing, as defined by the SDK / Unity. Declaration public SDKType HeadsetSDKType { get; set; } Property Value Type Description SDKType Id The ID assigned to the Headset Declaration public string Id { get; set; } Property Value Type Description String IsOpaque Indicates whether or not the headset display is opaque. As defined by the SDK / Unity. Declaration public bool IsOpaque { get; set; } Property Value Type Description Boolean IsPositionAvailable Indicates whether or not the headset is currently providing position data. Declaration public bool IsPositionAvailable { get; set; } Property Value Type Description Boolean IsRotationAvailable Indicates whether or not the headset is currently providing rotation data. Declaration public bool IsRotationAvailable { get; set; } Property Value Type Description Boolean Position Outputs the current position of the headset, as defined by the SDK / Unity. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Rotation Outputs the current rotation of the headset, as defined by the SDK / Unity. Declaration public Quaternion Rotation { get; set; } Property Value Type Description Quaternion TrackingState Outputs the current state of the headset, whether it is tracked or not. As defined by the SDK / Unity. Declaration public TrackingState TrackingState { get; set; } Property Value Type Description TrackingState"
  },
  "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor Classes DisplayInputResultInspector Custom profile inspector for the DisplayInputResult sample"
  },
  "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tools.Runtime | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tools.Runtime Classes DisplayInputResult Displays a specified axis / button value on a specific TextMesh. Will display all active axes and buttons if the input type is None."
  },
  "api/Microsoft.MixedReality.Toolkit.TrackingState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.TrackingState.html",
    "title": "Enum TrackingState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TrackingState The Tracking State defines how a device is currently being tracked. This enables developers to be able to handle non-tracked situations and react accordingly. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum TrackingState Remarks Tracking is being defined as receiving sensor (positional and/or rotational) data from the device. Fields Name Description NotApplicable The device does not support tracking (ex: a traditional game controller). NotTracked The device is not tracked. Tracked The device is tracked (positionally and/or rotationally)."
  },
  "api/Microsoft.MixedReality.Toolkit.TransformExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.TransformExtensions.html",
    "title": "Class TransformExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class TransformExtensions Extension methods for Unity's Transform class Inheritance Object TransformExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class TransformExtensions Methods EnumerateAncestors(Transform, Boolean) Enumerates the ancestors of the specified transform. Declaration public static IEnumerable<Transform> EnumerateAncestors(this Transform startTransform, bool includeSelf) Parameters Type Name Description Transform startTransform Transform for which ancestors must be returned. Boolean includeSelf Indicates whether the specified transform should be included. Returns Type Description IEnumerable < Transform > An enumeration of all ancestor transforms of the specified start transform. EnumerateHierarchy(Transform) Enumerates all children in the hierarchy starting at the root object. Declaration public static IEnumerable<Transform> EnumerateHierarchy(this Transform root) Parameters Type Name Description Transform root Start point of the traversion set Returns Type Description IEnumerable < Transform > EnumerateHierarchy(Transform, ICollection<Transform>) Enumerates all children in the hierarchy starting at the root object except for the branches in ignore. Declaration public static IEnumerable<Transform> EnumerateHierarchy(this Transform root, ICollection<Transform> ignore) Parameters Type Name Description Transform root Start point of the traversion set ICollection < Transform > ignore Transforms and all its children to be ignored Returns Type Description IEnumerable < Transform > FindAncestorComponent<T>(Transform, Boolean) Find the first component of type T in the ancestors of the specified transform. Declaration public static T FindAncestorComponent<T>(this Transform startTransform, bool includeSelf = true) where T : Component Parameters Type Name Description Transform startTransform Transform for which ancestors must be considered. Boolean includeSelf Indicates whether the specified transform should be included. Returns Type Description T The component of type T . Null if it none was found. Type Parameters Name Description T Type of component to find. GetChildRecursive(Transform, String) Walk hierarchy looking for named transform Declaration public static Transform GetChildRecursive(Transform t, string name) Parameters Type Name Description Transform t root transform to start searching from String name name to look for Returns Type Description Transform returns found transform or null if none found GetColliderBounds(Transform) Calculates the bounds of all the colliders attached to this GameObject and all it's children Declaration public static Bounds GetColliderBounds(this Transform transform) Parameters Type Name Description Transform transform Transform of root GameObject the colliders are attached to Returns Type Description Bounds The total bounds of all colliders attached to this GameObject. If no colliders attached, returns a bounds of center and extents 0 GetDepth(Transform) Gets the hierarchical depth of the Transform from its root. Returns -1 if the transform is the root. Declaration public static int GetDepth(this Transform t) Parameters Type Name Description Transform t The transform to get the depth for. Returns Type Description Int32 GetFullPath(Transform, String, String) An extension method that will get you the full path to an object. Declaration public static string GetFullPath(this Transform transform, string delimiter = \".\", string prefix = \"/\") Parameters Type Name Description Transform transform The transform you wish a full path to. String delimiter The delimiter with which each object is delimited in the string. String prefix Prefix with which the full path to the object should start. Returns Type Description String A delimited string that is the full path to the game object in the hierarchy. InverseTransformSize(Transform, Vector3) Transforms the size from world to local. Declaration public static Vector3 InverseTransformSize(this Transform transform, Vector3 worldSize) Parameters Type Name Description Transform transform The transform. Vector3 worldSize The world size Returns Type Description Vector3 World size. IsParentOrChildOf(Transform, Transform) Checks if the provided transforms are child/parent related. Declaration public static bool IsParentOrChildOf(this Transform transform1, Transform transform2) Parameters Type Name Description Transform transform1 Transform transform2 Returns Type Description Boolean True if either transform is the parent of the other or if they are the same TransformSize(Transform, Vector3) Transforms the size from local to world. Declaration public static Vector3 TransformSize(this Transform transform, Vector3 localSize) Parameters Type Name Description Transform transform The transform. Vector3 localSize The local size. Returns Type Description Vector3 World size. TryGetDepth(Transform, Transform, ref Int32) Tries to get the hierarchical depth of the Transform from the specified parent. This method is recursive. Declaration public static bool TryGetDepth(Transform target, Transform parent, ref int depth) Parameters Type Name Description Transform target The transform to get the depth for Transform parent The starting transform to look for the target transform in Int32 depth The depth of the target transform Returns Type Description Boolean 'true' if the depth could be retrieved, or 'false' because the transform is a root transform."
  },
  "api/Microsoft.MixedReality.Toolkit.TypeExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.TypeExtensions.html",
    "title": "Class TypeExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class TypeExtensions Inheritance Object TypeExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class TypeExtensions Methods GetAllSubClassesOf(Type, Assembly[]) Returns a list of types for all classes that extend from the current type and are not abstract Declaration public static List<Type> GetAllSubClassesOf(this Type rootType, Assembly[] searchAssemblies = null) Parameters Type Name Description Type rootType The class type from which to search for inherited classes Assembly [] searchAssemblies List of assemblies to search through for types. If null, default is to grab all assemblies in current app domain Returns Type Description List < Type > Null if rootType is not a class, otherwise returns list of types for sub-classes of rootType"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.AppBar.AppBarDisplayTypeEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.AppBar.AppBarDisplayTypeEnum.html",
    "title": "Enum AppBar.AppBarDisplayTypeEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AppBar.AppBarDisplayTypeEnum Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum AppBarDisplayTypeEnum Fields Name Description Manipulation Standalone"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.AppBar.AppBarStateEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.AppBar.AppBarStateEnum.html",
    "title": "Enum AppBar.AppBarStateEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AppBar.AppBarStateEnum Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum AppBarStateEnum Fields Name Description Default Hidden Manipulation"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.AppBar.ButtonTypeEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.AppBar.ButtonTypeEnum.html",
    "title": "Enum AppBar.ButtonTypeEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AppBar.ButtonTypeEnum Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ButtonTypeEnum Fields Name Description Adjust Custom Done Hide Remove Show"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.AppBar.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.AppBar.html",
    "title": "Class AppBar | Mixed Reality Toolkit Documentation",
    "keywords": "Class AppBar Logic for the App Bar. Generates buttons, manages states. Inheritance Object AppBar Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class AppBar : MonoBehaviour Properties DisplayType Declaration public AppBar.AppBarDisplayTypeEnum DisplayType { get; set; } Property Value Type Description AppBar.AppBarDisplayTypeEnum HoverOffsetYScale Where to display the app bar on the y axis This can be set to negative values to force the app bar to appear below the object Declaration public float HoverOffsetYScale { get; set; } Property Value Type Description Single HoverOffsetZ Pushes the app bar away from the object Declaration public float HoverOffsetZ { get; set; } Property Value Type Description Single State Declaration public AppBar.AppBarStateEnum State { get; set; } Property Value Type Description AppBar.AppBarStateEnum UseAdjust Declaration public bool UseAdjust { get; set; } Property Value Type Description Boolean UseHide Declaration public bool UseHide { get; set; } Property Value Type Description Boolean UseRemove Declaration public bool UseRemove { get; set; } Property Value Type Description Boolean UseTightFollow Uses an alternate follow style that works better for very oblong objects Declaration public bool UseTightFollow { get; set; } Property Value Type Description Boolean Methods GetButtonTextAndIconFromType(AppBar.ButtonTypeEnum, out String, out Texture, out Int32) Declaration public void GetButtonTextAndIconFromType(AppBar.ButtonTypeEnum type, out string buttonText, out Texture buttonIcon, out int displayOrder) Parameters Type Name Description AppBar.ButtonTypeEnum type String buttonText Texture buttonIcon Int32 displayOrder OnButtonPressed(AppBarButton) Declaration public void OnButtonPressed(AppBarButton button) Parameters Type Name Description AppBarButton button OnClickRemove() Declaration protected virtual void OnClickRemove() Reset() Declaration public void Reset()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.AppBarButton.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.AppBarButton.html",
    "title": "Class AppBarButton | Mixed Reality Toolkit Documentation",
    "keywords": "Class AppBarButton Button class used by AppBar. Inheritance Object AppBarButton Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class AppBarButton : MonoBehaviour Properties ButtonType Declaration public AppBar.ButtonTypeEnum ButtonType { get; } Property Value Type Description AppBar.ButtonTypeEnum DisplayOrder Declaration public int DisplayOrder { get; } Property Value Type Description Int32 Visible Declaration public bool Visible { get; } Property Value Type Description Boolean Methods InitializeButtonContent(AppBar) Declaration public void InitializeButtonContent(AppBar parentToolBar) Parameters Type Name Description AppBar parentToolBar SetTargetPosition(Vector3) Declaration public void SetTargetPosition(Vector3 targetPosition) Parameters Type Name Description Vector3 targetPosition SetVisible(Boolean) Declaration public void SetVisible(bool visible) Parameters Type Name Description Boolean visible"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BaseStateModel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BaseStateModel.html",
    "title": "Class BaseStateModel | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseStateModel Base class for defining state model logic to use in conjunction with the State class Allows for retrieving current state mode and comparing states Inheritance Object BaseStateModel InteractableStates Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public abstract class BaseStateModel Constructors BaseStateModel() Declaration public BaseStateModel() BaseStateModel(State) Declaration public BaseStateModel(State defaultState) Parameters Type Name Description State defaultState Fields allStates Declaration protected State[] allStates Field Value Type Description State [] currentState Declaration protected State currentState Field Value Type Description State stateList Declaration protected List<State> stateList Field Value Type Description List < State > Methods CompareStates() Compare all state values, set appropriate current State and return that current State Declaration public abstract State CompareStates() Returns Type Description State Current State after comparing State values CurrentState() Return the current State object Declaration public virtual State CurrentState() Returns Type Description State Return the current State object GetBit() Declaration protected int GetBit() Returns Type Description Int32 GetState(Int32) Get the State object with the given index Declaration public State GetState(int index) Parameters Type Name Description Int32 index index of state to access Returns Type Description State State Object at given index GetStates() Get list of available States for this State Model Declaration public abstract State[] GetStates() Returns Type Description State [] Array of available State objects GetStateValue(Int32) Get the value of the state with the given index Declaration public int GetStateValue(int index) Parameters Type Name Description Int32 index index of state to access Returns Type Description Int32 value of the state ImportStates(List<State>) Import the list of states into this state model Declaration public void ImportStates(List<State> states) Parameters Type Name Description List < State > states list of state objects to import SetCurrentState(State) Set the current state to the provided State object Declaration public virtual void SetCurrentState(State state) Parameters Type Name Description State state State object to set SetStateListValue(Int32, Int32) Declaration protected virtual void SetStateListValue(int index, int value) Parameters Type Name Description Int32 index Int32 value SetStateOff(Int32) Set the value of the state with given index to off (0) Declaration public virtual void SetStateOff(int index) Parameters Type Name Description Int32 index index of state to access SetStateOn(Int32) Set the value of the state with given index to on (1) Declaration public virtual void SetStateOn(int index) Parameters Type Name Description Int32 index index of state to access SetStateValue(Int32, Int32) Set value of state with given index to the provided value Declaration public virtual void SetStateValue(int index, int value) Parameters Type Name Description Int32 index index of state to access Int32 value value to set for state"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.Billboard.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.Billboard.html",
    "title": "Class Billboard | Mixed Reality Toolkit Documentation",
    "keywords": "Class Billboard The Billboard class implements the behaviors needed to keep a GameObject oriented towards the user. Inheritance Object Billboard Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class Billboard : MonoBehaviour Properties PivotAxis The axis about which the object will rotate. Declaration public PivotAxis PivotAxis { get; set; } Property Value Type Description PivotAxis TargetTransform The target we will orient to. If no target is specified, the main camera will be used. Declaration public Transform TargetTransform { get; set; } Property Value Type Description Transform"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableScaleTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableScaleTheme.html",
    "title": "Class InteractableScaleTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableScaleTheme Theme Engine to control initialized GameObject's scale based on state changes Inheritance Object InteractableThemeBase InteractableScaleTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableScaleTheme : InteractableThemeBase Constructors InteractableScaleTheme() Declaration public InteractableScaleTheme() Fields hostTransform Declaration protected Transform hostTransform Field Value Type Description Transform originalScale Declaration protected Vector3 originalScale Field Value Type Description Vector3 Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableShaderTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableShaderTheme.html",
    "title": "Class InteractableShaderTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableShaderTheme Theme Engine to control the value of a particular Shader Property based on state changes Targets the first Renderer component on the initialized GameObject and use MaterialPropertyBlocks Inheritance Object InteractableThemeBase InteractableShaderTheme InteractableColorChildrenTheme InteractableColorTheme InteractableTextureTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableShaderTheme : InteractableThemeBase Constructors InteractableShaderTheme() Declaration public InteractableShaderTheme() Fields DefaultShaderProperty Declaration protected const string DefaultShaderProperty = \"_Color\" Field Value Type Description String propertyBlock Declaration protected MaterialPropertyBlock propertyBlock Field Value Type Description MaterialPropertyBlock renderer Declaration protected Renderer renderer Field Value Type Description Renderer shaderProperties Declaration protected List<ThemeStateProperty> shaderProperties Field Value Type Description List < ThemeStateProperty > Properties AreShadersSupported Indicates whether the current Theme engine implementation supports shader targeting on state properties Declaration public override bool AreShadersSupported { get; } Property Value Type Description Boolean Overrides InteractableThemeBase.AreShadersSupported Methods GetColor(GameObject, Int32) Declaration public static Color GetColor(GameObject host, int propId) Parameters Type Name Description GameObject host Int32 propId Returns Type Description Color GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetFloat(GameObject, Int32) Declaration public static float GetFloat(GameObject host, int propId) Parameters Type Name Description GameObject host Int32 propId Returns Type Description Single GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition definition) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition definition Configuration information to initialize Theme Engine Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableStates.InteractableStateEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableStates.InteractableStateEnum.html",
    "title": "Enum InteractableStates.InteractableStateEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InteractableStates.InteractableStateEnum List of valid state types for Interactable Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum InteractableStateEnum Fields Name Description Collision There is a collision Custom Custom placeholder for anything Default Default state, nothing happening Disabled Button in a disabled state Focus Looking at object Gesture Gesture is happening, Move GestureMax Gesture has reached it's max movement Grab Interactable was grabbed, near interaction grabbable Interactive Not looking at it and finger is up Observation Not looking at it and finger down ObservationTargeted Looking at button finger down PhysicalTouch Interactable is currently physically touched Pressed Looking at object and finger down Targeted Looking at and finger up Toggled Button is toggled state, on/off Visited Button was clicked already VoiceCommand Voice command happened"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableStates.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableStates.html",
    "title": "Class InteractableStates | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableStates list of Interactable states and basic comparison Inheritance Object BaseStateModel InteractableStates Inherited Members BaseStateModel.currentState BaseStateModel.stateList BaseStateModel.ImportStates(List<State>) BaseStateModel.SetStateOn(Int32) BaseStateModel.SetStateOff(Int32) BaseStateModel.SetStateValue(Int32, Int32) BaseStateModel.SetStateListValue(Int32, Int32) BaseStateModel.GetStateValue(Int32) BaseStateModel.GetState(Int32) BaseStateModel.SetCurrentState(State) BaseStateModel.CurrentState() BaseStateModel.GetBit() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableStates : BaseStateModel Constructors InteractableStates() Declaration public InteractableStates() InteractableStates(State) Declaration public InteractableStates(State defaultState) Parameters Type Name Description State defaultState Fields allStates Declaration protected State[] allStates Field Value Type Description State [] Methods CompareStates() Compare all state values, set appropriate current State and return that current State Declaration public override State CompareStates() Returns Type Description State Current State after comparing State values Overrides BaseStateModel.CompareStates() GetDefaultStates() Returns the default states for InteractableStates. Default states are set on an interactable when it is created and no other list of states is specified. Default States should match \"DefaultStates\" scriptable object in Interactable Declaration public virtual List<State> GetDefaultStates() Returns Type Description List < State > GetState(InteractableStates.InteractableStateEnum) Declaration public State GetState(InteractableStates.InteractableStateEnum state) Parameters Type Name Description InteractableStates.InteractableStateEnum state Returns Type Description State GetStates() Get list of available States for this State Model Declaration public override State[] GetStates() Returns Type Description State [] Array of available State objects Overrides BaseStateModel.GetStates() SetStateOff(InteractableStates.InteractableStateEnum) Declaration public virtual void SetStateOff(InteractableStates.InteractableStateEnum state) Parameters Type Name Description InteractableStates.InteractableStateEnum state SetStateOn(InteractableStates.InteractableStateEnum) Declaration public virtual void SetStateOn(InteractableStates.InteractableStateEnum state) Parameters Type Name Description InteractableStates.InteractableStateEnum state SetStateValue(InteractableStates.InteractableStateEnum, Int32) Declaration public virtual void SetStateValue(InteractableStates.InteractableStateEnum state, int value) Parameters Type Name Description InteractableStates.InteractableStateEnum state Int32 value"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableStringTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableStringTheme.html",
    "title": "Class InteractableStringTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableStringTheme Theme Engine to change the string value on a Text type object based on state changes Finds the first available component searching in order of TextMesh, Text, TextMeshPro, TextMeshProUGUI Inheritance Object InteractableThemeBase InteractableStringTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableStringTheme : InteractableThemeBase Constructors InteractableStringTheme() Declaration public InteractableStringTheme() Properties IsEasingSupported Indicates whether the current Theme engine implementation supports easing between state values Declaration public override bool IsEasingSupported { get; } Property Value Type Description Boolean Overrides InteractableThemeBase.IsEasingSupported Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableTextureTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableTextureTheme.html",
    "title": "Class InteractableTextureTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableTextureTheme Theme Engine to change the texture on a GameObject based on state changes Inheritance Object InteractableThemeBase InteractableShaderTheme InteractableTextureTheme Inherited Members InteractableShaderTheme.AreShadersSupported InteractableShaderTheme.propertyBlock InteractableShaderTheme.shaderProperties InteractableShaderTheme.renderer InteractableShaderTheme.Init(GameObject, ThemeDefinition) InteractableShaderTheme.SetValue(ThemeStateProperty, Int32, Single) InteractableShaderTheme.GetProperty(ThemeStateProperty) InteractableShaderTheme.GetFloat(GameObject, Int32) InteractableShaderTheme.GetColor(GameObject, Int32) InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableTextureTheme : InteractableShaderTheme Constructors InteractableTextureTheme() Declaration public InteractableTextureTheme() Fields DefaultShaderProperty Declaration protected const string DefaultShaderProperty = \"_MainTex\" Field Value Type Description String Properties IsEasingSupported Indicates whether the current Theme engine implementation supports easing between state values Declaration public override bool IsEasingSupported { get; } Property Value Type Description Boolean Overrides InteractableThemeBase.IsEasingSupported Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableShaderTheme.GetDefaultThemeDefinition()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableThemeBase.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableThemeBase.html",
    "title": "Class InteractableThemeBase | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableThemeBase Base abstract class for all Theme Engines. Extend to create custom Theme logic Inheritance Object InteractableThemeBase InteractableActivateTheme InteractableAnimatorTheme InteractableAudioTheme InteractableGrabScaleTheme InteractableMaterialTheme InteractableOffsetTheme InteractableRotationTheme InteractableScaleTheme InteractableShaderTheme InteractableStringTheme Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public abstract class InteractableThemeBase Properties AreShadersSupported Indicates whether the current Theme engine implementation supports shader targeting on state properties Declaration public virtual bool AreShadersSupported { get; } Property Value Type Description Boolean Ease Defines how to ease between values during state changes Declaration public Easing Ease { get; set; } Property Value Type Description Easing Host GameObject initialized with this ThemeEngine and being targeted based on state changes Declaration public GameObject Host { get; set; } Property Value Type Description GameObject IsEasingSupported Indicates whether the current Theme engine implementation supports easing between state values Declaration public virtual bool IsEasingSupported { get; } Property Value Type Description Boolean Loaded True if Theme Engine has been initialized, false otherwise Declaration public bool Loaded { get; protected set; } Property Value Type Description Boolean Name Name of Theme Engine Declaration public string Name { get; protected set; } Property Value Type Description String Properties List of global Theme Engine properties Declaration public List<ThemeProperty> Properties { get; set; } Property Value Type Description List < ThemeProperty > StateProperties List of Properties with values per state Declaration public List<ThemeStateProperty> StateProperties { get; set; } Property Value Type Description List < ThemeStateProperty > Types Types of component this Theme Engine will target on the initialized GameObject or related GameObjects Declaration public Type[] Types { get; protected set; } Property Value Type Description Type [] Methods CreateAndInitTheme(ThemeDefinition, GameObject) Helper method to create and initialize a Theme Engine for given configuration and targeted GameObject Declaration public static InteractableThemeBase CreateAndInitTheme(ThemeDefinition definition, GameObject host = null) Parameters Type Name Description ThemeDefinition definition Theme configuration with type information and properties to initialize ThemeEngine with GameObject host GameObject for Theme Engine to target Returns Type Description InteractableThemeBase Instance of Theme Engine initialized CreateTheme(Type) Helper method to instantiate a Theme Engine of provided type. Type must extend InteractableThemeBase Declaration public static InteractableThemeBase CreateTheme(Type themeType) Parameters Type Name Description Type themeType Type of ThemeEngine to create Returns Type Description InteractableThemeBase Instance of ThemeEngine of given type GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public abstract ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public abstract ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public virtual void Init(GameObject host, ThemeDefinition definition) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition definition Configuration information to initialize Theme Engine LerpFloat(Single, Single, Single) Declaration protected float LerpFloat(float s, float e, float t) Parameters Type Name Description Single s Single e Single t Returns Type Description Single LerpInt(Int32, Int32, Single) Declaration protected int LerpInt(int s, int e, float t) Parameters Type Name Description Int32 s Int32 e Single t Returns Type Description Int32 OnUpdate(Int32, Boolean) Update ThemeEngine for given state based on Theme logic. Check, sets, and possibly eases values based on given state Declaration public virtual void OnUpdate(int state, bool force = false) Parameters Type Name Description Int32 state current state to target Boolean force force update call even if state is not new SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public abstract void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableThemeShaderUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableThemeShaderUtils.html",
    "title": "Class InteractableThemeShaderUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableThemeShaderUtils Collection of shader and material utilities Inheritance Object InteractableThemeShaderUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public static class InteractableThemeShaderUtils Methods GetPropertyBlock(GameObject) Get the MaterialPropertyBlock from a renderer on a gameObject Declaration public static MaterialPropertyBlock GetPropertyBlock(GameObject gameObject) Parameters Type Name Description GameObject gameObject Returns Type Description MaterialPropertyBlock GetValidMaterial(Renderer) Grab the shared material to avoid creating new material instances and breaking batching. Because MaterialPropertyBlocks are used for setting material properties the shared material is used to set the initial state of the MaterialPropertyBlock(s) before mutating state. Declaration public static Material GetValidMaterial(Renderer renderer) Parameters Type Name Description Renderer renderer Returns Type Description Material InitMaterialPropertyBlock(GameObject, List<ThemeStateProperty>) Get a MaterialPropertyBlock and copy the designated properties Declaration public static MaterialPropertyBlock InitMaterialPropertyBlock(GameObject gameObject, List<ThemeStateProperty> props) Parameters Type Name Description GameObject gameObject List < ThemeStateProperty > props Returns Type Description MaterialPropertyBlock"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableToggleCollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableToggleCollection.html",
    "title": "Class InteractableToggleCollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableToggleCollection A way to control a list of radial type buttons or tabs Inheritance Object InteractableToggleCollection Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableToggleCollection : MonoBehaviour Fields OnSelectionEvents Declaration public UnityEvent OnSelectionEvents Field Value Type Description UnityEvent Properties CurrentIndex The current index in the array of interactable toggles Declaration public int CurrentIndex { get; set; } Property Value Type Description Int32 ToggleList Array of Interactables that will be managed by this controller Declaration public Interactable[] ToggleList { get; set; } Property Value Type Description Interactable [] Methods OnSelection(Int32, Boolean) Declaration protected virtual void OnSelection(int index, bool force = false) Parameters Type Name Description Int32 index Boolean force SetSelection(Int32, Boolean, Boolean) Set the selection of a an element in the toggle collection based on index. Index of an element in ToggleList Force selection set The manual trigger of the OnClick event. OnClick event is manually triggered when the CurrentIndex is updated via script or inspector Declaration public void SetSelection(int index, bool force = false, bool fireOnClick = false) Parameters Type Name Description Int32 index Boolean force Boolean fireOnClick"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.IProgressIndicator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.IProgressIndicator.html",
    "title": "Interface IProgressIndicator | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IProgressIndicator Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public interface IProgressIndicator Properties MainTransform The progress indicator's main transform. You can use this to attach follow scripts or solvers to the indicator. Declaration Transform MainTransform { get; } Property Value Type Description Transform Message The message to display during loading. Declaration string Message { set; } Property Value Type Description String Progress Loading progress value from 0 (just started) to 1 (complete) Declaration float Progress { set; } Property Value Type Description Single State Used to determine whether it's appropriate to use this indicator. Declaration ProgressIndicatorState State { get; } Property Value Type Description ProgressIndicatorState Methods CloseAsync() Closes the progress indicator after loading is finished. Method is async to allow for animation to complete. Declaration Task CloseAsync() Returns Type Description Task OpenAsync() Opens the progress indicator before loading begins. Method is async to allow for animation to begin before loading. Declaration Task OpenAsync() Returns Type Description Task"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.IToolTipBackground.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.IToolTipBackground.html",
    "title": "Interface IToolTipBackground | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IToolTipBackground Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public interface IToolTipBackground Properties IsVisible Declaration bool IsVisible { set; } Property Value Type Description Boolean Methods OnContentChange(Vector3, Vector3, Transform) Declaration void OnContentChange(Vector3 localContentSize, Vector3 localContentOffset, Transform contentParentTransform) Parameters Type Name Description Vector3 localContentSize Vector3 localContentOffset Transform contentParentTransform"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.IToolTipHighlight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.IToolTipHighlight.html",
    "title": "Interface IToolTipHighlight | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IToolTipHighlight Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public interface IToolTipHighlight Properties ShowHighlight Declaration bool ShowHighlight { set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.LoaderController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.LoaderController.html",
    "title": "Class LoaderController | Mixed Reality Toolkit Documentation",
    "keywords": "Class LoaderController Controls how the standard indeterminate loader moves and behaves over time. Inheritance Object LoaderController Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class LoaderController : MonoBehaviour Remarks This loader is calculated dynamically based on Sine and Cosine Properties Amplitude Declaration public float Amplitude { get; set; } Property Value Type Description Single DotOffset Declaration public float DotOffset { get; set; } Property Value Type Description Single DotScaleMultipler Declaration public float DotScaleMultipler { get; set; } Property Value Type Description Single DotSetScale Declaration public float DotSetScale { get; set; } Property Value Type Description Single DotSpinMultiplier Declaration public float DotSpinMultiplier { get; set; } Property Value Type Description Single Frequency Declaration public float Frequency { get; set; } Property Value Type Description Single InvertOrbitOffset Declaration public bool InvertOrbitOffset { get; set; } Property Value Type Description Boolean LFOamp Declaration public float LFOamp { get; set; } Property Value Type Description Single LFOcos Declaration public bool LFOcos { get; set; } Property Value Type Description Boolean LFOfreq Declaration public float LFOfreq { get; set; } Property Value Type Description Single LFOsin Declaration public bool LFOsin { get; set; } Property Value Type Description Boolean ReverseOrbit Declaration public bool ReverseOrbit { get; set; } Property Value Type Description Boolean SinCosSplitScale Declaration public bool SinCosSplitScale { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Editor.Search | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Editor.Search Classes MixedRealitySearchInspectorUtility Utility class for drawing search interface. Draws a search field by default. When search is active, draws search results. Also handles the business of storing search configuration and results so searching objects don't have to. MixedRealitySearchUtility Utility for retrieving a Unity object's serialized fields with a configurable search. ProfileSearchResult Struct for pairing profiles with a set of search results Structs FieldSearchResult Struct for storing search results SearchConfig Struct for configuring a search."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.SimpleLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.SimpleLineDataProviderInspector.html",
    "title": "Class SimpleLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimpleLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector SimpleLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class SimpleLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.ControllerFinderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.ControllerFinderInspector.html",
    "title": "Class ControllerFinderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerFinderInspector Inheritance Object ControllerFinderInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers Assembly : cs.temp.dll.dll Syntax public abstract class ControllerFinderInspector : UnityEditor.Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.InBetweenEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.InBetweenEditor.html",
    "title": "Class InBetweenEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class InBetweenEditor Inheritance Object SolverInspector InBetweenEditor Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers Assembly : cs.temp.dll.dll Syntax public class InBetweenEditor : SolverInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides SolverInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SolverInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.SolverHandlerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.SolverHandlerInspector.html",
    "title": "Class SolverHandlerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SolverHandlerInspector Inheritance Object SolverHandlerInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers Assembly : cs.temp.dll.dll Syntax public class SolverHandlerInspector : UnityEditor.Editor Methods OnEnable() Declaration protected void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.SolverInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.SolverInspector.html",
    "title": "Class SolverInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SolverInspector Inheritance Object SolverInspector InBetweenEditor SurfaceMagnetismInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers Assembly : cs.temp.dll.dll Syntax public class SolverInspector : UnityEditor.Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.SurfaceMagnetismInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers.SurfaceMagnetismInspector.html",
    "title": "Class SurfaceMagnetismInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SurfaceMagnetismInspector Inheritance Object SolverInspector SurfaceMagnetismInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Solvers Assembly : cs.temp.dll.dll Syntax public class SurfaceMagnetismInspector : SolverInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides SolverInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides SolverInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.CameraSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.CameraSystem Classes BaseCameraSettingsProfile Base class used to derive custom camera settings profiles. BaseCameraSettingsProvider MixedRealityCameraSystem The Camera system controls the settings of the main camera. Structs MixedRealityCameraSettingsConfiguration Defines the configuration for a camera settings provider. Interfaces IMixedRealityCameraSettingsProvider Interface defining the a camera system settings provider. IMixedRealityCameraSystem Manager interface for a camera system in the Mixed Reality Toolkit. The camera system is expected to manage settings on the main camera. It should update the camera's clear settings, render mask, etc based on platform. Enums DisplayType The type of displays on which an application may run."
  },
  "api/Microsoft.MixedReality.Toolkit.ComponentExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ComponentExtensions.html",
    "title": "Class ComponentExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ComponentExtensions Extensions methods for the Unity Component class. This also includes some component-related extensions for the GameObject class. Inheritance Object ComponentExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class ComponentExtensions Methods EnsureComponent(GameObject, Type) Ensure that a component of type exists on the game object. If it doesn't exist, creates it. Declaration public static Component EnsureComponent(this GameObject gameObject, Type component) Parameters Type Name Description GameObject gameObject Type component A component on the game object for which a component of type should exist. Returns Type Description Component The component that was retrieved or created. EnsureComponent<T>(Component) Ensure that a component of type T exists on the game object. If it doesn't exist, creates it. Declaration public static T EnsureComponent<T>(this Component component) where T : Component Parameters Type Name Description Component component A component on the game object for which a component of type T should exist. Returns Type Description T The component that was retrieved or created. Type Parameters Name Description T Type of the component. EnsureComponent<T>(GameObject) Ensure that a component of type T exists on the game object. If it doesn't exist, creates it. Declaration public static T EnsureComponent<T>(this GameObject gameObject) where T : Component Parameters Type Name Description GameObject gameObject Game object on which component should be. Returns Type Description T The component that was retrieved or created. Type Parameters Name Description T Type of the component. Remarks This extension has to remain in this class as it is required by the EnsureComponent<T>(Component) method FindAncestorComponent<T>(Component, Boolean) Find the first component of type T in the ancestors of the game object of the specified component. Declaration public static T FindAncestorComponent<T>(this Component component, bool includeSelf = true) where T : Component Parameters Type Name Description Component component Component for which its game object's ancestors must be considered. Boolean includeSelf Indicates whether the specified game object should be included. Returns Type Description T The component of type T . Null if it none was found. Type Parameters Name Description T Type of component to find."
  },
  "api/Microsoft.MixedReality.Toolkit.CoreServices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CoreServices.html",
    "title": "Class CoreServices | Mixed Reality Toolkit Documentation",
    "keywords": "Class CoreServices Utility class to easily access references to core runtime Mixed Reality Toolkit Services If deallocating and re-allocating a new system at runtime, ResetCacheReferences() should be used to get a proper reference Inheritance Object CoreServices Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class CoreServices Properties BoundarySystem Cached reference to the active instance of the boundary system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityBoundarySystem BoundarySystem { get; } Property Value Type Description IMixedRealityBoundarySystem CameraSystem Cached reference to the active instance of the camera system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityCameraSystem CameraSystem { get; } Property Value Type Description IMixedRealityCameraSystem DiagnosticsSystem Cached reference to the active instance of the diagnostics system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityDiagnosticsSystem DiagnosticsSystem { get; } Property Value Type Description IMixedRealityDiagnosticsSystem FocusProvider Cached reference to the active instance of the focus provider. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityFocusProvider FocusProvider { get; } Property Value Type Description IMixedRealityFocusProvider InputSystem Cached reference to the active instance of the input system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityInputSystem InputSystem { get; } Property Value Type Description IMixedRealityInputSystem RaycastProvider Cached reference to the active instance of the raycast provider. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityRaycastProvider RaycastProvider { get; } Property Value Type Description IMixedRealityRaycastProvider SceneSystem Cached reference to the active instance of the scene system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealitySceneSystem SceneSystem { get; } Property Value Type Description IMixedRealitySceneSystem SpatialAwarenessSystem Cached reference to the active instance of the spatial awareness system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealitySpatialAwarenessSystem SpatialAwarenessSystem { get; } Property Value Type Description IMixedRealitySpatialAwarenessSystem TeleportSystem Cached reference to the active instance of the teleport system. If system is destroyed, reference will be invalid. Please use ResetCacheReferences() Declaration public static IMixedRealityTeleportSystem TeleportSystem { get; } Property Value Type Description IMixedRealityTeleportSystem Methods ResetCacheReference(Type) Clears the cache of the reference with key of given type if present and applicable Declaration public static bool ResetCacheReference(Type serviceType) Parameters Type Name Description Type serviceType interface of service to key against. Must be of type IMixedRealityService Returns Type Description Boolean true if successfully cleared, false otherwise ResetCacheReferences() Resets all cached system references to null Declaration public static void ResetCacheReferences()"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.MixedRealityDiagnosticsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.MixedRealityDiagnosticsProfile.html",
    "title": "Class MixedRealityDiagnosticsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDiagnosticsProfile Configuration profile settings for setting up diagnostics. Inheritance Object BaseMixedRealityProfile MixedRealityDiagnosticsProfile Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public class MixedRealityDiagnosticsProfile : BaseMixedRealityProfile Properties DefaultInstancedMaterial A material that the diagnostics system can use to render objects with instanced color support. A asset reference is required here to make sure the shader permutation is pulled into player builds. Declaration public Material DefaultInstancedMaterial { get; } Property Value Type Description Material FrameSampleRate The amount of time, in seconds, to collect frames for frame rate calculation. Declaration public float FrameSampleRate { get; } Property Value Type Description Single ShowDiagnostics Show or hide diagnostic visualizations. Declaration public bool ShowDiagnostics { get; } Property Value Type Description Boolean ShowFrameInfo Show or hide the frame info (per frame stats). Declaration public bool ShowFrameInfo { get; } Property Value Type Description Boolean ShowMemoryStats Show or hide the memory stats (used, peak, and limit). Declaration public bool ShowMemoryStats { get; } Property Value Type Description Boolean ShowProfiler Show or hide the profiler UI. Declaration public bool ShowProfiler { get; } Property Value Type Description Boolean WindowAnchor What part of the view port to anchor the window to. Declaration public TextAnchor WindowAnchor { get; } Property Value Type Description TextAnchor WindowFollowSpeed How quickly to interpolate the window towards its target position and rotation. Declaration public float WindowFollowSpeed { get; } Property Value Type Description Single WindowOffset The offset from the view port center applied based on the window anchor selection. Declaration public Vector2 WindowOffset { get; } Property Value Type Description Vector2 WindowScale Use to scale the window size up or down, can simulate a zooming effect. Declaration public float WindowScale { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.MixedRealityDiagnosticsSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.MixedRealityDiagnosticsSystem.html",
    "title": "Class MixedRealityDiagnosticsSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDiagnosticsSystem The default implementation of the IMixedRealityDiagnosticsSystem Inheritance Object BaseService BaseEventSystem BaseCoreSystem MixedRealityDiagnosticsSystem Implements IMixedRealityDiagnosticsSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public class MixedRealityDiagnosticsSystem : BaseCoreSystem, IMixedRealityDiagnosticsSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Constructors MixedRealityDiagnosticsSystem(MixedRealityDiagnosticsProfile) Constructor. Declaration public MixedRealityDiagnosticsSystem(MixedRealityDiagnosticsProfile profile) Parameters Type Name Description MixedRealityDiagnosticsProfile profile The configuration profile for the service. MixedRealityDiagnosticsSystem(IMixedRealityServiceRegistrar, MixedRealityDiagnosticsProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public MixedRealityDiagnosticsSystem(IMixedRealityServiceRegistrar registrar, MixedRealityDiagnosticsProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealityDiagnosticsProfile profile The configuration profile for the service. Properties DiagnosticsSystemProfile Typed representation of the ConfigurationProfile property. Declaration public MixedRealityDiagnosticsProfile DiagnosticsSystemProfile { get; } Property Value Type Description MixedRealityDiagnosticsProfile FrameSampleRate The amount of time, in seconds, to collect frames for frame rate calculation. Declaration public float FrameSampleRate { get; set; } Property Value Type Description Single Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name ShowDiagnostics Enable / disable diagnostic display. Declaration public bool ShowDiagnostics { get; set; } Property Value Type Description Boolean Remarks When set to true, visibility settings for individual diagnostics are honored. When set to false, all visualizations are hidden. ShowFrameInfo Show or hide the frame info (per frame stats). Declaration public bool ShowFrameInfo { get; set; } Property Value Type Description Boolean ShowMemoryStats Show or hide the memory stats (used, peak, and limit). Declaration public bool ShowMemoryStats { get; set; } Property Value Type Description Boolean ShowProfiler Enable / disable the profiler display. Declaration public bool ShowProfiler { get; set; } Property Value Type Description Boolean SourceId The Unique Source Id of this Event Source. Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration public string SourceName { get; } Property Value Type Description String WindowAnchor What part of the view port to anchor the window to. Declaration public TextAnchor WindowAnchor { get; set; } Property Value Type Description TextAnchor WindowFollowSpeed How quickly to interpolate the window towards its target position and rotation. Declaration public float WindowFollowSpeed { get; set; } Property Value Type Description Single WindowOffset The offset from the view port center applied based on the window anchor selection. Declaration public Vector2 WindowOffset { get; set; } Property Value Type Description Vector2 WindowScale Use to scale the window size up or down, can simulate a zooming effect. Declaration public float WindowScale { get; set; } Property Value Type Description Single Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() Equals(Object, Object) Declaration public bool Equals(object x, object y) Parameters Type Name Description Object x Object y Returns Type Description Boolean GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() Implements IMixedRealityDiagnosticsSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityProfileCloneWindow.ProfileCloneBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityProfileCloneWindow.ProfileCloneBehavior.html",
    "title": "Enum MixedRealityProfileCloneWindow.ProfileCloneBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityProfileCloneWindow.ProfileCloneBehavior Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public enum ProfileCloneBehavior Fields Name Description CloneExisting LeaveEmpty UseExisting UseSubstitution"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityProfileCloneWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityProfileCloneWindow.html",
    "title": "Class MixedRealityProfileCloneWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityProfileCloneWindow Inheritance Object MixedRealityProfileCloneWindow Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityProfileCloneWindow : EditorWindow Methods OpenWindow(BaseMixedRealityProfile, BaseMixedRealityProfile, SerializedProperty, Object) Declaration public static void OpenWindow(BaseMixedRealityProfile parentProfile, BaseMixedRealityProfile childProfile, SerializedProperty childProperty, Object selectionTarget = null) Parameters Type Name Description BaseMixedRealityProfile parentProfile BaseMixedRealityProfile childProfile SerializedProperty childProperty Object selectionTarget"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityTextMeshProShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityTextMeshProShaderGUI.html",
    "title": "Class MixedRealityTextMeshProShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityTextMeshProShaderGUI A custom TMP_SDFShaderGUI inspector for the \"Mixed Reality Toolkit/TextMeshPro\" shader. Adds the ability to change the depth write mode, and a warning about depth write when depth buffer sharing is enabled. Inheritance Object MixedRealityTextMeshProShaderGUI Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityTextMeshProShaderGUI : TMP_SDFShaderGUI Methods DoGUI() Declaration protected override void DoGUI() DoModePanel() Declaration protected void DoModePanel()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitConfigurationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitConfigurationProfileInspector.html",
    "title": "Class MixedRealityToolkitConfigurationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitConfigurationProfileInspector Inheritance Object BaseMixedRealityProfileInspector BaseMixedRealityToolkitConfigurationProfileInspector MixedRealityToolkitConfigurationProfileInspector Inherited Members BaseMixedRealityToolkitConfigurationProfileInspector.RenderAsSubProfile BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileDescriptions BaseMixedRealityToolkitConfigurationProfileInspector.Awake() BaseMixedRealityToolkitConfigurationProfileInspector.RenderMRTKLogoAndSearch() BaseMixedRealityToolkitConfigurationProfileInspector.RenderDocumentation(Object) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.DrawBacktrackProfileButton(String, UnityEngine.Object) BaseMixedRealityToolkitConfigurationProfileInspector.RenderProfileHeader(String, String, Object, Boolean, BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType) BaseMixedRealityToolkitConfigurationProfileInspector.CheckEditorPlayMode() BaseMixedRealityToolkitConfigurationProfileInspector.CheckMixedRealityInputActions() BaseMixedRealityProfileInspector.RenderReadOnlyProfile(SerializedProperty) BaseMixedRealityProfileInspector.RenderProfile(SerializedProperty, Type, Boolean, Boolean, Type) BaseMixedRealityProfileInspector.RenderFoldout(Boolean, String, Action, String) BaseMixedRealityProfileInspector.IsProfileLock(BaseMixedRealityProfile) Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitConfigurationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods CheckSystemConfiguration(String, Boolean, SystemType, Boolean) Checks if a system is enabled and the service type or validProfile is null, then displays warning message to the user Declaration protected void CheckSystemConfiguration(string service, bool systemEnabled, SystemType systemType, bool validProfile) Parameters Type Name Description String service name of service being tested Boolean systemEnabled true if checkbox enabled, false otherwise SystemType systemType Selected implementation type for service Boolean validProfile true if profile scriptableobject property is not null, false otherwise IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean Overrides BaseMixedRealityToolkitConfigurationProfileInspector.IsProfileInActiveInstance() OnEnable() Declaration protected override void OnEnable() Overrides BaseMixedRealityProfileInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitShaderGUIUtilities.Styles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitShaderGUIUtilities.Styles.html",
    "title": "Class MixedRealityToolkitShaderGUIUtilities.Styles | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitShaderGUIUtilities.Styles GUI content styles which are common among shader GUIs. Inheritance Object MixedRealityToolkitShaderGUIUtilities.Styles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public static class Styles Fields DepthWriteFixNowButton Declaration public static readonly GUIContent DepthWriteFixNowButton Field Value Type Description GUIContent DepthWriteWarning Declaration public static readonly GUIContent DepthWriteWarning Field Value Type Description GUIContent"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SpatialAwarenessSystemInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SpatialAwarenessSystemInspector.html",
    "title": "Class SpatialAwarenessSystemInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessSystemInspector Inheritance Object BaseMixedRealityServiceInspector SpatialAwarenessSystemInspector Implements IMixedRealityServiceInspector Inherited Members BaseMixedRealityServiceInspector.DrawProfileField Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessSystemInspector : BaseMixedRealityServiceInspector, IMixedRealityServiceInspector Properties AlwaysDrawSceneGUI Declaration public override bool AlwaysDrawSceneGUI { get; } Property Value Type Description Boolean Overrides BaseMixedRealityServiceInspector.AlwaysDrawSceneGUI Methods DrawGizmos(Object) Declaration public override void DrawGizmos(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawGizmos(Object) DrawInspectorGUI(Object) Declaration public override void DrawInspectorGUI(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawInspectorGUI(Object) DrawSceneGUI(Object, SceneView) Declaration public override void DrawSceneGUI(object target, SceneView sceneView) Parameters Type Name Description Object target SceneView sceneView Overrides BaseMixedRealityServiceInspector.DrawSceneGUI(Object, SceneView) Implements IMixedRealityServiceInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SystemTypeReferencePropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SystemTypeReferencePropertyDrawer.html",
    "title": "Class SystemTypeReferencePropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemTypeReferencePropertyDrawer Custom property drawer for SystemType properties. Inheritance Object SystemTypeReferencePropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class SystemTypeReferencePropertyDrawer : PropertyDrawer Properties ExcludedTypeCollectionGetter Gets or sets a function that returns a collection of types that are to be excluded from drop-down. A value of null specifies that no types are to be excluded. Declaration public static Func<ICollection<Type>> ExcludedTypeCollectionGetter { get; set; } Property Value Type Description Func < ICollection < Type >> Remarks This property must be set immediately before presenting a class type reference property field using EditorGUI.PropertyField since the value of this property is reset to null each time the control is drawn. Since filtering makes extensive use of Contains(T) it is recommended to use a collection that is optimized for fast look ups such as HashSet for better performance. Examples Exclude a specific type from being selected: private SerializedProperty someTypeReferenceProperty; public override void OnInspectorGUI() { serializedObject.Update(); ClassTypeReferencePropertyDrawer.ExcludedTypeCollectionGetter = GetExcludedTypeCollection; EditorGUILayout.PropertyField(someTypeReferenceProperty); serializedObject.ApplyModifiedProperties(); } private ICollection<Type> GetExcludedTypeCollection() { var set = new HashSet<Type>(); set.Add(typeof(SpecialClassToHideInDropdown)); return set; } Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.TagPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.TagPropertyDrawer.html",
    "title": "Class TagPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class TagPropertyDrawer Draws a Unity Tag selector in the Inspector. Inheritance Object TagPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class TagPropertyDrawer : PropertyDrawer Examples [TagProperty] public string FindTag; Methods OnGUI(Rect, SerializedProperty, GUIContent) Override this method to make your own GUI for the property. Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position Rectangle on the screen to use for the property GUI. SerializedProperty property The SerializedProperty to make the custom GUI for. GUIContent label The label of this property."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ParticleHeatmapParticleData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ParticleHeatmapParticleData.html",
    "title": "Class ParticleHeatmapParticleData | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParticleHeatmapParticleData Inheritance Object ParticleHeatmapParticleData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ParticleHeatmapParticleData Fields color Declaration public Color color Field Value Type Description Color intensity Declaration public float intensity Field Value Type Description Single position Declaration public Vector3 position Field Value Type Description Vector3 radiusInMeter Declaration public float radiusInMeter Field Value Type Description Single rotation Declaration public Vector3 rotation Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursor.html",
    "title": "Class AnimatedCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class AnimatedCursor Animated cursor is a cursor driven using an animator to inject state information and animate accordingly Inheritance Object BaseCursor AnimatedCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseCursor.CursorState BaseCursor.CursorContext BaseCursor.SurfaceCursorDistance BaseCursor.UseUnscaledTime BaseCursor.PositionLerpTime BaseCursor.ScaleLerpTime BaseCursor.RotationLerpTime BaseCursor.LookRotationBlend BaseCursor.ResizeCursorWithDistance BaseCursor.CursorAngularScale BaseCursor.CursorAngularSize BaseCursor.PrimaryCursorVisual BaseCursor.IsSourceDetected BaseCursor.SourceDownIds BaseCursor.IsPointerDown BaseCursor.TargetedObject BaseCursor.VisibleSourcesCount BaseCursor.targetPosition BaseCursor.targetScale BaseCursor.targetRotation BaseCursor.Pointer BaseCursor.IsPointerValid BaseCursor.DefaultCursorDistance BaseCursor.Position BaseCursor.Rotation BaseCursor.LocalScale BaseCursor.SetVisibility(Boolean) BaseCursor.Destroy() BaseCursor.IsVisible BaseCursor.SetVisibilityOnSourceDetected BaseCursor.GameObjectReference BaseCursor.OnSourceDetected(SourceStateEventData) BaseCursor.OnSourceLost(SourceStateEventData) BaseCursor.OnBeforeFocusChange(FocusEventData) BaseCursor.OnPointerDown(MixedRealityPointerEventData) BaseCursor.OnPointerDragged(MixedRealityPointerEventData) BaseCursor.OnPointerClicked(MixedRealityPointerEventData) BaseCursor.OnPointerUp(MixedRealityPointerEventData) BaseCursor.Start() BaseCursor.OnEnable() BaseCursor.OnDisable() BaseCursor.RegisterManagers() BaseCursor.UnregisterManagers() BaseCursor.UpdateCursorTransform() BaseCursor.LerpToTargetTransform() BaseCursor.SnapToTargetTransform() BaseCursor.CheckCursorState() BaseCursor.CheckCursorContext() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class AnimatedCursor : BaseCursor, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Methods OnCursorContextChange(CursorContextEnum) Override OnCursorContext change to set the correct animation state for the cursor. Declaration public override void OnCursorContextChange(CursorContextEnum context) Parameters Type Name Description CursorContextEnum context Overrides BaseCursor.OnCursorContextChange(CursorContextEnum) OnCursorStateChange(CursorStateEnum) Override OnCursorState change to set the correct animation state for the cursor. Declaration public override void OnCursorStateChange(CursorStateEnum state) Parameters Type Name Description CursorStateEnum state Overrides BaseCursor.OnCursorStateChange(CursorStateEnum) OnFocusChanged(FocusEventData) Override to set the cursor animation trigger. Declaration public override void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Overrides BaseCursor.OnFocusChanged(FocusEventData) OnInputDisabled() Change animation state when disabling input. Declaration public override void OnInputDisabled() Overrides BaseCursor.OnInputDisabled() OnInputEnabled() Change animation state when enabling input. Declaration public override void OnInputEnabled() Overrides BaseCursor.OnInputEnabled() Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.CursorStateEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.CursorStateEnum.html",
    "title": "Enum CursorStateEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CursorStateEnum Enum for current cursor state Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum CursorStateEnum Fields Name Description Contextual Allows for external override Interact IsHandDetected AND not IsPointerDown AND TargetedObject is NULL InteractHover IsHandDetected AND not IsPointerDown AND TargetedObject exists None Useful for releasing external override. See CursorStateEnum.Contextual Observe Not IsHandDetected OR HasTeleportIntent ObserveHover Not IsHandDetected AND not IsPointerDown AND TargetedObject exists OR HasTeleportIntent AND Teleport Surface IsValid Release Available for use by classes that extend Cursor. No logic for setting Release state exists in the base Cursor class. Select IsHandDetected AND IsPointerDown"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DefaultPointerMediator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DefaultPointerMediator.html",
    "title": "Class DefaultPointerMediator | Mixed Reality Toolkit Documentation",
    "keywords": "Class DefaultPointerMediator The default implementation for pointer mediation in MRTK which is responsible for determining which pointers are active based on the state of all pointers. For example, one of the key things this class does is disable far pointers when a near pointer is close to an object. Inheritance Object DefaultPointerMediator Implements IMixedRealityPointerMediator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class DefaultPointerMediator : IMixedRealityPointerMediator Constructors DefaultPointerMediator() Declaration public DefaultPointerMediator() DefaultPointerMediator(IPointerPreferences) Declaration public DefaultPointerMediator(IPointerPreferences pointerPrefs) Parameters Type Name Description IPointerPreferences pointerPrefs Fields allPointers Declaration protected readonly HashSet<IMixedRealityPointer> allPointers Field Value Type Description HashSet < IMixedRealityPointer > farInteractPointers Declaration protected readonly HashSet<IMixedRealityPointer> farInteractPointers Field Value Type Description HashSet < IMixedRealityPointer > nearInteractPointers Declaration protected readonly HashSet<IMixedRealityNearPointer> nearInteractPointers Field Value Type Description HashSet < IMixedRealityNearPointer > pointerByInputSourceParent Declaration protected readonly Dictionary<IMixedRealityInputSource, HashSet<IMixedRealityPointer>> pointerByInputSourceParent Field Value Type Description Dictionary < IMixedRealityInputSource , HashSet < IMixedRealityPointer >> teleportPointers Declaration protected readonly HashSet<IMixedRealityTeleportPointer> teleportPointers Field Value Type Description HashSet < IMixedRealityTeleportPointer > unassignedPointers Declaration protected readonly HashSet<IMixedRealityPointer> unassignedPointers Field Value Type Description HashSet < IMixedRealityPointer > Methods RegisterPointers(IMixedRealityPointer[]) Declaration public virtual void RegisterPointers(IMixedRealityPointer[] pointers) Parameters Type Name Description IMixedRealityPointer [] pointers UnregisterPointers(IMixedRealityPointer[]) Declaration public virtual void UnregisterPointers(IMixedRealityPointer[] pointers) Parameters Type Name Description IMixedRealityPointer [] pointers UpdatePointers() Declaration public virtual void UpdatePointers() Implements IMixedRealityPointerMediator"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DefaultPrimaryPointerSelector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DefaultPrimaryPointerSelector.html",
    "title": "Class DefaultPrimaryPointerSelector | Mixed Reality Toolkit Documentation",
    "keywords": "Class DefaultPrimaryPointerSelector Default primary pointer selector. The primary pointer is chosen among all interaction enabled ones using the following rules in order: Currently pressed pointer that has been pressed for the longest Pointer that was released most recently Pointer that became interaction enabled most recently Inheritance Object DefaultPrimaryPointerSelector Implements IMixedRealityPrimaryPointerSelector IMixedRealityPointerHandler IEventSystemHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class DefaultPrimaryPointerSelector : IMixedRealityPrimaryPointerSelector, IMixedRealityPointerHandler, IEventSystemHandler Methods Destroy() Declaration public void Destroy() Initialize() Declaration public void Initialize() RegisterPointer(IMixedRealityPointer) Declaration public void RegisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer UnregisterPointer(IMixedRealityPointer) Declaration public void UnregisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Update() Declaration public virtual IMixedRealityPointer Update() Returns Type Description IMixedRealityPointer Explicit Interface Implementations IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData) Declaration void IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData Implements IMixedRealityPrimaryPointerSelector IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DefaultRaycastProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DefaultRaycastProvider.html",
    "title": "Class DefaultRaycastProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class DefaultRaycastProvider The default implementation of IMixedRealityRaycastProvider. Inheritance Object BaseService BaseEventSystem BaseCoreSystem DefaultRaycastProvider Implements IMixedRealityEventSystem IMixedRealityRaycastProvider IMixedRealityService IDisposable Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseEventSystem.Destroy() BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class DefaultRaycastProvider : BaseCoreSystem, IMixedRealityEventSystem, IMixedRealityRaycastProvider, IMixedRealityService, IDisposable Constructors DefaultRaycastProvider(IMixedRealityServiceRegistrar, MixedRealityInputSystemProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public DefaultRaycastProvider(IMixedRealityServiceRegistrar registrar, MixedRealityInputSystemProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealityInputSystemProfile profile The configuration profile for the service. DefaultRaycastProvider(MixedRealityInputSystemProfile) Constructor. Declaration public DefaultRaycastProvider(MixedRealityInputSystemProfile profile) Parameters Type Name Description MixedRealityInputSystemProfile profile The configuration profile for the service. Properties Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name Methods GraphicsRaycast(EventSystem, PointerEventData, LayerMask[]) Performs a graphics raycast against the specified layerMasks. Declaration public RaycastResult GraphicsRaycast(EventSystem eventSystem, PointerEventData pointerEventData, LayerMask[] layerMasks) Parameters Type Name Description EventSystem eventSystem PointerEventData pointerEventData LayerMask [] layerMasks Returns Type Description RaycastResult The RaycastResult of the raycast. Raycast(RayStep, LayerMask[], Boolean, out MixedRealityRaycastHit) Performs a raycast using the specified RayStep . Declaration public bool Raycast(RayStep step, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out MixedRealityRaycastHit hitInfo) Parameters Type Name Description RayStep step LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider MixedRealityRaycastHit hitInfo Returns Type Description Boolean Whether or not the raycast hit something. SphereCast(RayStep, Single, LayerMask[], Boolean, out MixedRealityRaycastHit) Performs a sphere cast with the specified RayStep and radius. Declaration public bool SphereCast(RayStep step, float radius, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out MixedRealityRaycastHit hitInfo) Parameters Type Name Description RayStep step Single radius LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider MixedRealityRaycastHit hitInfo Returns Type Description Boolean Whether or not the SphereCast hit something. Implements IMixedRealityEventSystem IMixedRealityRaycastProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DeviceInputType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DeviceInputType.html",
    "title": "Enum DeviceInputType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DeviceInputType The InputType defines the types of input exposed by a controller. Denoting the available buttons / interactions that a controller supports. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum DeviceInputType Fields Name Description ButtonNearTouch ButtonPress ButtonTouch DirectionalPad Gaze GripPosition 3 DoF Grip with only position. GripRotation 3 Dof Grip with only rotation. Hand IndexFinger IndexFingerNearTouch IndexFingerPress IndexFingerTouch Menu MiddleFinger MiddleFingerNearTouch MiddleFingerPress MiddleFingerTouch None PinkyFinger PinkyFingerNearTouch PinkyFingerPress PinkyFingerTouch PointerClick PointerPosition 3 Dof Pointer with only position. PointerRotation 3 Dof Pointer with only rotation. RingFinger RingFingerNearTouch RingFingerPress RingFingerTouch Scroll Select SpatialGrip 6 DoF Grip with position and rotation. SpatialPointer 6 Dof Pointer with position and rotation. Start Thumb ThumbNearTouch ThumbPress ThumbStick ThumbStickNearTouch ThumbStickPress ThumbStickTouch ThumbTouch Touchpad TouchpadNearTouch TouchpadPress TouchpadTouch Trigger TriggerNearTouch TriggerPress TriggerTouch Voice"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DictationEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DictationEventData.html",
    "title": "Class DictationEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class DictationEventData Describes an Input Event with voice dictation. Inheritance Object BaseInputEventData DictationEventData Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class DictationEventData : BaseInputEventData Constructors DictationEventData(EventSystem) Constructor. Declaration public DictationEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties DictationAudioClip Audio Clip of the last Dictation recording Session. Declaration public AudioClip DictationAudioClip { get; } Property Value Type Description AudioClip DictationResult String result of the current dictation. Declaration public string DictationResult { get; } Property Value Type Description String Methods Initialize(IMixedRealityInputSource, String, AudioClip) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource inputSource String dictationResult AudioClip dictationAudioClip"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSimulationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSimulationProfile.html",
    "title": "Class MixedRealityInputSimulationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSimulationProfile Inheritance Object BaseMixedRealityProfile MixedRealityInputSimulationProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSimulationProfile : BaseMixedRealityProfile Properties ControlFastSpeed Fast camera translation speed Declaration public float ControlFastSpeed { get; } Property Value Type Description Single ControlSlowSpeed Slow camera translation speed Declaration public float ControlSlowSpeed { get; } Property Value Type Description Single CurrentControlMode Camera movement mode Declaration public InputSimulationControlMode CurrentControlMode { get; } Property Value Type Description InputSimulationControlMode DefaultHandDistance Default distance of the hand from the camera Declaration public float DefaultHandDistance { get; } Property Value Type Description Single DefaultHandGesture Hand joint pose on first show or reset Declaration public ArticulatedHandPose.GestureId DefaultHandGesture { get; } Property Value Type Description ArticulatedHandPose.GestureId DefaultHandSimulationMode Enable hand simulation Declaration public HandSimulationMode DefaultHandSimulationMode { get; } Property Value Type Description HandSimulationMode DoublePressTime Maximum time interval for double press Declaration public float DoublePressTime { get; } Property Value Type Description Single FastControlKey Key to speed up camera movement Declaration public KeyBinding FastControlKey { get; } Property Value Type Description KeyBinding HandDepthMultiplier Depth change when scrolling the mouse wheel Declaration public float HandDepthMultiplier { get; } Property Value Type Description Single HandGestureAnimationSpeed Gesture interpolation per second Declaration public float HandGestureAnimationSpeed { get; } Property Value Type Description Single HandHideTimeout Time after which uncontrolled hands are hidden Declaration public float HandHideTimeout { get; } Property Value Type Description Single HandJitterAmount Apply random offset to the hand position Declaration public float HandJitterAmount { get; } Property Value Type Description Single HandRotateButton Controls how hand rotation is activated Declaration public KeyBinding HandRotateButton { get; } Property Value Type Description KeyBinding HoldStartDuration Time until hold gesture starts Declaration public float HoldStartDuration { get; } Property Value Type Description Single IndicatorsPrefab Indicator buttons to show input simulation state in the viewport Declaration public GameObject IndicatorsPrefab { get; } Property Value Type Description GameObject IsCameraControlEnabled Enable manual camera control Declaration public bool IsCameraControlEnabled { get; } Property Value Type Description Boolean IsControllerLookInverted Invert the vertical rotation Declaration public bool IsControllerLookInverted { get; } Property Value Type Description Boolean LeftHandManipulationKey Key to manipulate the left hand Declaration public KeyBinding LeftHandManipulationKey { get; } Property Value Type Description KeyBinding LeftMouseHandGesture Hand joint pose when pressing the left mouse button Declaration public ArticulatedHandPose.GestureId LeftMouseHandGesture { get; } Property Value Type Description ArticulatedHandPose.GestureId LookHorizontal Look Horizontal Axis - Right Stick On Controller Declaration public string LookHorizontal { get; } Property Value Type Description String LookVertical Look Vertical Axis - Right Stick On Controller Declaration public string LookVertical { get; } Property Value Type Description String MiddleMouseHandGesture Hand joint pose when pressing the middle mouse button Declaration public ArticulatedHandPose.GestureId MiddleMouseHandGesture { get; } Property Value Type Description ArticulatedHandPose.GestureId MouseHandRotationSpeed Additional rotation factor after input smoothing has been applied Declaration public float MouseHandRotationSpeed { get; } Property Value Type Description Single MouseLookButton Controls how mouse look control is activated Declaration public KeyBinding MouseLookButton { get; } Property Value Type Description KeyBinding MouseLookSpeed Additional rotation factor after input smoothing has been applied Declaration public float MouseLookSpeed { get; } Property Value Type Description Single MouseLookToggle Toggle mouse look on with the mouse look button, press escape to release Declaration public bool MouseLookToggle { get; } Property Value Type Description Boolean MouseRotationSensitivity Sensitivity when using the mouse for rotation Declaration public float MouseRotationSensitivity { get; } Property Value Type Description Single MouseScroll Mouse Scroll Wheel Declaration public string MouseScroll { get; } Property Value Type Description String MouseX Mouse Movement X-axis Declaration public string MouseX { get; } Property Value Type Description String MouseY Mouse Movement Y-axis Declaration public string MouseY { get; } Property Value Type Description String MoveHorizontal Horizontal movement Axis Declaration public string MoveHorizontal { get; } Property Value Type Description String MoveUpDown Up/Down movement Axis Declaration public string MoveUpDown { get; } Property Value Type Description String MoveVertical Vertical movement Axis Declaration public string MoveVertical { get; } Property Value Type Description String NavigationStartThreshold The total amount of input source movement that needs to happen to start navigation Declaration public float NavigationStartThreshold { get; } Property Value Type Description Single RightHandManipulationKey Key to manipulate the right hand Declaration public KeyBinding RightHandManipulationKey { get; } Property Value Type Description KeyBinding RightMouseHandGesture Hand joint pose when pressing the right mouse button Declaration public ArticulatedHandPose.GestureId RightMouseHandGesture { get; } Property Value Type Description ArticulatedHandPose.GestureId SimulateEyePosition Enable eye simulation Declaration public bool SimulateEyePosition { get; } Property Value Type Description Boolean ToggleLeftHandKey Key to toggle persistent mode for the left hand Declaration public KeyBinding ToggleLeftHandKey { get; } Property Value Type Description KeyBinding ToggleRightHandKey Key to toggle persistent mode for the right hand Declaration public KeyBinding ToggleRightHandKey { get; } Property Value Type Description KeyBinding"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSimulationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSimulationProfileInspector.html",
    "title": "Class MixedRealityInputSimulationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSimulationProfileInspector Inheritance Object MixedRealityInputSimulationProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSimulationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSystem.html",
    "title": "Class MixedRealityInputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSystem The Mixed Reality Toolkit's specific implementation of the IMixedRealityInputSystem Inheritance Object BaseService BaseEventSystem BaseCoreSystem BaseDataProviderAccessCoreSystem MixedRealityInputSystem Implements IMixedRealityDataProviderAccess IMixedRealityInputSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityCapabilityCheck Inherited Members BaseDataProviderAccessCoreSystem.Update() BaseDataProviderAccessCoreSystem.LateUpdate() BaseDataProviderAccessCoreSystem.GetDataProviders() BaseDataProviderAccessCoreSystem.GetDataProvider(String) BaseDataProviderAccessCoreSystem.RegisterDataProvider<T>(Type, SupportedPlatforms, Object[]) BaseDataProviderAccessCoreSystem.RegisterDataProvider<T>(T) BaseDataProviderAccessCoreSystem.UnregisterDataProvider<T>(String) BaseDataProviderAccessCoreSystem.UnregisterDataProvider<T>(T) BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseService.DefaultPriority BaseService.ConfigurationProfile BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSystem : BaseDataProviderAccessCoreSystem, IMixedRealityDataProviderAccess, IMixedRealityInputSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityCapabilityCheck Constructors MixedRealityInputSystem(IMixedRealityServiceRegistrar, MixedRealityInputSystemProfile) Constructor. Declaration public MixedRealityInputSystem(IMixedRealityServiceRegistrar registrar, MixedRealityInputSystemProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealityInputSystemProfile profile The configuration profile for the service. MixedRealityInputSystem(MixedRealityInputSystemProfile) Constructor. Declaration public MixedRealityInputSystem(MixedRealityInputSystemProfile profile) Parameters Type Name Description MixedRealityInputSystemProfile profile The configuration profile for the service. Properties DetectedControllers List of IMixedRealityController s currently detected by the input manager. Declaration public HashSet<IMixedRealityController> DetectedControllers { get; } Property Value Type Description HashSet < IMixedRealityController > Remarks This property is similar to DetectedInputSources , as this is a subset of those IMixedRealityInputSource s in that list. DetectedInputSources List of the Interaction Input Sources as detected by the input manager like hands or motion controllers. Declaration public HashSet<IMixedRealityInputSource> DetectedInputSources { get; } Property Value Type Description HashSet < IMixedRealityInputSource > EyeGazeProvider The current Eye Gaze Provider that's been implemented by this Input System. Declaration public IMixedRealityEyeGazeProvider EyeGazeProvider { get; } Property Value Type Description IMixedRealityEyeGazeProvider FocusProvider The current Focus Provider that's been implemented by this Input System. Declaration public IMixedRealityFocusProvider FocusProvider { get; } Property Value Type Description IMixedRealityFocusProvider GazeProvider The current Gaze Provider that's been implemented by this Input System. Declaration public IMixedRealityGazeProvider GazeProvider { get; } Property Value Type Description IMixedRealityGazeProvider InputSystemProfile Typed representation of the ConfigurationProfile property. Declaration public MixedRealityInputSystemProfile InputSystemProfile { get; } Property Value Type Description MixedRealityInputSystemProfile IsInputEnabled Indicates if input is currently enabled or not. Declaration public bool IsInputEnabled { get; } Property Value Type Description Boolean Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration public override uint Priority { get; } Property Value Type Description UInt32 Overrides BaseService.Priority Remarks Input system is critical, so should be processed before all other managers RaycastProvider The current Raycast Provider that's been implemented by this Input System. Declaration public IMixedRealityRaycastProvider RaycastProvider { get; } Property Value Type Description IMixedRealityRaycastProvider Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. ClearFallbackInputStack() Clear all fallback input handlers off the stack. Declaration public void ClearFallbackInputStack() ClearInputDisableStack() Clear the input disable stack, which will immediately re-enable input. Declaration public void ClearInputDisableStack() ClearModalInputStack() Clear all modal input handlers off the stack. Declaration public void ClearModalInputStack() Destroy() Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseDataProviderAccessCoreSystem.Enable() GenerateNewSourceId() Generates a new unique input source id. Declaration public uint GenerateNewSourceId() Returns Type Description UInt32 a new unique Id for the input source. Remarks All Input Sources are required to call this method in their constructor or initialization. GetDataProvider<T>(String) Get the data provider that is registered under the specified name (optional) and matching the specified type. Declaration public override T GetDataProvider<T>(string name = null) where T : IMixedRealityDataProvider Parameters Type Name Description String name The friendly name of the data provider. Returns Type Description T The requested data provider, or null if one cannot be found. Type Parameters Name Description T The desired data provider type. Overrides BaseDataProviderAccessCoreSystem.GetDataProvider<T>(String) Remarks If more than one data provider is registered under the specified name, the first will be returned. GetDataProviders<T>() Get the collection of registered observers of the specified type. Declaration public override IReadOnlyList<T> GetDataProviders<T>() where T : IMixedRealityDataProvider Returns Type Description IReadOnlyList <T> Read-only copy of the list of registered data providers that implement the specified type. Type Parameters Name Description T The desired data provider type Overrides BaseDataProviderAccessCoreSystem.GetDataProviders<T>() HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public override void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData ExecuteEvents.EventFunction <T> eventHandler Type Parameters Name Description T Overrides Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() PopFallbackInputHandler() Remove the last game object from the fallback input stack. Declaration public void PopFallbackInputHandler() PopInputDisable() Pop disabled input state. When the last disabled state is popped off the stack input will be re-enabled. Declaration public void PopInputDisable() PopModalInputHandler() Remove the last game object from the modal input stack. Declaration public void PopModalInputHandler() PushFallbackInputHandler(GameObject) Push a game object into the fallback input stack. Any input handlers on the game object are given input events when no modal or focused objects consume the event. Declaration public void PushFallbackInputHandler(GameObject inputHandler) Parameters Type Name Description GameObject inputHandler The input handler to push PushInputDisable() Push a disabled input state onto the input manager. While input is disabled no events will be sent out and the cursor displays a waiting animation. Declaration public void PushInputDisable() PushModalInputHandler(GameObject) Push a game object into the modal input stack. Any input handlers on the game object are given priority to input events before any focused objects. Declaration public void PushModalInputHandler(GameObject inputHandler) Parameters Type Name Description GameObject inputHandler The input handler to push RaiseDictationComplete(IMixedRealityInputSource, String, AudioClip) Declaration public void RaiseDictationComplete(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseDictationError(IMixedRealityInputSource, String, AudioClip) Declaration public void RaiseDictationError(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseDictationHypothesis(IMixedRealityInputSource, String, AudioClip) Declaration public void RaiseDictationHypothesis(IMixedRealityInputSource source, string dictationHypothesis, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationHypothesis AudioClip dictationAudioClip RaiseDictationResult(IMixedRealityInputSource, String, AudioClip) Declaration public void RaiseDictationResult(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseFloatInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Single) Raise Float Input Changed. Declaration public void RaiseFloatInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, float inputValue) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Single inputValue RaiseFocusChanged(IMixedRealityPointer, GameObject, GameObject) Raise the focus changed event. Declaration public void RaiseFocusChanged(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that the focus change event is raised on. GameObject oldFocusedObject The old focused object. GameObject newFocusedObject The new focused object. RaiseFocusEnter(IMixedRealityPointer, GameObject) Raise the focus enter event. Declaration public void RaiseFocusEnter(IMixedRealityPointer pointer, GameObject focusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that has focus. GameObject focusedObject The GameObject that the pointer has entered focus on. RaiseFocusExit(IMixedRealityPointer, GameObject) Raise the focus exit event. Declaration public void RaiseFocusExit(IMixedRealityPointer pointer, GameObject unfocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that has lost focus. GameObject unfocusedObject The GameObject that the pointer has exited focus on. RaiseGestureCanceled(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Canceled Event. Declaration public void RaiseGestureCanceled(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Completed Event. Declaration public void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, MixedRealityPose) Raise the Gesture Completed Event. Declaration public void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action MixedRealityPose inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Quaternion) Raise the Gesture Completed Event. Declaration public void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Quaternion inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Quaternion inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Vector2) Raise the Gesture Completed Event. Declaration public void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Vector2 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector2 inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Vector3) Raise the Gesture Completed Event. Declaration public void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Vector3 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector3 inputData RaiseGestureStarted(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Started Event. Declaration public void RaiseGestureStarted(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Updated Event. Declaration public void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, MixedRealityPose) Raise the Gesture Updated Event. Declaration public void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action MixedRealityPose inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Quaternion) Raise the Gesture Updated Event. Declaration public void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Quaternion inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Quaternion inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Vector2) Raise the Gesture Updated Event. Declaration public void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Vector2 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector2 inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Vector3) Raise the Gesture Updated Event. Declaration public void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Vector3 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector3 inputData RaiseHandJointsUpdated(IMixedRealityInputSource, Handedness, IDictionary<TrackedHandJoint, MixedRealityPose>) Declaration public void RaiseHandJointsUpdated(IMixedRealityInputSource source, Handedness handedness, IDictionary<TrackedHandJoint, MixedRealityPose> jointPoses) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness IDictionary < TrackedHandJoint , MixedRealityPose > jointPoses RaiseHandMeshUpdated(IMixedRealityInputSource, Handedness, HandMeshInfo) Declaration public void RaiseHandMeshUpdated(IMixedRealityInputSource source, Handedness handedness, HandMeshInfo handMeshInfo) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness HandMeshInfo handMeshInfo RaiseOnInputDown(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise the input down event. Declaration public void RaiseOnInputDown(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnInputUp(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise the input up event. Declaration public void RaiseOnInputUp(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnTouchCompleted(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) Declaration public void RaiseOnTouchCompleted(IMixedRealityInputSource source, IMixedRealityController controller, Handedness handedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Handedness handedness Vector3 touchPoint RaiseOnTouchStarted(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) Declaration public void RaiseOnTouchStarted(IMixedRealityInputSource source, IMixedRealityController controller, Handedness handedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Handedness handedness Vector3 touchPoint RaiseOnTouchUpdated(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) Declaration public void RaiseOnTouchUpdated(IMixedRealityInputSource source, IMixedRealityController controller, Handedness handedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Handedness handedness Vector3 touchPoint RaisePointerClicked(IMixedRealityPointer, MixedRealityInputAction, Int32, Handedness, IMixedRealityInputSource) Raise the pointer clicked event. Declaration public void RaisePointerClicked(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, int count, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Int32 count Handedness handedness IMixedRealityInputSource inputSource RaisePointerDown(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer down event. Declaration public void RaisePointerDown(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer The pointer where the event originates. MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePointerDragged(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer dragged event. Declaration public void RaisePointerDragged(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer The pointer where the event originates. MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePointerUp(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer up event. Declaration public void RaisePointerUp(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePoseInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, MixedRealityPose) Raise the 6 degrees of freedom input event. Declaration public void RaisePoseInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction MixedRealityPose inputData RaisePositionInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector2) Raise the 2 degrees of freedom input event. Declaration public void RaisePositionInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Vector2 inputPosition) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Vector2 inputPosition RaisePositionInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector3) Raise the 3 degrees of freedom input event. Declaration public void RaisePositionInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Vector3 position RaisePreFocusChanged(IMixedRealityPointer, GameObject, GameObject) Raise the pre-focus changed event. Declaration public void RaisePreFocusChanged(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that the focus change event is raised on. GameObject oldFocusedObject The old focused object. GameObject newFocusedObject The new focused object. Remarks This event is useful for doing logic before the focus changed event. RaiseRotationInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Quaternion) Raise the 3 degrees of freedom input event. Declaration public void RaiseRotationInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Quaternion rotation RaiseSourceDetected(IMixedRealityInputSource, IMixedRealityController) Raise the event that the Input Source was detected. Declaration public void RaiseSourceDetected(IMixedRealityInputSource source, IMixedRealityController controller = null) Parameters Type Name Description IMixedRealityInputSource source The detected Input Source. IMixedRealityController controller RaiseSourceLost(IMixedRealityInputSource, IMixedRealityController) Raise the event that the Input Source was lost. Declaration public void RaiseSourceLost(IMixedRealityInputSource source, IMixedRealityController controller = null) Parameters Type Name Description IMixedRealityInputSource source The lost Input Source. IMixedRealityController controller RaiseSourcePoseChanged(IMixedRealityInputSource, IMixedRealityController, MixedRealityPose) Raise the event that the Input Source position was changed. Declaration public void RaiseSourcePoseChanged(IMixedRealityInputSource source, IMixedRealityController controller, MixedRealityPose position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller MixedRealityPose position RaiseSourcePositionChanged(IMixedRealityInputSource, IMixedRealityController, Vector2) Raise the event that the Input Source position was changed. Declaration public void RaiseSourcePositionChanged(IMixedRealityInputSource source, IMixedRealityController controller, Vector2 position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Vector2 position RaiseSourcePositionChanged(IMixedRealityInputSource, IMixedRealityController, Vector3) Raise the event that the Input Source position was changed. Declaration public void RaiseSourcePositionChanged(IMixedRealityInputSource source, IMixedRealityController controller, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Vector3 position RaiseSourceRotationChanged(IMixedRealityInputSource, IMixedRealityController, Quaternion) Raise the event that the Input Source position was changed. Declaration public void RaiseSourceRotationChanged(IMixedRealityInputSource source, IMixedRealityController controller, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Quaternion rotation RaiseSourceTrackingStateChanged(IMixedRealityInputSource, IMixedRealityController, TrackingState) Raise the event that the Input Source's tracking state has changed. Declaration public void RaiseSourceTrackingStateChanged(IMixedRealityInputSource source, IMixedRealityController controller, TrackingState state) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller TrackingState state RaiseSpeechCommandRecognized(IMixedRealityInputSource, RecognitionConfidenceLevel, TimeSpan, DateTime, SpeechCommands) Declaration public void RaiseSpeechCommandRecognized(IMixedRealityInputSource source, RecognitionConfidenceLevel confidence, TimeSpan phraseDuration, DateTime phraseStartTime, SpeechCommands command) Parameters Type Name Description IMixedRealityInputSource source RecognitionConfidenceLevel confidence TimeSpan phraseDuration DateTime phraseStartTime SpeechCommands command Register(GameObject) Register a GameObject to listen to events that will receive all input events, regardless of which other GameObject s might have handled the event beforehand. Declaration public override void Register(GameObject listener) Parameters Type Name Description GameObject listener Listener to add. Overrides BaseEventSystem.Register(GameObject) Remarks Useful for listening to events when the GameObject is currently not being raycasted against by the FocusProvider . RequestNewGenericInputSource(String, IMixedRealityPointer[], InputSourceType) Declaration public IMixedRealityInputSource RequestNewGenericInputSource(string name, IMixedRealityPointer[] pointers = null, InputSourceType sourceType = InputSourceType.Other) Parameters Type Name Description String name IMixedRealityPointer [] pointers InputSourceType sourceType Returns Type Description IMixedRealityInputSource Reset() Optional Reset function to perform that will Reset the service, for example, whenever there is a profile change. Declaration public override void Reset() Overrides BaseDataProviderAccessCoreSystem.Reset() Unregister(GameObject) Unregister a GameObject from listening to input events. Declaration public override void Unregister(GameObject listener) Parameters Type Name Description GameObject listener Overrides BaseEventSystem.Unregister(GameObject) Events InputDisabled Declaration public event BaseEventSystem.Action InputDisabled Event Type Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action InputEnabled Declaration public event BaseEventSystem.Action InputEnabled Event Type Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action Implements IMixedRealityDataProviderAccess IMixedRealityInputSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSystemProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInputSystemProfile.html",
    "title": "Class MixedRealityInputSystemProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSystemProfile Configuration profile settings for setting up controller pointers. Inheritance Object BaseMixedRealityProfile MixedRealityInputSystemProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSystemProfile : BaseMixedRealityProfile Properties ControllerMappingProfile Active profile for controller mapping configuration Declaration public MixedRealityControllerMappingProfile ControllerMappingProfile { get; } Property Value Type Description MixedRealityControllerMappingProfile ControllerVisualizationProfile Device profile for rendering spatial controllers. Declaration public MixedRealityControllerVisualizationProfile ControllerVisualizationProfile { get; } Property Value Type Description MixedRealityControllerVisualizationProfile DataProviderConfigurations List of input data provider configurations to initialize and manage by the Input System registrar Declaration public MixedRealityInputDataProviderConfiguration[] DataProviderConfigurations { get; } Property Value Type Description MixedRealityInputDataProviderConfiguration [] FocusIndividualCompoundCollider In case of a compound collider, does the individual collider receive focus Declaration public bool FocusIndividualCompoundCollider { get; set; } Property Value Type Description Boolean FocusProviderType The focus provider service concrete type to use when raycasting. Declaration public SystemType FocusProviderType { get; } Property Value Type Description SystemType FocusQueryBufferSize Maximum number of colliders that can be detected in a SphereOverlap scene query. Declaration public int FocusQueryBufferSize { get; } Property Value Type Description Int32 GesturesProfile Gesture Mapping Profile for recognizing gestures across all platforms. Declaration public MixedRealityGesturesProfile GesturesProfile { get; } Property Value Type Description MixedRealityGesturesProfile HandTrackingProfile Active profile for hands tracking Declaration public MixedRealityHandTrackingProfile HandTrackingProfile { get; } Property Value Type Description MixedRealityHandTrackingProfile InputActionRulesProfile Input Action Rules Profile for raising actions based on specific criteria. Declaration public MixedRealityInputActionRulesProfile InputActionRulesProfile { get; } Property Value Type Description MixedRealityInputActionRulesProfile InputActionsProfile Input System Action Mapping profile for wiring up Controller input to Actions. Declaration public MixedRealityInputActionsProfile InputActionsProfile { get; } Property Value Type Description MixedRealityInputActionsProfile IsControllerMappingEnabled Enable and configure the devices for your application. Declaration public bool IsControllerMappingEnabled { get; } Property Value Type Description Boolean IsSpeechSupported Returns whether speech is supported for the current language or not Declaration public bool IsSpeechSupported { get; } Property Value Type Description Boolean PointerProfile Pointer configuration options Declaration public MixedRealityPointerProfile PointerProfile { get; } Property Value Type Description MixedRealityPointerProfile RaycastProviderType The raycast provider service concrete type to use when raycasting. Declaration public SystemType RaycastProviderType { get; } Property Value Type Description SystemType SpeechCommandsProfile Speech commands profile for configured speech commands, for use by the speech recognition system Declaration public MixedRealitySpeechCommandsProfile SpeechCommandsProfile { get; } Property Value Type Description MixedRealitySpeechCommandsProfile"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInteractionMapping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityInteractionMapping.html",
    "title": "Class MixedRealityInteractionMapping | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInteractionMapping Maps the capabilities of controllers, linking the Physical inputs of a controller to a Logical construct in a runtime project Inheritance Object MixedRealityInteractionMapping Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityInteractionMapping Remarks One definition should exist for each physical device input, such as buttons, triggers, joysticks, dpads, and more. Constructors MixedRealityInteractionMapping(MixedRealityInteractionMapping) Declaration public MixedRealityInteractionMapping(MixedRealityInteractionMapping mixedRealityInteractionMapping) Parameters Type Name Description MixedRealityInteractionMapping mixedRealityInteractionMapping MixedRealityInteractionMapping(UInt32, String, AxisType, DeviceInputType, KeyCode) The constructor for a new Interaction Mapping definition Declaration public MixedRealityInteractionMapping(uint id, string description, AxisType axisType, DeviceInputType inputType, KeyCode keyCode) Parameters Type Name Description UInt32 id Identity for mapping String description The description of the interaction mapping. AxisType axisType The axis that the mapping operates on, also denotes the data type for the mapping DeviceInputType inputType The physical input device / control KeyCode keyCode Optional KeyCode value to get input from Unity's old input system MixedRealityInteractionMapping(UInt32, String, AxisType, DeviceInputType, MixedRealityInputAction, KeyCode, String, String, Boolean, Boolean) The constructor for a new Interaction Mapping definition Declaration public MixedRealityInteractionMapping(uint id, string description, AxisType axisType, DeviceInputType inputType, MixedRealityInputAction inputAction, KeyCode keyCode = null, string axisCodeX = \"\", string axisCodeY = \"\", bool invertXAxis = false, bool invertYAxis = false) Parameters Type Name Description UInt32 id Identity for mapping String description The description of the interaction mapping. AxisType axisType The axis that the mapping operates on, also denotes the data type for the mapping DeviceInputType inputType The physical input device / control MixedRealityInputAction inputAction The logical MixedRealityInputAction that this input performs KeyCode keyCode Optional KeyCode value to get input from Unity's old input system String axisCodeX Optional horizontal or single axis value to get axis data from Unity's old input system. String axisCodeY Optional vertical axis value to get axis data from Unity's old input system. Boolean invertXAxis Optional horizontal axis invert option. Boolean invertYAxis Optional vertical axis invert option. MixedRealityInteractionMapping(UInt32, String, AxisType, DeviceInputType, String, String, Boolean, Boolean) The constructor for a new Interaction Mapping definition Declaration public MixedRealityInteractionMapping(uint id, string description, AxisType axisType, DeviceInputType inputType, string axisCodeX = \"\", string axisCodeY = \"\", bool invertXAxis = false, bool invertYAxis = false) Parameters Type Name Description UInt32 id Identity for mapping String description The description of the interaction mapping. AxisType axisType The axis that the mapping operates on, also denotes the data type for the mapping DeviceInputType inputType The physical input device / control String axisCodeX Optional horizontal or single axis value to get axis data from Unity's old input system. String axisCodeY Optional vertical axis value to get axis data from Unity's old input system. Boolean invertXAxis Optional horizontal axis invert option. Boolean invertYAxis Optional vertical axis invert option. Properties AxisCodeX Optional horizontal or single axis value to get axis data from Unity's old input system. Declaration public string AxisCodeX { get; } Property Value Type Description String AxisCodeY Optional vertical axis value to get axis data from Unity's old input system. Declaration public string AxisCodeY { get; } Property Value Type Description String AxisType The axis type of the button, e.g. Analogue, Digital, etc. Declaration public AxisType AxisType { get; } Property Value Type Description AxisType BoolData The Bool data value. Declaration public bool BoolData { get; set; } Property Value Type Description Boolean Remarks Only supported for a Digital mapping axis type Changed Has the value changed since the last reading. Declaration public bool Changed { get; } Property Value Type Description Boolean Description The description of the interaction mapping. Declaration public string Description { get; } Property Value Type Description String FloatData The Float data value. Declaration public float FloatData { get; set; } Property Value Type Description Single Remarks Only supported for a SingleAxis mapping axis type Id The Id assigned to the Interaction. Declaration public uint Id { get; } Property Value Type Description UInt32 InputType The primary action of the input as defined by the controller SDK. Declaration public DeviceInputType InputType { get; } Property Value Type Description DeviceInputType InvertXAxis Should the X axis be inverted? Declaration public bool InvertXAxis { get; set; } Property Value Type Description Boolean Remarks Only valid for SingleAxis and DualAxis inputs. InvertYAxis Should the Y axis be inverted? Declaration public bool InvertYAxis { get; set; } Property Value Type Description Boolean Remarks Only valid for DualAxis inputs. KeyCode Optional KeyCode value to get input from Unity's old input system. Declaration public KeyCode KeyCode { get; } Property Value Type Description KeyCode MixedRealityInputAction Action to be raised to the Input Manager when the input data has changed. Declaration public MixedRealityInputAction MixedRealityInputAction { get; } Property Value Type Description MixedRealityInputAction PoseData The Pose data value. Declaration public MixedRealityPose PoseData { get; set; } Property Value Type Description MixedRealityPose Remarks Only supported for a SixDof mapping axis type PositionData The ThreeDof Vector3 Position data value. Declaration public Vector3 PositionData { get; set; } Property Value Type Description Vector3 Remarks Only supported for a ThreeDof mapping axis type RawData The Raw (object) data value. Declaration public object RawData { get; set; } Property Value Type Description Object Remarks Only supported for a Raw mapping axis type RotationData The ThreeDof Quaternion Rotation data value. Declaration public Quaternion RotationData { get; set; } Property Value Type Description Quaternion Remarks Only supported for a ThreeDof mapping axis type Vector2Data The Vector2 data value. Declaration public Vector2 Vector2Data { get; set; } Property Value Type Description Vector2 Remarks Only supported for a DualAxis mapping axis type"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityMouseInputProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityMouseInputProfile.html",
    "title": "Class MixedRealityMouseInputProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityMouseInputProfile Inheritance Object BaseMixedRealityProfile MixedRealityMouseInputProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityMouseInputProfile : BaseMixedRealityProfile Properties CursorSpeed Defines the mouse cursor speed multiplier used to scale the mouse cursor delta. Declaration public float CursorSpeed { get; } Property Value Type Description Single WheelSpeed Defines the mouse wheel speed multiplier used to scale the scroll wheel delta. Declaration public float WheelSpeed { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityMouseInputProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityMouseInputProfileInspector.html",
    "title": "Class MixedRealityMouseInputProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityMouseInputProfileInspector Inheritance Object MixedRealityMouseInputProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityMouseInputProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityPointerEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityPointerEventData.html",
    "title": "Class MixedRealityPointerEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPointerEventData Describes an Input Event that involves a tap, click, or touch. Inheritance Object BaseInputEventData InputEventData MixedRealityPointerEventData Inherited Members InputEventData.Handedness InputEventData.Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityPointerEventData : InputEventData Constructors MixedRealityPointerEventData(EventSystem) Constructor. Declaration public MixedRealityPointerEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties Count Number of Clicks, Taps, or Presses that triggered the event. Declaration public int Count { get; } Property Value Type Description Int32 Pointer Pointer for the Input Event Declaration public IMixedRealityPointer Pointer { get; } Property Value Type Description IMixedRealityPointer Methods Initialize(IMixedRealityPointer, Handedness, MixedRealityInputAction, Int32) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, Handedness handedness, MixedRealityInputAction inputAction, int count = 0) Parameters Type Name Description IMixedRealityPointer pointer Handedness handedness MixedRealityInputAction inputAction Int32 count Initialize(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource, Int32) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null, int count = 0) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource Int32 count"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SourcePoseEventData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SourcePoseEventData-1.html",
    "title": "Class SourcePoseEventData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class SourcePoseEventData<T> Describes a source change event. Inheritance Object BaseInputEventData SourceStateEventData SourcePoseEventData<T> Inherited Members SourceStateEventData.Controller SourceStateEventData.Initialize(IMixedRealityInputSource, IMixedRealityController) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SourcePoseEventData<T> : SourceStateEventData Type Parameters Name Description T Remarks Source State events do not have an associated MixedRealityInputAction . Constructors SourcePoseEventData(EventSystem) Constructor. Declaration public SourcePoseEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties SourceData The new position of the input source. Declaration public T SourceData { get; } Property Value Type Description T Methods Initialize(IMixedRealityInputSource, IMixedRealityController, T) Populates the event with data. Declaration public void Initialize(IMixedRealityInputSource inputSource, IMixedRealityController controller, T data) Parameters Type Name Description IMixedRealityInputSource inputSource IMixedRealityController controller T data"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SourceStateEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SourceStateEventData.html",
    "title": "Class SourceStateEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SourceStateEventData Describes an source state event that has a source id. Inheritance Object BaseInputEventData SourceStateEventData SourcePoseEventData<T> Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SourceStateEventData : BaseInputEventData Remarks Source State events do not have an associated MixedRealityInputAction . Constructors SourceStateEventData(EventSystem) Constructor. Declaration public SourceStateEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties Controller Declaration public IMixedRealityController Controller { get; } Property Value Type Description IMixedRealityController Methods Initialize(IMixedRealityInputSource, IMixedRealityController) Populates the event with data. Declaration public void Initialize(IMixedRealityInputSource inputSource, IMixedRealityController controller) Parameters Type Name Description IMixedRealityInputSource inputSource IMixedRealityController controller"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpeechCommands.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpeechCommands.html",
    "title": "Struct SpeechCommands | Mixed Reality Toolkit Documentation",
    "keywords": "Struct SpeechCommands Data structure for mapping Voice and Keyboard input to MixedRealityInputAction s that can be raised by the Input System. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct SpeechCommands Constructors SpeechCommands(String, KeyCode, MixedRealityInputAction, String) Constructor. Declaration public SpeechCommands(string keyword, KeyCode keyCode, MixedRealityInputAction action, string localizationKey = \"\") Parameters Type Name Description String keyword The Keyword. KeyCode keyCode The KeyCode. MixedRealityInputAction action The Action to perform when Keyword or KeyCode is recognized. String localizationKey An optional key to use to override the keyword with a localized version Properties Action The MixedRealityInputAction that is raised by either the Keyword or KeyCode. Declaration public MixedRealityInputAction Action { get; } Property Value Type Description MixedRealityInputAction KeyCode The corresponding KeyCode that also raises the same action as the Keyword. Declaration public KeyCode KeyCode { get; } Property Value Type Description KeyCode Keyword The Fallback Keyword to listen for, or the localization key if no fallback keyword was set. Declaration public string Keyword { get; } Property Value Type Description String LocalizedKeyword The localized version of the keyword Declaration public string LocalizedKeyword { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpeechEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpeechEventData.html",
    "title": "Class SpeechEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechEventData Describes an input event that involves keyword recognition. Inheritance Object BaseInputEventData SpeechEventData Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpeechEventData : BaseInputEventData Constructors SpeechEventData(EventSystem) Constructor. Declaration public SpeechEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties Command The text that was recognized. Declaration public SpeechCommands Command { get; } Property Value Type Description SpeechCommands Confidence A measure of correct recognition certainty. Declaration public RecognitionConfidenceLevel Confidence { get; } Property Value Type Description RecognitionConfidenceLevel PhraseDuration The time it took for the phrase to be uttered. Declaration public TimeSpan PhraseDuration { get; } Property Value Type Description TimeSpan PhraseStartTime The moment in UTC time when uttering of the phrase began. Declaration public DateTime PhraseStartTime { get; } Property Value Type Description DateTime Methods Initialize(IMixedRealityInputSource, RecognitionConfidenceLevel, TimeSpan, DateTime, SpeechCommands) Populates the event with data. Declaration public void Initialize(IMixedRealityInputSource inputSource, RecognitionConfidenceLevel confidence, TimeSpan phraseDuration, DateTime phraseStartTime, SpeechCommands command) Parameters Type Name Description IMixedRealityInputSource inputSource RecognitionConfidenceLevel confidence TimeSpan phraseDuration DateTime phraseStartTime SpeechCommands command"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpeechInputHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpeechInputHandler.html",
    "title": "Class SpeechInputHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechInputHandler This component handles the speech input events raised form the IMixedRealityInputSystem . Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler SpeechInputHandler Implements IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler Inherited Members BaseInputHandler.IsFocusRequired BaseInputHandler.OnEnable() BaseInputHandler.Update() BaseInputHandler.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpeechInputHandler : BaseInputHandler, IMixedRealitySpeechHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Properties Keywords The keywords to be recognized and optional keyboard shortcuts. Declaration public KeywordAndResponse[] Keywords { get; } Property Value Type Description KeywordAndResponse [] SpeechConfirmationTooltipPrefab Tooltip prefab used to display confirmation label. Optional. Declaration public SpeechConfirmationTooltip SpeechConfirmationTooltipPrefab { get; set; } Property Value Type Description SpeechConfirmationTooltip Methods AddResponse(String, UnityAction) Declaration public void AddResponse(string keyword, UnityAction action) Parameters Type Name Description String keyword UnityAction action RegisterHandlers() Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() RemoveResponse(String, UnityAction) Declaration public void RemoveResponse(string keyword, UnityAction action) Parameters Type Name Description String keyword UnityAction action Start() Declaration protected override void Start() Overrides BaseInputHandler.Start() UnregisterHandlers() Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Explicit Interface Implementations IMixedRealitySpeechHandler.OnSpeechKeywordRecognized(SpeechEventData) Declaration void IMixedRealitySpeechHandler.OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData Implements IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpherePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpherePointer.html",
    "title": "Class SpherePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpherePointer Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer SpherePointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityNearPointer IMixedRealityPointer IEqualityComparer Inherited Members BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.OnEnable() BaseControllerPointer.Start() BaseControllerPointer.OnDisable() BaseControllerPointer.Controller BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SphereCastRadius BaseControllerPointer.Position BaseControllerPointer.Rotation BaseControllerPointer.OnPostSceneQuery() BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() BaseControllerPointer.OnSourceLost(SourceStateEventData) BaseControllerPointer.OnInputUp(InputEventData) BaseControllerPointer.OnInputDown(InputEventData) ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpherePointer : BaseControllerPointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityNearPointer, IMixedRealityPointer, IEqualityComparer Fields triggerInteraction Declaration protected QueryTriggerInteraction triggerInteraction Field Value Type Description QueryTriggerInteraction Properties GrabLayerMasks The LayerMasks, in prioritized order, that are used to determine the touchable objects. Declaration public LayerMask[] GrabLayerMasks { get; } Property Value Type Description LayerMask [] Remarks Only NearInteractionGrabbables in one of the LayerMasks will raise events. IsInteractionEnabled Test if the pointer is within the grabbable radius of collider that's both on a grabbable layer mask, and has a NearInteractionGrabbable. Uses SphereCastRadius to determine if near an object. Note: if focus on pointer is locked, will always return true. Declaration public override bool IsInteractionEnabled { get; } Property Value Type Description Boolean True if the pointer is within the grabbable radius of collider that's both on a grabbable layer mask, and has a NearInteractionGrabbable. Overrides BaseControllerPointer.IsInteractionEnabled IsNearObject Test if the pointer is near any collider that's both on a grabbable layer mask, and has a NearInteractionGrabbable. Uses SphereCastRadius + NearObjectMargin to determine if near an object. Declaration public bool IsNearObject { get; } Property Value Type Description Boolean True if the pointer is near any collider that's both on a grabbable layer mask, and has a NearInteractionGrabbable. NearObjectMargin Additional distance on top of SphereCastRadius when pointer is considered 'near' an object and far interaction will turn off. Declaration public float NearObjectMargin { get; } Property Value Type Description Single Remarks This creates a dead zone in which far interaction is disabled before objects become grabbable. NearObjectRadius Distance at which the pointer is considered \"near\" an object. Declaration public float NearObjectRadius { get; } Property Value Type Description Single Remarks Sum of SphereCastRadius and NearObjectMargin . Entering the NearObjectRadius disables far interaction. SceneQueryBufferSize Maximum number of colliders that can be detected in a scene query. Declaration public int SceneQueryBufferSize { get; } Property Value Type Description Int32 SceneQueryType The type of physics scene query to use. Declaration public override SceneQueryType SceneQueryType { get; set; } Property Value Type Description SceneQueryType Overrides BaseControllerPointer.SceneQueryType TriggerInteraction Specify whether queries for grabbable objects hit triggers. Declaration public QueryTriggerInteraction TriggerInteraction { get; } Property Value Type Description QueryTriggerInteraction Methods OnPreSceneQuery() Called before performing the scene query. Declaration public override void OnPreSceneQuery() Overrides BaseControllerPointer.OnPreSceneQuery() TryGetDistanceToNearestSurface(out Single) Near pointers often interact with surfaces. This method provides a mechanism to get the distance to the closest surface the near pointer is interacting with. Declaration public bool TryGetDistanceToNearestSurface(out float distance) Parameters Type Name Description Single distance Out parameter filled with the distance along the surface normal from the surface to the pointer if available, otherwise 0.0f. Returns Type Description Boolean True if a distance was retrieved, false if not. TryGetNearGraspPoint(out Vector3) Gets the position of where grasp happens For IMixedRealityHand it's the average of index and thumb. For any other IMixedRealityController, return just the pointer origin Declaration public bool TryGetNearGraspPoint(out Vector3 result) Parameters Type Name Description Vector3 result Returns Type Description Boolean TryGetNormalToNearestSurface(out Vector3) Near pointers often interact with surfaces. This method provides a mechanism to get the normal of the closest surface the near pointer is interacting with. Declaration public bool TryGetNormalToNearestSurface(out Vector3 normal) Parameters Type Name Description Vector3 normal Out parameter filled with the surface normal if available, otherwise Vector3.zero . Returns Type Description Boolean True if a normal was retrieved, false if not. Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityNearPointer IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpherePointerGrabPoint.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpherePointerGrabPoint.html",
    "title": "Class SpherePointerGrabPoint | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpherePointerGrabPoint Inheritance Object SpherePointerGrabPoint Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpherePointerGrabPoint : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpherePointerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpherePointerInspector.html",
    "title": "Class SpherePointerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpherePointerInspector Inheritance Object SpherePointerInspector Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpherePointerInspector : BaseControllerPointerInspector Methods OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ParabolaPhysicalLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ParabolaPhysicalLineDataProviderInspector.html",
    "title": "Class ParabolaPhysicalLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolaPhysicalLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector ParabolaPhysicalLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview BaseLineDataProviderInspector.OnSceneGUI() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ParabolaPhysicalLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ParabolicConstrainedLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ParabolicConstrainedLineDataProviderInspector.html",
    "title": "Class ParabolicConstrainedLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolicConstrainedLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector ParabolicConstrainedLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ParabolicConstrainedLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ProjectPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ProjectPreferences.html",
    "title": "Class ProjectPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProjectPreferences Utility to save preferences that should be saved per project (i.e to source control) across MRTK. Supports primitive preferences bool, int, and float Inheritance Object ProjectPreferences Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ProjectPreferences : ScriptableObject Properties FilePath Declaration protected static string FilePath { get; } Property Value Type Description String Methods Get(String, Boolean) Get bool from Project Preferences. If no entry found, then create new entry with provided defaultValue Declaration public static bool Get(string key, bool defaultValue) Parameters Type Name Description String key Boolean defaultValue Returns Type Description Boolean Get(String, Int32) Get int from Project Preferences. If no entry found, then create new entry with provided defaultValue Declaration public static int Get(string key, int defaultValue) Parameters Type Name Description String key Int32 defaultValue Returns Type Description Int32 Get(String, Single) Get float from Project Preferences. If no entry found, then create new entry with provided defaultValue Declaration public static float Get(string key, float defaultValue) Parameters Type Name Description String key Single defaultValue Returns Type Description Single Get(String, String) Get string from Project Preferences. If no entry found, then create new entry with provided defaultValue Declaration public static string Get(string key, string defaultValue) Parameters Type Name Description String key String defaultValue Returns Type Description String RemoveBool(String) Remove key item from preferences if applicable Declaration public static void RemoveBool(string key) Parameters Type Name Description String key RemoveFloat(String) Remove key item from preferences if applicable Declaration public static void RemoveFloat(string key) Parameters Type Name Description String key RemoveInt(String) Remove key item from preferences if applicable Declaration public static void RemoveInt(string key) Parameters Type Name Description String key RemoveString(String) Remove key item from preferences if applicable Declaration public static void RemoveString(string key) Parameters Type Name Description String key Set(String, Boolean, Boolean) Save bool to preferences and save to ScriptableObject with key given. Declaration public static void Set(string key, bool value, bool forceSave = true) Parameters Type Name Description String key Boolean value Boolean forceSave Remarks If forceSave is true (default), then will call AssetDatabase.SaveAssets which saves all assets after execution Set(String, Int32, Boolean) Save int to preferences and save to ScriptableObject with key given. Declaration public static void Set(string key, int value, bool forceSave = true) Parameters Type Name Description String key Int32 value Boolean forceSave Remarks If forceSave is true (default), then will call AssetDatabase.SaveAssets which saves all assets after execution Set(String, Single, Boolean) Save float to preferences and save to ScriptableObject with key given. Declaration public static void Set(string key, float value, bool forceSave = true) Parameters Type Name Description String key Single value Boolean forceSave Remarks If forceSave is true (default), then will call AssetDatabase.SaveAssets which saves all assets after execution Set(String, String, Boolean) Save string to preferences and save to ScriptableObject with key given. Declaration public static void Set(string key, string value, bool forceSave = true) Parameters Type Name Description String key String value Boolean forceSave Remarks If forceSave is true (default), then will call AssetDatabase.SaveAssets which saves all assets after execution"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.RectangleLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.RectangleLineDataProviderInspector.html",
    "title": "Class RectangleLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class RectangleLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector RectangleLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class RectangleLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ReserializeUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ReserializeUtility.html",
    "title": "Class ReserializeUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class ReserializeUtility Adds menu items to automate reserializing specific files in Unity. Inheritance Object ReserializeUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ReserializeUtility Remarks Reserialization can be needed between Unity versions or when the underlying script or asset definitions are changed. Methods ReserializeSelection() Declaration public static void ReserializeSelection()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ScreenshotUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.ScreenshotUtility.html",
    "title": "Class ScreenshotUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScreenshotUtility Utility class to aide in taking screenshots via menu items and public APIs. Screenshots can be capture at various resolutions and with the current camera's clear color or a transparent clear color for use in easy post compositing of images. Inheritance Object ScreenshotUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ScreenshotUtility Methods CaptureScreenshot(String, Int32, Boolean, Camera) Captures a screenshot with the current main camera's clear color. Declaration public static bool CaptureScreenshot(string path, int superSize = 1, bool transparentClearColor = false, Camera camera = null) Parameters Type Name Description String path The path to save the screenshot to. Int32 superSize The multiplication factor to apply to the native resolution. Boolean transparentClearColor True if the captured screenshot should have a transparent clear color. Which can be used for screenshot overlays. Camera camera The optional camera to take the screenshot from. Returns Type Description Boolean True on successful screenshot capture, false otherwise. GetScreenshotDirectory() Gets a directory which is safe for saving screenshots. Declaration public static string GetScreenshotDirectory() Returns Type Description String A directory safe for saving screenshots. GetScreenshotPath() Gets a unique screenshot path with a file name based on date and time. Declaration public static string GetScreenshotPath() Returns Type Description String A unique screenshot path."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.FieldSearchResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.FieldSearchResult.html",
    "title": "Struct FieldSearchResult | Mixed Reality Toolkit Documentation",
    "keywords": "Struct FieldSearchResult Struct for storing search results Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Search Assembly : cs.temp.dll.dll Syntax public struct FieldSearchResult Fields MatchStrength Declaration public int MatchStrength Field Value Type Description Int32 Property Declaration public SerializedProperty Property Field Value Type Description SerializedProperty"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.MixedRealitySearchInspectorUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.MixedRealitySearchInspectorUtility.html",
    "title": "Class MixedRealitySearchInspectorUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySearchInspectorUtility Utility class for drawing search interface. Draws a search field by default. When search is active, draws search results. Also handles the business of storing search configuration and results so searching objects don't have to. Inheritance Object MixedRealitySearchInspectorUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Search Assembly : cs.temp.dll.dll Syntax public static class MixedRealitySearchInspectorUtility Methods DrawSearchInterface(UnityEngine.Object) Draws a search field and (if results have been returned) search results. Declaration public static bool DrawSearchInterface(UnityEngine.Object target) Parameters Type Name Description UnityEngine.Object target Returns Type Description Boolean True if search results are being displayed."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.MixedRealitySearchUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.MixedRealitySearchUtility.html",
    "title": "Class MixedRealitySearchUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySearchUtility Utility for retrieving a Unity object's serialized fields with a configurable search. Inheritance Object MixedRealitySearchUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Search Assembly : cs.temp.dll.dll Syntax public static class MixedRealitySearchUtility Properties Searching True if a search is being executed. This must be false before calling StartProfileSearch. Declaration public static bool Searching { get; } Property Value Type Description Boolean Methods StartProfileSearch(UnityEngine.Object, SearchConfig, Action<Boolean, UnityEngine.Object, IReadOnlyCollection<ProfileSearchResult>>) Starts a profile search. 'Searching' must be false or an exception will be thrown. Declaration public static void StartProfileSearch(UnityEngine.Object profile, SearchConfig config, Action<bool, UnityEngine.Object, IReadOnlyCollection<ProfileSearchResult>> onSearchComplete) Parameters Type Name Description UnityEngine.Object profile Profile object to search. SearchConfig config Configuration for the search. Action < Boolean , UnityEngine.Object , IReadOnlyCollection < ProfileSearchResult >> onSearchComplete Action to invoke once search is complete - delivers final results."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.ProfileSearchResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.ProfileSearchResult.html",
    "title": "Class ProfileSearchResult | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProfileSearchResult Struct for pairing profiles with a set of search results Inheritance Object ProfileSearchResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Search Assembly : cs.temp.dll.dll Syntax public class ProfileSearchResult Fields Fields Declaration public List<FieldSearchResult> Fields Field Value Type Description List < FieldSearchResult > IsCustomProfile Declaration public bool IsCustomProfile Field Value Type Description Boolean Profile Declaration public UnityEngine.Object Profile Field Value Type Description UnityEngine.Object ProfileMatchStrength Declaration public int ProfileMatchStrength Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.SearchConfig.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.Search.SearchConfig.html",
    "title": "Struct SearchConfig | Mixed Reality Toolkit Documentation",
    "keywords": "Struct SearchConfig Struct for configuring a search. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor.Search Assembly : cs.temp.dll.dll Syntax public struct SearchConfig Fields Keywords Declaration public HashSet<string> Keywords Field Value Type Description HashSet < String > RequireAllKeywords Declaration public bool RequireAllKeywords Field Value Type Description Boolean SearchFieldContent Declaration public bool SearchFieldContent Field Value Type Description Boolean SearchFieldString Declaration public string SearchFieldString Field Value Type Description String SearchTooltips Declaration public bool SearchTooltips Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.CameraFaderQuad.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.CameraFaderQuad.html",
    "title": "Class CameraFaderQuad | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraFaderQuad Quad-based implementation if ICameraFader. Instantiates quads in front of cameras to achieve fade out / in effect. Inheritance Object CameraFaderQuad Implements ICameraFader Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public class CameraFaderQuad : ICameraFader Properties State Declaration public CameraFaderState State { get; } Property Value Type Description CameraFaderState Methods FadeInAsync(Single) Applies a fade-in effect over time. Must be called after FadeOutAsync has completed. Declaration public Task FadeInAsync(float fadeInTime) Parameters Type Name Description Single fadeInTime The duration of the fade Returns Type Description Task FadeOutAsync(Single, Color, IEnumerable<Camera>) Applies a fade-out effect over time. Declaration public Task FadeOutAsync(float fadeOutTime, Color color, IEnumerable<Camera> targets) Parameters Type Name Description Single fadeOutTime The duration of the fade Color color The color of the fade IEnumerable < Camera > targets Which cameras will receive the effect Returns Type Description Task Initialize(SceneTransitionServiceProfile) Initializes the camera fader class with a transition profile. Declaration public void Initialize(SceneTransitionServiceProfile profile) Parameters Type Name Description SceneTransitionServiceProfile profile The scene transition service profile. OnDestroy() Used to destroy any assets created. May be called in middle of a transition. Declaration public void OnDestroy() Implements ICameraFader"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.CameraFaderState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.CameraFaderState.html",
    "title": "Enum CameraFaderState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CameraFaderState Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public enum CameraFaderState Fields Name Description Clear FadingIn FadingOut Opaque"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.CameraFaderTargets.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.CameraFaderTargets.html",
    "title": "Enum CameraFaderTargets | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CameraFaderTargets Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public enum CameraFaderTargets Fields Name Description All Custom Main UI"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.ICameraFader.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.ICameraFader.html",
    "title": "Interface ICameraFader | Mixed Reality Toolkit Documentation",
    "keywords": "Interface ICameraFader Basic interface for fading in / out a color on a camera. Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public interface ICameraFader Properties State Declaration CameraFaderState State { get; } Property Value Type Description CameraFaderState Methods FadeInAsync(Single) Applies a fade-in effect over time. Must be called after FadeOutAsync has completed. Declaration Task FadeInAsync(float fadeInTime) Parameters Type Name Description Single fadeInTime The duration of the fade Returns Type Description Task FadeOutAsync(Single, Color, IEnumerable<Camera>) Applies a fade-out effect over time. Declaration Task FadeOutAsync(float fadeOutTime, Color color, IEnumerable<Camera> targets) Parameters Type Name Description Single fadeOutTime The duration of the fade Color color The color of the fade IEnumerable < Camera > targets Which cameras will receive the effect Returns Type Description Task Initialize(SceneTransitionServiceProfile) Initializes the camera fader class with a transition profile. Declaration void Initialize(SceneTransitionServiceProfile profile) Parameters Type Name Description SceneTransitionServiceProfile profile The scene transition service profile. OnDestroy() Used to destroy any assets created. May be called in middle of a transition. Declaration void OnDestroy()"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.ISceneTransitionService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.ISceneTransitionService.html",
    "title": "Interface ISceneTransitionService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface ISceneTransitionService Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public interface ISceneTransitionService : IMixedRealityExtensionService, IMixedRealityService, IDisposable Properties FadeColor The color to use when fading out. Declaration Color FadeColor { get; set; } Property Value Type Description Color FadeInTime The default time in seconds for fade in to complete. Declaration float FadeInTime { get; set; } Property Value Type Description Single FadeOutTime The default time in seconds for fade out to complete. Declaration float FadeOutTime { get; set; } Property Value Type Description Single FadeTargets Which cameras to target when fading. Declaration CameraFaderTargets FadeTargets { get; set; } Property Value Type Description CameraFaderTargets OnTransitionCompleted Called when transition ends. This is called at the end of a transition, not at the end of a scene load. For scene load events, we recommend using IMixedRealitySceneSystem. Declaration Action OnTransitionCompleted { get; set; } Property Value Type Description Action OnTransitionStarted Called when transition starts. This is called at the beginning of a transition, not at the beginning of a scene load. For scene load events, we recommend using IMixedRealitySceneSystem. Declaration Action OnTransitionStarted { get; set; } Property Value Type Description Action TransitionInProgress True when a scene transition is in progress. Declaration bool TransitionInProgress { get; } Property Value Type Description Boolean TransitionProgress From 0 to 1 Declaration float TransitionProgress { get; } Property Value Type Description Single UseFadeColor Whether to use a fade color during transitions. Declaration bool UseFadeColor { get; set; } Property Value Type Description Boolean Methods DoSceneTransition(Func<Task>, Func<Task>, IProgressIndicator) Fades out, enables progress indicator, executes scene op 1, executes scene op 2, disables progress indicator, fades back in Declaration Task DoSceneTransition(Func<Task> sceneOp1, Func<Task> sceneOp2, IProgressIndicator progressIndicator = null) Parameters Type Name Description Func < Task > sceneOp1 Func < Task > sceneOp2 IProgressIndicator progressIndicator Returns Type Description Task DoSceneTransition(Func<Task>, IProgressIndicator) Fades out, enables progress indicator, execute scene operation, disables progress indicator, fades back in Declaration Task DoSceneTransition(Func<Task> sceneOperation, IProgressIndicator progressIndicator = null) Parameters Type Name Description Func < Task > sceneOperation IProgressIndicator progressIndicator If null, default progress indicator prefab will be used (or none if default is disabled in profile) Returns Type Description Task DoSceneTransition(IEnumerable<Func<Task>>, IProgressIndicator) Fades out, enables progress indicator, execute scene operations in order, disables progress indicator, fades back in Declaration Task DoSceneTransition(IEnumerable<Func<Task>> sceneOperations, IProgressIndicator progressIndicator = null) Parameters Type Name Description IEnumerable < Func < Task >> sceneOperations A set of tasks from the Scene System. IProgressIndicator progressIndicator If null, default progress indicator prefab will be used (or none if default is disabled in profile) Returns Type Description Task DoSceneTransition(IEnumerable<Func<Task>>, Single, Single, IProgressIndicator) Fades out, enables progress indicator, execute scene operations in order, disables progress indicator, fades back in Declaration Task DoSceneTransition(IEnumerable<Func<Task>> sceneOperations, float fadeOutTime, float fadeInTime, IProgressIndicator progressIndicator = null) Parameters Type Name Description IEnumerable < Func < Task >> sceneOperations A set of tasks from the Scene System. Single fadeOutTime Overrides the default FadeOutTIme value. Single fadeInTime Overrides the default FadeInTime value. IProgressIndicator progressIndicator If null, default progress indicator prefab will be used (or none if default is disabled in profile) Returns Type Description Task FadeIn() Fades target cameras in. Instant fade-out will occur if fade state is not opaque. Can be used independently of scene transitions provided no transition is taking place. Uses default FadeInTime. Declaration Task FadeIn() Returns Type Description Task FadeIn(Single) Fades target cameras in. Instant fade-out will occur if fade state is not opaque. Can be used independently of scene transitions provided no transition is taking place. Declaration Task FadeIn(float fadeInTime) Parameters Type Name Description Single fadeInTime Returns Type Description Task FadeOut() Fades target cameras out to color. Can be used independently of scene transitions provided no transition is taking place. Uses default FadeOutTime. Declaration Task FadeOut() Returns Type Description Task FadeOut(Single) Fades target cameras out to color. Can be used independently of scene transitions provided no transition is taking place. Declaration Task FadeOut(float fadeOutTime) Parameters Type Name Description Single fadeOutTime Returns Type Description Task HideProgressIndicator() Hides the default progress indicator. Task completes when hide animation is done. Can be used independently of scene transitions provided no transition is taking place. Declaration Task HideProgressIndicator() Returns Type Description Task SetCustomFadeTargetCameras(IEnumerable<Camera>) If FadeTargets is set to custom, you will need to provide a custom set of cameras for fading using this function PRIOR to calling DoSceneTransition. Declaration void SetCustomFadeTargetCameras(IEnumerable<Camera> customFadeTargetCameras) Parameters Type Name Description IEnumerable < Camera > customFadeTargetCameras SetProgressMessage(String) Sets the message on displayed progress indicator. If no progress indicator exists, has no effect. Declaration void SetProgressMessage(string message) Parameters Type Name Description String message SetProgressValue(Single) Sets progress to value from 0-1. If no progress indicator exists, has no effect. Declaration void SetProgressValue(float progress) Parameters Type Name Description Single progress ShowDefaultProgressIndicator() Instantiates the default progress indicator and returns its main transform. Can be used independently of scene transitions provided no transition is taking place. Declaration Transform ShowDefaultProgressIndicator() Returns Type Description Transform"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ColliderNearInteractionTouchable.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ColliderNearInteractionTouchable.html",
    "title": "Class ColliderNearInteractionTouchable | Mixed Reality Toolkit Documentation",
    "keywords": "Class ColliderNearInteractionTouchable Obsolete base class for all touchables using colliders. Use BaseNearInteractionTouchable instead. Inheritance Object BaseNearInteractionTouchable ColliderNearInteractionTouchable Inherited Members BaseNearInteractionTouchable.eventsToReceive BaseNearInteractionTouchable.EventsToReceive BaseNearInteractionTouchable.debounceThreshold BaseNearInteractionTouchable.DebounceThreshold BaseNearInteractionTouchable.DistanceToTouchable(Vector3, Vector3) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use BaseNearIntearctionTouchable instead of ColliderNearInteractionTouchable\", true)] public abstract class ColliderNearInteractionTouchable : BaseNearInteractionTouchable Properties ColliderEnabled Declaration public bool ColliderEnabled { get; } Property Value Type Description Boolean TouchableCollider Declaration public Collider TouchableCollider { get; } Property Value Type Description Collider Methods OnValidate() Declaration protected override void OnValidate() Overrides BaseNearInteractionTouchable.OnValidate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ControllerMappingLibrary.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ControllerMappingLibrary.html",
    "title": "Class ControllerMappingLibrary | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerMappingLibrary Helper utility to manage all the required Axis configuration for platforms, where required Inheritance Object ControllerMappingLibrary Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public static class ControllerMappingLibrary Fields AXIS_1 Mouse: Position Horizontal Movement HTC Vive Controller: Left Controller Trackpad (2) Horizontal Movement Oculus Touch Controller: Axis2D.PrimaryThumbstick Horizontal Movement Valve Knuckles Controller: Left Controller Trackpad Horizontal Movement Windows Mixed Reality Motion Controller: Left Thumbstick Horizontal Movement Xbox Controller: Left Thumbstick Horizontal Movement Declaration public const string AXIS_1 = \"AXIS_1\" Field Value Type Description String AXIS_10 HTC Vive Controller: Right Controller Trigger (7) Squeeze Oculus Touch Controller: Axis1D.SecondaryIndexTrigger Movement Squeeze Valve Knuckles Controller: Right Controller Trigger Squeeze Windows Mixed Reality Motion Controller: Right Trigger Squeeze Declaration public const string AXIS_10 = \"AXIS_10\" Field Value Type Description String AXIS_11 HTC Vive Controller: Left Controller Grip Button (8) Squeeze Oculus Touch Controller: Axis1D.PrimaryHandTrigger Squeeze Valve Knuckles Controller: Left Controller Grip Average Squeeze Windows Mixed Reality Motion Controller: Left Grip Squeeze Declaration public const string AXIS_11 = \"AXIS_11\" Field Value Type Description String AXIS_12 HTC Vive Controller: Right Controller Grip Button (8) Squeeze Oculus Touch Controller: Axis1D.SecondaryHandTrigger Squeeze Valve Knuckles Controller: Right Controller Grip Average Squeeze Windows Mixed Reality Motion Controller: Right Grip Squeeze Declaration public const string AXIS_12 = \"AXIS_12\" Field Value Type Description String AXIS_13 Oculus Touch Controller: Axis1D.PrimaryIndexTrigger Near Touch Declaration public const string AXIS_13 = \"AXIS_13\" Field Value Type Description String AXIS_14 Oculus Touch Controller: Axis1D.SecondaryIndexTrigger Near Touch Declaration public const string AXIS_14 = \"AXIS_14\" Field Value Type Description String AXIS_15 Oculus Touch Controller: Touch.PrimaryThumbRest Near Touch Declaration public const string AXIS_15 = \"AXIS_15\" Field Value Type Description String AXIS_16 Oculus Touch Controller: Button.SecondaryThumbstick Near Touch Declaration public const string AXIS_16 = \"AXIS_16\" Field Value Type Description String AXIS_17 Windows Mixed Reality Motion Controller: Left Touchpad Horizontal Movement Declaration public const string AXIS_17 = \"AXIS_17\" Field Value Type Description String AXIS_18 Windows Mixed Reality Motion Controller: Left Touchpad Vertical Movement Declaration public const string AXIS_18 = \"AXIS_18\" Field Value Type Description String AXIS_19 Windows Mixed Reality Motion Controller: Right Touchpad Horizontal Movement Declaration public const string AXIS_19 = \"AXIS_19\" Field Value Type Description String AXIS_2 Mouse: Position Vertical Movement HTC Vive Controller: Left Controller Trackpad (2) Vertical Movement Oculus Touch Controller: Axis2D.PrimaryThumbstick Vertical Movement Valve Knuckles Controller: Left Controller Trackpad Vertical Movement Windows Mixed Reality Motion Controller: Left Thumbstick Vertical Movement Xbox Controller: Left Thumbstick Vertical Movement Declaration public const string AXIS_2 = \"AXIS_2\" Field Value Type Description String AXIS_20 Windows Mixed Reality Motion Controller: Right Touchpad Vertical Movement Valve Knuckles Controller: Left Controller Index Finger Cap Sensor Declaration public const string AXIS_20 = \"AXIS_20\" Field Value Type Description String AXIS_21 Valve Knuckles Controller: Right Controller Index Finger Cap Sensor Declaration public const string AXIS_21 = \"AXIS_21\" Field Value Type Description String AXIS_22 Valve Knuckles Controller: Left Controller Middle Finger Cap Sensor Declaration public const string AXIS_22 = \"AXIS_22\" Field Value Type Description String AXIS_23 Valve Knuckles Controller: Right Controller Middle Finger Cap Sensor Declaration public const string AXIS_23 = \"AXIS_23\" Field Value Type Description String AXIS_24 Valve Knuckles Controller: Left Controller Ring Finger Cap Sensor Declaration public const string AXIS_24 = \"AXIS_24\" Field Value Type Description String AXIS_25 Valve Knuckles Controller: Right Controller Ring Finger Cap Sensor Declaration public const string AXIS_25 = \"AXIS_25\" Field Value Type Description String AXIS_26 Valve Knuckles Controller: Left Controller Pinky Finger Cap Sensor Declaration public const string AXIS_26 = \"AXIS_26\" Field Value Type Description String AXIS_27 Valve Knuckles Controller: Right Controller Pinky Finger Cap Sensor Declaration public const string AXIS_27 = \"AXIS_27\" Field Value Type Description String AXIS_28 Declaration public const string AXIS_28 = \"AXIS_28\" Field Value Type Description String AXIS_3 Mouse: Scroll Xbox Controller: Shared Trigger Declaration public const string AXIS_3 = \"AXIS_3\" Field Value Type Description String AXIS_4 HTC Vive Controller: Right Controller Trackpad (2) Horizontal Movement Oculus Touch Controller: Axis2D.SecondaryThumbstick Horizontal Movement Valve Knuckles Controller: Right Controller Trackpad Horizontal Movement Windows Mixed Reality Motion Controller: Right Thumbstick Horizontal Movement Xbox Controller: Right Thumbstick Vertical Movement Declaration public const string AXIS_4 = \"AXIS_4\" Field Value Type Description String AXIS_5 HTC Vive Controller: Right Controller Trackpad (2) Vertical Movement Oculus Touch Controller: Axis2D.SecondaryThumbstick Vertical Movement Valve Knuckles Controller: Right Controller Trackpad Vertical Movement Windows Mixed Reality Motion Controller: Right Thumbstick Vertical Movement Xbox Controller: Right Thumbstick Vertical Movement Declaration public const string AXIS_5 = \"AXIS_5\" Field Value Type Description String AXIS_6 None Declaration public const string AXIS_6 = \"AXIS_6\" Field Value Type Description String AXIS_7 Xbox Controller: D-Pad Horizontal Declaration public const string AXIS_7 = \"AXIS_7\" Field Value Type Description String AXIS_8 Xbox Controller: D-Pad Vertical Declaration public const string AXIS_8 = \"AXIS_8\" Field Value Type Description String AXIS_9 HTC Vive Controller: Left Controller Trigger (7) Squeeze Oculus Touch Controller: Axis1D.PrimaryIndexTrigger Squeeze Valve Knuckles Controller: Left Controller Trigger Squeeze Windows Mixed Reality Motion Controller: Left Trigger Squeeze Declaration public const string AXIS_9 = \"AXIS_9\" Field Value Type Description String UP_DOWN Axis for movement along the up (gravity) vector. Declaration public const string UP_DOWN = \"UpDown\" Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ControllerPoseSynchronizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ControllerPoseSynchronizer.html",
    "title": "Class ControllerPoseSynchronizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerPoseSynchronizer Waits for a controller to be initialized, then synchronizes its transform position to a specified handedness. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer MixedRealityControllerVisualizer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler Inherited Members InputSystemGlobalHandlerListener.OnEnable() InputSystemGlobalHandlerListener.Start() InputSystemGlobalHandlerListener.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class ControllerPoseSynchronizer : InputSystemGlobalHandlerListener, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler Fields TrackingState The current tracking state of the assigned IMixedRealityController Declaration protected TrackingState TrackingState Field Value Type Description TrackingState Properties Controller The current controller reference. Declaration public virtual IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController DestroyOnSourceLost Should this GameObject clean itself up when its controller is lost? Declaration public bool DestroyOnSourceLost { get; set; } Property Value Type Description Boolean Remarks It's up to the implementation to properly destroy the GameObject 's this interface will implement. Handedness The controller handedness to synchronize with. Declaration public Handedness Handedness { get; set; } Property Value Type Description Handedness IsTracked Is the controller this Synchronizer is registered to currently tracked? Declaration public bool IsTracked { get; } Property Value Type Description Boolean PoseAction The input action that will drive the Transform's pose, position, or rotation. Declaration public MixedRealityInputAction PoseAction { get; set; } Property Value Type Description MixedRealityInputAction UseSourcePoseData Should the Transform's position be driven from the source pose or from input handler? Declaration public bool UseSourcePoseData { get; set; } Property Value Type Description Boolean Methods OnInputChanged(InputEventData<MixedRealityPose>) Declaration public virtual void OnInputChanged(InputEventData<MixedRealityPose> eventData) Parameters Type Name Description InputEventData < MixedRealityPose > eventData OnInputChanged(InputEventData<Quaternion>) Declaration public virtual void OnInputChanged(InputEventData<Quaternion> eventData) Parameters Type Name Description InputEventData < Quaternion > eventData OnInputChanged(InputEventData<Single>) Declaration public virtual void OnInputChanged(InputEventData<float> eventData) Parameters Type Name Description InputEventData < Single > eventData OnInputChanged(InputEventData<Vector2>) Declaration public virtual void OnInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData OnInputChanged(InputEventData<Vector3>) Declaration public virtual void OnInputChanged(InputEventData<Vector3> eventData) Parameters Type Name Description InputEventData < Vector3 > eventData OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration public virtual void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration public virtual void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public virtual void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public virtual void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourcePoseChanged(SourcePoseEventData<TrackingState>) Raised when the source pose tracking state is changed. Declaration public virtual void OnSourcePoseChanged(SourcePoseEventData<TrackingState> eventData) Parameters Type Name Description SourcePoseEventData < TrackingState > eventData OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) Raised when the source pose is changed. Declaration public virtual void OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose> eventData) Parameters Type Name Description SourcePoseEventData < MixedRealityPose > eventData OnSourcePoseChanged(SourcePoseEventData<Quaternion>) Raised when the source rotation is changed. Declaration public virtual void OnSourcePoseChanged(SourcePoseEventData<Quaternion> eventData) Parameters Type Name Description SourcePoseEventData < Quaternion > eventData OnSourcePoseChanged(SourcePoseEventData<Vector2>) Raised when the source position is changed. Declaration public virtual void OnSourcePoseChanged(SourcePoseEventData<Vector2> eventData) Parameters Type Name Description SourcePoseEventData < Vector2 > eventData OnSourcePoseChanged(SourcePoseEventData<Vector3>) Raised when the source position is changed. Declaration public virtual void OnSourcePoseChanged(SourcePoseEventData<Vector3> eventData) Parameters Type Name Description SourcePoseEventData < Vector3 > eventData RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.CursorContextEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.CursorContextEnum.html",
    "title": "Enum CursorContextEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CursorContextEnum Enum for current cursor context Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum CursorContextEnum Fields Name Description Contextual MoveCross MoveEastWest MoveNortheastSouthwest MoveNorthSouth MoveNorthwestSoutheast None RotateEastWest RotateNorthSouth"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.CursorContextInfo.CursorAction.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.CursorContextInfo.CursorAction.html",
    "title": "Enum CursorContextInfo.CursorAction | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CursorContextInfo.CursorAction Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum CursorAction Fields Name Description Move None Rotate Scale"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.CursorContextInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.CursorContextInfo.html",
    "title": "Class CursorContextInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class CursorContextInfo The cursor will display the context specified in this component if it is part of the targeted object Inheritance Object CursorContextInfo Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class CursorContextInfo : MonoBehaviour Properties CurrentCursorAction Determines the context state when this object is targeted. Declaration public CursorContextInfo.CursorAction CurrentCursorAction { get; set; } Property Value Type Description CursorContextInfo.CursorAction ObjectCenter Used to calculate the orientation of context cursors. Declaration public Transform ObjectCenter { get; set; } Property Value Type Description Transform"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.CursorModifier.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.CursorModifier.html",
    "title": "Class CursorModifier | Mixed Reality Toolkit Documentation",
    "keywords": "Class CursorModifier Component that can be added to any GameObject with a Collider to modify the IMixedRealityCursor reacts when focused by a IMixedRealityPointer . Inheritance Object CursorModifier Implements ICursorModifier IMixedRealityFocusChangedHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class CursorModifier : MonoBehaviour, ICursorModifier, IMixedRealityFocusChangedHandler, IEventSystemHandler Properties CursorNormalOffset Direction of the IMixedRealityCursor offset. Declaration public Vector3 CursorNormalOffset { get; set; } Property Value Type Description Vector3 CursorParameters IMixedRealityCursor animation parameters to set when this GameObject is focused. Leave empty for none. Declaration public AnimatorParameter[] CursorParameters { get; } Property Value Type Description AnimatorParameter [] CursorPositionOffset How much a IMixedRealityCursor 's position should be offset from the surface of the GameObject when overlapping. Declaration public Vector3 CursorPositionOffset { get; set; } Property Value Type Description Vector3 CursorScaleOffset Scale of the IMixedRealityCursor when looking at this GameObject . Declaration public Vector3 CursorScaleOffset { get; set; } Property Value Type Description Vector3 HideCursorOnFocus Should the IMixedRealityCursor be hidden when this GameObject is focused? Declaration public bool HideCursorOnFocus { get; set; } Property Value Type Description Boolean HostTransform Transform for which this IMixedRealityCursor modifies applies its various properties. Declaration public Transform HostTransform { get; set; } Property Value Type Description Transform SnapCursorPosition Should the IMixedRealityCursor snap to the GameObject 's position? Declaration public bool SnapCursorPosition { get; set; } Property Value Type Description Boolean UseGazeBasedNormal If true, the normal from the pointing vector will be used to orient the IMixedRealityCursor instead of the targeted GameObject 's normal at point of contact. Declaration public bool UseGazeBasedNormal { get; set; } Property Value Type Description Boolean Methods GetCursorVisibility() Indicates whether the IMixedRealityCursor should be visible or not. Declaration public bool GetCursorVisibility() Returns Type Description Boolean True if IMixedRealityCursor should be visible, false if not. GetModifiedPosition(IMixedRealityCursor) Declaration public Vector3 GetModifiedPosition(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor Returns Type Description Vector3 GetModifiedRotation(IMixedRealityCursor) Returns the IMixedRealityCursor rotation after considering this modifier. Declaration public Quaternion GetModifiedRotation(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Quaternion New rotation for the IMixedRealityCursor GetModifiedScale(IMixedRealityCursor) Returns the IMixedRealityCursor 's local scale after considering this modifier. Declaration public Vector3 GetModifiedScale(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Vector3 New local scale for the IMixedRealityCursor GetModifiedTransform(IMixedRealityCursor, out Vector3, out Quaternion, out Vector3) Returns the modified Transform for the IMixedRealityCursor after considering this modifier. Declaration public void GetModifiedTransform(IMixedRealityCursor cursor, out Vector3 position, out Quaternion rotation, out Vector3 scale) Parameters Type Name Description IMixedRealityCursor cursor Cursor that is being modified. Vector3 position Modified position. Quaternion rotation Modified rotation. Vector3 scale Modified scale. Explicit Interface Implementations IMixedRealityFocusChangedHandler.OnBeforeFocusChange(FocusEventData) Focus event that is raised before the focus is actually changed. Declaration void IMixedRealityFocusChangedHandler.OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Remarks Useful for logic that needs to take place before focus changes. IMixedRealityFocusChangedHandler.OnFocusChanged(FocusEventData) Focus event that is raised when the focused object is changed. Declaration void IMixedRealityFocusChangedHandler.OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Implements ICursorModifier IMixedRealityFocusChangedHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingSphere.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ClippingSphere.html",
    "title": "Class ClippingSphere | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingSphere Component to animate and visualize a sphere that can be used with per pixel based clipping. Inheritance Object ClippingPrimitive ClippingSphere Implements IMaterialInstanceOwner Inherited Members ClippingPrimitive.renderers ClippingPrimitive.clippingSide ClippingPrimitive.ClippingSide ClippingPrimitive.UseOnPreRender ClippingPrimitive.materialPropertyBlock ClippingPrimitive.AddRenderer(Renderer) ClippingPrimitive.RemoveRenderer(Renderer) ClippingPrimitive.ClearRenderers() ClippingPrimitive.GetRenderersCopy() ClippingPrimitive.OnEnable() ClippingPrimitive.OnDisable() ClippingPrimitive.LateUpdate() ClippingPrimitive.OnCameraPreRender(CameraEventRouter) ClippingPrimitive.OnDestroy() ClippingPrimitive.OnMaterialChanged(MaterialInstance) ClippingPrimitive.UpdateRenderers() ClippingPrimitive.ToggleClippingFeature(Boolean) ClippingPrimitive.ToggleClippingFeature(Material[], Boolean) ClippingPrimitive.ToggleClippingFeature(Material, Boolean) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ClippingSphere : ClippingPrimitive, IMaterialInstanceOwner Properties ClippingSideProperty Declaration protected override string ClippingSideProperty { get; } Property Value Type Description String Overrides ClippingPrimitive.ClippingSideProperty Keyword Declaration protected override string Keyword { get; } Property Value Type Description String Overrides ClippingPrimitive.Keyword Radius The radius of the clipping sphere, which is determined by the largest axis of the transform's scale. Declaration public float Radius { get; } Property Value Type Description Single Methods Initialize() Declaration protected override void Initialize() Overrides ClippingPrimitive.Initialize() UpdateShaderProperties(MaterialPropertyBlock) Declaration protected override void UpdateShaderProperties(MaterialPropertyBlock materialPropertyBlock) Parameters Type Name Description MaterialPropertyBlock materialPropertyBlock Overrides ClippingPrimitive.UpdateShaderProperties(MaterialPropertyBlock) Implements IMaterialInstanceOwner"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.CollationOrder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.CollationOrder.html",
    "title": "Enum CollationOrder | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CollationOrder Collation order type used for sorting Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum CollationOrder Fields Name Description Alphabetical Sort by transform name AlphabeticalReversed Sort by transform name, reversed ChildOrder Sort by child order of parent ChildOrderReversed Sort by child order of parent, reversed None Don't sort, just display in order received"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.CreateProfileMenuItemIndices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.CreateProfileMenuItemIndices.html",
    "title": "Enum CreateProfileMenuItemIndices | Mixed Reality Toolkit Documentation",
    "keywords": "Enum CreateProfileMenuItemIndices Defines the display order of the Assets > Create > Mixed Reality Toolkit > Profiles menu items. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum CreateProfileMenuItemIndices Fields Name Description Assembly BoundaryVisualization Camera Configuration ControllerMapping ControllerVisualization Diagnostics EyeTracking Gestures HandTracking Input InputActionRules InputActions InputSimulation MouseInput Pointer RegisteredServiceProviders SceneSystem SpatialAwareness SpatialAwarenessMeshObserver SpatialAwarenessSurfaceObserver Speech"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.DebugUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.DebugUtilities.html",
    "title": "Class DebugUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class DebugUtilities Inheritance Object DebugUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class DebugUtilities Methods DebugAssert(Boolean) Asserts a condition. Declaration public static void DebugAssert(bool condition) Parameters Type Name Description Boolean condition The condition that is expected to be true. DebugAssert(Boolean, String) Asserts a condition. Declaration public static void DebugAssert(bool condition, string message) Parameters Type Name Description Boolean condition The condition that is expected to be true. String message The message to display if the condition evaluates to false. DebugLog(String) Logs a message. Declaration public static void DebugLog(string message) Parameters Type Name Description String message The message to log. DebugLogError(String) Logs an error message. Declaration public static void DebugLogError(string message) Parameters Type Name Description String message The message to log. DebugLogWarning(String) Logs a warning message. Declaration public static void DebugLogWarning(string message) Parameters Type Name Description String message The message to log. DrawBounds(Bounds, Color, Color) Draws the minimum and maximum points of the given bounds Declaration public static void DrawBounds(Bounds bounds, Color minColor, Color maxColor) Parameters Type Name Description Bounds bounds Color minColor Color maxColor DrawPoint(Vector3, Color, Single) Draws a point in the Scene window. Declaration public static void DrawPoint(Vector3 point, Color color, float size = 0.05F) Parameters Type Name Description Vector3 point Color color Single size DrawPoint(Vector3, Quaternion, Color, Single) Draws a point with a rotation in the Scene window. Declaration public static void DrawPoint(Vector3 point, Quaternion rotation, Color color, float size = 0.05F) Parameters Type Name Description Vector3 point Quaternion rotation Color color Single size"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Easing.BasicEaseCurves.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Easing.BasicEaseCurves.html",
    "title": "Enum Easing.BasicEaseCurves | Mixed Reality Toolkit Documentation",
    "keywords": "Enum Easing.BasicEaseCurves basic ease curves for quick settings Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum BasicEaseCurves Fields Name Description EaseIn EaseInOut EaseOut Linear"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Easing.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Easing.html",
    "title": "Class Easing | Mixed Reality Toolkit Documentation",
    "keywords": "Class Easing Ease settings and functionality for animation with curves Inheritance Object Easing Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public class Easing Constructors Easing() Declaration public Easing() Fields Curve The animation curve to use for the ease - default should be linear Declaration public AnimationCurve Curve Field Value Type Description AnimationCurve Enabled Is the ease enabled? Declaration public bool Enabled Field Value Type Description Boolean LerpTime The amount of time the ease should run in seconds Declaration public float LerpTime Field Value Type Description Single Methods Copy() Create Easing object with copied internal properties Declaration public Easing Copy() Returns Type Description Easing Copy of current Easing instance GetCurved() get the ease value based on the animation curve Declaration public float GetCurved() Returns Type Description Single GetLinear() get the linear ease value Declaration public float GetLinear() Returns Type Description Single IsLinear() Declaration protected bool IsLinear() Returns Type Description Boolean IsPlaying() Is the ease currently running? Declaration public bool IsPlaying() Returns Type Description Boolean OnUpdate() Update the ease each frame or on Update Declaration public void OnUpdate() SetCurve(Easing.BasicEaseCurves) set the animation curve using a preset Declaration public void SetCurve(Easing.BasicEaseCurves curve) Parameters Type Name Description Easing.BasicEaseCurves curve Start() start the ease if enabled Declaration public void Start() Stop() stop the ease Declaration public void Stop()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.EdgeUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.EdgeUtilities.html",
    "title": "Class EdgeUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class EdgeUtilities The EdgeUtilities class provides functionality for working with Edge objects. Inheritance Object EdgeUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class EdgeUtilities Fields InvalidPoint A value representing an invalid point. Declaration public static readonly Vector2 InvalidPoint Field Value Type Description Vector2 Methods GetIntersectionPoint(Edge, Edge) Returns the point at which two Edge values intersect. Declaration public static Vector2 GetIntersectionPoint(Edge edgeA, Edge edgeB) Parameters Type Name Description Edge edgeA The first edge Edge edgeB The second edge Returns Type Description Vector2 A Vector2 representing the point at which the two edges intersect, InscribedRectangleDescription.InvalidPoint otherwise. IsInsideBoundary(Edge[], Vector2) Determines if the specified point is within the provided geometry. Declaration public static bool IsInsideBoundary(Edge[] geometryEdges, Vector2 point) Parameters Type Name Description Edge [] geometryEdges The geometry for which we are checking the point. Vector2 point The point being checked. Returns Type Description Boolean True if the point falls within the geometry, false otherwise. IsValidPoint(Vector2) Checks to see if a point is valid. Declaration public static bool IsValidPoint(Vector2 point) Parameters Type Name Description Vector2 point The point to check. Returns Type Description Boolean True if the point is valid, false otherwise. Remarks A point is considered invalid if any one of it's coordinate values are infinite or not a number."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.AssemblyDefinition.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.AssemblyDefinition.html",
    "title": "Class AssemblyDefinition | Mixed Reality Toolkit Documentation",
    "keywords": "Class AssemblyDefinition A class that represents a Unity assembly definition (asmdef) file. Inheritance Object AssemblyDefinition Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class AssemblyDefinition Constructors AssemblyDefinition() Creates a new, empty assembly definition. Declaration public AssemblyDefinition() Properties AllowUnsafeCode Please see Assembly Definition properties on the Unity documentation site. Declaration public bool AllowUnsafeCode { get; set; } Property Value Type Description Boolean AutoReferenced Please see Assembly Definition properties on the Unity documentation site. Declaration public bool AutoReferenced { get; set; } Property Value Type Description Boolean DefineConstraints Please see Assembly Definition properties on the Unity documentation site. Declaration public string[] DefineConstraints { get; set; } Property Value Type Description String [] ExcludePlatforms Please see Assembly Definition properties on the Unity documentation site. Declaration public string[] ExcludePlatforms { get; set; } Property Value Type Description String [] IncludePlatforms Please see Assembly Definition properties on the Unity documentation site. Declaration public string[] IncludePlatforms { get; set; } Property Value Type Description String [] Name Please see Assembly Definition properties on the Unity documentation site. Declaration public string Name { get; set; } Property Value Type Description String OptionalUnityReferences Please see Assembly Definition properties on the Unity documentation site. Declaration public string[] OptionalUnityReferences { get; set; } Property Value Type Description String [] OverrideReferences Please see Assembly Definition properties on the Unity documentation site. Declaration public bool OverrideReferences { get; set; } Property Value Type Description Boolean References Please see Assembly Definition properties on the Unity documentation site. Declaration public string[] References { get; set; } Property Value Type Description String [] Methods Load(String) Loads an existing assembly definition file. Declaration public static AssemblyDefinition Load(string fileName) Parameters Type Name Description String fileName The file to be loaded. Returns Type Description AssemblyDefinition The assembly definition that has been loaded, or null. Save(String) Saves an assembly definition file. Declaration public void Save(string fileName) Parameters Type Name Description String fileName The name by which to save the assembly definition file. Remarks If the specified file exists, it will be overwritten."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.ServiceFacadeEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.ServiceFacadeEditor.html",
    "title": "Class ServiceFacadeEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ServiceFacadeEditor Inheritance Object ServiceFacadeEditor Namespace : Microsoft.MixedReality.Toolkit.Utilities.Facades Assembly : cs.temp.dll.dll Syntax public class ServiceFacadeEditor : UnityEditor.Editor Methods Awake() Declaration protected virtual void Awake() OnHeaderGUI() Declaration protected override void OnHeaderGUI() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Facades.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Facades | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Facades Classes MixedRealityToolkitFacadeHandler Links service facade objects to active services. ServiceFacade Lightweight MonoBehavior used to represent active services in scene. ServiceFacadeEditor"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.FastSimplexNoise.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.FastSimplexNoise.html",
    "title": "Class FastSimplexNoise | Mixed Reality Toolkit Documentation",
    "keywords": "Class FastSimplexNoise A conglomeration of open-source simplex libraries in C# with an emphasis on performance Inheritance Object FastSimplexNoise Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class FastSimplexNoise Constructors FastSimplexNoise() Declaration public FastSimplexNoise() FastSimplexNoise(Int64) Declaration public FastSimplexNoise(long seed) Parameters Type Name Description Int64 seed Methods Evaluate(Double, Double) Declaration public double Evaluate(double x, double y) Parameters Type Name Description Double x Double y Returns Type Description Double Evaluate(Double, Double, Double) Declaration public double Evaluate(double x, double y, double z) Parameters Type Name Description Double x Double y Double z Returns Type Description Double Evaluate(Double, Double, Double, Double) Declaration public double Evaluate(double x, double y, double z, double w) Parameters Type Name Description Double x Double y Double z Double w Returns Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.GameObjectCreator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.GameObjectCreator.html",
    "title": "Class GameObjectCreator | Mixed Reality Toolkit Documentation",
    "keywords": "Class GameObjectCreator An abstract class used by the GameObjectPool for creating and recycling game objects. Inheritance Object GameObjectCreator GenericPrefabInstanceCreator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement Assembly : cs.temp.dll.dll Syntax public abstract class GameObjectCreator Methods Instantiate() Creates a GameObject for the GameObjectPool. The position and rotation of the GameObject is set by the GameObjectPool when GetGameObject is called. Declaration public abstract GameObject Instantiate() Returns Type Description GameObject An instantiated GameObject. PrepareForRecycle(GameObject) Called when the GameObject is about to be recycled by the GameObjectPool. This allows you to potentially free up any resources before it is deactivated by the GameObjectPool. If the GameObject has a component that implements the IGameObjectCreatorHandler interface, it will call its PrepareForRecycle function. Declaration public virtual void PrepareForRecycle(GameObject obj) Parameters Type Name Description GameObject obj The GameObject that is about to be recycled. PrepareForUse(GameObject) Called before the GameObject's position and rotation are set (as well as it's active state) by the GameObjectPool when GetGameObject is called. If the GameObject has a component that implements the IGameObjectCreatorHandler interface, it will call its PrepareForUse function. Declaration public virtual void PrepareForUse(GameObject obj) Parameters Type Name Description GameObject obj The GameObject that is about to be used."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.GameObjectPool.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.GameObjectPool.html",
    "title": "Class GameObjectPool | Mixed Reality Toolkit Documentation",
    "keywords": "Class GameObjectPool Used to recycle Unity GameObjects. When ever you create GameObjects during runtime some overhead is incurred. Additionally memory can become highly fragment as well as possibly causing the garbage collector to perform a collection (which is also a performance hit). This is especially prevalent when you are spawning and destroying GameObjects of the same type very quickly in large quantities (such as bullets). The GameObject pool allows you to recycle objects so they can be reused upon request. Inheritance Object GameObjectPool Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement Assembly : cs.temp.dll.dll Syntax public class GameObjectPool Remarks Note that the GameObjectPool is not thread safe. It should only be used in Unity's main thread. Examples Setup code for using the generic prefab instance creator: GameObjectPool pool = new GameObjectPool(); GenericPrefabInstanceCreator creator = new GenericPrefabInstanceCreator(); creator.Prefab = MyProjectilePrefab; pool.AddCreator(creator, \"projectile1\"); Requesting a game object from the pool: var myProjectileObj = pool.GetGameObject(\"projectile1\"); Recycling the game object: pool.Recycle(myProjectileObj, \"projectile1\"); Constructors GameObjectPool() Initializes a new instance of the GameObjectPool class. Declaration public GameObjectPool() Methods AddCreator(GameObjectCreator, String) GameObjects are created by an implementation of IGameObjectCreator in this GameObjectPool. This method adds your implementation of the IGameObjectCreator to use for objects that share a specific object identifier. Declaration public void AddCreator(GameObjectCreator creator, string objectIdentifier) Parameters Type Name Description GameObjectCreator creator The implementation of IGameObjectCreator to use for GameObjects associated with the objectIdentifier. String objectIdentifier The identifier you want to use to identify the kind of game objects you want to create. Count(String) Gets the number of game objects in the pool for a specific identifier. Declaration public int Count(string objectIdentifier) Parameters Type Name Description String objectIdentifier Returns Type Description Int32 EmptyPool() Removes and destroys all game objects in the pool. Declaration public void EmptyPool() EmptyPool(String) Removes and destroys all game objects in the pool associated with the specified objectIdentifier. Declaration public void EmptyPool(string objectIdentifier) Parameters Type Name Description String objectIdentifier The identifier you want to use to identify the kind of game objects to remove from the pool. GetGameObject(String) Same as calling GetGameObject(objectIdentifier, Vector3.zero, Quaternion.identity) Declaration public GameObject GetGameObject(string objectIdentifier) Parameters Type Name Description String objectIdentifier The identifier you want to use to identify the kind of game object you want to retrieve. Returns Type Description GameObject GetGameObject(String, Vector3, Quaternion) Gets a game object for a specific object identifier from the GameObjectPool. If the kind of game object being requested is not in the pool, then it will get created by a IGameObjectCreator that was added to the pool for handling objects associated with the objectIdentifier. Declaration public GameObject GetGameObject(string objectIdentifier, Vector3 position, Quaternion rotation) Parameters Type Name Description String objectIdentifier The identifier you want to use to identify the kind of game object you want to retrieve. Vector3 position The position that the game object should have before it is activated. Quaternion rotation The rotation that the game object should have before it is activated. Returns Type Description GameObject Recycle(GameObject, String) Adds a game object under a specific object identifier to the GameObjectPool. Declaration public void Recycle(GameObject gameObject, string objectIdentifier) Parameters Type Name Description GameObject gameObject The GameObject to recycle. String objectIdentifier The identifier you want to use to identify the kind of game object you are recycling."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.GenericPrefabInstanceCreator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.GenericPrefabInstanceCreator.html",
    "title": "Class GenericPrefabInstanceCreator | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericPrefabInstanceCreator Creator for making prefab instances Inheritance Object GameObjectCreator GenericPrefabInstanceCreator Inherited Members GameObjectCreator.PrepareForRecycle(GameObject) GameObjectCreator.PrepareForUse(GameObject) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement Assembly : cs.temp.dll.dll Syntax public class GenericPrefabInstanceCreator : GameObjectCreator Fields Prefab The prefab to instantiate Declaration public GameObject Prefab Field Value Type Description GameObject Methods Instantiate() Creates a GameObject for the GameObjectPool. The position and rotation of the GameObject is set by the GameObjectPool when GetGameObject is called. Declaration public override GameObject Instantiate() Returns Type Description GameObject An instantiated GameObject. Overrides GameObjectCreator.Instantiate() See Also GameObjectCreator"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.IGameObjectCreatorListener.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.IGameObjectCreatorListener.html",
    "title": "Interface IGameObjectCreatorListener | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IGameObjectCreatorListener Optional interface that GameObjects (instantiated and recycled by a GameObjectPool) can implement in order to handle preparation for recycling and reuse. Namespace : Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement Assembly : cs.temp.dll.dll Syntax public interface IGameObjectCreatorListener Methods PrepareForRecycle() Called when the GameObject is about to be recycled by the GameObjectPool. This allows you to potentially free up any resources before it is deactivated by the GameObjectPool. Declaration void PrepareForRecycle() PrepareForUse() Called before the GameObject's position and rotation are set (as well as it's active state) by the GameObjectPool when GetGameObject is called. Declaration void PrepareForUse()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.GameObjectManagement Classes GameObjectCreator An abstract class used by the GameObjectPool for creating and recycling game objects. GameObjectPool Used to recycle Unity GameObjects. When ever you create GameObjects during runtime some overhead is incurred. Additionally memory can become highly fragment as well as possibly causing the garbage collector to perform a collection (which is also a performance hit). This is especially prevalent when you are spawning and destroying GameObjects of the same type very quickly in large quantities (such as bullets). The GameObject pool allows you to recycle objects so they can be reused upon request. GenericPrefabInstanceCreator Creator for making prefab instances Interfaces IGameObjectCreatorListener Optional interface that GameObjects (instantiated and recycled by a GameObjectPool) can implement in order to handle preparation for recycling and reuse."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.GltfAsset.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.GltfAsset.html",
    "title": "Class GltfAsset | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAsset Inheritance Object GltfAsset Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf Assembly : cs.temp.dll.dll Syntax public class GltfAsset : ScriptableObject Properties GltfObject Declaration public GltfObject GltfObject { get; } Property Value Type Description GltfObject Model Declaration public GameObject Model { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions.GltfExtension.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions.GltfExtension.html",
    "title": "Class GltfExtension | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfExtension Inheritance Object GltfExtension KHR_Materials_PbrSpecularGlossiness Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions Assembly : cs.temp.dll.dll Syntax public class GltfExtension Fields ElementName Declaration public string ElementName Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions.KHR_Materials_PbrSpecularGlossiness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions.KHR_Materials_PbrSpecularGlossiness.html",
    "title": "Class KHR_Materials_PbrSpecularGlossiness | Mixed Reality Toolkit Documentation",
    "keywords": "Class KHR_Materials_PbrSpecularGlossiness Inheritance Object GltfExtension KHR_Materials_PbrSpecularGlossiness Inherited Members GltfExtension.ElementName Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions Assembly : cs.temp.dll.dll Syntax public class KHR_Materials_PbrSpecularGlossiness : GltfExtension Fields diffuseFactor Declaration public float[] diffuseFactor Field Value Type Description Single [] diffuseTexture Declaration public GltfTextureInfo diffuseTexture Field Value Type Description GltfTextureInfo glossinessFactor Declaration public float glossinessFactor Field Value Type Description Single specularFactor Declaration public float[] specularFactor Field Value Type Description Single [] specularGlossinessTexture Declaration public GltfTextureInfo specularGlossinessTexture Field Value Type Description GltfTextureInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.Extensions Classes GltfExtension KHR_Materials_PbrSpecularGlossiness"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessor.html",
    "title": "Class GltfAccessor | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAccessor https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfAccessor Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAccessor : GltfChildOfRootProperty Fields bufferView The index of the bufferView. If this is undefined, look in the sparse object for the index and value buffer views. Declaration public int bufferView Field Value Type Description Int32 byteOffset The offset relative to the start of the bufferView in bytes. This must be a multiple of the size of the component datatype. Declaration public int byteOffset Field Value Type Description Int32 componentType The datatype of components in the attribute. All valid values correspond to WebGL enums. The corresponding typed arrays are: Int8Array , Uint8Array , Int16Array , Uint16Array , Uint32Array , and Float32Array , respectively. 5125 (UNSIGNED_INT) is only allowed when the accessor contains indices i.e., the accessor is only referenced by primitive.indices . Declaration public GltfComponentType componentType Field Value Type Description GltfComponentType count The number of attributes referenced by this accessor, not to be confused with the number of bytes or number of components. 1 Declaration public int count Field Value Type Description Int32 max Maximum value of each component in this attribute. Both min and max arrays have the same length. The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16. When componentType is 5126 (FLOAT) each array value must be stored as double-precision JSON number with numerical value which is equal to buffer-stored single-precision value to avoid extra runtime conversions. normalized property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain max values of accessor data with sparse substitution applied. 1 16 Declaration public float[] max Field Value Type Description Single [] min Minimum value of each component in this attribute. Both min and max arrays have the same length. The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16. When componentType is 5126 (FLOAT) each array value must be stored as double-precision JSON number with numerical value which is equal to buffer-stored single-precision value to avoid extra runtime conversions. normalized property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain min values of accessor data with sparse substitution applied. 1 16 Declaration public float[] min Field Value Type Description Single [] normalized Specifies whether integer data values should be normalized ( true ) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly ( false ) when they are accessed. Must be false when accessor is used for animation data. Declaration public bool normalized Field Value Type Description Boolean sparse Sparse storage of attributes that deviate from their initialization value. Declaration public GltfAccessorSparse sparse Field Value Type Description GltfAccessorSparse type Specifies if the attribute is a scalar, vector, or matrix, and the number of elements in the vector or matrix. Declaration public string type Field Value Type Description String Properties BufferView https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/bufferView.schema.json Declaration public GltfBufferView BufferView { get; } Property Value Type Description GltfBufferView"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorAttributeType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorAttributeType.html",
    "title": "Enum GltfAccessorAttributeType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfAccessorAttributeType Specifies if the attribute is a scalar, vector, or matrix. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfAccessorAttributeType Fields Name Description MAT2 MAT3 MAT4 SCALAR VEC2 VEC3 VEC4"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorSparse.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorSparse.html",
    "title": "Class GltfAccessorSparse | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAccessorSparse Sparse storage of attributes that deviate from their initialization value. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.schema.json Inheritance Object GltfProperty GltfAccessorSparse Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAccessorSparse : GltfProperty Fields count Number of entries stored in the sparse array. 1 Declaration public int count Field Value Type Description Int32 indicies Index array of size count that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase. Declaration public GltfAccessorSparseIndices indicies Field Value Type Description GltfAccessorSparseIndices values \"Array of size count times number of components, storing the displaced accessor attributes pointed by indices . Substituted values must have the same componentType and number of components as the base accessor. Declaration public GltfAccessorSparseValues values Field Value Type Description GltfAccessorSparseValues"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorSparseIndices.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorSparseIndices.html",
    "title": "Class GltfAccessorSparseIndices | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAccessorSparseIndices Indices of those attributes that deviate from their initialization value. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.indices.schema.json Inheritance Object GltfProperty GltfAccessorSparseIndices Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAccessorSparseIndices : GltfProperty Fields bufferView The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target. Declaration public int bufferView Field Value Type Description Int32 byteOffset The offset relative to the start of the bufferView in bytes. Must be aligned. 0 Declaration public int byteOffset Field Value Type Description Int32 ComponentType The indices data type. Valid values correspond to WebGL enums: 5121 (UNSIGNED_BYTE) 5123 (UNSIGNED_SHORT) 5125 (UNSIGNED_INT) Declaration public GltfComponentType ComponentType Field Value Type Description GltfComponentType"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorSparseValues.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAccessorSparseValues.html",
    "title": "Class GltfAccessorSparseValues | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAccessorSparseValues https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.values.schema.json Inheritance Object GltfProperty GltfAccessorSparseValues Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAccessorSparseValues : GltfProperty Fields bufferView The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target. Declaration public int bufferView Field Value Type Description Int32 byteOffset The offset relative to the start of the bufferView in bytes. Must be aligned. 0 Declaration public int byteOffset Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAlphaMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAlphaMode.html",
    "title": "Enum GltfAlphaMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfAlphaMode The alpha rendering mode of the material. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfAlphaMode Fields Name Description BLEND MASK OPAQUE"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimation.html",
    "title": "Class GltfAnimation | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAnimation A keyframe animation. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfAnimation Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAnimation : GltfChildOfRootProperty Fields channels An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets. Declaration public GltfAnimationChannel[] channels Field Value Type Description GltfAnimationChannel [] samplers An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target). Declaration public GltfAnimationSampler[] samplers Field Value Type Description GltfAnimationSampler []"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationChannel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationChannel.html",
    "title": "Class GltfAnimationChannel | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAnimationChannel Targets an animation's sampler at a node's property. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.schema.json Inheritance Object GltfProperty GltfAnimationChannel Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAnimationChannel : GltfProperty Fields sampler The index of a sampler in this animation used to compute the value for the target, e.g., a node's translation, rotation, or scale (TRS). Declaration public int sampler Field Value Type Description Int32 target The index of the node and TRS property to target. Declaration public GltfAnimationChannelTarget target Field Value Type Description GltfAnimationChannelTarget"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationChannelPath.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationChannelPath.html",
    "title": "Enum GltfAnimationChannelPath | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfAnimationChannelPath The name of the node's TRS property to modify, or the weights of the Morph Target it instantiates. For the translation property, the values that are provided by the sampler are the translation along the x, y, and z axes. For the rotation property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the scale property, the values are the scaling factors along the x, y, and z axes. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.target.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfAnimationChannelPath Fields Name Description rotation scale translation weights"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationChannelTarget.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationChannelTarget.html",
    "title": "Class GltfAnimationChannelTarget | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAnimationChannelTarget The index of the node and TRS property that an animation channel targets. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.target.schema.json Inheritance Object GltfProperty GltfAnimationChannelTarget Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAnimationChannelTarget : GltfProperty Fields node The index of the node to target. Declaration public int node Field Value Type Description Int32 path The name of the node's TRS property to modify. Declaration public GltfAnimationChannelPath path Field Value Type Description GltfAnimationChannelPath"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationSampler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAnimationSampler.html",
    "title": "Class GltfAnimationSampler | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAnimationSampler Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target). https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.sampler.schema.json Inheritance Object GltfProperty GltfAnimationSampler Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAnimationSampler : GltfProperty Fields input The index of an accessor containing keyframe input values, e.G., time. That accessor must have componentType FLOAT . The values represent time in seconds with time[0] >= 0.0 , and strictly increasing values, i.e., time[n + 1] > time[n] Declaration public int input Field Value Type Description Int32 interpolation Interpolation algorithm. When an animation targets a node's rotation, and the animation's interpolation is \\&quot;LINEAR\\&quot; , spherical linear interpolation (slerp) should be used to interpolate quaternions. When interpolation is \\&quot;STEP\\&quot; , animated value remains constant to the value of the first point of the timeframe, until the next timeframe. Declaration public GltfInterpolationType interpolation Field Value Type Description GltfInterpolationType output The index of an accessor, containing keyframe output values. Output and input accessors must have the same count . When sampler is used with TRS target, output accessors componentType must be FLOAT . Declaration public int output Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAssetInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfAssetInfo.html",
    "title": "Class GltfAssetInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAssetInfo Metadata about the glTF asset. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/asset.schema.json Inheritance Object GltfProperty GltfAssetInfo Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfAssetInfo : GltfProperty Fields copyright A copyright message suitable for display to credit the content creator. Declaration public string copyright Field Value Type Description String generator Tool that generated this glTF model. Useful for debugging. Declaration public string generator Field Value Type Description String minVersion The minimum glTF version that this asset targets. Declaration public string minVersion Field Value Type Description String version The glTF version. Declaration public string version Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.InterfaceInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.InterfaceInfo.html",
    "title": "Class InterfaceInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class InterfaceInfo Inheritance Object InterfaceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class InterfaceInfo Fields Description Declaration public string Description Field Value Type Description String GUID Declaration public string GUID Field Value Type Description String Index Declaration public int Index Field Value Type Description Int32 ProfilesList Declaration public NetworkProfileInfo[] ProfilesList Field Value Type Description NetworkProfileInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.IpAddressInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.IpAddressInfo.html",
    "title": "Class IpAddressInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class IpAddressInfo Inheritance Object IpAddressInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class IpAddressInfo Fields IpAddress Declaration public string IpAddress Field Value Type Description String Mask Declaration public string Mask Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.IpConfigInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.IpConfigInfo.html",
    "title": "Class IpConfigInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class IpConfigInfo Inheritance Object IpConfigInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class IpConfigInfo Fields Adapters Declaration public AdapterInfo[] Adapters Field Value Type Description AdapterInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.MachineName.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.MachineName.html",
    "title": "Class MachineName | Mixed Reality Toolkit Documentation",
    "keywords": "Class MachineName Inheritance Object MachineName Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class MachineName Fields ComputerName Declaration public string ComputerName Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdQuad_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdQuad_t.html",
    "title": "Struct HmdQuad_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdQuad_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdQuad_t Fields vCorners0 Declaration public HmdVector3_t vCorners0 Field Value Type Description HmdVector3_t vCorners1 Declaration public HmdVector3_t vCorners1 Field Value Type Description HmdVector3_t vCorners2 Declaration public HmdVector3_t vCorners2 Field Value Type Description HmdVector3_t vCorners3 Declaration public HmdVector3_t vCorners3 Field Value Type Description HmdVector3_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdQuaternionf_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdQuaternionf_t.html",
    "title": "Struct HmdQuaternionf_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdQuaternionf_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdQuaternionf_t Fields w Declaration public float w Field Value Type Description Single x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single z Declaration public float z Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdQuaternion_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdQuaternion_t.html",
    "title": "Struct HmdQuaternion_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdQuaternion_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdQuaternion_t Fields w Declaration public double w Field Value Type Description Double x Declaration public double x Field Value Type Description Double y Declaration public double y Field Value Type Description Double z Declaration public double z Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdRect2_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdRect2_t.html",
    "title": "Struct HmdRect2_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdRect2_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdRect2_t Fields vBottomRight Declaration public HmdVector2_t vBottomRight Field Value Type Description HmdVector2_t vTopLeft Declaration public HmdVector2_t vTopLeft Field Value Type Description HmdVector2_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector2_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector2_t.html",
    "title": "Struct HmdVector2_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdVector2_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdVector2_t Fields v0 Declaration public float v0 Field Value Type Description Single v1 Declaration public float v1 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector3d_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector3d_t.html",
    "title": "Struct HmdVector3d_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdVector3d_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdVector3d_t Fields v0 Declaration public double v0 Field Value Type Description Double v1 Declaration public double v1 Field Value Type Description Double v2 Declaration public double v2 Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector3_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector3_t.html",
    "title": "Struct HmdVector3_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdVector3_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdVector3_t Fields v0 Declaration public float v0 Field Value Type Description Single v1 Declaration public float v1 Field Value Type Description Single v2 Declaration public float v2 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector4_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdVector4_t.html",
    "title": "Struct HmdVector4_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdVector4_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdVector4_t Fields v0 Declaration public float v0 Field Value Type Description Single v1 Declaration public float v1 Field Value Type Description Single v2 Declaration public float v2 Field Value Type Description Single v3 Declaration public float v3 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ImuSample_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ImuSample_t.html",
    "title": "Struct ImuSample_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ImuSample_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct ImuSample_t Fields fSampleTime Declaration public double fSampleTime Field Value Type Description Double unOffScaleFlags Declaration public uint unOffScaleFlags Field Value Type Description UInt32 vAccel Declaration public HmdVector3d_t vAccel Field Value Type Description HmdVector3d_t vGyro Declaration public HmdVector3d_t vGyro Field Value Type Description HmdVector3d_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Imu_OffScaleFlags.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Imu_OffScaleFlags.html",
    "title": "Enum Imu_OffScaleFlags | Mixed Reality Toolkit Documentation",
    "keywords": "Enum Imu_OffScaleFlags Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum Imu_OffScaleFlags Fields Name Description OffScale_AccelX OffScale_AccelY OffScale_AccelZ OffScale_GyroX OffScale_GyroY OffScale_GyroZ"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputAnalogActionData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputAnalogActionData_t.html",
    "title": "Struct InputAnalogActionData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputAnalogActionData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct InputAnalogActionData_t Fields activeOrigin Declaration public ulong activeOrigin Field Value Type Description UInt64 bActive Declaration public bool bActive Field Value Type Description Boolean deltaX Declaration public float deltaX Field Value Type Description Single deltaY Declaration public float deltaY Field Value Type Description Single deltaZ Declaration public float deltaZ Field Value Type Description Single fUpdateTime Declaration public float fUpdateTime Field Value Type Description Single x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single z Declaration public float z Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputDigitalActionData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.InputDigitalActionData_t.html",
    "title": "Struct InputDigitalActionData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputDigitalActionData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct InputDigitalActionData_t Fields activeOrigin Declaration public ulong activeOrigin Field Value Type Description UInt64 bActive Declaration public bool bActive Field Value Type Description Boolean bChanged Declaration public bool bChanged Field Value Type Description Boolean bState Declaration public bool bState Field Value Type Description Boolean fUpdateTime Declaration public float fUpdateTime Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests Classes AsyncCoroutineRunnerTests BaseCursorTests BaseHandVisualizerTests BasePlayModeTests Base class to handle typical code setup/teardown and test utilities BoundingBoxTests CoreServicesTests FocusedObjectEventCatcher<T> Base class for counting events raised on the focused object. FocusProviderRaycastTests This class is used to test that FocusProvider raycasts are selecting the correct focus object. FocusProviderTests FocusRaycastTestProxy Used by FocusProviderRaycastTests to represent a single raycast test. This is used to set any necessary values on the TestPointer for performing the test, including positioning (through RayLineData ), as well as the GameObject that the test author expects to be selected as the pointer's new focus target after the values are set on the TestPointer , and it is updated by the FocusProvider . GlobalEventCatcher<T> Base class for counting global events. InputRayUtilsTests InteractableTests ManipulationHandlerTests NearInteractionTouchableTests PlayModeTestUtilities PointerBehaviorTests Verify that pointers can be turned on and off via FocusProvider.SetPointerBehavior PointerEventsTests PressableButtonTests ProfileTests RenderingTests Unit tests to check the functionality of a handful of rendering systems. SlateTests SolverTests SolverTests.SetupData Internal class used to store data for setup SpeechTests SpherePointerTests StandardShaderTests TestPointer A simple pointer that is just used for Unity play mode tests. It doesn't update anything itself - it is expected that any test using it will manually update data as necessary. If you would like to setup pointer parameters in data (e.g. a prefab), you can use FocusRaycastTestProxy . TestUtilities TouchEventCatcher Utility for counting touch events. UnityButtonEventCatcher Base class for counting Unity button events. UnityToggleEventCatcher Base class for counting Unity button events. UnityUiUtilities"
  },
  "api/Microsoft.MixedReality.Toolkit.Texture2DExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Texture2DExtensions.html",
    "title": "Class Texture2DExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class Texture2DExtensions A collection of helper functions for Texture2D Inheritance Object Texture2DExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class Texture2DExtensions Methods CaptureScreenRegion(Int32, Int32, Int32, Int32) Captures a region of the screen and returns it as a texture. Declaration public static Texture2D CaptureScreenRegion(int x, int y, int width, int height) Parameters Type Name Description Int32 x x position of the screen to capture from (bottom-left) Int32 y y position of the screen to capture from (bottom-left) Int32 width width of the screen area to capture Int32 height height of the screen area to capture Returns Type Description Texture2D A Texture2D containing pixels from the region of the screen specified Remarks You should call this in OnPostRender. CreateTextureFromRegion(Texture2D, Int32, Int32, Int32, Int32) Creates a texture from a defined region. Declaration public static Texture2D CreateTextureFromRegion(this Texture2D texture2D, int x, int y, int width, int height) Parameters Type Name Description Texture2D texture2D The Texture2D. Int32 x x position of this texture to get the texture from Int32 y y position of this texture to get the texture from Int32 width width of the region to capture Int32 height height of the region to capture Returns Type Description Texture2D FillPixels(Texture2D, Color) Fills the texture with a single color. Declaration public static void FillPixels(this Texture2D texture2D, Color fillColor) Parameters Type Name Description Texture2D texture2D The Texture2D. Color fillColor Color of the fill. FillPixels(Texture2D, Int32, Int32, Int32, Int32, Color) Fills the pixels. You will need to call Apply on the texture in order for changes to take place. Declaration public static void FillPixels(this Texture2D texture2D, int row, int col, int width, int height, Color fillColor) Parameters Type Name Description Texture2D texture2D The Texture2D. Int32 row The row to start filling at. Int32 col The column to start filling at. Int32 width The width to fill. Int32 height The height to fill. Color fillColor Color of the fill. Remarks This function considers row 0 to be left and col 0 to be top."
  },
  "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.DisplayInputResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.DisplayInputResult.html",
    "title": "Class DisplayInputResult | Mixed Reality Toolkit Documentation",
    "keywords": "Class DisplayInputResult Displays a specified axis / button value on a specific TextMesh. Will display all active axes and buttons if the input type is None. Inheritance Object DisplayInputResult Namespace : Microsoft.MixedReality.Toolkit.Tools.Runtime Assembly : cs.temp.dll.dll Syntax public class DisplayInputResult : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor.DisplayInputResultInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor.DisplayInputResultInspector.html",
    "title": "Class DisplayInputResultInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class DisplayInputResultInspector Custom profile inspector for the DisplayInputResult sample Inheritance Object DisplayInputResultInspector Namespace : Microsoft.MixedReality.Toolkit.Tools.Runtime.Editor Assembly : cs.temp.dll.dll Syntax public class DisplayInputResultInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitInspector.html",
    "title": "Class MixedRealityToolkitInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitInspector Inheritance Object MixedRealityToolkitInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitInspector : UnityEditor.Editor Methods CreateMixedRealityToolkitGameObject() Declaration public static void CreateMixedRealityToolkitGameObject() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.TeleportSystemInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.TeleportSystemInspector.html",
    "title": "Class TeleportSystemInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportSystemInspector Inheritance Object BaseMixedRealityServiceInspector TeleportSystemInspector Implements IMixedRealityServiceInspector Inherited Members BaseMixedRealityServiceInspector.DrawProfileField BaseMixedRealityServiceInspector.AlwaysDrawSceneGUI BaseMixedRealityServiceInspector.DrawGizmos(Object) BaseMixedRealityServiceInspector.DrawSceneGUI(Object, SceneView) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class TeleportSystemInspector : BaseMixedRealityServiceInspector, IMixedRealityServiceInspector Methods DrawInspectorGUI(Object) Declaration public override void DrawInspectorGUI(object target) Parameters Type Name Description Object target Overrides BaseMixedRealityServiceInspector.DrawInspectorGUI(Object) Implements IMixedRealityServiceInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputPlayback.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputPlayback.html",
    "title": "Class UserInputPlayback | Mixed Reality Toolkit Documentation",
    "keywords": "Class UserInputPlayback Inheritance Object UserInputPlayback Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class UserInputPlayback : MonoBehaviour Fields _EyeGazeVisualizer Declaration public InputPointerVisualizer _EyeGazeVisualizer Field Value Type Description InputPointerVisualizer _HeadGazeVisualizer Declaration public InputPointerVisualizer _HeadGazeVisualizer Field Value Type Description InputPointerVisualizer nrOfSamples Declaration public int nrOfSamples Field Value Type Description Int32 replaySpeed Declaration public float replaySpeed Field Value Type Description Single txt_LoadingUpdate Declaration public TextMesh txt_LoadingUpdate Field Value Type Description TextMesh Properties IsPlaying Declaration public bool IsPlaying { get; } Property Value Type Description Boolean Methods Clear() Declaration public void Clear() Load() Declaration public void Load() LoadNewFile(String) Declaration public void LoadNewFile(string filename) Parameters Type Name Description String filename Pause() Declaration public void Pause() Play() Declaration public void Play() ShowAllAndFreeze() Declaration public void ShowAllAndFreeze() SlowDown() Declaration public void SlowDown() SpeedUp() Declaration public void SpeedUp()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomTexture.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.PanZoomTexture.html",
    "title": "Class PanZoomTexture | Mixed Reality Toolkit Documentation",
    "keywords": "Class PanZoomTexture This script allows to scroll a texture both horizontally and vertically. Inheritance Object PanZoomBase PanZoomBaseTexture PanZoomTexture Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Inherited Members PanZoomBaseTexture.textureRenderer PanZoomBaseTexture.TextureShaderProperty PanZoomBaseTexture.Initialize() PanZoomBaseTexture.Initialize(Single) PanZoomBaseTexture.ComputePanSpeed(Single, Single, Single) PanZoomBaseTexture.UpdatePanZoom() PanZoomBaseTexture.ZoomDir(Boolean) PanZoomBaseTexture.ZoomIn() PanZoomBaseTexture.ZoomOut() PanZoomBaseTexture.UpdateCursorPosInHitBox() PanZoomBase.cursorPos PanZoomBase.scale PanZoomBase.offset PanZoomBase.offsetRate_Zoom PanZoomBase.offsetRate_Pan PanZoomBase.limitPanning PanZoomBase.myEyeTarget PanZoomBase.zoomSpeed PanZoomBase.zoomDir PanZoomBase.dynaZoomInvert PanZoomBase.originalRatio PanZoomBase.originalPivot PanZoomBase.originalScale PanZoomBase.originalOffset PanZoomBase.EyeSaccadeProvider PanZoomBase.AutoPan() PanZoomBase.PanHorizontally(Single) PanZoomBase.PanVertically(Single) PanZoomBase.EnableHandZoom() PanZoomBase.DisableHandZoom() PanZoomBase.ZoomInStart() PanZoomBase.ZoomOutStart() PanZoomBase.ZoomStop() PanZoomBase.ResetNormFixator() PanZoomBase.IncrementNormFixator() PanZoomBase.MyCollider PanZoomBase.LimitScaling(Vector2) PanZoomBase.ZoomIn_Timed() PanZoomBase.ZoomOut_Timed() PanZoomBase.StartFocusing() PanZoomBase.StopFocusing() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class PanZoomTexture : PanZoomBaseTexture, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Methods Start() Declaration protected override void Start() Overrides PanZoomBase.Start() Update() Declaration protected override void Update() Overrides PanZoomBase.Update() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ParticleHeatmap.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ParticleHeatmap.html",
    "title": "Class ParticleHeatmap | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParticleHeatmap Inheritance Object ParticleHeatmap Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ParticleHeatmap : MonoBehaviour Fields colorScaleTweaker Declaration public float colorScaleTweaker Field Value Type Description Single Methods DisplayParticles() Declaration public void DisplayParticles() GetPositionOfParticle(Int32) Declaration public Vector3? GetPositionOfParticle(int index) Parameters Type Name Description Int32 index Returns Type Description Nullable < Vector3 > HideHeatmap() Declaration public void HideHeatmap() SetParticle(Vector3) Declaration public void SetParticle(Vector3 pos) Parameters Type Name Description Vector3 pos ShowHeatmap() Declaration public void ShowHeatmap()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.MixedRealityKeyboard.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.MixedRealityKeyboard.html",
    "title": "Class MixedRealityKeyboard | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityKeyboard Class that can launch and hide a system keyboard specifically for HoloLens 2. Implements a workaround for UWP TouchScreenKeyboard bug which prevents UWP keyboard from showing up again after it is closed. Unity bug tracking the issue https://fogbugz.unity3d.com/default.asp?1137074_rttdnt8t1lccmtd3 Inheritance Object MixedRealityKeyboard Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class MixedRealityKeyboard : MonoBehaviour Properties CaretIndex Returns the index of the caret within the text. Declaration public int CaretIndex { get; } Property Value Type Description Int32 OnCommitText Event which triggers when commit action is invoked on the keyboard. (Usually the return key.) Declaration public UnityEvent OnCommitText { get; set; } Property Value Type Description UnityEvent OnHideKeyboard Event which triggers when the keyboard is hidden. Declaration public UnityEvent OnHideKeyboard { get; set; } Property Value Type Description UnityEvent OnShowKeyboard Event which triggers when the keyboard is shown. Declaration public UnityEvent OnShowKeyboard { get; set; } Property Value Type Description UnityEvent Text Returns the committed text. Declaration public string Text { get; } Property Value Type Description String Visible Returns true if the keyboard is currently open. Declaration public bool Visible { get; } Property Value Type Description Boolean Methods ClearKeyboardText() Removes the current text from the keyboard. Declaration public virtual void ClearKeyboardText() HideKeyboard() Closes the keyboard for user interaction. Declaration public virtual void HideKeyboard() ShowKeyboard(String, Boolean) Opens the keyboard for user interaction. Declaration public virtual void ShowKeyboard(string text = \"\", bool multiLine = false) Parameters Type Name Description String text Initial text to populate the keyboard with. Boolean multiLine True, if the return key should signal a newline rather than a commit. Start() Initializes the UWP input pane. Declaration protected virtual void Start() Update() Updates the keyboard based on current keyboard state. Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.MixedRealityKeyboardPreview.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.MixedRealityKeyboardPreview.html",
    "title": "Class MixedRealityKeyboardPreview | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityKeyboardPreview Component to manage the visuals for a Mixed Reality Keyboard Preview window. Inheritance Object MixedRealityKeyboardPreview Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class MixedRealityKeyboardPreview : MonoBehaviour Properties CaretIndex Where the caret lies within the text. Declaration public int CaretIndex { get; set; } Property Value Type Description Int32 PreviewCaret The transform to move based on the preview caret. Declaration public Transform PreviewCaret { get; set; } Property Value Type Description Transform PreviewText The Text Mesh Pro text field to display the preview text. Declaration public TextMeshPro PreviewText { get; set; } Property Value Type Description TextMeshPro Text The text to display in the preview. Declaration public string Text { get; set; } Property Value Type Description String Methods ToggleSolvers() Utility method which can be used to toggle if solvers update. Declaration public void ToggleSolvers()"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.SceneTransitionService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.SceneTransitionService.html",
    "title": "Class SceneTransitionService | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneTransitionService Inheritance Object BaseService BaseExtensionService SceneTransitionService Implements ISceneTransitionService IMixedRealityExtensionService IMixedRealityService IDisposable Inherited Members BaseExtensionService.Registrar BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public class SceneTransitionService : BaseExtensionService, ISceneTransitionService, IMixedRealityExtensionService, IMixedRealityService, IDisposable Constructors SceneTransitionService(IMixedRealityServiceRegistrar, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public SceneTransitionService(IMixedRealityServiceRegistrar registrar, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. SceneTransitionService(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public SceneTransitionService(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties FadeColor The color to use when fading out. Declaration public Color FadeColor { get; set; } Property Value Type Description Color FadeInTime The default time in seconds for fade in to complete. Declaration public float FadeInTime { get; set; } Property Value Type Description Single FadeOutTime The default time in seconds for fade out to complete. Declaration public float FadeOutTime { get; set; } Property Value Type Description Single FadeTargets Which cameras to target when fading. Declaration public CameraFaderTargets FadeTargets { get; set; } Property Value Type Description CameraFaderTargets OnTransitionCompleted Called when transition ends. This is called at the end of a transition, not at the end of a scene load. For scene load events, we recommend using IMixedRealitySceneSystem. Declaration public Action OnTransitionCompleted { get; set; } Property Value Type Description Action OnTransitionStarted Called when transition starts. This is called at the beginning of a transition, not at the beginning of a scene load. For scene load events, we recommend using IMixedRealitySceneSystem. Declaration public Action OnTransitionStarted { get; set; } Property Value Type Description Action TransitionInProgress True when a scene transition is in progress. Declaration public bool TransitionInProgress { get; set; } Property Value Type Description Boolean TransitionProgress From 0 to 1 Declaration public float TransitionProgress { get; set; } Property Value Type Description Single UseFadeColor Whether to use a fade color during transitions. Declaration public bool UseFadeColor { get; set; } Property Value Type Description Boolean Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseService.Destroy() DoSceneTransition(Func<Task>, Func<Task>, IProgressIndicator) Fades out, enables progress indicator, executes scene op 1, executes scene op 2, disables progress indicator, fades back in Declaration public Task DoSceneTransition(Func<Task> sceneOp1, Func<Task> sceneOp2, IProgressIndicator progressIndicator = null) Parameters Type Name Description Func < Task > sceneOp1 Func < Task > sceneOp2 IProgressIndicator progressIndicator Returns Type Description Task DoSceneTransition(Func<Task>, IProgressIndicator) Fades out, enables progress indicator, execute scene operation, disables progress indicator, fades back in Declaration public Task DoSceneTransition(Func<Task> sceneOperation, IProgressIndicator progressIndicator = null) Parameters Type Name Description Func < Task > sceneOperation IProgressIndicator progressIndicator If null, default progress indicator prefab will be used (or none if default is disabled in profile) Returns Type Description Task DoSceneTransition(IEnumerable<Func<Task>>, IProgressIndicator) Fades out, enables progress indicator, execute scene operations in order, disables progress indicator, fades back in Declaration public Task DoSceneTransition(IEnumerable<Func<Task>> sceneOperations, IProgressIndicator progressIndicator = null) Parameters Type Name Description IEnumerable < Func < Task >> sceneOperations A set of tasks from the Scene System. IProgressIndicator progressIndicator If null, default progress indicator prefab will be used (or none if default is disabled in profile) Returns Type Description Task DoSceneTransition(IEnumerable<Func<Task>>, Single, Single, IProgressIndicator) Fades out, enables progress indicator, execute scene operations in order, disables progress indicator, fades back in Declaration public Task DoSceneTransition(IEnumerable<Func<Task>> sceneOperations, float fadeOutTime, float fadeInTime, IProgressIndicator progressIndicator = null) Parameters Type Name Description IEnumerable < Func < Task >> sceneOperations A set of tasks from the Scene System. Single fadeOutTime Overrides the default FadeOutTIme value. Single fadeInTime Overrides the default FadeInTime value. IProgressIndicator progressIndicator If null, default progress indicator prefab will be used (or none if default is disabled in profile) Returns Type Description Task Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseService.Enable() FadeIn() Fades target cameras in. Instant fade-out will occur if fade state is not opaque. Can be used independently of scene transitions provided no transition is taking place. Uses default FadeInTime. Declaration public Task FadeIn() Returns Type Description Task FadeIn(Single) Fades target cameras in. Instant fade-out will occur if fade state is not opaque. Can be used independently of scene transitions provided no transition is taking place. Declaration public Task FadeIn(float fadeInTime) Parameters Type Name Description Single fadeInTime Returns Type Description Task FadeOut() Fades target cameras out to color. Can be used independently of scene transitions provided no transition is taking place. Uses default FadeOutTime. Declaration public Task FadeOut() Returns Type Description Task FadeOut(Single) Fades target cameras out to color. Can be used independently of scene transitions provided no transition is taking place. Declaration public Task FadeOut(float fadeOutTime) Parameters Type Name Description Single fadeOutTime Returns Type Description Task HideProgressIndicator() Hides the default progress indicator. Task completes when hide animation is done. Can be used independently of scene transitions provided no transition is taking place. Declaration public Task HideProgressIndicator() Returns Type Description Task Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() SetCustomFadeTargetCameras(IEnumerable<Camera>) If FadeTargets is set to custom, you will need to provide a custom set of cameras for fading using this function PRIOR to calling DoSceneTransition. Declaration public void SetCustomFadeTargetCameras(IEnumerable<Camera> customFadeTargetCameras) Parameters Type Name Description IEnumerable < Camera > customFadeTargetCameras SetProgressMessage(String) Sets the message on displayed progress indicator. If no progress indicator exists, has no effect. Declaration public void SetProgressMessage(string message) Parameters Type Name Description String message SetProgressValue(Single) Sets progress to value from 0-1. If no progress indicator exists, has no effect. Declaration public void SetProgressValue(float progress) Parameters Type Name Description Single progress ShowDefaultProgressIndicator() Instantiates the default progress indicator and returns its main transform. Can be used independently of scene transitions provided no transition is taking place. Declaration public Transform ShowDefaultProgressIndicator() Returns Type Description Transform Implements ISceneTransitionService IMixedRealityExtensionService IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.SceneTransitionServiceProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.SceneTransitionServiceProfile.html",
    "title": "Class SceneTransitionServiceProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneTransitionServiceProfile Inheritance Object BaseMixedRealityProfile SceneTransitionServiceProfile Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public class SceneTransitionServiceProfile : BaseMixedRealityProfile Properties CameraFaderMaterial Declaration public Material CameraFaderMaterial { get; } Property Value Type Description Material CameraFaderType Declaration public SystemType CameraFaderType { get; } Property Value Type Description SystemType DefaultProgressIndicatorPrefab Declaration public GameObject DefaultProgressIndicatorPrefab { get; } Property Value Type Description GameObject FadeColor Declaration public Color FadeColor { get; } Property Value Type Description Color FadeInTime Declaration public float FadeInTime { get; } Property Value Type Description Single FadeOutTime Declaration public float FadeOutTime { get; } Property Value Type Description Single FadeTargets Declaration public CameraFaderTargets FadeTargets { get; } Property Value Type Description CameraFaderTargets UseDefaultProgressIndicator Declaration public bool UseDefaultProgressIndicator { get; } Property Value Type Description Boolean UseFadeColor Declaration public bool UseFadeColor { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.ControllerPoseSynchronizerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.ControllerPoseSynchronizerInspector.html",
    "title": "Class ControllerPoseSynchronizerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerPoseSynchronizerInspector Inheritance Object ControllerPoseSynchronizerInspector BaseControllerPointerInspector MixedRealityControllerVisualizerInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class ControllerPoseSynchronizerInspector : UnityEditor.Editor Fields DrawHandednessProperty Declaration protected bool DrawHandednessProperty Field Value Type Description Boolean Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.InputActionPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.InputActionPropertyDrawer.html",
    "title": "Class InputActionPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputActionPropertyDrawer Inheritance Object InputActionPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class InputActionPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty property, GUIContent content) Parameters Type Name Description Rect rect SerializedProperty property GUIContent content"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.InputMappingAxisUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.InputMappingAxisUtility.html",
    "title": "Class InputMappingAxisUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputMappingAxisUtility Utility class for Unity's Input Manager Mappings. Inheritance Object InputMappingAxisUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public static class InputMappingAxisUtility Remarks Note, with any luck this will be temporary. If it is to remain beyond Alpha, then this needs some refactoring to make a proper component. Methods CheckUnityInputManagerMappings(InputManagerAxis[]) Simple static function to check Unity InputManager Axis configuration, and apply if needed. Declaration public static void CheckUnityInputManagerMappings(InputManagerAxis[] axisMappings) Parameters Type Name Description InputManagerAxis [] axisMappings Optional array of Axis Mappings, to configure your own custom set Remarks This only exists as the Unity input manager CANNOT map Axis to an id, it has to be through a mapping DoesAxisNameExist(String) Checks our local cache of axis names to see if an axis exists. This cache is refreshed if it's empty or if InputManager.asset has been changed. Declaration public static bool DoesAxisNameExist(string axisName) Parameters Type Name Description String axisName Returns Type Description Boolean RemoveMappings(InputManagerAxis[]) Simple static function to apply Unity InputManager Axis configuration Declaration public static void RemoveMappings(InputManagerAxis[] axisMappings) Parameters Type Name Description InputManagerAxis [] axisMappings Optional array of Axis Mappings, to configure your own custom set Remarks This only exists as the Unity input manager CANNOT map Axis to an id, it has to be through a mapping"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PointerUnityEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PointerUnityEvent.html",
    "title": "Class PointerUnityEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerUnityEvent Unity event for a pointer event. Contains the pointer event data. Inheritance Object PointerUnityEvent Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Serializable] public class PointerUnityEvent : UnityEvent<MixedRealityPointerEventData>"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.ReferenceItemInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.ReferenceItemInfo.html",
    "title": "Class ReferenceItemInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ReferenceItemInfo A common base class for reference items such as C# Projects and DLLs to be added to MSBuild. Inheritance Object ReferenceItemInfo CSProjectInfo PluginAssemblyInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class ReferenceItemInfo Constructors ReferenceItemInfo(UnityProjectInfo, Guid, Uri, String) Creates a new instance. Declaration protected ReferenceItemInfo(UnityProjectInfo unityProjectInfo, Guid guid, Uri referencePath, string name) Parameters Type Name Description UnityProjectInfo unityProjectInfo Instance of parsed unity project info. Guid guid The unique Guid of this reference item. Uri referencePath The output path to the reference item. String name The name of the reference. Properties Guid Gets the Guid associated with the reference. Declaration public Guid Guid { get; } Property Value Type Description Guid InEditorPlatforms Gets a set of platforms supported for the InEditor configuration. Declaration public IReadOnlyDictionary<BuildTarget, CompilationPlatformInfo> InEditorPlatforms { get; protected set; } Property Value Type Description IReadOnlyDictionary < BuildTarget , CompilationPlatformInfo > Remarks In the editor, we can support all platforms if it's a pre-defined assembly, or an asmdef with Editor platform checked. Otherwise we fallback to just the platforms specified in the editor. Name Gets name of the reference item. Declaration public string Name { get; } Property Value Type Description String PlayerPlatforms Gets a set of platforms supported for the Player configuration. Declaration public IReadOnlyDictionary<BuildTarget, CompilationPlatformInfo> PlayerPlatforms { get; protected set; } Property Value Type Description IReadOnlyDictionary < BuildTarget , CompilationPlatformInfo > Remarks In the player, we support any platform if pre-defined assembly, or the ones explicitly specified in the AsmDef player. ReferencePath Gets the output path to the reference. Declaration public Uri ReferencePath { get; } Property Value Type Description Uri UnityProjectInfo Gets the instance of the parsed project information. Declaration protected UnityProjectInfo UnityProjectInfo { get; } Property Value Type Description UnityProjectInfo Methods ToString() A much more readable string representation of this reference item info. Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.SourceFileInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.SourceFileInfo.html",
    "title": "Class SourceFileInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class SourceFileInfo Parsed information for a source file. Inheritance Object SourceFileInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class SourceFileInfo Properties AssetLocation Gets the asset location of this source file. Declaration public AssetLocation AssetLocation { get; } Property Value Type Description AssetLocation ClassType Gets the class type of this source file. May be null, if the file was not inside the Unity project. Declaration public Type ClassType { get; } Property Value Type Description Type File Gets the file on disk. Declaration public FileInfo File { get; } Property Value Type Description FileInfo Guid Gets the Asset Guid for this source file. Declaration public Guid Guid { get; } Property Value Type Description Guid Methods Parse(FileInfo, Type) Parses the source file at a given path. Declaration public static SourceFileInfo Parse(FileInfo path, Type classType = null) Parameters Type Name Description FileInfo path Type classType Returns Type Description SourceFileInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.TargetFramework.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.TargetFramework.html",
    "title": "Enum TargetFramework | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TargetFramework Represents TargetFrameworks that Unity supports. Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public enum TargetFramework Fields Name Description Net20 Net46 NetStandard20"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.TargetFrameworkExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.TargetFrameworkExtensions.html",
    "title": "Class TargetFrameworkExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class TargetFrameworkExtensions Helper extensions for the TargetFramework enum. Inheritance Object TargetFrameworkExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public static class TargetFrameworkExtensions Methods AsMSBuildString(TargetFramework) Converts a TargetFramework into an MSBuild acceptable string. Declaration public static string AsMSBuildString(this TargetFramework this) Parameters Type Name Description TargetFramework this The TargetFramework to convert. Returns Type Description String The MSBuild acceptable string representing the TargetFramework . GetTargetFramework(BuildTargetGroup) Returns the configured TargetFramework for the BuildTargetGroup . Declaration public static TargetFramework GetTargetFramework(this BuildTargetGroup this) Parameters Type Name Description BuildTargetGroup this The BuildTargetGroup to get TargetFramework for. Returns Type Description TargetFramework The TargetFramework configured for given BuildTargetGroup ."
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EChaperoneConfigFile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EChaperoneConfigFile.html",
    "title": "Enum EChaperoneConfigFile | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EChaperoneConfigFile Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EChaperoneConfigFile Fields Name Description Live Temp"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EChaperoneImportFlags.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EChaperoneImportFlags.html",
    "title": "Enum EChaperoneImportFlags | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EChaperoneImportFlags Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EChaperoneImportFlags Fields Name Description EChaperoneImport_BoundsOnly"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ECollisionBoundsStyle.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ECollisionBoundsStyle.html",
    "title": "Enum ECollisionBoundsStyle | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ECollisionBoundsStyle Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ECollisionBoundsStyle Fields Name Description COLLISION_BOUNDS_STYLE_ADVANCED COLLISION_BOUNDS_STYLE_BEGINNER COLLISION_BOUNDS_STYLE_COUNT COLLISION_BOUNDS_STYLE_INTERMEDIATE COLLISION_BOUNDS_STYLE_NONE COLLISION_BOUNDS_STYLE_SQUARES"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EColorSpace.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EColorSpace.html",
    "title": "Enum EColorSpace | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EColorSpace Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EColorSpace Fields Name Description Auto Gamma Linear"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalMotionRange.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalMotionRange.html",
    "title": "Enum EVRSkeletalMotionRange | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSkeletalMotionRange Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSkeletalMotionRange Fields Name Description WithController WithoutController"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalReferencePose.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalReferencePose.html",
    "title": "Enum EVRSkeletalReferencePose | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSkeletalReferencePose Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSkeletalReferencePose Fields Name Description BindPose Fist GripLimit OpenHand"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalTrackingLevel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalTrackingLevel.html",
    "title": "Enum EVRSkeletalTrackingLevel | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSkeletalTrackingLevel Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSkeletalTrackingLevel Fields Name Description Count Max VRSkeletalTracking_Estimated VRSkeletalTracking_Full VRSkeletalTracking_Partial"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalTransformSpace.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSkeletalTransformSpace.html",
    "title": "Enum EVRSkeletalTransformSpace | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSkeletalTransformSpace Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSkeletalTransformSpace Fields Name Description Model Parent"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSpatialAnchorError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSpatialAnchorError.html",
    "title": "Enum EVRSpatialAnchorError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSpatialAnchorError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSpatialAnchorError Fields Name Description ArrayTooSmall DescriptorTooLong Internal InvalidArgument InvalidDescriptorChar NoRoomCalibration NotAvailableInThisUniverse NotYetAvailable PermanentlyUnavailable Success Unknown UnknownDriver UnknownHandle WrongDriver"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRState.html",
    "title": "Enum EVRState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRState Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRState Fields Name Description NotReady Off Ready Ready_Alert Ready_Alert_Low Searching Searching_Alert Standby Undefined"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSubmitFlags.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSubmitFlags.html",
    "title": "Enum EVRSubmitFlags | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSubmitFlags Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSubmitFlags Fields Name Description Submit_Default Submit_GlRenderBuffer Submit_LensDistortionAlreadyApplied Submit_Reserved Submit_TextureWithDepth Submit_TextureWithPose"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.Theme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.Theme.html",
    "title": "Class Theme | Mixed Reality Toolkit Documentation",
    "keywords": "Class Theme Theme scriptableObject for loading theme settings Inheritance Object Theme Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class Theme : ScriptableObject Fields History Stores historical values of different ThemeDefinition selections. Useful for editor design Each item in list corresponds to item in Definitions list property Each Dictionary keeps track of last used ThemeDefinition configuration for a given Theme type (type must extend from InteractableThemeBase) Declaration public List<Dictionary<Type, ThemeDefinition>> History Field Value Type Description List < Dictionary < Type , ThemeDefinition >> Properties Definitions List of Theme Definition configurations. Each definition defines what type of Theme Engine to create and how to configure it Declaration public List<ThemeDefinition> Definitions { get; set; } Property Value Type Description List < ThemeDefinition > States Associated States object to use with this theme. Defines the states available for each Theme to utilize Declaration public States States { get; set; } Property Value Type Description States Methods GetStates() Helper function to convert States scriptableobject into an array of available State values Declaration [Obsolete(\"Use States.StateList instead\")] public State[] GetStates() Returns Type Description State [] Array of available State values for currently assigned States property in this Theme ValidateDefinitions() Validate list of ThemeDefinitions with current States object Declaration public void ValidateDefinitions()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.GltfEditorImporter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.GltfEditorImporter.html",
    "title": "Class GltfEditorImporter | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfEditorImporter Inheritance Object GltfEditorImporter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor Assembly : cs.temp.dll.dll Syntax public static class GltfEditorImporter Methods OnImportGltfAsset(AssetImportContext) Declaration public static void OnImportGltfAsset(AssetImportContext context) Parameters Type Name Description AssetImportContext context"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor Classes GlbAssetImporter GltfAssetImporter GltfEditorImporter"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.GltfChunkType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.GltfChunkType.html",
    "title": "Enum GltfChunkType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfChunkType Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization Assembly : cs.temp.dll.dll Syntax public enum GltfChunkType : uint Fields Name Description BIN Json"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.GltfUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.GltfUtility.html",
    "title": "Class GltfUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfUtility Inheritance Object GltfUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization Assembly : cs.temp.dll.dll Syntax public static class GltfUtility Methods GetGltfObjectFromGlb(Byte[]) Gets a glTF object from the provided byte array Declaration public static GltfObject GetGltfObjectFromGlb(byte[] glbData) Parameters Type Name Description Byte [] glbData Raw glb byte data. Returns Type Description GltfObject GltfObject Remarks Returned GltfObject still needs to be initialized using ConstructAsync(GltfObject) . GetGltfObjectFromJson(String) Gets a glTF object from the provided json string. Declaration public static GltfObject GetGltfObjectFromJson(string jsonString) Parameters Type Name Description String jsonString String defining a glTF Object. Returns Type Description GltfObject GltfObject Remarks Returned GltfObject still needs to be initialized using ConstructAsync(GltfObject) . ImportGltfObjectFromPathAsync(String) Imports a glTF object from the provided uri. Declaration public static Task<GltfObject> ImportGltfObjectFromPathAsync(string uri) Parameters Type Name Description String uri the path to the file to load Returns Type Description Task < GltfObject > New GltfObject imported from uri. Remarks Must be called from the main thread. If the Application.isPlaying is false, then this method will run synchronously."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.StandardShaderUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.StandardShaderUtility.html",
    "title": "Class StandardShaderUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class StandardShaderUtility Mixed Reality standard shader utility class with commonly used constants, types and convenience methods. Inheritance Object StandardShaderUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class StandardShaderUtility Fields MrtkStandardShaderName The string name of the Mixed Reality Toolkit/Standard shader which can be used to identify a shader or for shader lookups. Declaration public static readonly string MrtkStandardShaderName Field Value Type Description String Properties MrtkStandardShader Returns an instance of the Mixed Reality Toolkit/Standard shader. Declaration public static Shader MrtkStandardShader { get; } Property Value Type Description Shader Methods IsMrtkStandardShader(Shader) Checks if a shader is the Mixed Reality Toolkit/Standard shader. Declaration public static bool IsMrtkStandardShader(Shader shader) Parameters Type Name Description Shader shader The shader to check. Returns Type Description Boolean True if the shader is the Mixed Reality Toolkit/Standard shader. IsUsingMrtkStandardShader(Material) Checks if a material is using the Mixed Reality Toolkit/Standard shader. Declaration public static bool IsUsingMrtkStandardShader(Material material) Parameters Type Name Description Material material The material to check. Returns Type Description Boolean True if the material is using the Mixed Reality Toolkit/Standard shader"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.StripMeshLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.StripMeshLineRenderer.html",
    "title": "Class StripMeshLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class StripMeshLineRenderer Draws a strip of polygons along the line Inheritance Object BaseMixedRealityLineRenderer StripMeshLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.PointDistributionMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) BaseMixedRealityLineRenderer.GetNormalizedPointAlongLine(Int32) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class StripMeshLineRenderer : BaseMixedRealityLineRenderer Methods GenerateStripMesh(List<Vector3>, List<Color>, List<Single>, Single, List<Vector3>, Mesh, Vector3) Declaration public static void GenerateStripMesh(List<Vector3> positionList, List<Color> colorList, List<float> thicknessList, float uvOffsetLocal, List<Vector3> forwardList, Mesh mesh, Vector3 up) Parameters Type Name Description List < Vector3 > positionList List < Color > colorList List < Single > thicknessList Single uvOffsetLocal List < Vector3 > forwardList Mesh mesh Vector3 up UpdateLine() Declaration protected override void UpdateLine() Overrides BaseMixedRealityLineRenderer.UpdateLine()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SupportedApplicationModes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SupportedApplicationModes.html",
    "title": "Enum SupportedApplicationModes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SupportedApplicationModes The supported Application modes for specific features. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum SupportedApplicationModes Remarks This enum can be used to configure specific features to have differing behaviors when run in editor. Fields Name Description Editor This indicates that the feature is relevant in editor scenarios. Player This indicates that the feature is relevant in player scenarios."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SupportedPlatforms.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SupportedPlatforms.html",
    "title": "Enum SupportedPlatforms | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SupportedPlatforms The supported platforms for Mixed Reality Toolkit Components and Features. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum SupportedPlatforms Fields Name Description Android IOS LinuxEditor LinuxStandalone Lumin MacEditor MacStandalone Web WindowsEditor WindowsStandalone WindowsUniversal"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SyncContextUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SyncContextUtility.html",
    "title": "Class SyncContextUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class SyncContextUtility Utility class to assist in thread and context synchronization. Inheritance Object SyncContextUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class SyncContextUtility Properties IsMainThread Is this being called from the main thread? Declaration public static bool IsMainThread { get; } Property Value Type Description Boolean UnitySynchronizationContext This Unity Player's Synchronization Context. Declaration public static SynchronizationContext UnitySynchronizationContext { get; } Property Value Type Description SynchronizationContext UnityThreadId This Unity Player's Thread Id. Declaration public static int UnityThreadId { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.SystemType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.SystemType.html",
    "title": "Class SystemType | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemType Reference to a class Type with support for Unity serialization. Inheritance Object SystemType Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public sealed class SystemType : ISerializationCallbackReceiver Constructors SystemType(String) Initializes a new instance of the SystemType class. Declaration public SystemType(string assemblyQualifiedClassName) Parameters Type Name Description String assemblyQualifiedClassName Assembly qualified class name. SystemType(Type) Initializes a new instance of the SystemType class. Declaration public SystemType(Type type) Parameters Type Name Description Type type Class type. Exceptions Type Condition ArgumentException If type is not a class type. Properties Type Gets or sets type of class reference. Declaration public Type Type { get; set; } Property Value Type Description Type Exceptions Type Condition ArgumentException If value is not a class type. Methods GetReference(Type) Declaration public static string GetReference(Type type) Parameters Type Name Description Type type Returns Type Description String ToString() Declaration public override string ToString() Returns Type Description String Operators Implicit(SystemType to String) Declaration public static implicit operator string (SystemType type) Parameters Type Name Description SystemType type Returns Type Description String Implicit(SystemType to Type) Declaration public static implicit operator Type(SystemType type) Parameters Type Name Description SystemType type Returns Type Description Type Implicit(Type to SystemType) Declaration public static implicit operator SystemType(Type type) Parameters Type Name Description Type type Returns Type Description SystemType"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.TileGridObjectCollection.GridDivisions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.TileGridObjectCollection.GridDivisions.html",
    "title": "Enum TileGridObjectCollection.GridDivisions | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TileGridObjectCollection.GridDivisions structure elements of a grid layout Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum GridDivisions Fields Name Description Columns Rows"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.TileGridObjectCollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.TileGridObjectCollection.html",
    "title": "Class TileGridObjectCollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class TileGridObjectCollection A basic grid layout for game objects of a consistent size Inheritance Object TileGridObjectCollection Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class TileGridObjectCollection : MonoBehaviour Fields Centered Will the grid be centered or start in the top corner Declaration protected bool Centered Field Value Type Description Boolean Columns How many columns should the grid have Declaration protected int Columns Field Value Type Description Int32 DepthCalculatedBy The depth or z uses the rows if true or columns if false Declaration protected TileGridObjectCollection.GridDivisions DepthCalculatedBy Field Value Type Description TileGridObjectCollection.GridDivisions editorUpdated Declaration protected bool editorUpdated Field Value Type Description Boolean Gutters The space between tiles in pixels Declaration protected Vector3 Gutters Field Value Type Description Vector3 LayoutDireciton The layout direction as a normalized vector Declaration protected Vector3 LayoutDireciton Field Value Type Description Vector3 offSet Declaration protected Vector3 offSet Field Value Type Description Vector3 OnlyInEditMode Should this update during run-time Declaration protected bool OnlyInEditMode Field Value Type Description Boolean StartPosition The starting position of the grid - an offset value Declaration protected Vector3 StartPosition Field Value Type Description Vector3 TileSize Tile size in pixels Declaration protected Vector3 TileSize Field Value Type Description Vector3 Methods ConfigureGrid(Int32, Vector3, Vector3, Vector3, Vector3, Boolean) Load the settings of the grid with code Declaration public virtual void ConfigureGrid(int columns, Vector3 tileSize, Vector3 gutters, Vector3 layouDirection, Vector3 startPosition, bool centered) Parameters Type Name Description Int32 columns the amount of columns Vector3 tileSize grid tile size in pixels Vector3 gutters gutter size in pixels Vector3 layouDirection normalized vector flow direction Vector3 startPosition start position offset Boolean centered center the grid or layout from edge GetListPosition(Int32) Set the item position by index Declaration public virtual Vector3 GetListPosition(int index) Parameters Type Name Description Int32 index Returns Type Description Vector3 OnValidate() Declaration protected virtual void OnValidate() Start() Declaration protected virtual void Start() Update() Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.TrackedHandJoint.html",
    "title": "Enum TrackedHandJoint | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TrackedHandJoint The supported tracked hand joints. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum TrackedHandJoint Remarks See https://en.wikipedia.org/wiki/Interphalangeal_joints_of_the_hand#/media/File:Scheme_human_hand_bones-en.svg for joint name definitions. Fields Name Description IndexDistalJoint The joint nearest the tip of the index finger. IndexKnuckle The knuckle joint of the index finger. IndexMetacarpal The lowest joint of the index finger. IndexMiddleJoint The middle joint of the index finger. IndexTip The tip of the index finger. MiddleDistalJoint The joint nearest the tip of the finger. MiddleKnuckle The knuckle joint of the middle finger. MiddleMetacarpal The lowest joint of the middle finger. MiddleMiddleJoint The middle joint of the middle finger. MiddleTip The tip of the middle finger. None Palm The palm. PinkyDistalJoint The joint nearest the tip of the pink finger. PinkyKnuckle The knuckle joint of the pinky finger. PinkyMetacarpal The lowest joint of the pinky finger. PinkyMiddleJoint The middle joint of the pinky finger. PinkyTip The tip of the pinky. RingDistalJoint The joint nearest the tip of the ring finger. RingKnuckle The knuckle of the ring finger. RingMetacarpal The lowest joint of the ring finger. RingMiddleJoint The middle joint of the ring finger. RingTip The tip of the ring finger. ThumbDistalJoint The thumb's first (furthest) joint. ThumbMetacarpalJoint The lowest joint in the thumb (down in your palm). ThumbProximalJoint The thumb's second (middle-ish) joint. ThumbTip The tip of the thumb. Wrist The wrist."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.TrackedObjectType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.TrackedObjectType.html",
    "title": "Enum TrackedObjectType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TrackedObjectType Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum TrackedObjectType Fields Name Description ControllerRay Calculates position and orientation from the system-calculated ray of available controller (i.e motion controllers, hands, etc.) CustomOverride Calculates position and orientation from a tracked hand joint HandJoint Calculates position and orientation from a tracked hand joint HandJointLeft (Obsolete) Calculates position and orientation from a tracked hand joint on the left hand. HandJointRight (Obsolete) Calculates position and orientation from a tracked hand joint on the right hand. Head Calculates position and orientation from the main camera. MotionControllerLeft (Obsolete) Calculates position and orientation from the left motion-tracked controller. MotionControllerRight (Obsolete) Calculates position and orientation from the right motion-tracked controller."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.TypeCacheUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.TypeCacheUtility.html",
    "title": "Class TypeCacheUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class TypeCacheUtility Utility class to store subclasses of particular base class keys Reloads between play mode/edit mode and after re-compile of scripts Inheritance Object TypeCacheUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class TypeCacheUtility Methods GetSubClasses(Type) Get all subclass types of base class type parameter Does not work with .NET scripting backend Declaration public static List<Type> GetSubClasses(Type baseClassType) Parameters Type Name Description Type baseClassType base class type Returns Type Description List < Type > list of subclass types for base class type parameter GetSubClasses<T>() Get all subclass types of base class type T Does not work with .NET scripting backend Declaration public static List<Type> GetSubClasses<T>() Returns Type Description List < Type > list of subclass types for base class T Type Parameters Name Description T base class of type T"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRNotifications.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRNotifications.html",
    "title": "Class CVRNotifications | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRNotifications Inheritance Object CVRNotifications Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRNotifications Methods CreateNotification(UInt64, UInt64, EVRNotificationType, String, EVRNotificationStyle, ref NotificationBitmap_t, ref UInt32) Declaration public EVRNotificationError CreateNotification(ulong ulOverlayHandle, ulong ulUserValue, EVRNotificationType type, string pchText, EVRNotificationStyle style, ref NotificationBitmap_t pImage, ref uint pNotificationId) Parameters Type Name Description UInt64 ulOverlayHandle UInt64 ulUserValue EVRNotificationType type String pchText EVRNotificationStyle style NotificationBitmap_t pImage UInt32 pNotificationId Returns Type Description EVRNotificationError RemoveNotification(UInt32) Declaration public EVRNotificationError RemoveNotification(uint notificationId) Parameters Type Name Description UInt32 notificationId Returns Type Description EVRNotificationError"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableAudioReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableAudioReceiver.html",
    "title": "Class InteractableAudioReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableAudioReceiver Add audio clip to play onClick or on Voice Command Inheritance Object ReceiverBase InteractableAudioReceiver Inherited Members ReceiverBase.Name ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableAudioReceiver : ReceiverBase Constructors InteractableAudioReceiver(UnityEvent) Creates and AudioReceiver, which plays sounds on Click Declaration public InteractableAudioReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields AudioClip AudioClip to play when event is selected Declaration public AudioClip AudioClip Field Value Type Description AudioClip Properties HideUnityEvents Defines whether Unity Events should be hidden in inspector for this type of EventReceiver Declaration public override bool HideUnityEvents { get; } Property Value Type Description Boolean Overrides ReceiverBase.HideUnityEvents Methods OnClick(InteractableStates, Interactable, IMixedRealityPointer) click happened Declaration public override void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer Overrides ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) OnUpdate(InteractableStates, Interactable) Called on update, check to see if the state has changed sense the last call Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable) OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) voice command called Declaration public override void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index Int32 length Overrides ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableAudioTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableAudioTheme.html",
    "title": "Class InteractableAudioTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableAudioTheme Theme Engine to play particular audio files based on state changes. Add AudioSource component if none is found on initialized GameObject or in children Inheritance Object InteractableThemeBase InteractableAudioTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableAudioTheme : InteractableThemeBase Constructors InteractableAudioTheme() Declaration public InteractableAudioTheme() Properties IsEasingSupported Indicates whether the current Theme engine implementation supports easing between state values Declaration public override bool IsEasingSupported { get; } Property Value Type Description Boolean Overrides InteractableThemeBase.IsEasingSupported Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property Returns Type Description ThemePropertyValue Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property Int32 index Single percentage Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableColorChildrenTheme.BlocksAndRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableColorChildrenTheme.BlocksAndRenderer.html",
    "title": "Struct InteractableColorChildrenTheme.BlocksAndRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InteractableColorChildrenTheme.BlocksAndRenderer Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public struct BlocksAndRenderer Fields Block Declaration public MaterialPropertyBlock Block Field Value Type Description MaterialPropertyBlock Renderer Declaration public Renderer Renderer Field Value Type Description Renderer"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableColorChildrenTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableColorChildrenTheme.html",
    "title": "Class InteractableColorChildrenTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableColorChildrenTheme Theme engine to control the color for all Renderer children under the initialized GameObject based on state changes Inheritance Object InteractableThemeBase InteractableShaderTheme InteractableColorChildrenTheme Inherited Members InteractableShaderTheme.AreShadersSupported InteractableShaderTheme.propertyBlock InteractableShaderTheme.shaderProperties InteractableShaderTheme.renderer InteractableShaderTheme.GetFloat(GameObject, Int32) InteractableShaderTheme.GetColor(GameObject, Int32) InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableColorChildrenTheme : InteractableShaderTheme Constructors InteractableColorChildrenTheme() Declaration public InteractableColorChildrenTheme() Fields DefaultShaderProperty Declaration protected const string DefaultShaderProperty = \"_Color\" Field Value Type Description String Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableShaderTheme.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableShaderTheme.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableShaderTheme.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableShaderTheme.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableColorTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableColorTheme.html",
    "title": "Class InteractableColorTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableColorTheme Theme Engine that can set colors on a Renderer or text object based on state changes This Theme will try to set color on first available text object in order of TextMesh, Text, TextMeshPro, and TextMeshProUGUI object If no text-based component can be found, then will fall back to first Renderer component found on the initialized GameObject and target the color shader property provided in the ThemeDefinition. Inheritance Object InteractableThemeBase InteractableShaderTheme InteractableColorTheme ScaleOffsetColorTheme Inherited Members InteractableShaderTheme.AreShadersSupported InteractableShaderTheme.propertyBlock InteractableShaderTheme.shaderProperties InteractableShaderTheme.renderer InteractableShaderTheme.GetFloat(GameObject, Int32) InteractableShaderTheme.GetColor(GameObject, Int32) InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableColorTheme : InteractableShaderTheme Constructors InteractableColorTheme() Declaration public InteractableColorTheme() Fields DefaultShaderProperty Declaration protected const string DefaultShaderProperty = \"_Color\" Field Value Type Description String Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableShaderTheme.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableShaderTheme.GetProperty(ThemeStateProperty) HasTextComponentOnObject(GameObject) Looks to see if a text component exists on the host Declaration public static bool HasTextComponentOnObject(GameObject host) Parameters Type Name Description GameObject host GameObject to test Returns Type Description Boolean true if host is not null and contains a text-type component, false otherwise Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableShaderTheme.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableShaderTheme.SetValue(ThemeStateProperty, Int32, Single) TryGetRendererColor(ThemeStateProperty, out Color) Try to get color from the renderer return true, no text components exists, so falling back to base Declaration protected bool TryGetRendererColor(ThemeStateProperty property, out Color color) Parameters Type Name Description ThemeStateProperty property Color color Color to try to set Returns Type Description Boolean true if successfully set color on Renderer TryGetTextColor(ThemeStateProperty, out Color) Try to get a color from UI Text if no color is found, a text component does not exist on this object Declaration protected bool TryGetTextColor(ThemeStateProperty property, out Color color) Parameters Type Name Description ThemeStateProperty property Color color Color to try to get, returns white if no Text component found Returns Type Description Boolean true if successfully get color on Text TryGetTextMeshColor(ThemeStateProperty, out Color) Try to get color from TextMesh If no color is found, not TextMesh on this object Declaration protected bool TryGetTextMeshColor(ThemeStateProperty property, out Color color) Parameters Type Name Description ThemeStateProperty property Color color Color to try to get, returns white if no TextMesh component found Returns Type Description Boolean true if successfully get color on TextMesh TryGetTextMeshProColor(ThemeStateProperty, out Color) Try to get color from TextMeshPro If no color is found, TextMeshPro is not on the object Declaration protected bool TryGetTextMeshProColor(ThemeStateProperty property, out Color color) Parameters Type Name Description ThemeStateProperty property Color color Color to try to get, returns white if no TextMesh component found Returns Type Description Boolean true if successfully get color on TextMeshPro TryGetTextMeshProUGUIColor(ThemeStateProperty, out Color) Try to get color from TextMeshProUGUI If no color is found, TextMeshProUGUI is not on the object Declaration protected bool TryGetTextMeshProUGUIColor(ThemeStateProperty property, out Color color) Parameters Type Name Description ThemeStateProperty property Color color Color to try to get, returns white if no TextMeshProUGUI component found Returns Type Description Boolean true if successfully get color on TextMeshProUGUI TrySetRendererColor(Color, ThemeStateProperty, Int32, Single) Try to set color on a renderer should just return true - falling back to base Declaration protected bool TrySetRendererColor(Color color, ThemeStateProperty property, int index, float percentage) Parameters Type Name Description Color color Color to try to set ThemeStateProperty property Int32 index Single percentage Returns Type Description Boolean true if successfully set color on Renderer TrySetTextColor(Color, ThemeStateProperty, Int32, Single) Try to set color on UI Text If false, no UI Text was found Declaration protected bool TrySetTextColor(Color color, ThemeStateProperty property, int index, float percentage) Parameters Type Name Description Color color Color to try to set ThemeStateProperty property Int32 index Single percentage Returns Type Description Boolean true if successfully set color on Text TrySetTextMeshColor(Color, ThemeStateProperty, Int32, Single) Try to set color on TextMesh If false, no TextMesh was found Declaration protected bool TrySetTextMeshColor(Color color, ThemeStateProperty property, int index, float percentage) Parameters Type Name Description Color color Color to try to set ThemeStateProperty property Int32 index Single percentage Returns Type Description Boolean true if successfully set color on TextMesh TrySetTextMeshProColor(Color, ThemeStateProperty, Int32, Single) Try to set color on TextMeshPro If false, no TextMeshPro was found Declaration protected bool TrySetTextMeshProColor(Color color, ThemeStateProperty property, int index, float percentage) Parameters Type Name Description Color color Color to try to set ThemeStateProperty property Int32 index Single percentage Returns Type Description Boolean true if successfully set color on TextMeshPro TrySetTextMeshProUGUIColor(Color, ThemeStateProperty, Int32, Single) Try to set color on TextMeshProUGUI If false, no TextMeshProUGUI was found Declaration protected bool TrySetTextMeshProUGUIColor(Color color, ThemeStateProperty property, int index, float percentage) Parameters Type Name Description Color color Color to try to set ThemeStateProperty property Int32 index Single percentage Returns Type Description Boolean true if successfully set color on TextMeshProUGUI"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableEvent.html",
    "title": "Class InteractableEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableEvent Event base class for events attached to Interactables. Inheritance Object InteractableEvent Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class InteractableEvent Fields Event Base Event used to initialize EventReceiver class Declaration public UnityEvent Event Field Value Type Description UnityEvent Receiver ReceiverBase instantiation for this InteractableEvent. Used at runtime by Interactable class Declaration public ReceiverBase Receiver Field Value Type Description ReceiverBase Properties ReceiverType Defines the type of Receiver to associate. Type must be a class that extends ReceiverBase Declaration public Type ReceiverType { get; set; } Property Value Type Description Type Methods CreateReceiver(InteractableEvent) Create the event and setup the values from the inspector. If the asset is invalid, returns null. Declaration public static ReceiverBase CreateReceiver(InteractableEvent iEvent) Parameters Type Name Description InteractableEvent iEvent Returns Type Description ReceiverBase"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableEventInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableEventInspector.html",
    "title": "Class InteractableEventInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableEventInspector Inheritance Object InteractableEventInspector Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public static class InteractableEventInspector Methods RenderEvent(SerializedProperty, Boolean) Render event properties for the given event item. If item has been removed, returns true. False otherwise Declaration public static bool RenderEvent(SerializedProperty eventItem, bool canRemove = true) Parameters Type Name Description SerializedProperty eventItem serialized property of the event item to render properties from Boolean canRemove Returns Type Description Boolean If item has been removed, returns true. False otherwise"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableGrabScaleTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableGrabScaleTheme.html",
    "title": "Class InteractableGrabScaleTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableGrabScaleTheme ThemeEngine to control initialized GameObject's scale based on associated Interactable grab state and related state changes Inheritance Object InteractableThemeBase InteractableGrabScaleTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableGrabScaleTheme : InteractableThemeBase Constructors InteractableGrabScaleTheme() Declaration public InteractableGrabScaleTheme() Fields grabPercentage Declaration protected float grabPercentage Field Value Type Description Single grabTransition Declaration protected bool grabTransition Field Value Type Description Boolean hasGrab Declaration protected bool hasGrab Field Value Type Description Boolean startScaleValue Declaration protected ThemePropertyValue startScaleValue Field Value Type Description ThemePropertyValue targetInteractable Declaration protected Interactable targetInteractable Field Value Type Description Interactable timer Declaration protected float timer Field Value Type Description Single Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) OnUpdate(Int32, Boolean) Update ThemeEngine for given state based on Theme logic. Check, sets, and possibly eases values based on given state Declaration public override void OnUpdate(int state, bool force = false) Parameters Type Name Description Int32 state current state to target Boolean force force update call even if state is not new Overrides InteractableThemeBase.OnUpdate(Int32, Boolean) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableHighlight.HighlightedMaterialStyle.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableHighlight.HighlightedMaterialStyle.html",
    "title": "Enum InteractableHighlight.HighlightedMaterialStyle | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InteractableHighlight.HighlightedMaterialStyle Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum HighlightedMaterialStyle Fields Name Description Both Both highlight and overlay. Highlight A highlight to indicate focus. None Overlay An overlay to indicate intent."
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableHighlight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableHighlight.html",
    "title": "Class InteractableHighlight | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableHighlight Adds or removes materials to target renderer for highlighting Focused GameObject s. Inheritance Object InteractableHighlight Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class InteractableHighlight : BaseFocusHandler Remarks Useful with focusable GameObject s Properties Highlight Declaration public bool Highlight { get; set; } Property Value Type Description Boolean Style Declaration public InteractableHighlight.HighlightedMaterialStyle Style { set; } Property Value Type Description InteractableHighlight.HighlightedMaterialStyle TargetRenderers The target renderers that will get the styles applied. Declaration public Renderer[] TargetRenderers { set; } Property Value Type Description Renderer [] Methods OnDisable() Declaration public virtual void OnDisable() OnEnable() Declaration public virtual void OnEnable() OnFocusEnter(FocusEventData) Declaration public override void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) Declaration public override void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableMaterialTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableMaterialTheme.html",
    "title": "Class InteractableMaterialTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableMaterialTheme Theme Engine to control the material used based on state changes Changes the material for the first Renderer component on the initialized GameObject Inheritance Object InteractableThemeBase InteractableMaterialTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableMaterialTheme : InteractableThemeBase Constructors InteractableMaterialTheme() Declaration public InteractableMaterialTheme() Properties IsEasingSupported Indicates whether the current Theme engine implementation supports easing between state values Declaration public override bool IsEasingSupported { get; } Property Value Type Description Boolean Overrides InteractableThemeBase.IsEasingSupported Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOffsetTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOffsetTheme.html",
    "title": "Class InteractableOffsetTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOffsetTheme Inheritance Object InteractableThemeBase InteractableOffsetTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOffsetTheme : InteractableThemeBase Constructors InteractableOffsetTheme() Declaration public InteractableOffsetTheme() Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnClickReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnClickReceiver.html",
    "title": "Class InteractableOnClickReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnClickReceiver A basic receiver for detecting clicks Inheritance Object ReceiverBase InteractableOnClickReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnClickReceiver : ReceiverBase Constructors InteractableOnClickReceiver(UnityEvent) Creates receiver for raising OnClick events Declaration public InteractableOnClickReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Properties OnClicked Invoked on pointer clicked Declaration public UnityEvent OnClicked { get; } Property Value Type Description UnityEvent Methods OnClick(InteractableStates, Interactable, IMixedRealityPointer) A click event happened Declaration public override void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer Overrides ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnFocus.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnFocus.html",
    "title": "Class InteractableOnFocus | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnFocus Adds or removes materials to target renderer for highlighting Focused GameObject s. Inheritance Object InteractableOnFocus Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnFocus : BaseFocusHandler Remarks Useful with focusable GameObject s Fields Profiles List of profiles can match themes with gameObjects Declaration protected List<VisualProfile> Profiles Field Value Type Description List < VisualProfile > Properties State Declaration protected InteractableStates.InteractableStateEnum State { get; } Property Value Type Description InteractableStates.InteractableStateEnum Methods Awake() Declaration public void Awake() Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnFocusReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnFocusReceiver.html",
    "title": "Class InteractableOnFocusReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnFocusReceiver A basic focus event receiver Inheritance Object ReceiverBase InteractableOnFocusReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnFocusReceiver : ReceiverBase Constructors InteractableOnFocusReceiver() Creates receiver that raises focus enter and exit unity events Declaration public InteractableOnFocusReceiver() InteractableOnFocusReceiver(UnityEvent) Creates receiver that raises focus enter and exit unity events Declaration public InteractableOnFocusReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields OnFocusOff Raised when focus has left the object Declaration public UnityEvent OnFocusOff Field Value Type Description UnityEvent Properties OnFocusOn Raised when focus has entered the object Declaration public UnityEvent OnFocusOn { get; } Property Value Type Description UnityEvent Methods OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInputFilterCancelType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInputFilterCancelType.html",
    "title": "Enum EVRInputFilterCancelType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRInputFilterCancelType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRInputFilterCancelType Fields Name Description VRInputFilterCancel_Momentum VRInputFilterCancel_Timers"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInputStringBits.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInputStringBits.html",
    "title": "Enum EVRInputStringBits | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRInputStringBits Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRInputStringBits Fields Name Description VRInputString_All VRInputString_ControllerType VRInputString_Hand VRInputString_InputSource"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRMouseButton.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRMouseButton.html",
    "title": "Enum EVRMouseButton | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRMouseButton Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRMouseButton Fields Name Description Left Middle Right"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRMuraCorrectionMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRMuraCorrectionMode.html",
    "title": "Enum EVRMuraCorrectionMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRMuraCorrectionMode Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRMuraCorrectionMode Fields Name Description Default NoCorrection"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRNotificationError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRNotificationError.html",
    "title": "Enum EVRNotificationError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRNotificationError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRNotificationError Fields Name Description InvalidNotificationId InvalidOverlayHandle NotificationQueueFull OK SystemWithUserValueAlreadyExists"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRNotificationStyle.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRNotificationStyle.html",
    "title": "Enum EVRNotificationStyle | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRNotificationStyle Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRNotificationStyle Fields Name Description Application Contact_Active Contact_Disabled Contact_Enabled None"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRNotificationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRNotificationType.html",
    "title": "Enum EVRNotificationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRNotificationType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRNotificationType Fields Name Description Persistent Transient Transient_SystemWithUserValue"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVROverlayError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVROverlayError.html",
    "title": "Enum EVROverlayError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVROverlayError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVROverlayError Fields Name Description ArrayTooSmall BadMaskPrimitive InvalidHandle InvalidParameter InvalidTexture InvalidTrackedDevice KeyboardAlreadyInUse KeyInUse KeyTooLong NameTooLong None NoNeighbor OverlayLimitExceeded PermissionDenied RequestFailed TextureAlreadyLocked TextureLockCapacityReached TextureNotLocked ThumbnailCantBeDestroyed TooManyMaskPrimitives UnableToLoadFile UnknownOverlay WrongTransformType WrongVisibilityType"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVROverlayIntersectionMaskPrimitiveType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVROverlayIntersectionMaskPrimitiveType.html",
    "title": "Enum EVROverlayIntersectionMaskPrimitiveType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVROverlayIntersectionMaskPrimitiveType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVROverlayIntersectionMaskPrimitiveType Fields Name Description OverlayIntersectionPrimitiveType_Circle OverlayIntersectionPrimitiveType_Rectangle"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRRenderModelError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRRenderModelError.html",
    "title": "Enum EVRRenderModelError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRRenderModelError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRRenderModelError Fields Name Description BufferTooSmall InvalidArg InvalidModel InvalidTexture Loading MultipleShapes MultipleTextures None NoShapes NotEnoughNormals NotEnoughTexCoords NotSupported TooManyVertices"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRResources.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRResources.html",
    "title": "Struct IVRResources | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRResources Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRResources"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRScreenshots.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRScreenshots.html",
    "title": "Struct IVRScreenshots | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRScreenshots Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRScreenshots"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRSettings.html",
    "title": "Struct IVRSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRSettings Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRSettings"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRSpatialAnchors.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRSpatialAnchors.html",
    "title": "Struct IVRSpatialAnchors | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRSpatialAnchors Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRSpatialAnchors"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.DependencyWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.DependencyWindow.html",
    "title": "Class DependencyWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class DependencyWindow Inheritance Object DependencyWindow Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class DependencyWindow : EditorWindow"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EditorAssemblyReloadManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EditorAssemblyReloadManager.html",
    "title": "Class EditorAssemblyReloadManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorAssemblyReloadManager Inheritance Object EditorAssemblyReloadManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorAssemblyReloadManager Properties LockReloadAssemblies Locks the Editor's ability to reload assemblies. Declaration public static bool LockReloadAssemblies { get; set; } Property Value Type Description Boolean Remarks This is useful for ensuring async tasks complete in the editor without having to worry if any script changes that happen during the running task will cancel it when the editor re-compiles the assemblies."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EditorPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EditorPreferences.html",
    "title": "Class EditorPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorPreferences Convenience class for setting Editor Preferences with Application.productName as key prefix. Inheritance Object EditorPreferences Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorPreferences Methods Get(String, Boolean) Get the saved Boolean from the EditorPrefs . Declaration public static bool Get(string key, bool defaultValue) Parameters Type Name Description String key Boolean defaultValue Returns Type Description Boolean Get(String, Int32) Get the saved Int32 from the EditorPrefs . Declaration public static int Get(string key, int defaultValue) Parameters Type Name Description String key Int32 defaultValue Returns Type Description Int32 Get(String, Single) Get the saved Single from the EditorPrefs . Declaration public static float Get(string key, float defaultValue) Parameters Type Name Description String key Single defaultValue Returns Type Description Single Get(String, String) Get the saved String from the EditorPrefs . Declaration public static string Get(string key, string defaultValue) Parameters Type Name Description String key String defaultValue Returns Type Description String Set(String, Boolean) Set the saved Boolean from to EditorPrefs . Declaration public static void Set(string key, bool value) Parameters Type Name Description String key Boolean value Set(String, Int32) Set the saved Int32 from the EditorPrefs . Declaration public static void Set(string key, int value) Parameters Type Name Description String key Int32 value Set(String, Single) Set the saved Single from the EditorPrefs . Declaration public static void Set(string key, float value) Parameters Type Name Description String key Single value Set(String, String) Set the saved String from to EditorPrefs . Declaration public static void Set(string key, string value) Parameters Type Name Description String key String value"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EditorProjectUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EditorProjectUtilities.html",
    "title": "Class EditorProjectUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class EditorProjectUtilities Inheritance Object EditorProjectUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorProjectUtilities Methods CheckMinimumEditorVersion() Checks that a supported version of Unity is being used with this project. Declaration public static void CheckMinimumEditorVersion() Remarks This method displays a message to the user allowing them to continue or to exit the editor. FindRelativeDirectory(String, out String) Finds the path of a directory relative to the project directory. Declaration public static bool FindRelativeDirectory(string packageDirectory, out string path) Parameters Type Name Description String packageDirectory The name of the directory to search for. String path The output parameter in which the fully qualified path is returned. Returns Type Description Boolean True if the directory could be found, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EllipseLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.EllipseLineDataProviderInspector.html",
    "title": "Class EllipseLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class EllipseLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector EllipseLineDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview BaseLineDataProviderInspector.OnSceneGUI() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class EllipseLineDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.GridObjectCollectionInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.GridObjectCollectionInspector.html",
    "title": "Class GridObjectCollectionInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class GridObjectCollectionInspector Inheritance Object BaseCollectionInspector GridObjectCollectionInspector Inherited Members BaseCollectionInspector.OnInspectorGUI() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class GridObjectCollectionInspector : BaseCollectionInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseCollectionInspector.OnEnable() OnInspectorGUIInsertion() Declaration protected override void OnInspectorGUIInsertion() Overrides BaseCollectionInspector.OnInspectorGUIInsertion()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorField.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorField.html",
    "title": "Class InspectorField | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorField A set of field/property tags used to define how a property should render in a custom inspector Inheritance Object InspectorField Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class InspectorField : Attribute Properties Label The label that will be rendered with the property field in the custom inspector Declaration public string Label { get; set; } Property Value Type Description String Options A string list of options for a pop-up list Declaration public string[] Options { get; set; } Property Value Type Description String [] Tooltip A tooltip for the property field Declaration public string Tooltip { get; set; } Property Value Type Description String Type The type of field or property value type Declaration public InspectorField.FieldTypes Type { get; set; } Property Value Type Description InspectorField.FieldTypes Value An object to hold the actual value Declaration public UnityEngine.Object Value { get; set; } Property Value Type Description UnityEngine.Object Methods FieldToProperty(InspectorField, Object, String) Declaration public static InspectorPropertySetting FieldToProperty(InspectorField attributes, object fieldValue, string fieldName) Parameters Type Name Description InspectorField attributes Object fieldValue String fieldName Returns Type Description InspectorPropertySetting GetSettingValue(List<InspectorPropertySetting>, String) Get the propertySettings value Declaration public static object GetSettingValue(List<InspectorPropertySetting> settings, string name) Parameters Type Name Description List < InspectorPropertySetting > settings String name Returns Type Description Object ReverseLookup(String, String[]) Get the index from a list of strings using string comparison Declaration public static int ReverseLookup(string option, string[] options) Parameters Type Name Description String option String [] options Returns Type Description Int32 UpdatePropertySetting(InspectorPropertySetting, Object) Set the value of the propertySetting Declaration public static InspectorPropertySetting UpdatePropertySetting(InspectorPropertySetting setting, object update) Parameters Type Name Description InspectorPropertySetting setting Object update Returns Type Description InspectorPropertySetting"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorFieldData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorFieldData.html",
    "title": "Struct InspectorFieldData | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InspectorFieldData A reference to the InspectorField and cached info Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InspectorFieldData Fields Attributes Declaration public InspectorField Attributes Field Value Type Description InspectorField Name Declaration public string Name Field Value Type Description String Value Declaration public object Value Field Value Type Description Object"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorFieldsExample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorFieldsExample.html",
    "title": "Class InspectorFieldsExample | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorFieldsExample Example of using InspectorFields attributes in a class to create custom inspectors This is on approach for building complex inspectors that need to be customized or the need to overcome lack of polymorphism support They provide a way to create one inspector for multiple classes Example: Create a MonoBehaviour or scriptable object with a custom inspector. The functionality or settings can be changed by assigning a custom script to the object Use InspectorFields to render the custom properties inside the custom script in the inspector When the app launches, copy the properties to the new instance of the script An example of this can be found in Interactables Receivers. Each Receiver is a custom class that renders their properties in the Interactables custom inspector Inheritance Object InspectorFieldsExample Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class InspectorFieldsExample : MonoBehaviour Fields ComponentIndex Declaration public int ComponentIndex Field Value Type Description Int32 ComponentName Declaration public string ComponentName Field Value Type Description String ComponentOption Declaration public string ComponentOption Field Value Type Description String Enabled Declaration public bool Enabled Field Value Type Description Boolean Settings A holder for the InpsectorFields as a list The inspector will update these settings while in the editor Declaration public List<InspectorPropertySetting> Settings Field Value Type Description List < InspectorPropertySetting >"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorFieldsUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorFieldsUtility.html",
    "title": "Class InspectorFieldsUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorFieldsUtility A collection of helper functions for adding InspectorFields to a custom Inspector Inheritance Object InspectorFieldsUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class InspectorFieldsUtility Methods AddFieldsToSettingsList(SerializedProperty, List<InspectorFieldData>) Adds InspectorFields to list of serialized PropertySettings Declaration public static void AddFieldsToSettingsList(SerializedProperty settings, List<InspectorFieldData> data) Parameters Type Name Description SerializedProperty settings List < InspectorFieldData > data AreFieldsSame(SerializedProperty, List<InspectorFieldData>) Declaration public static bool AreFieldsSame(SerializedProperty settings, List<InspectorFieldData> fieldList) Parameters Type Name Description SerializedProperty settings List < InspectorFieldData > fieldList Returns Type Description Boolean ClearSettingsList(SerializedProperty, List<InspectorFieldData>) Create a new list of serialized PropertySettings from InspectorFields Declaration public static void ClearSettingsList(SerializedProperty settings, List<InspectorFieldData> data) Parameters Type Name Description SerializedProperty settings List < InspectorFieldData > data DisplayPropertyField(SerializedProperty) Render a PropertySettings UI field based on the InspectorField Settings Declaration public static void DisplayPropertyField(SerializedProperty prop) Parameters Type Name Description SerializedProperty prop GetInspectorFields(Object) Declaration public static List<InspectorFieldData> GetInspectorFields(object target) Parameters Type Name Description Object target Returns Type Description List < InspectorFieldData > IsPropertyType(SerializedProperty, InspectorField.FieldTypes) Checks the type a property field and returns if it matches the passed in type Declaration public static bool IsPropertyType(SerializedProperty prop, InspectorField.FieldTypes type) Parameters Type Name Description SerializedProperty prop InspectorField.FieldTypes type Returns Type Description Boolean UpdatePropertySettings(SerializedProperty, Int32, Object) Update a property value in a serialized PropertySettings Declaration public static void UpdatePropertySettings(SerializedProperty prop, int type, object update) Parameters Type Name Description SerializedProperty prop Int32 type Object update UpdateSettingsList(SerializedProperty, List<InspectorFieldData>) Update list of serialized PropertySettings from new or removed InspectorFields Declaration public static void UpdateSettingsList(SerializedProperty settings, List<InspectorFieldData> fieldList) Parameters Type Name Description SerializedProperty settings List < InspectorFieldData > fieldList"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorGenericFields-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorGenericFields-1.html",
    "title": "Class InspectorGenericFields<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorGenericFields<T> A set of Inspector fields for setting up properties in a component that can be automatically rendered in a custom inspector Inheritance Object InspectorGenericFields<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class InspectorGenericFields<T> Type Parameters Name Description T Methods GetSettings(T) Searches through a class for InspectorField tags creates properties that can be serialized and automatically rendered in a custom inspector Declaration public static List<InspectorPropertySetting> GetSettings(T source) Parameters Type Name Description T source Returns Type Description List < InspectorPropertySetting > LoadSettings(T, List<InspectorPropertySetting>) Copies values from Inspector PropertySettings to an instantiated class on start, helps overcome polymorphism limitations of serialization Declaration public static void LoadSettings(T target, List<InspectorPropertySetting> settings) Parameters Type Name Description T target List < InspectorPropertySetting > settings"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorPropertySetting.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorPropertySetting.html",
    "title": "Struct InspectorPropertySetting | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InspectorPropertySetting A InspectorField property definition and value. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax [Serializable] public struct InspectorPropertySetting Fields AudioClipValue Declaration public AudioClip AudioClipValue Field Value Type Description AudioClip BoolValue Declaration public bool BoolValue Field Value Type Description Boolean ColorValue Declaration public Color ColorValue Field Value Type Description Color CurveValue Declaration public AnimationCurve CurveValue Field Value Type Description AnimationCurve EventValue Declaration public UnityEvent EventValue Field Value Type Description UnityEvent FloatValue Declaration public float FloatValue Field Value Type Description Single GameObjectValue Declaration public GameObject GameObjectValue Field Value Type Description GameObject IntValue Declaration public int IntValue Field Value Type Description Int32 Label Declaration public string Label Field Value Type Description String MaterialValue Declaration public Material MaterialValue Field Value Type Description Material Name Declaration public string Name Field Value Type Description String ObjectValue Declaration public UnityEngine.Object ObjectValue Field Value Type Description UnityEngine.Object Options Declaration public string[] Options Field Value Type Description String [] QuaternionValue Declaration public Quaternion QuaternionValue Field Value Type Description Quaternion ScriptableObjectValue Declaration public ScriptableObject ScriptableObjectValue Field Value Type Description ScriptableObject StringValue Declaration public string StringValue Field Value Type Description String TextureValue Declaration public Texture TextureValue Field Value Type Description Texture Tooltip Declaration public string Tooltip Field Value Type Description String Type Declaration public InspectorField.FieldTypes Type Field Value Type Description InspectorField.FieldTypes Vector2Value Declaration public Vector2 Vector2Value Field Value Type Description Vector2 Vector3Value Declaration public Vector3 Vector3Value Field Value Type Description Vector3 Vector4Value Declaration public Vector4 Vector4Value Field Value Type Description Vector4"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.ListButtonEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.ListButtonEvent.html",
    "title": "Delegate InspectorUIUtility.ListButtonEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate InspectorUIUtility.ListButtonEvent Delegate for button callbacks, single index Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public delegate void ListButtonEvent(int index, SerializedProperty prop = null); Parameters Type Name Description Int32 index location of item in a serialized array SerializedProperty prop A serialize property containing information needed if the button was clicked"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.ListSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.ListSettings.html",
    "title": "Struct InspectorUIUtility.ListSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InspectorUIUtility.ListSettings A data container for managing scrolling lists or nested drawers in custom inspectors. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public struct ListSettings Fields Scroll Declaration public Vector2 Scroll Field Value Type Description Vector2 Show Declaration public bool Show Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.MultiListButtonEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.MultiListButtonEvent.html",
    "title": "Delegate InspectorUIUtility.MultiListButtonEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate InspectorUIUtility.MultiListButtonEvent Delegate for button callbacks, multi-index for nested arrays Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public delegate void MultiListButtonEvent(int[] indexArray, SerializedProperty prop = null); Parameters Type Name Description Int32 [] indexArray location of item in a serialized array SerializedProperty prop A serialize property containing information needed if the button was clicked"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.InspectorUIUtility.html",
    "title": "Class InspectorUIUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorUIUtility This class has handy inspector UI utilities and functions. Inheritance Object InspectorUIUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class InspectorUIUtility Fields Astrisk Declaration public static readonly string Astrisk Field Value Type Description String Close Declaration public static readonly string Close Field Value Type Description String DefaultFontSize Declaration public const int DefaultFontSize = 10 Field Value Type Description Int32 DocLinkWidth Declaration public const float DocLinkWidth = 175F Field Value Type Description Single Down Declaration public static readonly string Down Field Value Type Description String Emoji Declaration public static readonly string Emoji Field Value Type Description String HeaderFontSize Declaration public const int HeaderFontSize = 11 Field Value Type Description Int32 Heart Declaration public static readonly string Heart Field Value Type Description String HelpIcon Declaration public static readonly Texture HelpIcon Field Value Type Description Texture InfoIcon Declaration public static readonly Texture InfoIcon Field Value Type Description Texture Left Declaration public static readonly string Left Field Value Type Description String Minus Declaration public static readonly string Minus Field Value Type Description String Plus Declaration public static readonly string Plus Field Value Type Description String Right Declaration public static readonly string Right Field Value Type Description String Star Declaration public static readonly string Star Field Value Type Description String SuccessIcon Declaration public static readonly Texture SuccessIcon Field Value Type Description Texture TitleFontSize Declaration public const int TitleFontSize = 14 Field Value Type Description Int32 Up Declaration public static readonly string Up Field Value Type Description String WarningIcon Declaration public static readonly Texture WarningIcon Field Value Type Description Texture Properties ColorTint10 Declaration public static Color ColorTint10 { get; } Property Value Type Description Color ColorTint100 Declaration public static Color ColorTint100 { get; } Property Value Type Description Color ColorTint25 Declaration public static Color ColorTint25 { get; } Property Value Type Description Color ColorTint50 Declaration public static Color ColorTint50 { get; } Property Value Type Description Color ColorTint75 Declaration public static Color ColorTint75 { get; } Property Value Type Description Color Methods AdjustListSettings(List<InspectorUIUtility.ListSettings>, Int32) adjust list settings as things change Declaration public static List<InspectorUIUtility.ListSettings> AdjustListSettings(List<InspectorUIUtility.ListSettings> listSettings, int count) Parameters Type Name Description List < InspectorUIUtility.ListSettings > listSettings Int32 count Returns Type Description List < InspectorUIUtility.ListSettings > Box(Int32) Box style with left margin Declaration public static GUIStyle Box(int margin) Parameters Type Name Description Int32 margin Returns Type Description GUIStyle DrawDivider() Create a line across the negative space Declaration public static void DrawDivider() DrawEnumSerializedProperty(Rect, SerializedProperty, GUIContent, Enum) Draws a popup UI with PropertyField type features. Displays prefab pending updates Declaration public static Enum DrawEnumSerializedProperty(Rect position, SerializedProperty prop, GUIContent label, Enum propValue) Parameters Type Name Description Rect position position to render the serialized property SerializedProperty prop serialized property corresponding to Enum GUIContent label label for property Enum propValue Current enum value for property Returns Type Description Enum New enum value after draw DrawEnumSerializedProperty(SerializedProperty, GUIContent, Enum) Draws a popup UI with PropertyField type features. Displays prefab pending updates Declaration public static Enum DrawEnumSerializedProperty(SerializedProperty prop, GUIContent label, Enum propValue) Parameters Type Name Description SerializedProperty prop serialized property corresponding to Enum GUIContent label label for property Enum propValue Current enum value for property Returns Type Description Enum New enum value after draw DrawError(String) draw a notice with red coloring Declaration public static void DrawError(string error) Parameters Type Name Description String error DrawHeader(String) Medium title format Declaration public static void DrawHeader(string header) Parameters Type Name Description String header string content to render DrawLabel(String, Int32, Color) Draw a basic label Declaration public static void DrawLabel(string title, int size, Color color) Parameters Type Name Description String title Int32 size Color color DrawNotice(String) draw a notice area, normal coloring Declaration public static void DrawNotice(string notice) Parameters Type Name Description String notice DrawSectionFoldout(String, Boolean, GUIStyle) Draws a section start (initiated by the Header attribute) Declaration public static bool DrawSectionFoldout(string headerName, bool open = true, GUIStyle style = null) Parameters Type Name Description String headerName Boolean open GUIStyle style Returns Type Description Boolean DrawSectionFoldoutWithKey(String, String, GUIStyle, Boolean) Draws a section start with header name and save open/close state to given preference key in SessionState Declaration public static bool DrawSectionFoldoutWithKey(string headerName, string preferenceKey = null, GUIStyle style = null, bool defaultOpen = true) Parameters Type Name Description String headerName String preferenceKey GUIStyle style Boolean defaultOpen Returns Type Description Boolean DrawSuccess(String) draw a notice with green coloring Declaration public static void DrawSuccess(string notice) Parameters Type Name Description String notice DrawTitle(String) Large title format Declaration public static void DrawTitle(string title) Parameters Type Name Description String title DrawWarning(String) draw a label with a yellow coloring Declaration public static void DrawWarning(string warning) Parameters Type Name Description String warning FlexButton(GUIContent) A button that is as wide as the label Declaration public static bool FlexButton(GUIContent label) Parameters Type Name Description GUIContent label content for button Returns Type Description Boolean true if button clicked, false otherwise FlexButton(GUIContent, Int32, InspectorUIUtility.ListButtonEvent, SerializedProperty) A button that is as wide as the label Declaration public static bool FlexButton(GUIContent label, int index, InspectorUIUtility.ListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Int32 index InspectorUIUtility.ListButtonEvent callback SerializedProperty prop Returns Type Description Boolean FlexButton(GUIContent, Int32[], InspectorUIUtility.MultiListButtonEvent, SerializedProperty) A button that is as wide as the label Declaration public static bool FlexButton(GUIContent label, int[] indexArr, InspectorUIUtility.MultiListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Int32 [] indexArr InspectorUIUtility.MultiListButtonEvent callback SerializedProperty prop Returns Type Description Boolean true if button clicked, false otherwise FullWidthButton(GUIContent, Single, Int32, InspectorUIUtility.ListButtonEvent, SerializedProperty) A button that is as wide as the available space Declaration public static bool FullWidthButton(GUIContent label, float padding, int index, InspectorUIUtility.ListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Single padding Int32 index InspectorUIUtility.ListButtonEvent callback SerializedProperty prop Returns Type Description Boolean FullWidthButton(GUIContent, Single, Int32[], InspectorUIUtility.MultiListButtonEvent, SerializedProperty) A button that is as wide as the available space Declaration public static bool FullWidthButton(GUIContent label, float padding, int[] indexArr, InspectorUIUtility.MultiListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label Single padding Int32 [] indexArr InspectorUIUtility.MultiListButtonEvent callback SerializedProperty prop Returns Type Description Boolean GetOptions(SerializedProperty) Get an array of strings from a serialized list of strings, pop-up field helper Declaration public static string[] GetOptions(SerializedProperty options) Parameters Type Name Description SerializedProperty options Returns Type Description String [] GetOptionsIndex(SerializedProperty, String) Get the index of a serialized array item based on it's name, pop-up field helper Declaration public static int GetOptionsIndex(SerializedProperty options, string selection) Parameters Type Name Description SerializedProperty options String selection Returns Type Description Int32 HelpBox(Int32) Help box style with left margin Declaration public static GUIStyle HelpBox(int margin) Parameters Type Name Description Int32 margin amount of left margin Returns Type Description GUIStyle Configured helpbox GUIStyle LableStyle(Int32, Color) Create a custom label style based on color and size Declaration public static GUIStyle LableStyle(int size, Color color) Parameters Type Name Description Int32 size Color color Returns Type Description GUIStyle RenderDocumentationButton(String) Render documentation button routing to relevant URI Declaration public static bool RenderDocumentationButton(string docURL) Parameters Type Name Description String docURL documentation URL to open on button click Returns Type Description Boolean true if button clicked, false otherwise RenderDocumentationSection(String) Render a documentation header with button for given url value Declaration public static bool RenderDocumentationSection(string url) Parameters Type Name Description String url Url to open if button is clicked Returns Type Description Boolean true if object drawn and button clicked, false otherwise RenderHelpURL(Type) Render a documentation header with button if Object contains HelpURLAttribute Declaration public static bool RenderHelpURL(Type targetType) Parameters Type Name Description Type targetType Type to test for HelpURLAttribute Returns Type Description Boolean true if object drawn and button clicked, false otherwise RenderIndentedButton(Func<Boolean>) Helper function to support primary overloaded version of this functionality Declaration public static bool RenderIndentedButton(Func<bool> renderButton) Parameters Type Name Description Func < Boolean > renderButton The code to render button correctly based on parameter types passed Returns Type Description Boolean true if button clicked, false if otherwise RenderIndentedButton(GUIContent, GUIStyle, GUILayoutOption[]) Helper function to render buttons correctly indented according to EditorGUI.indentLevel since GUILayout component don't respond naturally Declaration public static bool RenderIndentedButton(GUIContent content, GUIStyle style, params GUILayoutOption[] options) Parameters Type Name Description GUIContent content What to draw in button GUIStyle style Style configuration for button GUILayoutOption [] options layout options Returns Type Description Boolean true if button clicked, false if otherwise RenderIndentedButton(String, GUILayoutOption[]) Helper function to render buttons correctly indented according to EditorGUI.indentLevel since GUILayout component don't respond naturally Declaration public static bool RenderIndentedButton(string buttonText, params GUILayoutOption[] options) Parameters Type Name Description String buttonText text to place in button GUILayoutOption [] options layout options Returns Type Description Boolean true if button clicked, false if otherwise SmallButton(GUIContent) A small button, good for a single icon like + or - Declaration public static bool SmallButton(GUIContent label) Parameters Type Name Description GUIContent label content to place in the button Returns Type Description Boolean true if button selected, false otherwise SmallButton(GUIContent, Int32, InspectorUIUtility.ListButtonEvent, SerializedProperty) A small button, good for a single icon like + or - with single index callback events Declaration public static bool SmallButton(GUIContent label, int index, InspectorUIUtility.ListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label content to place in the button Int32 index InspectorUIUtility.ListButtonEvent callback SerializedProperty prop Returns Type Description Boolean true if button selected, false otherwise SmallButton(GUIContent, Int32[], InspectorUIUtility.MultiListButtonEvent, SerializedProperty) A small button, good for a single icon like + or - with multi-index callback events Declaration public static bool SmallButton(GUIContent label, int[] indexArr, InspectorUIUtility.MultiListButtonEvent callback, SerializedProperty prop = null) Parameters Type Name Description GUIContent label content to place in the button Int32 [] indexArr InspectorUIUtility.MultiListButtonEvent callback SerializedProperty prop Returns Type Description Boolean true if button selected, false otherwise"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.LinePointerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.LinePointerInspector.html",
    "title": "Class LinePointerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class LinePointerInspector Inheritance Object LinePointerInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class LinePointerInspector : BaseControllerPointerInspector Methods OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityEditorSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityEditorSettings.html",
    "title": "Class MixedRealityEditorSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityEditorSettings Editor runtime controller for showing Project Configuration window and performance checks logging in current Unity project Inheritance Object MixedRealityEditorSettings Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityEditorSettings : IActiveBuildTargetChanged Constructors MixedRealityEditorSettings() Declaration public MixedRealityEditorSettings() Properties callbackOrder Declaration public int callbackOrder { get; } Property Value Type Description Int32 IgnoreProjectConfigForSession Session state wrapper that tracks whether to ignore checking Project Configuration for the current Unity session Declaration public static bool IgnoreProjectConfigForSession { get; set; } Property Value Type Description Boolean Methods OnActiveBuildTargetChanged(BuildTarget, BuildTarget) Declaration public void OnActiveBuildTargetChanged(BuildTarget previousTarget, BuildTarget newTarget) Parameters Type Name Description BuildTarget previousTarget BuildTarget newTarget"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityInspectorUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityInspectorUtility.html",
    "title": "Class MixedRealityInspectorUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInspectorUtility This class has handy inspector utilities and functions. Inheritance Object MixedRealityInspectorUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class MixedRealityInspectorUtility Fields DarkColor Declaration public static readonly Color DarkColor Field Value Type Description Color DefaultConfigProfileName Declaration public const string DefaultConfigProfileName = \"DefaultMixedRealityToolkitConfigurationProfile\" Field Value Type Description String DisabledColor Declaration public static readonly Color DisabledColor Field Value Type Description Color DottedLineScreenSpace Declaration public const float DottedLineScreenSpace = 4.65F Field Value Type Description Single ErrorColor Declaration public static readonly Color ErrorColor Field Value Type Description Color HandleColorAxis Declaration public static readonly Color HandleColorAxis Field Value Type Description Color HandleColorCircle Declaration public static readonly Color HandleColorCircle Field Value Type Description Color HandleColorRotation Declaration public static readonly Color HandleColorRotation Field Value Type Description Color HandleColorSphere Declaration public static readonly Color HandleColorSphere Field Value Type Description Color HandleColorSquare Declaration public static readonly Color HandleColorSquare Field Value Type Description Color HandleColorTangent Declaration public static readonly Color HandleColorTangent Field Value Type Description Color LineVelocityColor Declaration public static readonly Color LineVelocityColor Field Value Type Description Color LogoDarkTheme Declaration public static readonly Texture2D LogoDarkTheme Field Value Type Description Texture2D LogoLightTheme Declaration public static readonly Texture2D LogoLightTheme Field Value Type Description Texture2D SectionColor Declaration public static readonly Color SectionColor Field Value Type Description Color SuccessColor Declaration public static readonly Color SuccessColor Field Value Type Description Color WarningColor Declaration public static readonly Color WarningColor Field Value Type Description Color Properties DefaultBackgroundColor Declaration public static Color DefaultBackgroundColor { get; } Property Value Type Description Color Methods AddMixedRealityToolkitToScene(MixedRealityToolkitConfigurationProfile) If MRTK is not initialized in scene, adds and initializes instance to current scene Declaration public static void AddMixedRealityToolkitToScene(MixedRealityToolkitConfigurationProfile configProfile = null) Parameters Type Name Description MixedRealityToolkitConfigurationProfile configProfile AxisMoveHandle(Object, Vector3, Vector3, Single, Single, Boolean, Boolean) Draw an axis move handle. Declaration public static float AxisMoveHandle(Object target, Vector3 origin, Vector3 direction, float distance, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 origin The initial position of the axis. Vector3 direction The direction the axis is facing. Single distance Distance from the axis. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Single The new Single value. CenterOnMainWin(EditorWindow) Centers an editor window on the main display. Declaration public static void CenterOnMainWin(this EditorWindow window) Parameters Type Name Description EditorWindow window CheckMixedRealityConfigured(Boolean) Check and make sure we have a Mixed Reality Toolkit and an active profile. Declaration public static bool CheckMixedRealityConfigured(bool renderEditorElements = false) Parameters Type Name Description Boolean renderEditorElements Returns Type Description Boolean True if the Mixed Reality Toolkit is properly initialized. CircleMoveHandle(Object, Vector3, Single, Single, Single, Single, Boolean, Boolean) Draw a Circle Move Handle. Declaration public static Vector3 CircleMoveHandle(Object target, Vector3 position, float xScale = 1F, float yScale = 1F, float zScale = 1F, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Single xScale Scale the new value on the x axis by this amount. Single yScale Scale the new value on the x axis by this amount. Single zScale Scale the new value on the x axis by this amount. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Vector3 The new Vector3 value. DrawProfileDropDownList(SerializedProperty, BaseMixedRealityProfile, Object, Type, Boolean) Draws a dropdown with all available profiles of profilyType. Declaration public static bool DrawProfileDropDownList(SerializedProperty property, BaseMixedRealityProfile profile, Object oldProfileObject, Type profileType, bool showAddButton) Parameters Type Name Description SerializedProperty property BaseMixedRealityProfile profile Object oldProfileObject Type profileType Boolean showAddButton Returns Type Description Boolean True if property was changed. DrawSubProfileEditor(Object, Boolean) Draws an editor for a profile object. Declaration public static void DrawSubProfileEditor(Object profileObject, bool renderProfileInBox) Parameters Type Name Description Object profileObject Boolean renderProfileInBox GetDefaultConfigProfile() Returns the default config profile, if it exists. Declaration public static MixedRealityToolkitConfigurationProfile GetDefaultConfigProfile() Returns Type Description MixedRealityToolkitConfigurationProfile GetDefaultConfigProfile(MixedRealityToolkitConfigurationProfile[]) Given a list of MixedRealityToolkitConfigurationProfile objects, returns the one that matches the default profile name. Declaration public static MixedRealityToolkitConfigurationProfile GetDefaultConfigProfile(MixedRealityToolkitConfigurationProfile[] allProfiles) Parameters Type Name Description MixedRealityToolkitConfigurationProfile [] allProfiles Returns Type Description MixedRealityToolkitConfigurationProfile GetEditorMainWindowPos() Found at https://answers.unity.com/questions/960413/editor-window-how-to-center-a-window.html Declaration public static Rect GetEditorMainWindowPos() Returns Type Description Rect RenderMixedRealityToolkitLogo() Render the Mixed Reality Toolkit Logo. Declaration public static void RenderMixedRealityToolkitLogo() RotationHandle(Object, Vector3, Quaternion, Single, Boolean, Boolean) Draw a rotation handle. Declaration public static Quaternion RotationHandle(Object target, Vector3 position, Quaternion rotation, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Quaternion rotation The rotation to draw the handle. Single handleSize Optional, handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Quaternion The new Quaternion value. SphereMoveHandle(Object, Vector3, Single, Single, Single, Single, Boolean, Boolean) Draw a sphere move handle. Declaration public static Vector3 SphereMoveHandle(Object target, Vector3 position, float xScale = 1F, float yScale = 1F, float zScale = 1F, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Single xScale Scale the new value on the x axis by this amount. Single yScale Scale the new value on the x axis by this amount. Single zScale Scale the new value on the x axis by this amount. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Vector3 The new Vector3 value. SquareMoveHandle(Object, Vector3, Single, Single, Single, Single, Boolean, Boolean) Draw a square move handle. Declaration public static Vector3 SquareMoveHandle(Object target, Vector3 position, float xScale = 1F, float yScale = 1F, float zScale = 1F, float handleSize = 0.2F, bool autoSize = true, bool recordUndo = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 position The position to draw the handle. Single xScale Scale the new value on the x axis by this amount. Single yScale Scale the new value on the x axis by this amount. Single zScale Scale the new value on the x axis by this amount. Single handleSize Optional handle size. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Boolean recordUndo Optional, records undo state. Returns Type Description Vector3 The new Vector3 value. VectorHandle(Object, Vector3, Vector3, Boolean, Boolean, Single, Single, Boolean, Boolean) Draw a vector handle. Declaration public static Vector3 VectorHandle(Object target, Vector3 origin, Vector3 vector, bool normalize = true, bool clamp = true, float handleLength = 1F, float handleSize = 0.1F, bool recordUndo = true, bool autoSize = true) Parameters Type Name Description Object target Object that is undergoing the transformation. Also used for recording undo. Vector3 origin Vector3 vector Boolean normalize Optional, Normalize the new vector value. Boolean clamp Optional, Clamp new vector's value based on the distance to the origin. Single handleLength Optional, handle length. Single handleSize Optional, handle size. Boolean recordUndo Optional, records undo state. Boolean autoSize Optional, auto sizes the handles based on position and handle size. Returns Type Description Vector3 The new Vector3 value."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProfileUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProfileUtility.html",
    "title": "Class MixedRealityProfileUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityProfileUtility This class has utilities and functions for working with profiles in the Unity editor. Inheritance Object MixedRealityProfileUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class MixedRealityProfileUtility Methods GetProfilePopupOptionsByType(Type) Returns an array of GUIContent for use in a dropdown for a type of profile. Includes a (None) option at the start. This means that the array length will always be 1 greater than the available profiles. Declaration public static GUIContent[] GetProfilePopupOptionsByType(Type profileType) Parameters Type Name Description Type profileType Returns Type Description GUIContent [] GetProfilesOfType(Type) Returns an array of profiles that match profile type. Declaration public static ScriptableObject[] GetProfilesOfType(Type profileType) Parameters Type Name Description Type profileType Returns Type Description ScriptableObject [] GetProfileTypesForService(Type) Given a service type, finds all sub-classes of BaseMixedRealityProfile that are designed to configure that service. Declaration public static IReadOnlyCollection<Type> GetProfileTypesForService(Type serviceType) Parameters Type Name Description Type serviceType Returns Type Description IReadOnlyCollection < Type > IsConcreteProfileType(Type) Returns true if profile is NOT a BaseMixedRealityProfile class type. Declaration public static bool IsConcreteProfileType(Type profileType) Parameters Type Name Description Type profileType Returns Type Description Boolean IsProfileForService(Type, Type) Returns true if the given profile type is designed to configure the given service. Declaration public static bool IsProfileForService(Type profileType, Type serviceType) Parameters Type Name Description Type profileType Type serviceType Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProjectConfigurator.Configurations.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProjectConfigurator.Configurations.html",
    "title": "Enum MixedRealityProjectConfigurator.Configurations | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityProjectConfigurator.Configurations List of available configurations to check and configure with this utility Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public enum Configurations Fields Name Description AndroidMinSdkVersion AndroidMultiThreadedRendering EnableMSBuildForUnity ForceTextSerialization InternetClientCapability IOSArchitecture IOSCameraUsageDescription IOSMinOSVersion LatestScriptingRuntime MicrophoneCapability SinglePassInstancing SpatialAwarenessLayer SpatialPerceptionCapability VirtualRealitySupported VisibleMetaFiles"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProjectConfigurator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProjectConfigurator.html",
    "title": "Class MixedRealityProjectConfigurator | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityProjectConfigurator Utility class that provides methods to both check and configure Unity project for desired settings Inheritance Object MixedRealityProjectConfigurator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityProjectConfigurator Methods ApplyXRSettings() Discover and set the appropriate XR Settings for virtual reality supported for the current build target. Declaration public static void ApplyXRSettings() Configure(MixedRealityProjectConfigurator.Configurations) Configures the supplied setting type to the desired values for MRTK Declaration public static void Configure(MixedRealityProjectConfigurator.Configurations config) Parameters Type Name Description MixedRealityProjectConfigurator.Configurations config The setting configuration that needs to be checked ConfigureProject(HashSet<MixedRealityProjectConfigurator.Configurations>) Configures the Unity project properly for the list of setting types provided. If null, configures all possibles setting types Declaration public static void ConfigureProject(HashSet<MixedRealityProjectConfigurator.Configurations> filter = null) Parameters Type Name Description HashSet < MixedRealityProjectConfigurator.Configurations > filter List of setting types to target with configure action HasSpatialAwarenessLayer() Checks if current Unity project has the default Spatial Awareness layer set in the Layers settings Declaration public static bool HasSpatialAwarenessLayer() Returns Type Description Boolean IsConfigured(MixedRealityProjectConfigurator.Configurations) Checks whether the supplied setting type has been properly configured Declaration public static bool IsConfigured(MixedRealityProjectConfigurator.Configurations config) Parameters Type Name Description MixedRealityProjectConfigurator.Configurations config The setting configuration that needs to be checked Returns Type Description Boolean true if properly configured, false otherwise IsForceTextSerialization() Checks if current Unity projects uses force text serialization Declaration public static bool IsForceTextSerialization() Returns Type Description Boolean IsLatestScriptingRuntime() Checks if current Unity project has latest scripting runtime Declaration public static bool IsLatestScriptingRuntime() Returns Type Description Boolean IsMSBuildForUnityEnabled() Checks package manifest to see if MSBuild for Unity is included in the dependencies. Declaration public static bool IsMSBuildForUnityEnabled() Returns Type Description Boolean IsProjectConfigured() Is this Unity project configured for all setting types properly Declaration public static bool IsProjectConfigured() Returns Type Description Boolean true if entire project is configured as recommended, false otherwise IsVisibleMetaFiles() Checks if current Unity project uses visible meta files Declaration public static bool IsVisibleMetaFiles() Returns Type Description Boolean SetForceTextSerialization() Configures current Unity project to force text serialization Declaration public static void SetForceTextSerialization() SetLatestScriptingRuntime() Configures current Unity project to use latest scripting runtime and reloads project Declaration public static void SetLatestScriptingRuntime() SetSpatialAwarenessLayer() Configures current Unity project to contain the default Spatial Awareness layer set in the Layers settings Declaration public static void SetSpatialAwarenessLayer() SetVisibleMetaFiles() Configures current Unity project to enabled visible meta files Declaration public static void SetVisibleMetaFiles()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProjectConfiguratorWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityProjectConfiguratorWindow.html",
    "title": "Class MixedRealityProjectConfiguratorWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityProjectConfiguratorWindow Inheritance Object MixedRealityProjectConfiguratorWindow Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityProjectConfiguratorWindow : EditorWindow Properties Instance Declaration public static MixedRealityProjectConfiguratorWindow Instance { get; } Property Value Type Description MixedRealityProjectConfiguratorWindow IsOpen Declaration public static bool IsOpen { get; } Property Value Type Description Boolean Methods ShowWindow() Show the MRTK Project Configurator utility window or focus if already opened Declaration public static void ShowWindow()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityStylesUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.MixedRealityStylesUtility.html",
    "title": "Class MixedRealityStylesUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityStylesUtility Inheritance Object MixedRealityStylesUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class MixedRealityStylesUtility Fields BoldFoldoutStyle Default style for foldouts with bold title Declaration public static readonly GUIStyle BoldFoldoutStyle Field Value Type Description GUIStyle BoldLargeTitleStyle Default style for bold large font size title Declaration public static readonly GUIStyle BoldLargeTitleStyle Field Value Type Description GUIStyle BoldTitleFoldoutStyle Default style for foldouts with bold large font size title Declaration public static readonly GUIStyle BoldTitleFoldoutStyle Field Value Type Description GUIStyle ControllerButtonStyle Default style for large button Declaration public static readonly GUIStyle ControllerButtonStyle Field Value Type Description GUIStyle TitleFoldoutStyle Default style for foldouts with large font size title Declaration public static readonly GUIStyle TitleFoldoutStyle Field Value Type Description GUIStyle"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization Classes ConstructGltf GltfUtility Enums ColliderType GltfChunkType"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf Classes GltfAsset"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.GridObjectCollection.html",
    "title": "Class GridObjectCollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class GridObjectCollection A Grid Object Collection is simply a set of child objects organized with some layout parameters. The collection can be used to quickly create control panels or sets of prefab/objects. Inheritance Object BaseObjectCollection GridObjectCollection ScatterObjectCollection Inherited Members BaseObjectCollection.OnCollectionUpdated BaseObjectCollection.NodeList BaseObjectCollection.IgnoreInactiveTransforms BaseObjectCollection.SortType BaseObjectCollection.UpdateCollection() BaseObjectCollection.SortNodes() BaseObjectCollection.PruneEmptyNodes() BaseObjectCollection.ContainsNode(Transform) BaseObjectCollection.ContainsNode(Transform, Int32) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class GridObjectCollection : BaseObjectCollection Fields HalfCell Declaration protected Vector2 HalfCell Field Value Type Description Vector2 Properties Anchor Declaration public LayoutAnchor Anchor { get; set; } Property Value Type Description LayoutAnchor CellHeight Height of the cell per object in the collection. Declaration public float CellHeight { get; set; } Property Value Type Description Single CellWidth Width of the cell per object in the collection. Declaration public float CellWidth { get; set; } Property Value Type Description Single Columns Number of columns per row. Can only be assigned when layout type is ColumnsThenRows Declaration public int Columns { get; set; } Property Value Type Description Int32 CylinderMesh Reference mesh to use for rendering the cylinder layout Declaration public Mesh CylinderMesh { get; set; } Property Value Type Description Mesh Distance This is the Distance for an offset for the Plane mapping and is ignored for the other mappings. Declaration public float Distance { get; set; } Property Value Type Description Single Height Total Height of collection Declaration public float Height { get; } Property Value Type Description Single Layout Specify direction in which children are laid out. Declaration public LayoutOrder Layout { get; set; } Property Value Type Description LayoutOrder OrientType Should the objects in the collection face the origin of the collection Declaration public OrientationType OrientType { get; set; } Property Value Type Description OrientationType RadialRange This is the radial range for creating a radial fan layout. Declaration public float RadialRange { get; set; } Property Value Type Description Single Radius This is the radius of either the Cylinder or Sphere mapping and is ignored when using the plane mapping. Declaration public float Radius { get; set; } Property Value Type Description Single Rows Number of rows per column. Can only be assigned when layout type is RowsThenColumns Declaration public int Rows { get; set; } Property Value Type Description Int32 SphereMesh Reference mesh to use for rendering the sphere layout Declaration public Mesh SphereMesh { get; set; } Property Value Type Description Mesh SurfaceType Type of surface to map the collection to. Declaration public ObjectOrientationSurfaceType SurfaceType { get; set; } Property Value Type Description ObjectOrientationSurfaceType Width Total Width of collection Declaration public float Width { get; } Property Value Type Description Single Methods LayoutChildren() Overriding base function for laying out all the children when UpdateCollection is called. Declaration protected override void LayoutChildren() Overrides BaseObjectCollection.LayoutChildren() OnDrawGizmosSelected() Declaration protected virtual void OnDrawGizmosSelected() ResolveGridLayout(Vector3[], LayoutOrder) Declaration protected void ResolveGridLayout(Vector3[] grid, LayoutOrder order) Parameters Type Name Description Vector3 [] grid LayoutOrder order UpdateNodeFacing(ObjectCollectionNode) Update the facing of a node given the nodes new position for facing origin with node and orientation type Declaration protected void UpdateNodeFacing(ObjectCollectionNode node) Parameters Type Name Description ObjectCollectionNode node"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Handedness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Handedness.html",
    "title": "Enum Handedness | Mixed Reality Toolkit Documentation",
    "keywords": "Enum Handedness The Handedness defines which hand a controller is currently operating in. It is up to the developer to determine whether this affects the use of a controller or not. \"Other\" defines potential controllers that will offer a \"third\" hand, e.g. a full body tracking suit. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum Handedness : byte Fields Name Description Any Global catchall, used to map actions to any controller (provided the controller supports it) Both The controller is identified as being either left and/or right handed. Left The controller is identified as being provided in a Left hand None No hand specified by the SDK for the controller Other Reserved, for systems that provide alternate hand state. Right The controller is identified as being provided in a Right hand"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DemoSpatialMeshHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DemoSpatialMeshHandler.html",
    "title": "Class DemoSpatialMeshHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class DemoSpatialMeshHandler This class is an example of the IMixedRealitySpatialAwarenessObservationHandler<T> interface. It keeps track of the IDs of each mesh and tracks the number of updates they have received. Inheritance Object DemoSpatialMeshHandler Implements IMixedRealitySpatialAwarenessObservationHandler < SpatialAwarenessMeshObject > Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class DemoSpatialMeshHandler : MonoBehaviour, IMixedRealitySpatialAwarenessObservationHandler<SpatialAwarenessMeshObject> Methods OnObservationAdded(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject>) Declaration public virtual void OnObservationAdded(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData < SpatialAwarenessMeshObject > eventData OnObservationRemoved(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject>) Declaration public virtual void OnObservationRemoved(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData < SpatialAwarenessMeshObject > eventData OnObservationUpdated(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject>) Declaration public virtual void OnObservationUpdated(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData < SpatialAwarenessMeshObject > eventData Implements IMixedRealitySpatialAwarenessObservationHandler<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DemoTouchButton.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DemoTouchButton.html",
    "title": "Class DemoTouchButton | Mixed Reality Toolkit Documentation",
    "keywords": "Class DemoTouchButton Inheritance Object DemoTouchButton Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class DemoTouchButton : MonoBehaviour, IMixedRealityPointerHandler Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DisablePointersExample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.DisablePointersExample.html",
    "title": "Class DisablePointersExample | Mixed Reality Toolkit Documentation",
    "keywords": "Class DisablePointersExample This example demonstrates how to turn pointers on and off by specifying custom behaviors. Inheritance Object DisablePointersExample Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class DisablePointersExample : MonoBehaviour Fields ControllerRayToggle Declaration public Interactable ControllerRayToggle Field Value Type Description Interactable GazeToggle Declaration public Interactable GazeToggle Field Value Type Description Interactable GrabToggle Declaration public Interactable GrabToggle Field Value Type Description Interactable HandRayToggle Declaration public Interactable HandRayToggle Field Value Type Description Interactable PokeToggle Declaration public Interactable PokeToggle Field Value Type Description Interactable Methods ResetExample() Declaration public void ResetExample()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.AudioFeedbackPlayer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.AudioFeedbackPlayer.html",
    "title": "Class AudioFeedbackPlayer | Mixed Reality Toolkit Documentation",
    "keywords": "Class AudioFeedbackPlayer AudioFeedbackPlayer eases playing single audio feedback. Good for audio effects. Inheritance Object AudioFeedbackPlayer Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class AudioFeedbackPlayer : MonoBehaviour Properties Instance Declaration public static AudioFeedbackPlayer Instance { get; } Property Value Type Description AudioFeedbackPlayer Methods PlaySound(AudioClip) Play a sound on the most recently set up GameObject. Declaration public void PlaySound(AudioClip audiofx) Parameters Type Name Description AudioClip audiofx The AudioClip to play. SetupAudioSource(GameObject) Ensures an audio source on the GameObject and returns it. Declaration public AudioSource SetupAudioSource(GameObject targetGameObject) Parameters Type Name Description GameObject targetGameObject The GameObject to play the desired audio. Returns Type Description AudioSource The AudioSource on the GameObject."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.FollowEyeGazeGazeProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.FollowEyeGazeGazeProvider.html",
    "title": "Class FollowEyeGazeGazeProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class FollowEyeGazeGazeProvider Sample for allowing the game object that this script is attached to follow the user's eye gaze at a given distance of \"DefaultDistanceInMeters\". Inheritance Object FollowEyeGazeGazeProvider Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class FollowEyeGazeGazeProvider : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.GrabReleaseDetector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.GrabReleaseDetector.html",
    "title": "Class GrabReleaseDetector | Mixed Reality Toolkit Documentation",
    "keywords": "Class GrabReleaseDetector Inheritance Object GrabReleaseDetector Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class GrabReleaseDetector : MonoBehaviour, IMixedRealityPointerHandler Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.HitBehaviorDestroyOnSelect.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.HitBehaviorDestroyOnSelect.html",
    "title": "Class HitBehaviorDestroyOnSelect | Mixed Reality Toolkit Documentation",
    "keywords": "Class HitBehaviorDestroyOnSelect Destroys the game object when selected and optionally plays a sound or animation when destroyed. Inheritance Object HitBehaviorDestroyOnSelect Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class HitBehaviorDestroyOnSelect : MonoBehaviour Methods TargetSelected() Declaration public void TargetSelected()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.KeepFacingCamera.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.KeepFacingCamera.html",
    "title": "Class KeepFacingCamera | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeepFacingCamera This script continuously updates the orientation of the associated game object to keep facing the camera/user. Inheritance Object KeepFacingCamera Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class KeepFacingCamera : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputRecorderFeedback.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputRecorderFeedback.html",
    "title": "Class UserInputRecorderFeedback | Mixed Reality Toolkit Documentation",
    "keywords": "Class UserInputRecorderFeedback Inheritance Object UserInputRecorderFeedback Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class UserInputRecorderFeedback : MonoBehaviour Methods LoadData() Declaration public void LoadData() PauseReplay() Declaration public void PauseReplay() StartRecording() Declaration public void StartRecording() StartReplay() Declaration public void StartReplay() StopRecording() Declaration public void StopRecording()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputRecorderUIController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputRecorderUIController.html",
    "title": "Class UserInputRecorderUIController | Mixed Reality Toolkit Documentation",
    "keywords": "Class UserInputRecorderUIController Inheritance Object UserInputRecorderUIController Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class UserInputRecorderUIController : MonoBehaviour Methods LoadData() Declaration public void LoadData() PauseReplay() Declaration public void PauseReplay() Start() Declaration public void Start() StartRecording() Declaration public void StartRecording() StartReplay() Declaration public void StartReplay() StopRecording() Declaration public void StopRecording()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Classes AsyncHelpers BasicInputLogger CustomInputLogger InputPointerVisualizer This visualizer can be used to represent pointer input data, e.g., from a handheld controller, from hand, head or eye tracking. In general, it assumes a pointing origin and direction, LogStructure LogStructureEyeGaze UserInputPlayback UserInputRecorder UserInputRecorderFeedback UserInputRecorderUIController Enums InputPointerVisualizer.VisModes"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.MoveObjByEyeGaze.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.MoveObjByEyeGaze.html",
    "title": "Class MoveObjByEyeGaze | Mixed Reality Toolkit Documentation",
    "keywords": "Class MoveObjByEyeGaze Inheritance Object MoveObjByEyeGaze Implements IMixedRealitySpeechHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IMixedRealityHandJointHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class MoveObjByEyeGaze : MonoBehaviour, IMixedRealitySpeechHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IMixedRealityHandJointHandler Fields LocalMinMax_X Declaration public Vector2 LocalMinMax_X Field Value Type Description Vector2 LocalMinMax_Y Declaration public Vector2 LocalMinMax_Y Field Value Type Description Vector2 LocalMinMax_Z Declaration public Vector2 LocalMinMax_Z Field Value Type Description Vector2 PlacementSurface Declaration public PlacementSurfaces PlacementSurface Field Value Type Description PlacementSurfaces Methods Angle_InitialGazeToCurrGazeDir() Compute the angle between the initial (when selecting the target) and current eye gaze direction. Declaration public float Angle_InitialGazeToCurrGazeDir() Returns Type Description Single Angle_ToCurrHitTarget(GameObject) Compute angle between target center ( OR original targeting location??? ) and current targeting direction Declaration public float Angle_ToCurrHitTarget(GameObject gobj) Parameters Type Name Description GameObject gobj Returns Type Description Single ConstrainMovement() Declaration public void ConstrainMovement() DragAndDrop_Finish() Finalize placing the currently selected target. Declaration public void DragAndDrop_Finish() DragAndDrop_Start() Begin with the selection and movement of the focused target. Declaration public void DragAndDrop_Start() MoveTargetBy(Vector3) Declaration public void MoveTargetBy(Vector3 delta) Parameters Type Name Description Vector3 delta MoveTargetTo(Vector3) Declaration public void MoveTargetTo(Vector3 destination) Parameters Type Name Description Vector3 destination OnDrop_SnapToClosestDecimal() Declaration public void OnDrop_SnapToClosestDecimal() Implements IMixedRealitySpeechHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.SpeechVisualFeedback.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.SpeechVisualFeedback.html",
    "title": "Class SpeechVisualFeedback | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechVisualFeedback Inheritance Object SpeechVisualFeedback Implements IMixedRealitySpeechHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class SpeechVisualFeedback : MonoBehaviour, IMixedRealitySpeechHandler Methods ShowVisualFeedback(String) This method handles displaying a given text message. Declaration public void ShowVisualFeedback(string msg) Parameters Type Name Description String msg Implements IMixedRealitySpeechHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.StatusText.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.StatusText.html",
    "title": "Class StatusText | Mixed Reality Toolkit Documentation",
    "keywords": "Class StatusText Inheritance Object StatusText Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class StatusText : MonoBehaviour Properties Instance Declaration public static StatusText Instance { get; } Property Value Type Description StatusText Methods Log(String, Boolean) Declaration public void Log(string msg, bool add) Parameters Type Name Description String msg Boolean add Start() Declaration public void Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetEventArgs.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetEventArgs.html",
    "title": "Class TargetEventArgs | Mixed Reality Toolkit Documentation",
    "keywords": "Class TargetEventArgs Class specifying targeting event arguments. Inheritance Object EventArgs TargetEventArgs Inherited Members EventArgs.Empty Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TargetEventArgs : EventArgs Constructors TargetEventArgs(EyeTrackingTarget) Declaration public TargetEventArgs(EyeTrackingTarget hitTarget) Parameters Type Name Description EyeTrackingTarget hitTarget Properties HitTarget Declaration public EyeTrackingTarget HitTarget { get; } Property Value Type Description EyeTrackingTarget"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetGroupCreatorRadial.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TargetGroupCreatorRadial.html",
    "title": "Class TargetGroupCreatorRadial | Mixed Reality Toolkit Documentation",
    "keywords": "Class TargetGroupCreatorRadial Handles the creation of a group of targets based on a list of given templates. Inheritance Object TargetGroupCreatorRadial Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TargetGroupCreatorRadial : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.TestGlbLoading.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.TestGlbLoading.html",
    "title": "Class TestGlbLoading | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestGlbLoading glb loading test script that attempts to download the asset from a local or external resource via web request. Inheritance Object TestGlbLoading Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf Assembly : cs.temp.dll.dll Syntax public class TestGlbLoading : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.TestGltfLoading.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.TestGltfLoading.html",
    "title": "Class TestGltfLoading | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestGltfLoading This glTF test loading script will load a glTF model from the streaming assets folder. Inheritance Object TestGltfLoading Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf Assembly : cs.temp.dll.dll Syntax public class TestGltfLoading : MonoBehaviour Remarks This scene needs to be opened before building to the device so the appropriate assets are copied. Fields DebugText Declaration public GameObject DebugText Field Value Type Description GameObject Properties Uri Declaration public string Uri { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf Classes TestGlbLoading glb loading test script that attempts to download the asset from a local or external resource via web request. TestGltfLoading This glTF test loading script will load a glTF model from the streaming assets folder."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.GridObjectLayoutControl.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.GridObjectLayoutControl.html",
    "title": "Class GridObjectLayoutControl | Mixed Reality Toolkit Documentation",
    "keywords": "Class GridObjectLayoutControl Provides functions to control layout of GridObjectCollection as well as to output positions of child controls to help with building GridObjectCollectionTests. Inheritance Object GridObjectLayoutControl Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class GridObjectLayoutControl : MonoBehaviour Fields grid Declaration public GridObjectCollection grid Field Value Type Description GridObjectCollection text Declaration public TMPro.TextMeshPro text Field Value Type Description TMPro.TextMeshPro Methods NextLayout() Change the grid collection's layout to the next one in order. Declaration public void NextLayout() PreviousLayout() Change the grid's layout to the previous one in order. Declaration public void PreviousLayout() RunTest() Use this to run mock tests in grid object collection tests and print the resulting positions of child objects to a file. Used to get expected values for GridObjectCollectionTests. When you run the comand, look in the Debug log for where the file is output, it will be of form \"printgrid-yyMMdd-HHmmss.txt\" Declaration public void RunTest()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu.UpdateSliderTrackLine.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu.UpdateSliderTrackLine.html",
    "title": "Class UpdateSliderTrackLine | Mixed Reality Toolkit Documentation",
    "keywords": "Class UpdateSliderTrackLine Inheritance Object UpdateSliderTrackLine Namespace : Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu Assembly : cs.temp.dll.dll Syntax public class UpdateSliderTrackLine : MonoBehaviour Methods OnSliderUpdated(SliderEventData) Declaration public void OnSliderUpdated(SliderEventData eventData) Parameters Type Name Description SliderEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Experimental.HandMenu Classes UpdateSliderTrackLine"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.GestureTester.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.GestureTester.html",
    "title": "Class GestureTester | Mixed Reality Toolkit Documentation",
    "keywords": "Class GestureTester Inheritance Object GestureTester Implements IMixedRealityGestureHandler < Vector3 > Namespace : Microsoft.MixedReality.Toolkit.Examples Assembly : cs.temp.dll.dll Syntax public class GestureTester : MonoBehaviour, IMixedRealityGestureHandler<Vector3> Fields DefaultMaterial Declaration public Material DefaultMaterial Field Value Type Description Material HoldIndicator Declaration public GameObject HoldIndicator Field Value Type Description GameObject HoldMaterial Declaration public Material HoldMaterial Field Value Type Description Material ManipulationIndicator Declaration public GameObject ManipulationIndicator Field Value Type Description GameObject ManipulationMaterial Declaration public Material ManipulationMaterial Field Value Type Description Material NavigationIndicator Declaration public GameObject NavigationIndicator Field Value Type Description GameObject NavigationMaterial Declaration public Material NavigationMaterial Field Value Type Description Material RailsAxisX Declaration public GameObject RailsAxisX Field Value Type Description GameObject RailsAxisY Declaration public GameObject RailsAxisY Field Value Type Description GameObject RailsAxisZ Declaration public GameObject RailsAxisZ Field Value Type Description GameObject SelectIndicator Declaration public GameObject SelectIndicator Field Value Type Description GameObject SelectMaterial Declaration public Material SelectMaterial Field Value Type Description Material Methods OnGestureCanceled(InputEventData) Declaration public void OnGestureCanceled(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureCompleted(InputEventData) Declaration public void OnGestureCompleted(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureCompleted(InputEventData<Vector3>) Declaration public void OnGestureCompleted(InputEventData<Vector3> eventData) Parameters Type Name Description InputEventData < Vector3 > eventData OnGestureStarted(InputEventData) Declaration public void OnGestureStarted(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureUpdated(InputEventData) Declaration public void OnGestureUpdated(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureUpdated(InputEventData<Vector3>) Declaration public void OnGestureUpdated(InputEventData<Vector3> eventData) Parameters Type Name Description InputEventData < Vector3 > eventData Implements IMixedRealityGestureHandler<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.GrabTouchExample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.GrabTouchExample.html",
    "title": "Class GrabTouchExample | Mixed Reality Toolkit Documentation",
    "keywords": "Class GrabTouchExample Inheritance Object GrabTouchExample Implements IMixedRealityTouchHandler IMixedRealityInputHandler Namespace : Microsoft.MixedReality.Toolkit.Examples Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class GrabTouchExample : MonoBehaviour, IMixedRealityTouchHandler, IMixedRealityInputHandler Methods OnInputDown(InputEventData) Declaration public void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputPressed(InputEventData<Single>) Declaration public void OnInputPressed(InputEventData<float> eventData) Parameters Type Name Description InputEventData < Single > eventData OnInputUp(InputEventData) Declaration public void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnPositionInputChanged(InputEventData<Vector2>) Declaration public void OnPositionInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData OnTouchCompleted(HandTrackingInputEventData) This Handler is called by a HandTrackingInputSource when a Touch action for that hand starts. Declaration public void OnTouchCompleted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData The argument passed contains information about the InputSource, the point in space where the Touch action occurred and the status of the Touch action. Remarks A Touch action requires a target. a Touch action must occur inside the bounds of a gameObject. The eventData argument contains. OnTouchStarted(HandTrackingInputEventData) Declaration public void OnTouchStarted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchUpdated(HandTrackingInputEventData) Declaration public void OnTouchUpdated(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Implements IMixedRealityTouchHandler IMixedRealityInputHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.RotateWithPan.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.RotateWithPan.html",
    "title": "Class RotateWithPan | Mixed Reality Toolkit Documentation",
    "keywords": "Class RotateWithPan Rotates a game object in response to panning motion from the specified panzoom component. Inheritance Object RotateWithPan Namespace : Microsoft.MixedReality.Toolkit.Examples Assembly : cs.temp.dll.dll Syntax public class RotateWithPan : MonoBehaviour Methods OnPanEnded(HandPanEventData) Declaration public void OnPanEnded(HandPanEventData eventData) Parameters Type Name Description HandPanEventData eventData OnPanning(HandPanEventData) Declaration public void OnPanning(HandPanEventData eventData) Parameters Type Name Description HandPanEventData eventData OnPanStarted(HandPanEventData) Declaration public void OnPanStarted(HandPanEventData eventData) Parameters Type Name Description HandPanEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples Classes GestureTester GrabTouchExample RotateWithPan Rotates a game object in response to panning motion from the specified panzoom component."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.BaseServiceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.BaseServiceManager.html",
    "title": "Class BaseServiceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseServiceManager Base class providing service registration and management functionality. This class can be used to implement a custom service management component for one or more services, similar to the MixedRealityToolkit object. Inheritance Object BaseServiceManager BoundarySystemManager CameraSystemManager DiagnosticsSystemManager InputSystemManager SpatialAwarenessSystemManager TeleportSystemManager Implements IMixedRealityServiceRegistrar Namespace : Microsoft.MixedReality.Toolkit.Experimental Assembly : cs.temp.dll.dll Syntax public class BaseServiceManager : MonoBehaviour, IMixedRealityServiceRegistrar Fields registeredServices The collection of registered services. Declaration protected Dictionary<Type, IMixedRealityService> registeredServices Field Value Type Description Dictionary < Type , IMixedRealityService > Methods GetService<T>(String, Boolean) Gets the instance of the registered service. Declaration public T GetService<T>(string name = null, bool showLogs = true) where T : IMixedRealityService Parameters Type Name Description String name The name of the service. Boolean showLogs Indicates whether or not diagnostic logging should be performed in case of an error Returns Type Description T The registered service instance as the requested type. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). GetServices<T>(String) Gets the collection of the registered service instances matching the requested type. Declaration public IReadOnlyList<T> GetServices<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name Friendly name of the service. Returns Type Description IReadOnlyList <T> Read-only collection of the service instances, as the requested type. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). Initialize<T>(Type, SupportedPlatforms, Object[]) Initialize a service. Declaration protected virtual void Initialize<T>(Type concreteType, SupportedPlatforms supportedPlatforms = null, params object[] args) where T : IMixedRealityService Parameters Type Name Description Type concreteType The concrete type of the service to initialize. SupportedPlatforms supportedPlatforms The platform(s) on which the service is supported. Object [] args Arguments to provide to the service class constructor. Type Parameters Name Description T The interface type for the service to be initialized. IsServiceRegistered<T>(String) Checks to see if a service of the specified type has been registered. Declaration public bool IsServiceRegistered<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name The name of the service. Returns Type Description Boolean True if the service is registered, false otherwise. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). OnDestroy() Declaration protected virtual void OnDestroy() OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() RegisterService<T>(T) Declaration public bool RegisterService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Returns Type Description Boolean Type Parameters Name Description T RegisterService<T>(Type, SupportedPlatforms, Object[]) Registers a service of the specified type. Declaration public bool RegisterService<T>(Type concreteType, SupportedPlatforms supportedPlatforms = null, params object[] args) where T : IMixedRealityService Parameters Type Name Description Type concreteType The concrete type to instantiate. SupportedPlatforms supportedPlatforms The platform(s) on which the service is supported. Object [] args Optional arguments used when instantiating the concrete type. Returns Type Description Boolean True if the service was successfully registered, false otherwise. Type Parameters Name Description T The interface type of the service to be registered (ex: IMixedRealityBoundarySystem). Uninitialize<T>() Uninitialize a service. Declaration protected virtual void Uninitialize<T>() where T : IMixedRealityService Type Parameters Name Description T The interface type for the service to uninitialize. UnregisterService<T>(T) Declaration public bool UnregisterService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Returns Type Description Boolean Type Parameters Name Description T UnregisterService<T>(String) Unregisters a service of the specified type. Declaration public bool UnregisterService<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name The name of the service to unregister. Returns Type Description Boolean True if the service was successfully unregistered, false otherwise. Type Parameters Name Description T The interface type of the service to be unregistered (ex: IMixedRealityBoundarySystem). Remarks If the name argument is not specified, the first instance will be unregistered Update() Declaration protected virtual void Update() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Boundary.BoundarySystemManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Boundary.BoundarySystemManager.html",
    "title": "Class BoundarySystemManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundarySystemManager Service manager supporting running the boundary system, without requiring the MixedRealityToolkit object. Inheritance Object BaseServiceManager BoundarySystemManager Implements IMixedRealityServiceRegistrar Inherited Members BaseServiceManager.registeredServices BaseServiceManager.Update() BaseServiceManager.OnEnable() BaseServiceManager.OnDisable() BaseServiceManager.GetService<T>(String, Boolean) BaseServiceManager.GetServices<T>(String) BaseServiceManager.IsServiceRegistered<T>(String) BaseServiceManager.RegisterService<T>(T) BaseServiceManager.RegisterService<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.UnregisterService<T>(String) BaseServiceManager.UnregisterService<T>(T) BaseServiceManager.Initialize<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.Uninitialize<T>() Namespace : Microsoft.MixedReality.Toolkit.Experimental.Boundary Assembly : cs.temp.dll.dll Syntax public class BoundarySystemManager : BaseServiceManager, IMixedRealityServiceRegistrar Methods OnDestroy() Declaration protected override void OnDestroy() Overrides BaseServiceManager.OnDestroy() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Inspectors.SliderInputFieldInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Inspectors.SliderInputFieldInspector.html",
    "title": "Class SliderInputFieldInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderInputFieldInspector Inheritance Object SliderInputFieldInspector Namespace : Microsoft.MixedReality.Toolkit.Experimental.Inspectors Assembly : cs.temp.dll.dll Syntax public class SliderInputFieldInspector : TMP_InputFieldEditor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Inspectors.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Inspectors.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Inspectors | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Inspectors Classes ScrollingObjectCollectionInspector SliderInputFieldInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness.SpatialAwarenessSystemManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness.SpatialAwarenessSystemManager.html",
    "title": "Class SpatialAwarenessSystemManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessSystemManager Service manager supporting running the spatial awareness system, without requiring the MixedRealityToolkit object. Inheritance Object BaseServiceManager SpatialAwarenessSystemManager Implements IMixedRealityServiceRegistrar Inherited Members BaseServiceManager.registeredServices BaseServiceManager.Update() BaseServiceManager.OnEnable() BaseServiceManager.OnDisable() BaseServiceManager.GetService<T>(String, Boolean) BaseServiceManager.GetServices<T>(String) BaseServiceManager.IsServiceRegistered<T>(String) BaseServiceManager.RegisterService<T>(T) BaseServiceManager.RegisterService<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.UnregisterService<T>(String) BaseServiceManager.UnregisterService<T>(T) BaseServiceManager.Initialize<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.Uninitialize<T>() Namespace : Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessSystemManager : BaseServiceManager, IMixedRealityServiceRegistrar Methods OnDestroy() Declaration protected override void OnDestroy() Overrides BaseServiceManager.OnDestroy() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.SpatialAwareness Classes SpatialAwarenessSystemManager Service manager supporting running the spatial awareness system, without requiring the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse.HandPulseLogic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse.HandPulseLogic.html",
    "title": "Class HandPulseLogic | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandPulseLogic Inheritance Object HandPulseLogic Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse Assembly : cs.temp.dll.dll Syntax public class HandPulseLogic : MonoBehaviour, IMixedRealityPointerHandler Fields bPulseOnLookAtPalms Declaration public bool bPulseOnLookAtPalms Field Value Type Description Boolean bPulseOnPinch Declaration public bool bPulseOnPinch Field Value Type Description Boolean PalmFacingTime Declaration public float PalmFacingTime Field Value Type Description Single Pulse Declaration public SurfacePulse Pulse Field Value Type Description SurfacePulse PulseOriginFingertips Declaration public Vector3 PulseOriginFingertips Field Value Type Description Vector3 PulseOriginPalms Declaration public Vector3 PulseOriginPalms Field Value Type Description Vector3 Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse.SurfacePulse.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse.SurfacePulse.html",
    "title": "Class SurfacePulse | Mixed Reality Toolkit Documentation",
    "keywords": "Class SurfacePulse Inheritance Object SurfacePulse Namespace : Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse Assembly : cs.temp.dll.dll Syntax public class SurfacePulse : MonoBehaviour Fields bAutoStart Declaration public bool bAutoStart Field Value Type Description Boolean bOriginFollowCamera Declaration public bool bOriginFollowCamera Field Value Type Description Boolean OriginParamName Declaration public string OriginParamName Field Value Type Description String ParamName Declaration public string ParamName Field Value Type Description String PulseDuration Declaration public float PulseDuration Field Value Type Description Single PulseRepeatDelay Declaration public float PulseRepeatDelay Field Value Type Description Single PulseRepeatMinDelay Declaration public float PulseRepeatMinDelay Field Value Type Description Single SurfaceMat Declaration public Material SurfaceMat Field Value Type Description Material Methods PulseOnce() Declaration public void PulseOnce() ResetPulseMaterial() Declaration public void ResetPulseMaterial() SetLocalOrigin(Vector3) Declaration public void SetLocalOrigin(Vector3 origin) Parameters Type Name Description Vector3 origin StartPulsing() Declaration public void StartPulsing() StopPulsing(Boolean) Declaration public void StopPulsing(bool bFinishCurrentPulse = true) Parameters Type Name Description Boolean bFinishCurrentPulse"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.SurfacePulse Classes HandPulseLogic SurfacePulse"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Teleport.TeleportSystemManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Teleport.TeleportSystemManager.html",
    "title": "Class TeleportSystemManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportSystemManager Service manager supporting running the teleport system, without requiring the MixedRealityToolkit object. Inheritance Object BaseServiceManager TeleportSystemManager Implements IMixedRealityServiceRegistrar Inherited Members BaseServiceManager.registeredServices BaseServiceManager.Update() BaseServiceManager.OnEnable() BaseServiceManager.OnDisable() BaseServiceManager.GetService<T>(String, Boolean) BaseServiceManager.GetServices<T>(String) BaseServiceManager.IsServiceRegistered<T>(String) BaseServiceManager.RegisterService<T>(T) BaseServiceManager.RegisterService<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.UnregisterService<T>(String) BaseServiceManager.UnregisterService<T>(T) BaseServiceManager.Initialize<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.Uninitialize<T>() Namespace : Microsoft.MixedReality.Toolkit.Experimental.Teleport Assembly : cs.temp.dll.dll Syntax public class TeleportSystemManager : BaseServiceManager, IMixedRealityServiceRegistrar Methods OnDestroy() Declaration protected override void OnDestroy() Overrides BaseServiceManager.OnDestroy() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArTrackingType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArTrackingType.html",
    "title": "Enum ArTrackingType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ArTrackingType Enumeration indicating the portion of the pose that will be used when tracking. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public enum ArTrackingType Fields Name Description Position The pose rotation will be used. Rotation The pose rotation will be used. RotationAndPosition The pose rotation and position will be used."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArUpdateType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArUpdateType.html",
    "title": "Enum ArUpdateType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ArUpdateType Enumeration defining when, during frame processing, the tracked pose will be sampled. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public enum ArUpdateType Fields Name Description BeforeRender Sampling occurs just before rendering. Update Sampling occurs during update. UpdateAndBeforeRender Sampling occurs during update and just before rendering. This is the recommended value for smooth tracking."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARCameraSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARCameraSettings.html",
    "title": "Class UnityARCameraSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityARCameraSettings Camera settings provider for use with the Unity AR Foundation system. Inheritance Object UnityARCameraSettings Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public class UnityARCameraSettings : BaseCameraSettingsProvider Constructors UnityARCameraSettings(IMixedRealityCameraSystem, String, UInt32, BaseCameraSettingsProfile) Constructor. Declaration public UnityARCameraSettings(IMixedRealityCameraSystem cameraSystem, string name = null, uint priority = default(uint), BaseCameraSettingsProfile profile = null) Parameters Type Name Description IMixedRealityCameraSystem cameraSystem The instance of the camera system which is managing this provider. String name Friendly name of the provider. UInt32 priority Provider priority. Used to determine order of instantiation. BaseCameraSettingsProfile profile The provider's configuration profile. Properties IsOpaque Declaration public override bool IsOpaque { get; } Property Value Type Description Boolean SettingsProfile The profile used to configure the camera. Declaration public UnityARCameraSettingsProfile SettingsProfile { get; } Property Value Type Description UnityARCameraSettingsProfile"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARCameraSettingsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARCameraSettingsProfile.html",
    "title": "Class UnityARCameraSettingsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityARCameraSettingsProfile Configuration profile for the XR Camera settings provider. Inheritance Object UnityARCameraSettingsProfile Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public class UnityARCameraSettingsProfile : BaseCameraSettingsProfile Properties PoseSource The portion of the device (ex: color camera) from which to read the pose. Declaration public ArTrackedPose PoseSource { get; } Property Value Type Description ArTrackedPose TrackingType The type of tracking (position and/or rotation) to apply. Declaration public ArTrackingType TrackingType { get; } Property Value Type Description ArTrackingType UpdateType Specifies when (during Update and/or just before rendering) to update the tracking of the pose. Declaration public ArUpdateType UpdateType { get; } Property Value Type Description ArUpdateType"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARCameraSettingsProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARCameraSettingsProfileInspector.html",
    "title": "Class UnityARCameraSettingsProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityARCameraSettingsProfileInspector Inheritance Object UnityARCameraSettingsProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public class UnityARCameraSettingsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARConfigurationChecker.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.UnityARConfigurationChecker.html",
    "title": "Class UnityARConfigurationChecker | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityARConfigurationChecker Class to perform checks for configuration checks for the UnityAR provider. Inheritance Object UnityARConfigurationChecker Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public class UnityARConfigurationChecker"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.UnityAR | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.UnityAR Classes ArEnumConversion Class that performs conversions between Unity's AR enum values and the provider's custom enums. UnityARCameraSettings Camera settings provider for use with the Unity AR Foundation system. UnityARCameraSettingsProfile Configuration profile for the XR Camera settings provider. UnityARCameraSettingsProfileInspector UnityARConfigurationChecker Class to perform checks for configuration checks for the UnityAR provider. Enums ArTrackedPose Enumeration indicating the available types of augmented reality tracking poses. ArTrackingType Enumeration indicating the portion of the pose that will be used when tracking. ArUpdateType Enumeration defining when, during frame processing, the tracked pose will be sampled."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.DirectionalIndicator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Utilities.DirectionalIndicator.html",
    "title": "Class DirectionalIndicator | Mixed Reality Toolkit Documentation",
    "keywords": "Class DirectionalIndicator This solver determines the position and orientation of an object as a directional indicator. From the point of reference of the SolverHandler Tracked Target, this indicator will orient towards the DirectionalTarget supplied. If the Directional Target is deemed within view of our frame of reference, then all renderers under this Solver will be disabled. They will be enabled otherwise Inheritance Object DirectionalIndicator Namespace : Microsoft.MixedReality.Toolkit.Experimental.Utilities Assembly : cs.temp.dll.dll Syntax public class DirectionalIndicator : Solver Fields DirectionalTarget The GameObject transform to point the indicator towards when this object is not in view. The frame of reference for viewing is defined by the Solver Handler Tracked Target Type Declaration public Transform DirectionalTarget Field Value Type Description Transform ViewOffset The offset from center to place the indicator. If frame of reference is the camera, then the object will be this distance from center of screen Declaration public float ViewOffset Field Value Type Description Single VisibilityScaleFactor Multiplier factor to increase or decrease FOV range for testing if object is visible and thus turn off indicator Declaration public float VisibilityScaleFactor Field Value Type Description Single Methods SolverUpdate() Declaration public override void SolverUpdate() Start() Declaration protected override void Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.GameObjectExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.GameObjectExtensions.html",
    "title": "Class GameObjectExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class GameObjectExtensions Extension methods for Unity's GameObject class Inheritance Object GameObjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtensions Methods ApplyLayerCacheRecursively(GameObject, Dictionary<GameObject, Int32>) Reapplies previously cached hierarchy layers Declaration public static void ApplyLayerCacheRecursively(this GameObject root, Dictionary<GameObject, int> cache) Parameters Type Name Description GameObject root Start point of the traverse Dictionary < GameObject , Int32 > cache The previously set layer for each object ApplyToHierarchy(GameObject, Action<GameObject>) Apply the specified delegate to all objects in the hierarchy under a specified game object. Declaration public static void ApplyToHierarchy(this GameObject root, Action<GameObject> action) Parameters Type Name Description GameObject root Root game object of the hierarchy. Action < GameObject > action Delegate to apply. DestroyGameObject(GameObject, Single) Destroys GameObject appropriately depending if in edit or playmode Declaration public static void DestroyGameObject(GameObject gameObject, float t = 0F) Parameters Type Name Description GameObject gameObject GameObject to destroy Single t time in seconds at which to destroy GameObject if applicable ExportOBJAsync(GameObject, String, Boolean) Export mesh data of current GameObject, and children if enabled, to file provided in OBJ format Declaration public static Task ExportOBJAsync(this GameObject root, string filePath, bool includeChildren = true) Parameters Type Name Description GameObject root String filePath Boolean includeChildren Returns Type Description Task FindAncestorComponent<T>(GameObject, Boolean) Find the first component of type T in the ancestors of the specified game object. Declaration public static T FindAncestorComponent<T>(this GameObject gameObject, bool includeSelf = true) where T : Component Parameters Type Name Description GameObject gameObject Game object for which ancestors must be considered. Boolean includeSelf Indicates whether the specified game object should be included. Returns Type Description T The component of type T . Null if it none was found. Type Parameters Name Description T Type of component to find. ForEachComponent<T>(GameObject, Action<T>) Perform an action on every component of type T that is on this GameObject Declaration public static void ForEachComponent<T>(this GameObject gameObject, Action<T> action) Parameters Type Name Description GameObject gameObject this gameObject Action <T> action Action to perform. Type Parameters Name Description T Component Type IsInLayerMask(GameObject, LayerMask) Determines whether or not a game object's layer is included in the specified layer mask. Declaration public static bool IsInLayerMask(this GameObject gameObject, LayerMask layerMask) Parameters Type Name Description GameObject gameObject The game object whose layer to test. LayerMask layerMask The layer mask to test against. Returns Type Description Boolean True if gameObject 's layer is included in layerMask , false otherwise. SetChildrenActive(GameObject, Boolean) Set all GameObject children active or inactive based on argument Declaration public static void SetChildrenActive(this GameObject root, bool isActive) Parameters Type Name Description GameObject root GameObject parent to traverse from Boolean isActive Indicates whether children GameObjects should be active or not Remarks Does not call SetActive on the top level GameObject, only its children SetLayerRecursively(GameObject, Int32) Set the layer to the given object and the full hierarchy below it. Declaration public static void SetLayerRecursively(this GameObject root, int layer) Parameters Type Name Description GameObject root Start point of the traverse Int32 layer The layer to apply SetLayerRecursively(GameObject, Int32, out Dictionary<GameObject, Int32>) Set the layer to the given object and the full hierarchy below it and cache the previous layers in the out parameter. Declaration public static void SetLayerRecursively(this GameObject root, int layer, out Dictionary<GameObject, int> cache) Parameters Type Name Description GameObject root Start point of the traverse Int32 layer The layer to apply Dictionary < GameObject , Int32 > cache The previously set layer for each object"
  },
  "api/Microsoft.MixedReality.Toolkit.GenericBaseEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.GenericBaseEventData.html",
    "title": "Class GenericBaseEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericBaseEventData Generic Base Event Data for Sending Events through the Event System. Inheritance Object GenericBaseEventData BoundaryEventData DiagnosticsEventData PlacementEventData MixedRealitySpatialAwarenessEventData TeleportEventData Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class GenericBaseEventData : BaseEventData Constructors GenericBaseEventData(EventSystem) Constructor. Declaration public GenericBaseEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Usually EventSystems.EventSystem.current Properties EventSource The Event Source that the event originates from. Declaration public IMixedRealityEventSource EventSource { get; } Property Value Type Description IMixedRealityEventSource EventTime The UTC time at which the event occurred. Declaration public DateTime EventTime { get; } Property Value Type Description DateTime Methods BaseInitialize(IMixedRealityEventSource) Used to initialize/reset the event and populate the data. Declaration protected void BaseInitialize(IMixedRealityEventSource eventSource) Parameters Type Name Description IMixedRealityEventSource eventSource The source of the event."
  },
  "api/Microsoft.MixedReality.Toolkit.HandednessExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.HandednessExtensions.html",
    "title": "Class HandednessExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandednessExtensions Handedness type method extensions. Inheritance Object HandednessExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class HandednessExtensions Methods GetOppositeHandedness(Handedness) Gets the opposite \"hand\" flag for the current Handedness value. Declaration public static Handedness GetOppositeHandedness(this Handedness current) Parameters Type Name Description Handedness current Returns Type Description Handedness Remarks If current = Left, returns Right. If current = Right, returns Left. Otherwise, returns None IsLeft(Handedness) Returns true if the current Handedness is the Right (i.e == Handedness.Right), false otherwise Declaration public static bool IsLeft(this Handedness current) Parameters Type Name Description Handedness current Returns Type Description Boolean IsMatch(Handedness, Handedness) Returns true if the current Handedness flags are a match with the comparison Handedness flags, false otherwise Declaration public static bool IsMatch(this Handedness current, Handedness compare) Parameters Type Name Description Handedness current Handedness compare Returns Type Description Boolean IsNone(Handedness) Returns true if the current Handedness is the Right (i.e == Handedness.Right), false otherwise Declaration public static bool IsNone(this Handedness current) Parameters Type Name Description Handedness current Returns Type Description Boolean IsRight(Handedness) Returns true if the current Handedness is the Right (i.e == Handedness.Right), false otherwise Declaration public static bool IsRight(this Handedness current) Parameters Type Name Description Handedness current Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.HelpAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.HelpAttribute.html",
    "title": "Class HelpAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class HelpAttribute A PropertyAttribute for showing a collapsible Help section. Inheritance Object HelpAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class HelpAttribute : PropertyAttribute Constructors HelpAttribute(String, String, Boolean) Constructor Declaration public HelpAttribute(string helpText, string helpHeader = \"Help\", bool collapsible = true) Parameters Type Name Description String helpText The help text to display String helpHeader The help header foldout text Boolean collapsible If true, this help drawer will be collapsible Fields Collapsible If true, this will be a collapsible help section. Defaults to true. Declaration public bool Collapsible Field Value Type Description Boolean Header The help header foldout text Declaration public string Header Field Value Type Description String Remarks If Collapsible is false, then this header text will not be shown. Text The help text Declaration public string Text Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityCapabilityCheck.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityCapabilityCheck.html",
    "title": "Interface IMixedRealityCapabilityCheck | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityCapabilityCheck Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityDataProvider.html",
    "title": "Interface IMixedRealityDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDataProvider Required interface for all Mixed Reality data providers. Data providers are the components that supply services with required information (ex: input controller state). Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDataProvider : IMixedRealityService, IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityDataProviderAccess.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityDataProviderAccess.html",
    "title": "Interface IMixedRealityDataProviderAccess | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDataProviderAccess Allows systems to provide access to their managed data providers. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDataProviderAccess Methods GetDataProvider(String) Get the data provider that is registered under the specified name. Declaration IMixedRealityDataProvider GetDataProvider(string name) Parameters Type Name Description String name The friendly name of the data provider. Returns Type Description IMixedRealityDataProvider The requested data provider, or null if one cannot be found. Remarks If more than one data provider is registered under the specified name, the first will be returned. GetDataProvider<T>(String) Get the data provider that is registered under the specified name (optional) and matching the specified type. Declaration T GetDataProvider<T>(string name = null) where T : IMixedRealityDataProvider Parameters Type Name Description String name The friendly name of the data provider. Returns Type Description T The requested data provider, or null if one cannot be found. Type Parameters Name Description T The desired data provider type. Remarks If more than one data provider is registered under the specified name, the first will be returned. GetDataProviders() Gets the collection of registered data providers. Declaration IReadOnlyList<IMixedRealityDataProvider> GetDataProviders() Returns Type Description IReadOnlyList < IMixedRealityDataProvider > Read only copy of the list of registered data providers. GetDataProviders<T>() Get the collection of registered observers of the specified type. Declaration IReadOnlyList<T> GetDataProviders<T>() where T : IMixedRealityDataProvider Returns Type Description IReadOnlyList <T> Read-only copy of the list of registered data providers that implement the specified type. Type Parameters Name Description T The desired data provider type"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityEventHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityEventHandler.html",
    "title": "Interface IMixedRealityEventHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEventHandler Interface to implement generic events. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEventHandler : IEventSystemHandler Methods OnEventRaised(GenericBaseEventData) Declaration void OnEventRaised(GenericBaseEventData eventData) Parameters Type Name Description GenericBaseEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseNearInteractionTouchable.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseNearInteractionTouchable.html",
    "title": "Class BaseNearInteractionTouchable | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseNearInteractionTouchable Base class for all NearInteractionTouchables. Inheritance Object BaseNearInteractionTouchable ColliderNearInteractionTouchable NearInteractionTouchableSurface NearInteractionTouchableVolume Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseNearInteractionTouchable : MonoBehaviour Remarks Add this component to objects to raise touch events when in PokePointer proximity. The object layer must be included of the PokeLayerMasks . Fields debounceThreshold Declaration protected float debounceThreshold Field Value Type Description Single eventsToReceive Declaration protected TouchableEventType eventsToReceive Field Value Type Description TouchableEventType Properties DebounceThreshold Distance in front of the surface at which you will receive a touch completed event. Declaration public float DebounceThreshold { get; set; } Property Value Type Description Single Remarks When the touchable is active and the pointer distance becomes greater than +DebounceThreshold (i.e. in front of the surface), then the Touch Completed event is raised and the touchable object is released by the pointer. EventsToReceive The type of event to receive. Declaration public TouchableEventType EventsToReceive { get; set; } Property Value Type Description TouchableEventType Methods DistanceToTouchable(Vector3, out Vector3) Declaration public abstract float DistanceToTouchable(Vector3 samplePoint, out Vector3 normal) Parameters Type Name Description Vector3 samplePoint Vector3 normal Returns Type Description Single OnValidate() Declaration protected virtual void OnValidate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseInputDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseInputDeviceManager.html",
    "title": "Class BaseInputDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseInputDeviceManager Class providing a base implementation of the IMixedRealityInputDeviceManager interface. Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager BaseInputSimulationService HandJointService InputRecordingService MouseDeviceManager UnityJoystickManager UnityTouchDeviceManager Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseInputDeviceManager : BaseDataProvider<IMixedRealityInputSystem>, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors BaseInputDeviceManager(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] protected BaseInputDeviceManager(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. BaseInputDeviceManager(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration protected BaseInputDeviceManager(IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties InputSystemProfile The input system configuration profile in use in the application. Declaration protected MixedRealityInputSystemProfile InputSystemProfile { get; } Property Value Type Description MixedRealityInputSystemProfile Methods GetActiveControllers() Retrieve all controllers currently registered with this device at runtime (if direct access is required) Declaration public virtual IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController [] RequestPointers(SupportedControllerType, Handedness) Request an array of pointers for the controller type. Declaration protected virtual IMixedRealityPointer[] RequestPointers(SupportedControllerType controllerType, Handedness controllingHand) Parameters Type Name Description SupportedControllerType controllerType The controller type making the request for pointers. Handedness controllingHand The handedness of the controller making the request. Returns Type Description IMixedRealityPointer [] Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseInputEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseInputEventData.html",
    "title": "Class BaseInputEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseInputEventData Base class of all Input Events. Inheritance Object BaseInputEventData DictationEventData InputEventData SourceStateEventData SpeechEventData Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseInputEventData : BaseEventData Constructors BaseInputEventData(EventSystem) Constructor. Declaration protected BaseInputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties EventTime The UTC time at which the event occurred. Declaration public DateTime EventTime { get; } Property Value Type Description DateTime InputSource The source the input event originates from. Declaration public IMixedRealityInputSource InputSource { get; } Property Value Type Description IMixedRealityInputSource MixedRealityInputAction The Input Action for this event. Declaration public MixedRealityInputAction MixedRealityInputAction { get; } Property Value Type Description MixedRealityInputAction SourceId The id of the source the event is from, for instance the hand id. Declaration public uint SourceId { get; } Property Value Type Description UInt32 Methods BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Used to initialize/reset the event and populate the data. Declaration protected void BaseInitialize(IMixedRealityInputSource inputSource, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource inputSource MixedRealityInputAction inputAction"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseInputHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseInputHandler.html",
    "title": "Class BaseInputHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseInputHandler Base class for the Mixed Reality Toolkit's SDK input handlers. Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler DictationHandler InputActionHandler PointerClickHandler PointerHandler SpeechInputHandler Inherited Members InputSystemGlobalHandlerListener.EnsureInputSystemValid() InputSystemGlobalHandlerListener.RegisterHandlers() InputSystemGlobalHandlerListener.UnregisterHandlers() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseInputHandler : InputSystemGlobalHandlerListener Properties IsFocusRequired Is Focus required to receive input events on this GameObject? Declaration public virtual bool IsFocusRequired { get; protected set; } Property Value Type Description Boolean Methods OnDisable() Declaration protected override void OnDisable() Overrides InputSystemGlobalHandlerListener.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides InputSystemGlobalHandlerListener.OnEnable() Start() Declaration protected override void Start() Overrides InputSystemGlobalHandlerListener.Start() Update() Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseInputSimulationService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseInputSimulationService.html",
    "title": "Class BaseInputSimulationService | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseInputSimulationService Base class for services that create simulated input devices. Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager BaseInputSimulationService InputPlaybackService InputSimulationService Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseInputSimulationService : BaseInputDeviceManager, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors BaseInputSimulationService(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] protected BaseInputSimulationService(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. BaseInputSimulationService(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration protected BaseInputSimulationService(IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods GetActiveControllers() Retrieve all controllers currently registered with this device at runtime (if direct access is required) Declaration public override IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController [] Overrides BaseInputDeviceManager.GetActiveControllers() GetHandDevice(Handedness) Declaration public SimulatedHand GetHandDevice(Handedness handedness) Parameters Type Name Description Handedness handedness Returns Type Description SimulatedHand GetOrAddHandDevice(Handedness, HandSimulationMode) Declaration protected SimulatedHand GetOrAddHandDevice(Handedness handedness, HandSimulationMode simulationMode) Parameters Type Name Description Handedness handedness HandSimulationMode simulationMode Returns Type Description SimulatedHand RemoveAllHandDevices() Declaration protected void RemoveAllHandDevices() RemoveHandDevice(Handedness) Declaration protected void RemoveHandDevice(Handedness handedness) Parameters Type Name Description Handedness handedness UpdateHandDevice(HandSimulationMode, Handedness, SimulatedHandData) Declaration protected void UpdateHandDevice(HandSimulationMode simulationMode, Handedness handedness, SimulatedHandData handData) Parameters Type Name Description HandSimulationMode simulationMode Handedness handedness SimulatedHandData handData Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseMousePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseMousePointer.html",
    "title": "Class BaseMousePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMousePointer Base Mouse Pointer Implementation. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer BaseMousePointer MousePointer ScreenSpaceMousePointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityMousePointer IMixedRealityPointer IEqualityComparer Inherited Members BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.OnEnable() BaseControllerPointer.OnDisable() BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.Rotation BaseControllerPointer.OnPreSceneQuery() BaseControllerPointer.OnPostSceneQuery() BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseMousePointer : BaseControllerPointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityMousePointer, IMixedRealityPointer, IEqualityComparer Fields isDisabled Declaration protected bool isDisabled Field Value Type Description Boolean timeoutTimer Declaration protected float timeoutTimer Field Value Type Description Single Properties Controller The current controller reference. Declaration public override IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController Overrides BaseControllerPointer.Controller ControllerName Declaration protected abstract string ControllerName { get; } Property Value Type Description String HideCursorWhenInactive If true, the cursor will hide on movement timeout Declaration public bool HideCursorWhenInactive { get; } Property Value Type Description Boolean HideTimeout Time the mouse cursor must stay immobile to be hidden Declaration public float HideTimeout { get; } Property Value Type Description Single IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration public override bool IsInteractionEnabled { get; } Property Value Type Description Boolean Overrides BaseControllerPointer.IsInteractionEnabled MovementThresholdToUnHide Movement threshold to reach before un-hiding the mouse cursor Declaration public float MovementThresholdToUnHide { get; } Property Value Type Description Single Position Declaration public override Vector3 Position { get; } Property Value Type Description Vector3 Overrides BaseControllerPointer.Position Methods OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration public override void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides BaseControllerPointer.OnInputDown(InputEventData) OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration public override void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides BaseControllerPointer.OnInputUp(InputEventData) OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public override void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public override void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides BaseControllerPointer.OnSourceLost(SourceStateEventData) SetVisibility(Boolean) Declaration protected virtual void SetVisibility(bool visible) Parameters Type Name Description Boolean visible Start() Declaration protected override void Start() Overrides BaseControllerPointer.Start() Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityMousePointer IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityControllerVisualizationProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityControllerVisualizationProfileInspector.html",
    "title": "Class MixedRealityControllerVisualizationProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerVisualizationProfileInspector Inheritance Object MixedRealityControllerVisualizationProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerVisualizationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityControllerVisualizerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityControllerVisualizerInspector.html",
    "title": "Class MixedRealityControllerVisualizerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerVisualizerInspector Inheritance Object ControllerPoseSynchronizerInspector MixedRealityControllerVisualizerInspector Inherited Members ControllerPoseSynchronizerInspector.DrawHandednessProperty ControllerPoseSynchronizerInspector.OnEnable() ControllerPoseSynchronizerInspector.OnInspectorGUI() Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerVisualizerInspector : ControllerPoseSynchronizerInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityGesturesProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityGesturesProfileInspector.html",
    "title": "Class MixedRealityGesturesProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityGesturesProfileInspector Inheritance Object MixedRealityGesturesProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityGesturesProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityInputActionRulesInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityInputActionRulesInspector.html",
    "title": "Class MixedRealityInputActionRulesInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionRulesInspector Inheritance Object MixedRealityInputActionRulesInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionRulesInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityInputActionsProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityInputActionsProfileInspector.html",
    "title": "Class MixedRealityInputActionsProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputActionsProfileInspector Inheritance Object MixedRealityInputActionsProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputActionsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityInputSystemProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityInputSystemProfileInspector.html",
    "title": "Class MixedRealityInputSystemProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityInputSystemProfileInspector Inheritance Object MixedRealityInputSystemProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityInputSystemProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityPointerProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.MixedRealityPointerProfileInspector.html",
    "title": "Class MixedRealityPointerProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPointerProfileInspector Inheritance Object MixedRealityPointerProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealityPointerProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.SpeechCommandPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.SpeechCommandPropertyDrawer.html",
    "title": "Class SpeechCommandPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechCommandPropertyDrawer Inheritance Object SpeechCommandPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class SpeechCommandPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect rect, SerializedProperty property, GUIContent content) Parameters Type Name Description Rect rect SerializedProperty property GUIContent content"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandRay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandRay.html",
    "title": "Class HandRay | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandRay Inheritance Object HandRay Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class HandRay Properties Ray Declaration public Ray Ray { get; } Property Value Type Description Ray ShouldShowRay Declaration public bool ShouldShowRay { get; } Property Value Type Description Boolean Methods Update(Vector3, Vector3, Transform, Handedness) Declaration public void Update(Vector3 handPosition, Vector3 palmNormal, Transform headTransform, Handedness sourceHandedness) Parameters Type Name Description Vector3 handPosition Vector3 palmNormal Transform headTransform Handedness sourceHandedness"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandSimulationMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandSimulationMode.html",
    "title": "Enum HandSimulationMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum HandSimulationMode Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum HandSimulationMode Fields Name Description Articulated Disabled Gestures"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandTrackingInputEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandTrackingInputEventData.html",
    "title": "Class HandTrackingInputEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandTrackingInputEventData Inheritance Object BaseInputEventData InputEventData InputEventData < Vector3 > HandTrackingInputEventData Inherited Members InputEventData<Vector3>.InputData InputEventData<Vector3>.Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector3) InputEventData.Handedness InputEventData.Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class HandTrackingInputEventData : InputEventData<Vector3> Constructors HandTrackingInputEventData(EventSystem) Constructor creates a default EventData object. Requires initialization. Declaration public HandTrackingInputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties Controller Declaration public IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController Methods Initialize(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) This function is called to fill the HandTrackingIntputEventData object with information Declaration public void Initialize(IMixedRealityInputSource inputSource, IMixedRealityController controller, Handedness sourceHandedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource inputSource Reference to the HandTrackingInputSource that created the EventData IMixedRealityController controller Reference to the IMixedRealityController that created the EventData Handedness sourceHandedness Handedness of the HandTrackingInputSource that created the EventData Vector3 touchPoint Global position of the HandTrackingInputSource that created the EventData"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnGrabReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnGrabReceiver.html",
    "title": "Class InteractableOnGrabReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnGrabReceiver A basic grab event receiver for detecting grab events (OnGrab, OnRelease) or grab state changes from Interactable When the grab states change, on or off, these events are triggered Inheritance Object ReceiverBase InteractableOnGrabReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnGrabReceiver : ReceiverBase Constructors InteractableOnGrabReceiver() Creates a receiver that raises grab start and end events. Declaration public InteractableOnGrabReceiver() InteractableOnGrabReceiver(UnityEvent) Creates a receiver that raises grab start and end events. Declaration public InteractableOnGrabReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields OnRelease Invoked on grab release Declaration public UnityEvent OnRelease Field Value Type Description UnityEvent Properties OnGrab Invoked on grab start Declaration public UnityEvent OnGrab { get; } Property Value Type Description UnityEvent Methods OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnHoldReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnHoldReceiver.html",
    "title": "Class InteractableOnHoldReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnHoldReceiver Basic hold event receiver Inheritance Object ReceiverBase InteractableOnHoldReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnHoldReceiver : ReceiverBase Constructors InteractableOnHoldReceiver() Creates receiver that raises OnHold events Declaration public InteractableOnHoldReceiver() InteractableOnHoldReceiver(UnityEvent) Creates receiver that raises OnHold events Declaration public InteractableOnHoldReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields HoldTime The amount of time to press before triggering event Declaration public float HoldTime Field Value Type Description Single Properties OnHold Invoked when interactable has been pressed for HoldTime Declaration public UnityEvent OnHold { get; } Property Value Type Description UnityEvent Methods OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnPressReceiver.InteractionType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnPressReceiver.InteractionType.html",
    "title": "Enum InteractableOnPressReceiver.InteractionType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InteractableOnPressReceiver.InteractionType Type of valid interaction distances to fire press events Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum InteractionType Fields Name Description FarOnly Support Far press interactions only NearAndFar Support Near and Far press interactions NearOnly Support Near press interactions only"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnPressReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnPressReceiver.html",
    "title": "Class InteractableOnPressReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnPressReceiver Basic press event receiver Inheritance Object ReceiverBase InteractableOnPressReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnPressReceiver : ReceiverBase Constructors InteractableOnPressReceiver() Receiver that raises press and release unity events Declaration public InteractableOnPressReceiver() InteractableOnPressReceiver(UnityEvent) Receiver that raises press and release unity events Declaration public InteractableOnPressReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields InteractionFilter Specify whether press event is for near or far interaction Declaration public int InteractionFilter Field Value Type Description Int32 OnRelease Invoked on pointer release Declaration public UnityEvent OnRelease Field Value Type Description UnityEvent Properties OnPress Invoked on pointer press Declaration public UnityEvent OnPress { get; } Property Value Type Description UnityEvent Methods OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnToggleReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnToggleReceiver.html",
    "title": "Class InteractableOnToggleReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnToggleReceiver An event receiver that listens to toggle events Inheritance Object ReceiverBase InteractableOnToggleReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnToggleReceiver : ReceiverBase Constructors InteractableOnToggleReceiver() Creates a receiver that raises events for toggle button states Declaration public InteractableOnToggleReceiver() InteractableOnToggleReceiver(UnityEvent) Creates a receiver that raises events for toggle button states Declaration public InteractableOnToggleReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields OnDeselect Invoked when toggle is deselected Declaration public UnityEvent OnDeselect Field Value Type Description UnityEvent Properties OnSelect Invoked when toggle is checked Declaration public UnityEvent OnSelect { get; } Property Value Type Description UnityEvent Methods OnClick(InteractableStates, Interactable, IMixedRealityPointer) A click event happened Declaration public override void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer Overrides ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnTouchReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableOnTouchReceiver.html",
    "title": "Class InteractableOnTouchReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnTouchReceiver A basic touch event receiver for detecting Physical Touch state changes in the Interactable When the physical touch states change, these events are triggered. Inheritance Object ReceiverBase InteractableOnTouchReceiver Inherited Members ReceiverBase.Name ReceiverBase.HideUnityEvents ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableOnTouchReceiver : ReceiverBase Constructors InteractableOnTouchReceiver() Receiver for raising touch begin and end events Declaration public InteractableOnTouchReceiver() InteractableOnTouchReceiver(UnityEvent) Receiver for raising touch begin and end events Declaration public InteractableOnTouchReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Fields OnTouchEnd Invoked when touch has left the object Declaration public UnityEvent OnTouchEnd Field Value Type Description UnityEvent Properties OnTouchStart Invoked when touch begins Declaration public UnityEvent OnTouchStart { get; } Property Value Type Description UnityEvent Methods OnUpdate(InteractableStates, Interactable) The state has changed Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractablePointerSimulator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractablePointerSimulator.html",
    "title": "Class InteractablePointerSimulator | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractablePointerSimulator A way to test button state feedback while in the editor Inheritance Object InteractablePointerSimulator Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractablePointerSimulator : MonoBehaviour Fields Button Declaration public Interactable Button Field Value Type Description Interactable Clicked Declaration public bool Clicked Field Value Type Description Boolean Disabled Declaration public bool Disabled Field Value Type Description Boolean Down Declaration public bool Down Field Value Type Description Boolean Focus Declaration public bool Focus Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableProfileItem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableProfileItem.html",
    "title": "Class InteractableProfileItem | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableProfileItem The foundation of profiles that exist on an Interactable Profiles pair ThemeContainers with the objects they manipulate, based on state changes Inheritance Object InteractableProfileItem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class InteractableProfileItem Fields Target GameObject to target with associated Themes Declaration public GameObject Target Field Value Type Description GameObject Themes List of Theme configuration data to initialize with an Interactable Declaration public List<Theme> Themes Field Value Type Description List < Theme >"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiver.html",
    "title": "Class InteractableReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableReceiver Example of building an event system for Interactable that still uses ReceiverBase events Inheritance Object ReceiverBaseMonoBehavior InteractableReceiver Implements IInteractableHandler Inherited Members ReceiverBaseMonoBehavior.Interactable ReceiverBaseMonoBehavior.InteractableSearchScope ReceiverBaseMonoBehavior.lastState ReceiverBaseMonoBehavior.OnEnable() ReceiverBaseMonoBehavior.AddInteractable(Interactable) ReceiverBaseMonoBehavior.OnDisable() ReceiverBaseMonoBehavior.Update() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableReceiver : ReceiverBaseMonoBehavior, IInteractableHandler Fields Events Declaration public List<InteractableEvent> Events Field Value Type Description List < InteractableEvent > Methods Awake() Declaration protected virtual void Awake() OnClick(InteractableStates, Interactable, IMixedRealityPointer) click happened Declaration public override void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer Overrides ReceiverBaseMonoBehavior.OnClick(InteractableStates, Interactable, IMixedRealityPointer) OnStateChange(InteractableStates, Interactable) A state has changed Declaration public override void OnStateChange(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBaseMonoBehavior.OnStateChange(InteractableStates, Interactable) OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) voice command happened Declaration public override void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index Int32 length Overrides ReceiverBaseMonoBehavior.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) SetupEvents() set up only one event Declaration protected virtual void SetupEvents() Implements IInteractableHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiverInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiverInspector.html",
    "title": "Class InteractableReceiverInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableReceiverInspector Inheritance Object InteractableReceiverListInspector InteractableReceiverInspector Inherited Members InteractableReceiverListInspector.RenderInspectorHeader() InteractableReceiverListInspector.AddEvent(Int32) Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableReceiverInspector : InteractableReceiverListInspector Methods OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides InteractableReceiverListInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiverList.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiverList.html",
    "title": "Class InteractableReceiverList | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableReceiverList An example of building an Interactable receiver that uses built-in receivers that extend ReceiverBase Inheritance Object ReceiverBaseMonoBehavior InteractableReceiverList Implements IInteractableHandler Inherited Members ReceiverBaseMonoBehavior.Interactable ReceiverBaseMonoBehavior.InteractableSearchScope ReceiverBaseMonoBehavior.lastState ReceiverBaseMonoBehavior.OnEnable() ReceiverBaseMonoBehavior.AddInteractable(Interactable) ReceiverBaseMonoBehavior.OnDisable() ReceiverBaseMonoBehavior.Update() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableReceiverList : ReceiverBaseMonoBehavior, IInteractableHandler Fields Events List of events added to this interactable Declaration public List<InteractableEvent> Events Field Value Type Description List < InteractableEvent > Methods Awake() Declaration protected virtual void Awake() OnClick(InteractableStates, Interactable, IMixedRealityPointer) captures click events Declaration public override void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer Overrides ReceiverBaseMonoBehavior.OnClick(InteractableStates, Interactable, IMixedRealityPointer) OnStateChange(InteractableStates, Interactable) .A state has changed Declaration public override void OnStateChange(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBaseMonoBehavior.OnStateChange(InteractableStates, Interactable) OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) captures voice commands Declaration public override void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index index of the voice command Int32 length voice command array length Overrides ReceiverBaseMonoBehavior.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) SetupEvents() starts the event system Declaration protected virtual void SetupEvents() Implements IInteractableHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiverListInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableReceiverListInspector.html",
    "title": "Class InteractableReceiverListInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableReceiverListInspector Inheritance Object InteractableReceiverListInspector InteractableReceiverInspector Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableReceiverListInspector : UnityEditor.Editor Methods AddEvent(Int32) Declaration protected virtual void AddEvent(int index) Parameters Type Name Description Int32 index OnInspectorGUI() Declaration public override void OnInspectorGUI() RenderInspectorHeader() Declaration protected virtual void RenderInspectorHeader()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableRotationTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableRotationTheme.html",
    "title": "Class InteractableRotationTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableRotationTheme Theme Engine to control a GameObject's rotation based on state changes Inheritance Object InteractableThemeBase InteractableRotationTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableRotationTheme : InteractableThemeBase Constructors InteractableRotationTheme() Declaration public InteractableRotationTheme() Fields hostTransform Declaration protected Transform hostTransform Field Value Type Description Transform originalRotation Declaration protected Vector3 originalRotation Field Value Type Description Vector3 Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BaseCollectionInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BaseCollectionInspector.html",
    "title": "Class BaseCollectionInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseCollectionInspector Inheritance Object BaseCollectionInspector GridObjectCollectionInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class BaseCollectionInspector : UnityEditor.Editor Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override sealed void OnInspectorGUI() OnInspectorGUIInsertion() Declaration protected virtual void OnInspectorGUIInsertion()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BaseLineDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BaseLineDataProviderInspector.html",
    "title": "Class BaseLineDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseLineDataProviderInspector Inheritance Object BaseLineDataProviderInspector BezierDataProviderInspector EllipseLineDataProviderInspector ParabolaPhysicalLineDataProviderInspector ParabolicConstrainedLineDataProviderInspector RectangleLineDataProviderInspector SimpleLineDataProviderInspector SplineDataProviderInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class BaseLineDataProviderInspector : UnityEditor.Editor Fields DrawLineManualUpVectors Declaration protected static bool DrawLineManualUpVectors Field Value Type Description Boolean DrawLinePoints Declaration protected static bool DrawLinePoints Field Value Type Description Boolean DrawLineRotations Declaration protected static bool DrawLineRotations Field Value Type Description Boolean LineData Declaration protected BaseMixedRealityLineDataProvider LineData Field Value Type Description BaseMixedRealityLineDataProvider LinePreviewResolution Declaration protected static int LinePreviewResolution Field Value Type Description Int32 ManualUpVectorLength Declaration protected static float ManualUpVectorLength Field Value Type Description Single RenderLinePreview Declaration protected bool RenderLinePreview Field Value Type Description Boolean RotationArrowLength Declaration protected static float RotationArrowLength Field Value Type Description Single Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() OnSceneGUI() Declaration protected virtual void OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BaseMousePointerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BaseMousePointerInspector.html",
    "title": "Class BaseMousePointerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMousePointerInspector Inheritance Object BaseMousePointerInspector Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class BaseMousePointerInspector : BaseControllerPointerInspector Methods OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BezierDataProviderInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Editor.BezierDataProviderInspector.html",
    "title": "Class BezierDataProviderInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BezierDataProviderInspector Inheritance Object BaseLineDataProviderInspector BezierDataProviderInspector Inherited Members BaseLineDataProviderInspector.LinePreviewResolution BaseLineDataProviderInspector.DrawLinePoints BaseLineDataProviderInspector.DrawLineRotations BaseLineDataProviderInspector.DrawLineManualUpVectors BaseLineDataProviderInspector.ManualUpVectorLength BaseLineDataProviderInspector.RotationArrowLength BaseLineDataProviderInspector.LineData BaseLineDataProviderInspector.RenderLinePreview Namespace : Microsoft.MixedReality.Toolkit.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class BezierDataProviderInspector : BaseLineDataProviderInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseLineDataProviderInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides BaseLineDataProviderInspector.OnInspectorGUI() OnSceneGUI() Declaration protected override void OnSceneGUI() Overrides BaseLineDataProviderInspector.OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.FocusEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.FocusEventData.html",
    "title": "Class FocusEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusEventData Describes an Input Event associated with a specific pointer's focus state change. Inheritance Object FocusEventData Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class FocusEventData : BaseEventData Constructors FocusEventData(EventSystem) Declaration public FocusEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties NewFocusedObject The new focused object. Declaration public GameObject NewFocusedObject { get; } Property Value Type Description GameObject OldFocusedObject The old focused object. Declaration public GameObject OldFocusedObject { get; } Property Value Type Description GameObject Pointer The pointer associated with this event. Declaration public IMixedRealityPointer Pointer { get; } Property Value Type Description IMixedRealityPointer Methods Initialize(IMixedRealityPointer) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Initialize(IMixedRealityPointer, GameObject, GameObject) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer GameObject oldFocusedObject GameObject newFocusedObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.FocusHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.FocusHandler.html",
    "title": "Class FocusHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusHandler Utility component to hook up Unity events to the OnFocusEnter and OnFocusExit events. Inheritance Object FocusHandler Implements IMixedRealityFocusHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class FocusHandler : MonoBehaviour, IMixedRealityFocusHandler, IEventSystemHandler Properties MarkEventsAsUsed Whether input events should be marked as used after handling so other handlers in the same game object ignore them. Declaration public bool MarkEventsAsUsed { get; set; } Property Value Type Description Boolean OnFocusEnterEvent Event which is triggered when focus begins. Declaration public UnityEvent OnFocusEnterEvent { get; set; } Property Value Type Description UnityEvent OnFocusExitEvent Event which is triggered when focus ends. Declaration public UnityEvent OnFocusExitEvent { get; set; } Property Value Type Description UnityEvent Methods OnFocusEnter(FocusEventData) The Focus Enter event is raised on this GameObject whenever a IMixedRealityPointer 's focus enters this GameObject 's Collider . Declaration public void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) The Focus Exit event is raised on this GameObject whenever a IMixedRealityPointer 's focus leaves this GameObject 's Collider . Declaration public void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Implements IMixedRealityFocusHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.FocusProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.FocusProvider.html",
    "title": "Class FocusProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusProvider The focus provider handles the focused objects per input source. Inheritance Object BaseService BaseEventSystem BaseCoreSystem FocusProvider Implements IMixedRealityEventSystem IMixedRealityFocusProvider IMixedRealityService IDisposable IMixedRealitySourceStateHandler IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler IPointerPreferences Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseService.DefaultPriority BaseService.ConfigurationProfile BaseService.Reset() BaseService.Enable() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class FocusProvider : BaseCoreSystem, IMixedRealityEventSystem, IMixedRealityFocusProvider, IMixedRealityService, IDisposable, IMixedRealitySourceStateHandler, IMixedRealitySpeechHandler, IMixedRealityBaseInputHandler, IEventSystemHandler, IPointerPreferences Remarks There are convenience properties for getting only Gaze Pointer if needed. Constructors FocusProvider(IMixedRealityServiceRegistrar, MixedRealityInputSystemProfile) Constructor. Declaration public FocusProvider(IMixedRealityServiceRegistrar registrar, MixedRealityInputSystemProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealityInputSystemProfile profile The configuration profile for the service. FocusProvider(MixedRealityInputSystemProfile) Constructor. Declaration public FocusProvider(MixedRealityInputSystemProfile profile) Parameters Type Name Description MixedRealityInputSystemProfile profile The configuration profile for the service. Properties FocusLayerMasks The layer masks for the focus pointers to raycast against. Declaration public LayerMask[] FocusLayerMasks { get; } Property Value Type Description LayerMask [] GazePointerBehavior Pointer behavior for the gaze pointer. We make gaze pointer unique because the internal gaze pointer actually cannot be referenced from here since it's an internal class. Declaration public PointerBehavior GazePointerBehavior { get; set; } Property Value Type Description PointerBehavior Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name NumFarPointersActive The number of pointers that support far interaction (like motion controller rays, hand rays) that are active (IsInteractionEnabled == true), excluding the gaze cursor Declaration public int NumFarPointersActive { get; } Property Value Type Description Int32 NumNearPointersActive Number of IMixedRealityNearPointers that are active (IsInteractionEnabled == true). Declaration public int NumNearPointersActive { get; } Property Value Type Description Int32 PointerMediators Declaration public IReadOnlyDictionary<uint, IMixedRealityPointerMediator> PointerMediators { get; } Property Value Type Description IReadOnlyDictionary < UInt32 , IMixedRealityPointerMediator > PrimaryPointer Declaration public IMixedRealityPointer PrimaryPointer { get; } Property Value Type Description IMixedRealityPointer Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration public override uint Priority { get; } Property Value Type Description UInt32 Overrides BaseService.Priority UIRaycastCamera The Camera the EventSystem uses to raycast against. Declaration public Camera UIRaycastCamera { get; } Property Value Type Description Camera Remarks Every uGUI canvas in your scene should use this camera as its event camera. Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() GenerateNewPointerId() Generate a new unique pointer id. Declaration public uint GenerateNewPointerId() Returns Type Description UInt32 GetFocusedObject(IMixedRealityPointer) Gets the currently focused object for the pointing source. Declaration public GameObject GetFocusedObject(IMixedRealityPointer pointingSource) Parameters Type Name Description IMixedRealityPointer pointingSource Returns Type Description GameObject Currently Focused Object. Remarks If the pointing source is not registered, then the Gaze's Focused GameObject is returned. GetPointerBehavior(IMixedRealityPointer) Gets the PointerBehavior for a given pointer Declaration public PointerBehavior GetPointerBehavior(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description PointerBehavior GetPointerBehavior<T>(Handedness, InputSourceType) Gets the behavior for the given pointer type. Declaration public PointerBehavior GetPointerBehavior<T>(Handedness handedness, InputSourceType sourceType) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Handedness to query InputSourceType sourceType Returns Type Description PointerBehavior PointerBehavior for the given pointer type and handedness. If right hand is enabled, left hand is not enabled, and Handedness.Any is passed, returns value for the right hand. Type Parameters Name Description T GetPointers<T>() Provides access to all registered pointers of a specified type. Declaration public IEnumerable<T> GetPointers<T>() where T : class, IMixedRealityPointer Returns Type Description IEnumerable <T> Type Parameters Name Description T The type of pointers to request. Use IMixedRealityPointer to access all pointers. Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() IsPointerRegistered(IMixedRealityPointer) Checks if the pointer is registered with the Focus Manager. Declaration public bool IsPointerRegistered(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if registered, otherwise false. OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSpeechKeywordRecognized(SpeechEventData) Declaration public void OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData RegisterPointer(IMixedRealityPointer) Registers the pointer with the Focus Manager. Declaration public bool RegisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if the pointer was registered, false if the pointer was previously registered. SetPointerBehavior<T>(Handedness, InputSourceType, PointerBehavior) Sets the PointerBehavior for a given pointer type, handedness, and input type Declaration public void SetPointerBehavior<T>(Handedness handedness, InputSourceType inputType, PointerBehavior pointerBehavior) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Specify Handedness.Any to apply to all handedness, or specify a specific handedness to just disable, right, left. InputSourceType inputType PointerBehavior pointerBehavior Type Parameters Name Description T All pointers that are of this type, or a subclass of this type, will have the given behavior SubscribeToPrimaryPointerChanged(PrimaryPointerChangedHandler, Boolean) Declaration public void SubscribeToPrimaryPointerChanged(PrimaryPointerChangedHandler handler, bool invokeHandlerWithCurrentPointer) Parameters Type Name Description PrimaryPointerChangedHandler handler Boolean invokeHandlerWithCurrentPointer TryGetFocusDetails(IMixedRealityPointer, out FocusDetails) Gets the currently focused object for the pointing source. Declaration public bool TryGetFocusDetails(IMixedRealityPointer pointer, out FocusDetails focusDetails) Parameters Type Name Description IMixedRealityPointer pointer FocusDetails focusDetails Returns Type Description Boolean TryOverrideFocusDetails(IMixedRealityPointer, FocusDetails) Sets the FocusDetails of the specified pointer, overriding the focus point that was currently set. This can be used to change the FocusDetails of a specific pointer even if focus is locked. Declaration public bool TryOverrideFocusDetails(IMixedRealityPointer pointer, FocusDetails focusDetails) Parameters Type Name Description IMixedRealityPointer pointer FocusDetails focusDetails Returns Type Description Boolean True if the FocusDetails were set successfully. False if the pointer is not associated with the FocusProvider. UnregisterPointer(IMixedRealityPointer) Unregisters the pointer with the Focus Manager. Declaration public bool UnregisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if the pointer was unregistered, false if the pointer was not registered. UnsubscribeFromPrimaryPointerChanged(PrimaryPointerChangedHandler) Declaration public void UnsubscribeFromPrimaryPointerChanged(PrimaryPointerChangedHandler handler) Parameters Type Name Description PrimaryPointerChangedHandler handler Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Explicit Interface Implementations IMixedRealityFocusProvider.GlobalPointingExtent Maximum distance at which all pointers can collide with a GameObject , unless it has an override extent. Declaration float IMixedRealityFocusProvider.GlobalPointingExtent { get; } Returns Type Description Single Implements IMixedRealityEventSystem IMixedRealityFocusProvider IMixedRealityService IDisposable IMixedRealitySourceStateHandler IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler IPointerPreferences"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.GazePointerVisibilityStateMachine.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.GazePointerVisibilityStateMachine.html",
    "title": "Class GazePointerVisibilityStateMachine | Mixed Reality Toolkit Documentation",
    "keywords": "Class GazePointerVisibilityStateMachine Helper class for managing the visibility of the gaze pointer to match windows mixed reality and HoloLens 2 When application starts, gaze pointer is visible. Then when articulate hands / motion controllers appear, hide the gaze cursor. Whenever user says \"select\", make the gaze cursor appear. Inheritance Object GazePointerVisibilityStateMachine Implements IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class GazePointerVisibilityStateMachine : IMixedRealitySpeechHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Remarks Has different behavior depending on whether or not eye gaze or head gaze in use - see comments on GazePointerState for more details. Properties IsGazePointerActive Declaration public bool IsGazePointerActive { get; } Property Value Type Description Boolean Methods OnSpeechKeywordRecognized(SpeechEventData) Declaration public void OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData UpdateState(Int32, Int32, Int32, Boolean) Updates the state machine based on the number of near pointers, the number of far pointers, and whether or not eye gaze is valid. Declaration public void UpdateState(int numNearPointersActive, int numFarPointersActive, int numFarPointersWithoutCursorActive, bool isEyeGazeValid) Parameters Type Name Description Int32 numNearPointersActive Int32 numFarPointersActive Int32 numFarPointersWithoutCursorActive Boolean isEyeGazeValid Implements IMixedRealitySpeechHandler IMixedRealityBaseInputHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityEyeSaccadeProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityEyeSaccadeProvider.html",
    "title": "Interface IMixedRealityEyeSaccadeProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityEyeSaccadeProvider Provides eye tracking information. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityEyeSaccadeProvider : IMixedRealityDataProvider, IMixedRealityService, IDisposable Events OnSaccade Triggered when user is saccading across the view (jumping quickly with their eye gaze above a certain threshold in visual angles). Declaration event Action OnSaccade Event Type Type Description Action OnSaccadeX Triggered when user is saccading horizontally across the view (jumping quickly with their eye gaze above a certain threshold in visual angles). Declaration event Action OnSaccadeX Event Type Type Description Action OnSaccadeY Triggered when user is saccading vertically across the view (jumping quickly with their eye gaze above a certain threshold in visual angles). Declaration event Action OnSaccadeY Event Type Type Description Action"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityFocusChangedHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityFocusChangedHandler.html",
    "title": "Interface IMixedRealityFocusChangedHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityFocusChangedHandler Interface to implement to react to focus changed events. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityFocusChangedHandler : IEventSystemHandler Remarks The events on this interface are related to those of IMixedRealityFocusHandler , whose event have a known ordering with this interface: IMixedRealityFocusChangedHandler::OnBeforeFocusChange IMixedRealityFocusHandler::OnFocusEnter IMixedRealityFocusHandler::OnFocusExit IMixedRealityFocusChangedHandler::OnFocusChanged Because these two interfaces are different, consumers must be wary about having nested hierarchies where some game objects will implement both interfaces, and more deeply nested object within the same parent-child chain that implement a single one of these - such a presence can lead to scenarios where one interface is invoked on the child object, and then the other interface is invoked on the parent object (thus, the parent would \"miss\" getting the event that the child had already processed). Methods OnBeforeFocusChange(FocusEventData) Focus event that is raised before the focus is actually changed. Declaration void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Remarks Useful for logic that needs to take place before focus changes. OnFocusChanged(FocusEventData) Focus event that is raised when the focused object is changed. Declaration void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityFocusHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityFocusHandler.html",
    "title": "Interface IMixedRealityFocusHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityFocusHandler Interface to implement to react to focus enter/exit. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityFocusHandler : IEventSystemHandler Remarks The events on this interface are related to those of IMixedRealityFocusChangedHandler , whose event have a known ordering with this interface: IMixedRealityFocusChangedHandler::OnBeforeFocusChange IMixedRealityFocusHandler::OnFocusEnter IMixedRealityFocusHandler::OnFocusExit IMixedRealityFocusChangedHandler::OnFocusChanged Because these two interfaces are different, consumers must be wary about having nested hierarchies where some game objects will implement both interfaces, and more deeply nested object within the same parent-child chain that implement a single one of these - such a presence can lead to scenarios where one interface is invoked on the child object, and then the other interface is invoked on the parent object (thus, the parent would \"miss\" getting the event that the child had already processed). Methods OnFocusEnter(FocusEventData) The Focus Enter event is raised on this GameObject whenever a IMixedRealityPointer 's focus enters this GameObject 's Collider . Declaration void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) The Focus Exit event is raised on this GameObject whenever a IMixedRealityPointer 's focus leaves this GameObject 's Collider . Declaration void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityFocusProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityFocusProvider.html",
    "title": "Interface IMixedRealityFocusProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityFocusProvider Implements the Focus Provider for handling focus of pointers. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) IMixedRealitySpeechHandler.OnSpeechKeywordRecognized(SpeechEventData) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityFocusProvider : IMixedRealityService, IDisposable, IMixedRealitySourceStateHandler, IMixedRealitySpeechHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Properties FocusLayerMasks The layer masks for the focus pointers to raycast against. Declaration LayerMask[] FocusLayerMasks { get; } Property Value Type Description LayerMask [] GlobalPointingExtent Maximum distance at which all pointers can collide with a GameObject , unless it has an override extent. Declaration float GlobalPointingExtent { get; } Property Value Type Description Single PrimaryPointer Current primary pointer. Determined by the primary pointer selector in use (see MixedRealityPointerProfile.PrimaryPointerSelector). Declaration IMixedRealityPointer PrimaryPointer { get; } Property Value Type Description IMixedRealityPointer UIRaycastCamera The Camera the EventSystem uses to raycast against. Declaration Camera UIRaycastCamera { get; } Property Value Type Description Camera Remarks Every uGUI canvas in your scene should use this camera as its event camera. Methods GenerateNewPointerId() Generate a new unique pointer id. Declaration uint GenerateNewPointerId() Returns Type Description UInt32 GetFocusedObject(IMixedRealityPointer) Gets the currently focused object for the pointing source. Declaration GameObject GetFocusedObject(IMixedRealityPointer pointingSource) Parameters Type Name Description IMixedRealityPointer pointingSource Returns Type Description GameObject Currently Focused Object. Remarks If the pointing source is not registered, then the Gaze's Focused GameObject is returned. GetPointers<T>() Provides access to all registered pointers of a specified type. Declaration IEnumerable<T> GetPointers<T>() where T : class, IMixedRealityPointer Returns Type Description IEnumerable <T> Type Parameters Name Description T The type of pointers to request. Use IMixedRealityPointer to access all pointers. IsPointerRegistered(IMixedRealityPointer) Checks if the pointer is registered with the Focus Manager. Declaration bool IsPointerRegistered(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if registered, otherwise false. RegisterPointer(IMixedRealityPointer) Registers the pointer with the Focus Manager. Declaration bool RegisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if the pointer was registered, false if the pointer was previously registered. SubscribeToPrimaryPointerChanged(PrimaryPointerChangedHandler, Boolean) Subscribes to primary pointer changes. Declaration void SubscribeToPrimaryPointerChanged(PrimaryPointerChangedHandler handler, bool invokeHandlerWithCurrentPointer) Parameters Type Name Description PrimaryPointerChangedHandler handler Handler to be called when the primary pointer changes Boolean invokeHandlerWithCurrentPointer When true, the passed in handler will be invoked immediately with the current primary pointer before subscribing. This is useful to avoid having to manually poll the current value. TryGetFocusDetails(IMixedRealityPointer, out FocusDetails) Gets the currently focused object for the pointing source. Declaration bool TryGetFocusDetails(IMixedRealityPointer pointer, out FocusDetails focusDetails) Parameters Type Name Description IMixedRealityPointer pointer FocusDetails focusDetails Returns Type Description Boolean TryOverrideFocusDetails(IMixedRealityPointer, FocusDetails) Sets the FocusDetails of the specified pointer, overriding the focus point that was currently set. This can be used to change the FocusDetails of a specific pointer even if focus is locked. Declaration bool TryOverrideFocusDetails(IMixedRealityPointer pointer, FocusDetails focusDetails) Parameters Type Name Description IMixedRealityPointer pointer FocusDetails focusDetails Returns Type Description Boolean True if the FocusDetails were set successfully. False if the pointer is not associated with the FocusProvider. UnregisterPointer(IMixedRealityPointer) Unregisters the pointer with the Focus Manager. Declaration bool UnregisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description Boolean True, if the pointer was unregistered, false if the pointer was not registered. UnsubscribeFromPrimaryPointerChanged(PrimaryPointerChangedHandler) Unsubscribes from primary pointer changes. Declaration void UnsubscribeFromPrimaryPointerChanged(PrimaryPointerChangedHandler handler) Parameters Type Name Description PrimaryPointerChangedHandler handler Handler to unsubscribe"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityGazeProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityGazeProvider.html",
    "title": "Interface IMixedRealityGazeProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityGazeProvider Implements the Gaze Provider for an Input Source. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityGazeProvider Properties Enabled Enable or disable the Component attached to the GameObjectReference Declaration bool Enabled { get; set; } Property Value Type Description Boolean GameObjectReference Get the GameObject reference for this Gaze Provider. Declaration GameObject GameObjectReference { get; } Property Value Type Description GameObject GazeCursor The Gaze Cursor for the provider. Declaration IMixedRealityCursor GazeCursor { get; } Property Value Type Description IMixedRealityCursor GazeCursorPrefab The prefab to be instantiated as the gaze cursor. Declaration GameObject GazeCursorPrefab { set; } Property Value Type Description GameObject GazeDirection Normal of the gaze. Declaration Vector3 GazeDirection { get; } Property Value Type Description Vector3 GazeInputSource The Gaze Input Source for the provider. Declaration IMixedRealityInputSource GazeInputSource { get; } Property Value Type Description IMixedRealityInputSource GazeOrigin Origin of the gaze. Declaration Vector3 GazeOrigin { get; } Property Value Type Description Vector3 GazePointer The Gaze Pointer for the provider. Declaration IMixedRealityPointer GazePointer { get; } Property Value Type Description IMixedRealityPointer GazeTarget The game object that is currently being gazed at, if any. Declaration GameObject GazeTarget { get; } Property Value Type Description GameObject HeadMovementDirection The current head movement direction. Declaration Vector3 HeadMovementDirection { get; } Property Value Type Description Vector3 HeadVelocity The current head velocity. Declaration Vector3 HeadVelocity { get; } Property Value Type Description Vector3 HitInfo HitInfo property gives access to information at the object being gazed at, if any. Declaration MixedRealityRaycastHit HitInfo { get; } Property Value Type Description MixedRealityRaycastHit HitNormal Normal of the point at which the gaze manager hit an object. If no object is currently being hit, this will return the previous normal. Declaration Vector3 HitNormal { get; } Property Value Type Description Vector3 HitPosition Position at which the gaze manager hit an object. If no object is currently being hit, this will use the last hit distance. Declaration Vector3 HitPosition { get; } Property Value Type Description Vector3 Methods UpdateGazeInfoFromHit(MixedRealityRaycastHit) Notifies this gaze provider of its new hit details. Declaration void UpdateGazeInfoFromHit(MixedRealityRaycastHit raycastHit) Parameters Type Name Description MixedRealityRaycastHit raycastHit Remarks For components that care where the user's looking, we need to separately update the gaze info even if gaze isn't used for focus."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityGestureHandler-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityGestureHandler-1.html",
    "title": "Interface IMixedRealityGestureHandler<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityGestureHandler<T> Interface to implement for generic gesture input. Inherited Members IMixedRealityGestureHandler.OnGestureStarted(InputEventData) IMixedRealityGestureHandler.OnGestureUpdated(InputEventData) IMixedRealityGestureHandler.OnGestureCompleted(InputEventData) IMixedRealityGestureHandler.OnGestureCanceled(InputEventData) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityGestureHandler<T> : IMixedRealityGestureHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Type Parameters Name Description T The type of data you want to listen for. Methods OnGestureCompleted(InputEventData<T>) Gesture Completed Event. Declaration void OnGestureCompleted(InputEventData<T> eventData) Parameters Type Name Description InputEventData <T> eventData Remarks The InputData for the associated gesture data. OnGestureUpdated(InputEventData<T>) Gesture Updated Event. Declaration void OnGestureUpdated(InputEventData<T> eventData) Parameters Type Name Description InputEventData <T> eventData Remarks The InputData for the associated gesture data."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityGestureHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityGestureHandler.html",
    "title": "Interface IMixedRealityGestureHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityGestureHandler Interface to implement for generic gesture input. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityGestureHandler : IMixedRealityBaseInputHandler, IEventSystemHandler Methods OnGestureCanceled(InputEventData) Gesture Canceled Event. Declaration void OnGestureCanceled(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureCompleted(InputEventData) Gesture Completed Event. Declaration void OnGestureCompleted(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureStarted(InputEventData) Gesture Started Event. Declaration void OnGestureStarted(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnGestureUpdated(InputEventData) Gesture Updated Event. Declaration void OnGestureUpdated(InputEventData eventData) Parameters Type Name Description InputEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHand.html",
    "title": "Interface IMixedRealityHand | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityHand Hand definition, used to provide access to hand joints and other data. Inherited Members IMixedRealityController.Enabled IMixedRealityController.TrackingState IMixedRealityController.ControllerHandedness IMixedRealityController.InputSource IMixedRealityController.Visualizer IMixedRealityController.IsPositionAvailable IMixedRealityController.IsPositionApproximate IMixedRealityController.IsRotationAvailable IMixedRealityController.Interactions IMixedRealityController.AngularVelocity IMixedRealityController.Velocity IMixedRealityController.IsInPointingPose Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityHand : IMixedRealityController Methods TryGetJoint(TrackedHandJoint, out MixedRealityPose) Get the current pose of a hand joint. Declaration bool TryGetJoint(TrackedHandJoint joint, out MixedRealityPose pose) Parameters Type Name Description TrackedHandJoint joint MixedRealityPose pose Returns Type Description Boolean Remarks Hand bones should be oriented along the Z-axis, with the Y-axis indicating the \"up\" direction, i.e. joints rotate primarily around the X-axis."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTouchHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTouchHandler.html",
    "title": "Interface IMixedRealityTouchHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTouchHandler Implementation of this interface causes a script to receive notifications of Touch events from HandTrackingInputSources Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTouchHandler : IEventSystemHandler Methods OnTouchCompleted(HandTrackingInputEventData) When a Touch motion ends, this handler receives the event. Declaration void OnTouchCompleted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Contains information about the HandTrackingInputSource. Remarks A Touch motion is defined as occurring within the bounds of an object (transitive). OnTouchStarted(HandTrackingInputEventData) When a Touch motion has occurred, this handler receives the event. Declaration void OnTouchStarted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Contains information about the HandTrackingInputSource. Remarks A Touch motion is defined as occurring within the bounds of an object (transitive). OnTouchUpdated(HandTrackingInputEventData) When a Touch motion is updated, this handler receives the event. Declaration void OnTouchUpdated(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Contains information about the HandTrackingInputSource. Remarks A Touch motion is defined as occurring within the bounds of an object (transitive)."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTouchPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTouchPointer.html",
    "title": "Interface IMixedRealityTouchPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTouchPointer Interface for handling touch pointers. Inherited Members IMixedRealityPointer.Controller IMixedRealityPointer.PointerId IMixedRealityPointer.PointerName IMixedRealityPointer.InputSourceParent IMixedRealityPointer.BaseCursor IMixedRealityPointer.CursorModifier IMixedRealityPointer.IsInteractionEnabled IMixedRealityPointer.IsActive IMixedRealityPointer.IsFocusLocked IMixedRealityPointer.IsTargetPositionLockedOnFocusLock IMixedRealityPointer.Rays IMixedRealityPointer.PrioritizedLayerMasksOverride IMixedRealityPointer.FocusTarget IMixedRealityPointer.Result IMixedRealityPointer.SceneQueryType IMixedRealityPointer.SphereCastRadius IMixedRealityPointer.Position IMixedRealityPointer.Rotation IMixedRealityPointer.OnPreSceneQuery() IMixedRealityPointer.OnPostSceneQuery() IMixedRealityPointer.OnPreCurrentPointerTargetChange() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTouchPointer : IMixedRealityPointer, IEqualityComparer Properties FingerId Current finger id of the touch. Declaration int FingerId { get; set; } Property Value Type Description Int32 TouchRay Current touch ray. Declaration Ray TouchRay { get; set; } Property Value Type Description Ray"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionEventPair.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionEventPair.html",
    "title": "Struct InputActionEventPair | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionEventPair Data class that maps MixedRealityInputAction s to UnityEvent s wired up in the inspector. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionEventPair Constructors InputActionEventPair(MixedRealityInputAction, UnityEvent) Constructor. Declaration public InputActionEventPair(MixedRealityInputAction inputAction, UnityEvent unityEvent) Parameters Type Name Description MixedRealityInputAction inputAction UnityEvent unityEvent Properties InputAction The MixedRealityInputAction to listen for to invoke the UnityEvent . Declaration public MixedRealityInputAction InputAction { get; } Property Value Type Description MixedRealityInputAction UnityEvent The UnityEvent to invoke when MixedRealityInputAction is raised. Declaration public UnityEvent UnityEvent { get; } Property Value Type Description UnityEvent"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionHandler.html",
    "title": "Class InputActionHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputActionHandler Script used to handle input action events. Invokes Unity events when the configured input action starts or ends. Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler InputActionHandler Implements IMixedRealityInputActionHandler IMixedRealityBaseInputHandler IEventSystemHandler Inherited Members BaseInputHandler.IsFocusRequired BaseInputHandler.OnEnable() BaseInputHandler.Start() BaseInputHandler.Update() BaseInputHandler.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputActionHandler : BaseInputHandler, IMixedRealityInputActionHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Fields OnInputActionEnded Unity event raised on action end, e.g. button released or gesture completed. Includes the input event that triggered the action. Declaration public InputActionUnityEvent OnInputActionEnded Field Value Type Description InputActionUnityEvent OnInputActionStarted Unity event raised on action start, e.g. button pressed or gesture started. Includes the input event that triggered the action. Declaration public InputActionUnityEvent OnInputActionStarted Field Value Type Description InputActionUnityEvent Methods RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Explicit Interface Implementations IMixedRealityInputActionHandler.OnActionEnded(BaseInputEventData) Declaration void IMixedRealityInputActionHandler.OnActionEnded(BaseInputEventData eventData) Parameters Type Name Description BaseInputEventData eventData IMixedRealityInputActionHandler.OnActionStarted(BaseInputEventData) Declaration void IMixedRealityInputActionHandler.OnActionStarted(BaseInputEventData eventData) Parameters Type Name Description BaseInputEventData eventData Implements IMixedRealityInputActionHandler IMixedRealityBaseInputHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleDigital.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleDigital.html",
    "title": "Struct InputActionRuleDigital | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleDigital Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Boolean > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionRuleDigital : IInputActionRule<bool> Constructors InputActionRuleDigital(MixedRealityInputAction, MixedRealityInputAction, Boolean) Constructor. Declaration public InputActionRuleDigital(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, bool criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Boolean criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public bool Criteria { get; } Property Value Type Description Boolean RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleDualAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleDualAxis.html",
    "title": "Struct InputActionRuleDualAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleDualAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Vector2 > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionRuleDualAxis : IInputActionRule<Vector2> Constructors InputActionRuleDualAxis(MixedRealityInputAction, MixedRealityInputAction, Vector2) Constructor. Declaration public InputActionRuleDualAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, Vector2 criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Vector2 criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public Vector2 Criteria { get; } Property Value Type Description Vector2 RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystemProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystemProfile.html",
    "title": "Class MixedRealitySceneSystemProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySceneSystemProfile Configuration profile settings for setting up scene system. Inheritance Object BaseMixedRealityProfile MixedRealitySceneSystemProfile Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealitySceneSystemProfile : BaseMixedRealityProfile Properties ContentScenes Declaration public IEnumerable<SceneInfo> ContentScenes { get; } Property Value Type Description IEnumerable < SceneInfo > ContentTags Declaration public IEnumerable<string> ContentTags { get; } Property Value Type Description IEnumerable < String > DefaultLightingScene Declaration public SceneInfo DefaultLightingScene { get; } Property Value Type Description SceneInfo LightingScenes Declaration public IEnumerable<SceneInfo> LightingScenes { get; } Property Value Type Description IEnumerable < SceneInfo > ManagerScene Declaration public SceneInfo ManagerScene { get; } Property Value Type Description SceneInfo NumContentScenes Declaration public int NumContentScenes { get; } Property Value Type Description Int32 NumLightingScenes Declaration public int NumLightingScenes { get; } Property Value Type Description Int32 PermittedLightingSceneComponentTypes Declaration public IEnumerable<Type> PermittedLightingSceneComponentTypes { get; } Property Value Type Description IEnumerable < Type > UseLightingScene Declaration public bool UseLightingScene { get; } Property Value Type Description Boolean UseManagerScene Declaration public bool UseManagerScene { get; } Property Value Type Description Boolean Methods GetContentSceneNamesByTag(String) Declaration public IEnumerable<string> GetContentSceneNamesByTag(string tag) Parameters Type Name Description String tag Returns Type Description IEnumerable < String > GetLightingSceneSettings(String, out SceneInfo, out RuntimeLightingSettings, out RuntimeRenderSettings, out RuntimeSunlightSettings) Declaration public bool GetLightingSceneSettings(string lightingSceneName, out SceneInfo lightingScene, out RuntimeLightingSettings lightingSettings, out RuntimeRenderSettings renderSettings, out RuntimeSunlightSettings sunlightSettings) Parameters Type Name Description String lightingSceneName SceneInfo lightingScene RuntimeLightingSettings lightingSettings RuntimeRenderSettings renderSettings RuntimeSunlightSettings sunlightSettings Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.RuntimeLightingSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.RuntimeLightingSettings.html",
    "title": "Struct RuntimeLightingSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RuntimeLightingSettings A struct that mimics the lighting settings stored in a scene. Used to store, retrieve and interpolate lighting settings. Omits any editor-only settings. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public struct RuntimeLightingSettings Fields AlbedoBoost Declaration public float AlbedoBoost Field Value Type Description Single BounceScale Declaration public float BounceScale Field Value Type Description Single EnableBakedLightmaps Declaration public bool EnableBakedLightmaps Field Value Type Description Boolean EnabledRealtimeLightmaps Declaration public bool EnabledRealtimeLightmaps Field Value Type Description Boolean EnvironmentLightingMode Declaration public MixedLightingMode EnvironmentLightingMode Field Value Type Description MixedLightingMode IndirectOutputScale Declaration public float IndirectOutputScale Field Value Type Description Single Methods Black(RuntimeLightingSettings) Sets continuous settings to 'black' without changing any discrete features. Declaration public static RuntimeLightingSettings Black(RuntimeLightingSettings source) Parameters Type Name Description RuntimeLightingSettings source Returns Type Description RuntimeLightingSettings Lerp(RuntimeLightingSettings, RuntimeLightingSettings, Single) Lerps between two settings Declaration public static RuntimeLightingSettings Lerp(RuntimeLightingSettings from, RuntimeLightingSettings to, float t) Parameters Type Name Description RuntimeLightingSettings from RuntimeLightingSettings to Single t Value from 0 to 1 Returns Type Description RuntimeLightingSettings"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.IMixedRealityTeleportHotSpot.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.IMixedRealityTeleportHotSpot.html",
    "title": "Interface IMixedRealityTeleportHotSpot | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportHotSpot Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportHotSpot Properties GameObjectReference Returns the GameObject reference for this teleport target. Declaration GameObject GameObjectReference { get; } Property Value Type Description GameObject IsActive Is the teleport target active? Declaration bool IsActive { get; } Property Value Type Description Boolean Normal The normal of the teleport raycast. Declaration Vector3 Normal { get; } Property Value Type Description Vector3 OverrideTargetOrientation Should the target orientation be overridden? Declaration bool OverrideTargetOrientation { get; } Property Value Type Description Boolean Position The position the teleport will end at. Declaration Vector3 Position { get; } Property Value Type Description Vector3 TargetOrientation Should the destination orientation be overridden? Useful when you want to orient the user in a specific direction when they teleport to this position. Declaration float TargetOrientation { get; } Property Value Type Description Single Remarks Override orientation is the transform forward of the GameObject this component is attached to."
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.IMixedRealityTeleportSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.IMixedRealityTeleportSystem.html",
    "title": "Interface IMixedRealityTeleportSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportSystem Manager interface for a Teleport system in the Mixed Reality Toolkit All replacement systems for providing Teleportation functionality should derive from this interface Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportSystem : IMixedRealityEventSystem, IMixedRealityService, IDisposable Properties TeleportDuration The duration of the teleport in seconds. Declaration float TeleportDuration { get; set; } Property Value Type Description Single Methods RaiseTeleportCanceled(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation canceled event. Declaration void RaiseTeleportCanceled(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target RaiseTeleportRequest(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation request event. Declaration void RaiseTeleportRequest(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target RaiseTeleportStarted(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation started event. Declaration void RaiseTeleportStarted(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.MixedRealityTeleportSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.MixedRealityTeleportSystem.html",
    "title": "Class MixedRealityTeleportSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityTeleportSystem The Mixed Reality Toolkit's specific implementation of the IMixedRealityTeleportSystem Inheritance Object BaseService BaseEventSystem BaseCoreSystem MixedRealityTeleportSystem Implements IMixedRealityTeleportSystem IMixedRealityEventSystem IMixedRealityService IDisposable Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public class MixedRealityTeleportSystem : BaseCoreSystem, IMixedRealityTeleportSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable Constructors MixedRealityTeleportSystem() Constructor. Declaration public MixedRealityTeleportSystem() MixedRealityTeleportSystem(IMixedRealityServiceRegistrar) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public MixedRealityTeleportSystem(IMixedRealityServiceRegistrar registrar) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. Properties Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name TeleportDuration The duration of the teleport in seconds. Declaration public float TeleportDuration { get; set; } Property Value Type Description Single Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public override void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData ExecuteEvents.EventFunction <T> eventHandler Type Parameters Name Description T Overrides Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() RaiseTeleportCanceled(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation canceled event. Declaration public void RaiseTeleportCanceled(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target RaiseTeleportRequest(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation request event. Declaration public void RaiseTeleportRequest(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target RaiseTeleportStarted(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Raise a teleportation started event. Declaration public void RaiseTeleportStarted(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot hotSpot) Parameters Type Name Description IMixedRealityPointer pointer The pointer that raised the event. IMixedRealityTeleportHotSpot hotSpot The teleport target Register(GameObject) Unregister a GameObject from listening to Teleport events. Declaration public override void Register(GameObject listener) Parameters Type Name Description GameObject listener Overrides BaseEventSystem.Register(GameObject) Unregister(GameObject) Unregister a GameObject from listening to Teleport events. Declaration public override void Unregister(GameObject listener) Parameters Type Name Description GameObject listener Overrides BaseEventSystem.Unregister(GameObject) Implements IMixedRealityTeleportSystem IMixedRealityEventSystem IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.ParabolicTeleportPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.ParabolicTeleportPointer.html",
    "title": "Class ParabolicTeleportPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolicTeleportPointer Inheritance Object TeleportPointer ParabolicTeleportPointer Implements IMixedRealityTeleportPointer IMixedRealityTeleportHandler IEventSystemHandler Inherited Members TeleportPointer.TeleportRequestRaised TeleportPointer.LineColorHotSpot TeleportPointer.ValidLayers TeleportPointer.InvalidLayers TeleportPointer.GravityDistorter TeleportPointer.Start() TeleportPointer.OnDisable() TeleportPointer.isTeleportRequestActive TeleportPointer.TeleportSurfaceResult TeleportPointer.TeleportHotSpot TeleportPointer.GetLineGradient(TeleportSurfaceResult) TeleportPointer.IsInteractionEnabled TeleportPointer.PointerOrientation TeleportPointer.OnPostSceneQuery() TeleportPointer.OnInputChanged(InputEventData<Vector2>) TeleportPointer.OnTeleportRequest(TeleportEventData) TeleportPointer.OnTeleportStarted(TeleportEventData) TeleportPointer.OnTeleportCompleted(TeleportEventData) TeleportPointer.OnTeleportCanceled(TeleportEventData) Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public class ParabolicTeleportPointer : TeleportPointer, IMixedRealityTeleportPointer, IMixedRealityTeleportHandler, IEventSystemHandler Methods OnEnable() Declaration protected override void OnEnable() Overrides TeleportPointer.OnEnable() OnPreSceneQuery() Declaration public override void OnPreSceneQuery() Overrides TeleportPointer.OnPreSceneQuery() Implements IMixedRealityTeleportPointer IMixedRealityTeleportHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportCursor.html",
    "title": "Class TeleportCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportCursor Inheritance Object TeleportCursor Implements IMixedRealityTeleportHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public class TeleportCursor : AnimatedCursor, IMixedRealityTeleportHandler, IEventSystemHandler Properties LocalScale Declaration public override Vector3 LocalScale { get; } Property Value Type Description Vector3 Pointer Declaration public override IMixedRealityPointer Pointer { get; set; } Property Value Type Description IMixedRealityPointer Position Declaration public override Vector3 Position { get; } Property Value Type Description Vector3 Rotation Declaration public override Quaternion Rotation { get; } Property Value Type Description Quaternion Methods CheckCursorState() Declaration public override CursorStateEnum CheckCursorState() Returns Type Description CursorStateEnum OnTeleportCanceled(TeleportEventData) Raised when a teleport request has been canceled. Declaration public void OnTeleportCanceled(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportCompleted(TeleportEventData) Raised when a teleport has successfully completed. Declaration public void OnTeleportCompleted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportRequest(TeleportEventData) Raised when a pointer requests a teleport target, but no teleport has begun. Declaration public void OnTeleportRequest(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportStarted(TeleportEventData) Raised when a teleport has started. Declaration public void OnTeleportStarted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData UpdateCursorTransform() Declaration protected override void UpdateCursorTransform() Implements IMixedRealityTeleportHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportEventData.html",
    "title": "Class TeleportEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportEventData Describes a Teleportation Event. Inheritance Object GenericBaseEventData TeleportEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public class TeleportEventData : GenericBaseEventData Constructors TeleportEventData(EventSystem) Constructor. Declaration public TeleportEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystem.current Properties HotSpot The teleport hot spot. Declaration public IMixedRealityTeleportHotSpot HotSpot { get; } Property Value Type Description IMixedRealityTeleportHotSpot Pointer The pointer that raised the event. Declaration public IMixedRealityPointer Pointer { get; } Property Value Type Description IMixedRealityPointer Methods Initialize(IMixedRealityPointer, IMixedRealityTeleportHotSpot) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityPointer pointer, IMixedRealityTeleportHotSpot target) Parameters Type Name Description IMixedRealityPointer pointer IMixedRealityTeleportHotSpot target"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportHotSpot.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportHotSpot.html",
    "title": "Class TeleportHotSpot | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportHotSpot SDK component handling teleportation to a specific position & orientation when a user focuses this GameObject and triggers the teleport action. Inheritance Object TeleportHotSpot Implements IMixedRealityTeleportHotSpot Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public class TeleportHotSpot : BaseFocusHandler, IMixedRealityTeleportHotSpot Properties GameObjectReference Returns the GameObject reference for this teleport target. Declaration public GameObject GameObjectReference { get; } Property Value Type Description GameObject IsActive Is the teleport target active? Declaration public bool IsActive { get; } Property Value Type Description Boolean Normal The normal of the teleport raycast. Declaration public Vector3 Normal { get; } Property Value Type Description Vector3 OverrideTargetOrientation Should the target orientation be overridden? Declaration public bool OverrideTargetOrientation { get; } Property Value Type Description Boolean Position The position the teleport will end at. Declaration public Vector3 Position { get; } Property Value Type Description Vector3 TargetOrientation Should the destination orientation be overridden? Useful when you want to orient the user in a specific direction when they teleport to this position. Declaration public float TargetOrientation { get; } Property Value Type Description Single Remarks Override orientation is the transform forward of the GameObject this component is attached to. Methods OnBeforeFocusChange(FocusEventData) Declaration public override void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Implements IMixedRealityTeleportHotSpot"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.TeleportPointer.html",
    "title": "Class TeleportPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportPointer Inheritance Object TeleportPointer ParabolicTeleportPointer Implements IMixedRealityTeleportPointer IMixedRealityTeleportHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public class TeleportPointer : LinePointer, IMixedRealityTeleportPointer, IMixedRealityTeleportHandler, IEventSystemHandler Fields InvalidLayers Declaration protected LayerMask InvalidLayers Field Value Type Description LayerMask isTeleportRequestActive Declaration protected bool isTeleportRequestActive Field Value Type Description Boolean LineColorHotSpot Declaration protected Gradient LineColorHotSpot Field Value Type Description Gradient ValidLayers Declaration protected LayerMask ValidLayers Field Value Type Description LayerMask Properties GravityDistorter The Gravity Distorter that is affecting the BaseMixedRealityLineDataProvider attached to this pointer. Declaration public DistorterGravity GravityDistorter { get; } Property Value Type Description DistorterGravity IsInteractionEnabled Declaration public override bool IsInteractionEnabled { get; } Property Value Type Description Boolean PointerOrientation Declaration public float PointerOrientation { get; set; } Property Value Type Description Single TeleportHotSpot Declaration public IMixedRealityTeleportHotSpot TeleportHotSpot { get; set; } Property Value Type Description IMixedRealityTeleportHotSpot TeleportRequestRaised Declaration public bool TeleportRequestRaised { get; } Property Value Type Description Boolean TeleportSurfaceResult The result from the last raycast. Declaration public TeleportSurfaceResult TeleportSurfaceResult { get; } Property Value Type Description TeleportSurfaceResult Methods GetLineGradient(TeleportSurfaceResult) Declaration protected Gradient GetLineGradient(TeleportSurfaceResult targetResult) Parameters Type Name Description TeleportSurfaceResult targetResult Returns Type Description Gradient OnDisable() Declaration protected override void OnDisable() OnEnable() Declaration protected override void OnEnable() OnInputChanged(InputEventData<Vector2>) Declaration public override void OnInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData OnPostSceneQuery() Declaration public override void OnPostSceneQuery() OnPreSceneQuery() Declaration public override void OnPreSceneQuery() OnTeleportCanceled(TeleportEventData) Raised when a teleport request has been canceled. Declaration public virtual void OnTeleportCanceled(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportCompleted(TeleportEventData) Raised when a teleport has successfully completed. Declaration public virtual void OnTeleportCompleted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportRequest(TeleportEventData) Raised when a pointer requests a teleport target, but no teleport has begun. Declaration public virtual void OnTeleportRequest(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportStarted(TeleportEventData) Raised when a teleport has started. Declaration public virtual void OnTeleportStarted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData Start() Declaration protected override void Start() Implements IMixedRealityTeleportPointer IMixedRealityTeleportHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Teleport | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Teleport Classes MixedRealityTeleportSystem The Mixed Reality Toolkit's specific implementation of the IMixedRealityTeleportSystem ParabolicTeleportPointer TeleportCursor TeleportEventData Describes a Teleportation Event. TeleportHotSpot SDK component handling teleportation to a specific position & orientation when a user focuses this GameObject and triggers the teleport action. TeleportPointer Interfaces IMixedRealityTeleportHandler Interface to implement for teleport events. IMixedRealityTeleportHotSpot IMixedRealityTeleportSystem Manager interface for a Teleport system in the Mixed Reality Toolkit All replacement systems for providing Teleportation functionality should derive from this interface"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.AsyncCoroutineRunnerTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.AsyncCoroutineRunnerTests.html",
    "title": "Class AsyncCoroutineRunnerTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class AsyncCoroutineRunnerTests Inheritance Object BasePlayModeTests AsyncCoroutineRunnerTests Inherited Members BasePlayModeTests.Setup() BasePlayModeTests.TearDown() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class AsyncCoroutineRunnerTests : BasePlayModeTests Methods TestNonRootParenting() Validates that the AsyncCoroutineRunner is automatically moved to the root to ensure that it has proper multi-scene lifetime behavior. Declaration public IEnumerator TestNonRootParenting() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.BaseCursorTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.BaseCursorTests.html",
    "title": "Class BaseCursorTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseCursorTests Inheritance Object BaseCursorTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class BaseCursorTests Methods ArticulatedCursorState() Declaration public IEnumerator ArticulatedCursorState() Returns Type Description IEnumerator CursorContextMove() Declaration public IEnumerator CursorContextMove() Returns Type Description IEnumerator CursorContextScaleRotate() Declaration public IEnumerator CursorContextScaleRotate() Returns Type Description IEnumerator CursorScaling() Declaration public IEnumerator CursorScaling() Returns Type Description IEnumerator GestureCursorState() Declaration public IEnumerator GestureCursorState() Returns Type Description IEnumerator SetUp() Declaration public void SetUp() TearDown() Declaration public void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.BaseHandVisualizerTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.BaseHandVisualizerTests.html",
    "title": "Class BaseHandVisualizerTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseHandVisualizerTests Inheritance Object BaseHandVisualizerTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class BaseHandVisualizerTests Methods Init() Declaration public void Init() Shutdown() Declaration public void Shutdown() TestOnHandMeshUpdated() Validates that OnHandMeshUpdated can be called with hand mesh vertices of different lengths and not crash. Declaration public IEnumerator TestOnHandMeshUpdated() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.BasePlayModeTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.BasePlayModeTests.html",
    "title": "Class BasePlayModeTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class BasePlayModeTests Base class to handle typical code setup/teardown and test utilities Inheritance Object BasePlayModeTests AsyncCoroutineRunnerTests InteractableTests PointerBehaviorTests PressableButtonTests RenderingTests SolverTests SpherePointerTests StandardShaderTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public abstract class BasePlayModeTests Methods Setup() Declaration public virtual void Setup() TearDown() Declaration public virtual void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.BoundingBoxTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.BoundingBoxTests.html",
    "title": "Class BoundingBoxTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundingBoxTests Inheritance Object BoundingBoxTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class BoundingBoxTests Methods BBoxInstantiate() Verify that we can instantiate bounding box at runtime Declaration public IEnumerator BBoxInstantiate() Returns Type Description IEnumerator BBoxOverride() Test that if we update the bounds of a box collider, that the corners will move correctly Declaration public IEnumerator BBoxOverride() Returns Type Description IEnumerator DisableObject() Ensure that while using BoundingBox, if that object gets deactivated, that BoundingBox no longer transforms that object. Declaration public IEnumerator DisableObject() Returns Type Description IEnumerator ScaleMinMax() This tests the minimum and maximum scaling for the bounding box. Declaration public IEnumerator ScaleMinMax() Returns Type Description IEnumerator ScaleViaHoloLens1Interaction() Uses far interaction (HoloLens 1 style) to scale the bounding box Declaration public IEnumerator ScaleViaHoloLens1Interaction() Returns Type Description IEnumerator ScaleViaNearInteration() Uses near interaction to scale the bounding box by directly grabbing corner Declaration public IEnumerator ScaleViaNearInteration() Returns Type Description IEnumerator Setup() Declaration public void Setup() ShutdownMrtk() Declaration public void ShutdownMrtk() UpdateTransformUpdatesBounds() Test that changing the transform of the bounding box target (rotation, scale, translation) updates the rig bounds Declaration public IEnumerator UpdateTransformUpdatesBounds() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Core.MixedRealityToolkitFilesTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Core.MixedRealityToolkitFilesTests.html",
    "title": "Class MixedRealityToolkitFilesTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitFilesTests Inheritance Object MixedRealityToolkitFilesTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.Core Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitFilesTests Methods CleanupTests() Declaration public void CleanupTests() TestAdHocDirectory() Validate that a Non-MRTK folder is recognized still Declaration public IEnumerator TestAdHocDirectory() Returns Type Description IEnumerator TestGetDirectories() Validate that each module has a corresponding found folder (excluding None/AdHocTesting) Declaration public IEnumerator TestGetDirectories() Returns Type Description IEnumerator TestMapModulePath() Test that the MapModulePath API works for each Module Type Declaration public IEnumerator TestMapModulePath() Returns Type Description IEnumerator TestNoneDirectory() Test the ModuleType.None and that no items are found Declaration public IEnumerator TestNoneDirectory() Returns Type Description IEnumerator TestRootAssetFolderResolution() Validates that MixedRealityToolkitFiles is able to reason over MRTK folders when placed in the root Asset directory. Declaration public IEnumerator TestRootAssetFolderResolution() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Core.MixedRealityToolkitTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Core.MixedRealityToolkitTests.html",
    "title": "Class MixedRealityToolkitTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitTests Inheritance Object MixedRealityToolkitTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.Core Assembly : cs.temp.dll.dll Syntax public class MixedRealityToolkitTests Methods TearDown() Declaration public void TearDown() TestCreateMixedRealityToolkit() Declaration public void TestCreateMixedRealityToolkit() TestCreateMultipleInstances() Declaration public void TestCreateMultipleInstances() TestCreateMultipleInstancesInMultipleScenes() Declaration public void TestCreateMultipleInstancesInMultipleScenes() TestDestroyActiveInstance() Declaration public void TestDestroyActiveInstance() TestDisableServicesByType() Declaration public void TestDisableServicesByType() TestEnableServicesByType() Declaration public void TestEnableServicesByType() TestGetAllMixedRealityExtensionServices() Declaration public void TestGetAllMixedRealityExtensionServices() TestGetAllServicesAscendingOrder() This test validates that even when services are inserted in non-priority order (i.e. 20 -> 30 -> 10), the services are returned in ascending priority order when GetAllServices is called (i.e. 10, 20, 30). Declaration public void TestGetAllServicesAscendingOrder() TestGetAllServicesAscendingOrderAfterRemoval() Similar to TestGetAllServicesAscendingOrder, except one of the services is then removed, and this validates that the remaining services are still sorted correctly. Declaration public void TestGetAllServicesAscendingOrderAfterRemoval() TestGetMixedRealityExtensionServiceCollectionByInterface() Declaration public void TestGetMixedRealityExtensionServiceCollectionByInterface() TestInitializeMixedRealityToolkit() Declaration public void TestInitializeMixedRealityToolkit() TestMixedRealityExtensionService2DoesNotExist() Declaration public void TestMixedRealityExtensionService2DoesNotExist() TestMixedRealityExtensionServiceDoesNotReturnByName() Declaration public void TestMixedRealityExtensionServiceDoesNotReturnByName() TestNoMixedRealityConfigurationFound() Declaration public void TestNoMixedRealityConfigurationFound() TestRegisterMixedRealityExtensionService() Declaration public void TestRegisterMixedRealityExtensionService() TestRegisterMixedRealityExtensionServices() Declaration public void TestRegisterMixedRealityExtensionServices() TestSwitchBetweenActiveInstances() Declaration public void TestSwitchBetweenActiveInstances() TestUnregisterMixedRealityExtensionServiceByType() Declaration public void TestUnregisterMixedRealityExtensionServiceByType() TestUnregisterMixedRealityExtensionServiceByTypeAndName() Declaration public void TestUnregisterMixedRealityExtensionServiceByTypeAndName() TestUnregisterMixedRealityExtensionServicesByType() Declaration public void TestUnregisterMixedRealityExtensionServicesByType() TestValidateExtensionServiceName() Declaration public void TestValidateExtensionServiceName()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.BoundingBoxActivationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.BoundingBoxActivationType.html",
    "title": "Enum BoundingBox.BoundingBoxActivationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundingBox.BoundingBoxActivationType This enum defines how the BoundingBox gets activated Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum BoundingBoxActivationType Fields Name Description ActivateByPointer ActivateByProximity ActivateByProximityAndPointer ActivateManually ActivateOnStart"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.BoundsCalculationMethod.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.BoundsCalculationMethod.html",
    "title": "Enum BoundingBox.BoundsCalculationMethod | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundingBox.BoundsCalculationMethod This enum defines what volume type the bound calculation depends on and its priority for it. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum BoundsCalculationMethod Fields Name Description ColliderOnly Omits Renderers and uses Colliders for the bounds calculation exclusively ColliderOverRenderer Used Colliders for the bounds calculation and Renderers as a fallback RendererOnly Omits Colliders and uses Renderers for the bounds calculation exclusively RendererOverCollider Used Renderers for the bounds calculation and Colliders as a fallback"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.FlattenModeType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.FlattenModeType.html",
    "title": "Enum BoundingBox.FlattenModeType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundingBox.FlattenModeType Enum which describes how an object's BoundingBox is to be flattened. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum FlattenModeType Fields Name Description DoNotFlatten FlattenAuto Flatten the smallest relative axis if it falls below threshold FlattenX Flatten the X axis FlattenY Flatten the Y axis FlattenZ Flatten the Z axis"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.HandleType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.HandleType.html",
    "title": "Enum BoundingBox.HandleType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundingBox.HandleType Enum which describes whether a BoundingBox handle which has been grabbed, is a Rotation Handle (sphere) or a Scale Handle( cube) Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum HandleType Fields Name Description None Rotation Scale"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.RotationHandlePrefabCollider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.RotationHandlePrefabCollider.html",
    "title": "Enum BoundingBox.RotationHandlePrefabCollider | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundingBox.RotationHandlePrefabCollider This enum defines the type of collider in use when a rotation handle prefab is provided. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum RotationHandlePrefabCollider Fields Name Description Box Sphere"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.WireframeType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.WireframeType.html",
    "title": "Enum BoundingBox.WireframeType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundingBox.WireframeType This enum describes which primitive type the wireframe portion of the BoundingBox consists of. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum WireframeType Remarks Wireframe refers to the thin linkage between the handles. When the handles are invisible the wireframe looks like an outline box around an object. Fields Name Description Cubic Cylindrical"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBox.html",
    "title": "Class BoundingBox | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundingBox BoundingBox allows to transform objects (rotate and scale) and draws a cube around the object to visualize the possibility of user triggered transform manipulation. BoundingBox provides scale and rotation handles that can be used for far and near interaction manipulation of the object. It further provides a proximity effect for scale and rotation handles that alters scaling and material. Inheritance Object BoundingBox Implements IMixedRealitySourceStateHandler IMixedRealityFocusChangedHandler IMixedRealityFocusHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class BoundingBox : MonoBehaviour, IMixedRealitySourceStateHandler, IMixedRealityFocusChangedHandler, IMixedRealityFocusHandler Fields debugText Declaration public TextMesh debugText Field Value Type Description TextMesh RotateStarted Declaration public UnityEvent RotateStarted Field Value Type Description UnityEvent RotateStopped Event that gets fired when interaction with a rotation handle stops. Declaration public UnityEvent RotateStopped Field Value Type Description UnityEvent ScaleStarted Event that gets fired when interaction with a scale handle starts. Declaration public UnityEvent ScaleStarted Field Value Type Description UnityEvent ScaleStopped Event that gets fired when interaction with a scale handle stops. Declaration public UnityEvent ScaleStopped Field Value Type Description UnityEvent Properties Active Flag that indicates if the bounding box is currently active / visible. Declaration public bool Active { get; set; } Property Value Type Description Boolean BoundingBoxActivation Type of activation method for showing/hiding bounding box handles and controls Declaration public BoundingBox.BoundingBoxActivationType BoundingBoxActivation { get; set; } Property Value Type Description BoundingBox.BoundingBoxActivationType BoundsOverride For complex objects, automatic bounds calculation may not behave as expected. Use an existing Box Collider (even on a child object) to manually determine bounds of Bounding Box. Declaration public BoxCollider BoundsOverride { get; set; } Property Value Type Description BoxCollider BoxGrabbedMaterial Material used to display the bounding box when grabbed. If set to null no change will occur when grabbed. Declaration public Material BoxGrabbedMaterial { get; set; } Property Value Type Description Material BoxMaterial Material used to display the bounding box. If set to null no bounding box will be displayed Declaration public Material BoxMaterial { get; set; } Property Value Type Description Material BoxPadding Extra padding added to the actual Target bounds Declaration public Vector3 BoxPadding { get; set; } Property Value Type Description Vector3 CalculationMethod Defines the volume type and the priority for the bounds calculation Declaration public BoundingBox.BoundsCalculationMethod CalculationMethod { get; set; } Property Value Type Description BoundingBox.BoundsCalculationMethod CloseScale A Proximity-enabled Handle scales by this amount when a hand moves into the Close Proximity range. Default is 1.5, larger handle size Declaration public float CloseScale { get; set; } Property Value Type Description Single DrawTetherWhenManipulating Check to draw a tether point from the handles to the hand when manipulating. Declaration public bool DrawTetherWhenManipulating { get; set; } Property Value Type Description Boolean FarScale A Proximity-enabled Handle scales by this amount when a hand moves out of range. Default is 0, invisible handle. Declaration public float FarScale { get; set; } Property Value Type Description Single FlattenAxis Flatten bounds in the specified axis or flatten the smallest one if 'auto' is selected Declaration public BoundingBox.FlattenModeType FlattenAxis { get; set; } Property Value Type Description BoundingBox.FlattenModeType FlattenAxisDisplayScale When an axis is flattened what value to set that axis's scale to for display. Declaration public float FlattenAxisDisplayScale { get; set; } Property Value Type Description Single HandleGrabbedMaterial Material applied to handles while they are a grabbed Declaration public Material HandleGrabbedMaterial { get; set; } Property Value Type Description Material HandleMaterial Material applied to handles when they are not in a grabbed state Declaration public Material HandleMaterial { get; set; } Property Value Type Description Material HandlesIgnoreCollider Add a Collider here if you do not want the handle colliders to interact with another object's collider. Declaration public Collider HandlesIgnoreCollider { get; set; } Property Value Type Description Collider HideElementsInInspector Determines whether to hide GameObjects (i.e handles, links etc) created and managed by this component in the editor Declaration public bool HideElementsInInspector { get; set; } Property Value Type Description Boolean MediumScale A Proximity-enabled Handle scales by this amount when a hand moves into the Medium Proximity range. Default is 1.0, original handle size. Declaration public float MediumScale { get; set; } Property Value Type Description Single ProximityEffectActive Determines whether proximity feature (scaling and material toggling) for bounding box handles is activated Declaration public bool ProximityEffectActive { get; set; } Property Value Type Description Boolean RotateHandleColliderPadding Additional padding to apply to the collider on rotate handle to make handle easier to hit Declaration public Vector3 RotateHandleColliderPadding { get; set; } Property Value Type Description Vector3 RotateMidpoints Returns list of transforms pointing to the rotation handles of the bounding box. Declaration public IReadOnlyList<Transform> RotateMidpoints { get; } Property Value Type Description IReadOnlyList < Transform > RotationHandlePrefabColliderType Determines the type of collider that will surround the rotation handle prefab. Declaration public BoundingBox.RotationHandlePrefabCollider RotationHandlePrefabColliderType { get; set; } Property Value Type Description BoundingBox.RotationHandlePrefabCollider RotationHandleSize Radius of the handle geometry of rotation handles Declaration public float RotationHandleSize { get; set; } Property Value Type Description Single RotationHandleSlatePrefab Prefab used to display rotation handles in the midpoint of each edge. Aligns the Y axis of the prefab with the pivot axis, and the X and Z axes pointing outward. If not set, spheres will be displayed instead Declaration public GameObject RotationHandleSlatePrefab { get; set; } Property Value Type Description GameObject ScaleCorners Returns list of transforms pointing to the scale handles of the bounding box. Declaration public IReadOnlyList<Transform> ScaleCorners { get; } Property Value Type Description IReadOnlyList < Transform > ScaleHandleColliderPadding Additional padding to apply to the collider on scale handle to make handle easier to hit Declaration public Vector3 ScaleHandleColliderPadding { get; set; } Property Value Type Description Vector3 ScaleHandlePrefab Prefab used to display scale handles in corners. If not set, boxes will be displayed instead Declaration public GameObject ScaleHandlePrefab { get; set; } Property Value Type Description GameObject ScaleHandleSize Size of the cube collidable used in scale handles Declaration public float ScaleHandleSize { get; set; } Property Value Type Description Single ScaleHandleSlatePrefab Prefab used to display scale handles in corners for 2D slate. If not set, boxes will be displayed instead Declaration public GameObject ScaleHandleSlatePrefab { get; set; } Property Value Type Description GameObject ScaleMaximum Deprecated: Use TransformScaleHandler component instead. Public property for the scale maximum, in the target's local scale. Set this value with SetScaleLimits. Declaration public float ScaleMaximum { get; } Property Value Type Description Single ScaleMinimum Deprecated: Use TransformScaleHandler component instead. Public property for the scale minimum, in the target's local scale. Set this value with SetScaleLimits. Declaration public float ScaleMinimum { get; } Property Value Type Description Single ShowRotationHandleForX Check to show rotation handles for the X axis Declaration public bool ShowRotationHandleForX { get; set; } Property Value Type Description Boolean ShowRotationHandleForY Check to show rotation handles for the Y axis Declaration public bool ShowRotationHandleForY { get; set; } Property Value Type Description Boolean ShowRotationHandleForZ Check to show rotation handles for the Z axis Declaration public bool ShowRotationHandleForZ { get; set; } Property Value Type Description Boolean ShowScaleHandles Public property to Set the visibility of the corner cube Scaling handles. This property can be set independent of the Rotate handles. Declaration public bool ShowScaleHandles { get; set; } Property Value Type Description Boolean ShowWireFrame Show a wireframe around the bounding box when checked. Wireframe parameters below have no effect unless this is checked Declaration public bool ShowWireFrame { get; set; } Property Value Type Description Boolean Target The object that the bounding box rig will be modifying. Declaration public GameObject Target { get; } Property Value Type Description GameObject TargetBounds The collider reference tracking the bounds utilized by this component during runtime Declaration public BoxCollider TargetBounds { get; } Property Value Type Description BoxCollider WireframeEdgeRadius Radius for wireframe edges Declaration public float WireframeEdgeRadius { get; set; } Property Value Type Description Single WireframeMaterial Material used for wireframe display Declaration public Material WireframeMaterial { get; set; } Property Value Type Description Material WireframeShape Shape used for wireframe display Declaration public BoundingBox.WireframeType WireframeShape { get; set; } Property Value Type Description BoundingBox.WireframeType Methods CreateRig() Destroys and re-creates the rig around the bounding box Declaration public void CreateRig() HighlightWires() Allows to manually enable wire (edge) highlighting (edges) of the bounding box. This is useful if connected to the Manipulation events of a ManipulationHandler when used in conjunction with this MonoBehavior. Declaration public void HighlightWires() OnSourceDetected(SourceStateEventData) Declaration public void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Declaration public void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData SetScaleLimits(Single, Single, Boolean) Sets the minimum/maximum scale for the bounding box at runtime. Declaration public void SetScaleLimits(float min, float max, bool relativeToInitialState = true) Parameters Type Name Description Single min Minimum scale Single max Maximum scale Boolean relativeToInitialState If true the values will be multiplied by scale of target at startup. If false they will be in absolute local scale. UnhighlightWires() Declaration public void UnhighlightWires() Implements IMixedRealitySourceStateHandler IMixedRealityFocusChangedHandler IMixedRealityFocusHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.BoundingBoxHelper.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.BoundingBoxHelper.html",
    "title": "Class BoundingBoxHelper | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundingBoxHelper The BoundingBoxHelper class contains functions for getting geometric info from the non-axis-aligned bounding box of a GameObject. These functions can be used to align another object to the center of a certain face or the center of an edge of a face... etc. The BoundingBoxHelper static function can be used for a one time calculation. The dynamic functions can be used to obtain boundingcube info on an object's Update loop. Operations are minimized in the dynamic use scenario. Inheritance Object BoundingBoxHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class BoundingBoxHelper Methods GetFaceBottomCentroid(Int32) Get the center of the bottom edge of a face of the bounding box determined by index Declaration public Vector3 GetFaceBottomCentroid(int index) Parameters Type Name Description Int32 index parameter indicating which face is used. 0-5 Returns Type Description Vector3 a vector representing the bottom most edge center of the face GetFaceCentroid(Int32) This function returns the centroid of a face of the bounding cube of an object specified by the index parameter; Declaration public Vector3 GetFaceCentroid(int index) Parameters Type Name Description Int32 index an index into the list of faces of a boundingcube. 0-5 Returns Type Description Vector3 GetFaceCorners(Int32) This function returns the four corners of a face of a bounding cube specified by index. Declaration public Vector3[] GetFaceCorners(int index) Parameters Type Name Description Int32 index the index of the face of the bounding cube. 0-5 Returns Type Description Vector3 [] an array of 4 vectors GetFaceEdgeMidpoints(Int32) This function returns the midpoints of each of the edges of the face of the bounding box Declaration public Vector3[] GetFaceEdgeMidpoints(int index) Parameters Type Name Description Int32 index the index of the face of the bounding cube- 0-5 Returns Type Description Vector3 [] four Vector3 points GetFaceIndices(Int32) this function gets the indices of the bounding cube corners that make up a face. Declaration public int[] GetFaceIndices(int index) Parameters Type Name Description Int32 index the face index of the bounding cube 0-5 Returns Type Description Int32 [] an array of four integer indices GetFaceNormal(Int32) Get the normal of the face of the bounding cube specified by index Declaration public Vector3 GetFaceNormal(int index) Parameters Type Name Description Int32 index the index of the face of the bounding cube 0-5 Returns Type Description Vector3 a vector3 representing the face normal GetIndexOfForwardFace(Vector3) This function gets the index of the face of the bounding cube that is most facing the lookAtPoint. This could be the headPosition or camera position if the face that was facing the view is desired. Declaration public int GetIndexOfForwardFace(Vector3 lookAtPoint) Parameters Type Name Description Vector3 lookAtPoint the world coordinate to test which face is desired Returns Type Description Int32 an integer representing the index of the bounding box faces GetRawBBCorners(BoundingBox) This function gets the untransformed bounding box corner points of a GameObject. Declaration public void GetRawBBCorners(BoundingBox boundingBox) Parameters Type Name Description BoundingBox boundingBox GetUntransformedCornersFromObject(BoxCollider, List<Vector3>) static function that performs one-time non-persistent calculation of boundingbox of object without transformation. Declaration public static void GetUntransformedCornersFromObject(BoxCollider targetBounds, List<Vector3> boundsPoints) Parameters Type Name Description BoxCollider targetBounds List < Vector3 > boundsPoints the array of 8 points that will be filled UpdateNonAABoundingBoxCornerPositions(BoundingBox, List<Vector3>) Objects that align to an target's bounding box can call this function in the object's UpdateLoop to get current bound points; Declaration public void UpdateNonAABoundingBoxCornerPositions(BoundingBox boundingBox, List<Vector3> boundsPoints) Parameters Type Name Description BoundingBox boundingBox List < Vector3 > boundsPoints"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonBackgroundSize.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonBackgroundSize.html",
    "title": "Class ButtonBackgroundSize | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonBackgroundSize The base layout component for a button or UI elements - easily build UI with Unity Primitives. Helps to create consistency by using values that scale to a designer's 2D layout program. Based on a ratio of 2048 pixels for 1 meter of surface area. Use case: A designer creates a concept image of UI based on a 2048 artboard. 2048 pixels is a nice resolution for a meter of content, two meters away from the user. The FOV of the HoloLens is about 1 meter wide at 2 meters from the user meaning the designer can assume an image area of 2048 x 1184 pixels at 2 meters from the user. The designer or engineer can take pixel based redlines and create UI at 1:1 scale. Inheritance Object ButtonBackgroundSize Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class ButtonBackgroundSize : MonoBehaviour Fields ItemSize The size of this object in 3D space, based on the scale factor. This value should match 2D design pixel values. Declaration protected Vector3 ItemSize Field Value Type Description Vector3 Methods GetBasePixelScale() Get the base pixel scale Declaration public float GetBasePixelScale() Returns Type Description Single GetSize() Get the current size Declaration public Vector3 GetSize() Returns Type Description Vector3 SetBasePixelScale(Single) Set the base pixel scale Declaration public void SetBasePixelScale(float scale) Parameters Type Name Description Single scale SetSize(Vector3) Set the size at Runtime or through code Declaration public void SetSize(Vector3 size) Parameters Type Name Description Vector3 size"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonBackgroundSizeOffset.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonBackgroundSizeOffset.html",
    "title": "Class ButtonBackgroundSizeOffset | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonBackgroundSizeOffset Scales an object relative the scale of the Anchor Transform Works best when using with Layout3DPixelSize, but not required - See LayoutPixelSize for more info Use Case: Create a button, then add another element who's size should maintain a consistent size relative to the Anchor. Like creating a button background using a Cube and ButtonSize. The add another Cube that is 40 pixels smaller than the background. Event if the background changes size, this element will remain 40 pixels smaller. Inheritance Object ButtonBackgroundSizeOffset Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class ButtonBackgroundSizeOffset : MonoBehaviour Methods GetScale() Declaration public Vector3 GetScale() Returns Type Description Vector3 GetSOffset() Get the current offset value Declaration public Vector3 GetSOffset() Returns Type Description Vector3 SetOffset(Vector3) Set a consistent offset value from the Anchor Declaration public void SetOffset(Vector3 offset) Parameters Type Name Description Vector3 offset SetScale(Vector3) Set the objects scale relative to the Anchor Declaration public void SetScale(Vector3 scale) Parameters Type Name Description Vector3 scale"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonBorder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonBorder.html",
    "title": "Class ButtonBorder | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonBorder Use a Unity primitive cube or cylinder as a border segment relative to the scale of the AnchorTransform Use with ButtonSize on the component and the Anchor for consistent results Works best when using with ButtonSize, but not required - See ButtonSize for more info. Inheritance Object ButtonBorder Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ButtonBorder : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonCollider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonCollider.html",
    "title": "Class ButtonCollider | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonCollider Scales the collider on one object relative to the transform's scale of another object Inheritance Object ButtonCollider Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ButtonCollider : MonoBehaviour Fields CopyFrom Declaration public Transform CopyFrom Field Value Type Description Transform Expand Declaration public Vector3 Expand Field Value Type Description Vector3 OnlyInEditMode Declaration public bool OnlyInEditMode Field Value Type Description Boolean ScaleFactor Declaration public Vector3 ScaleFactor Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonLayout.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonLayout.html",
    "title": "Class ButtonLayout | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonLayout Place an object in space relative to another object's scale Good for responsive buttons that can stretch and object realign Inheritance Object ButtonLayout Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ButtonLayout : MonoBehaviour Fields Alignment Where to set this object's center point in relation to the Anchor's center point. Declaration public Vector3 Alignment Field Value Type Description Vector3 Anchor The transform this object should be linked and aligned to. Declaration public Transform Anchor Field Value Type Description Transform AnchorOffset Offset this object's position based on the same pixel based size ratio. Declaration public Vector3 AnchorOffset Field Value Type Description Vector3 BasePixelSize A pixel to Unity unit conversion, Default: 2048x2048 pixels covers a 1x1 Unity Unit or default primitive size. Declaration public float BasePixelSize Field Value Type Description Single OnlyInEditMode Declaration public bool OnlyInEditMode Field Value Type Description Boolean Methods Awake() A transform is required for alignment Declaration protected virtual void Awake() Update() Declaration protected virtual void Update() UpdatePosition() Set this object's position Declaration protected virtual void UpdatePosition()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonSize.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonSize.html",
    "title": "Class ButtonSize | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonSize Inheritance Object ButtonSize Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ButtonSize : MonoBehaviour Fields BasePixelScale Declaration public float BasePixelScale Field Value Type Description Single ItemSize Declaration public Vector3 ItemSize Field Value Type Description Vector3 OnlyInEditMode Declaration public bool OnlyInEditMode Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ButtonSizeOffset.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ButtonSizeOffset.html",
    "title": "Class ButtonSizeOffset | Mixed Reality Toolkit Documentation",
    "keywords": "Class ButtonSizeOffset Scales an object relative the scale of the AnchorTransform Inheritance Object ButtonSizeOffset Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ButtonSizeOffset : MonoBehaviour Fields AnchorTransform Declaration public Transform AnchorTransform Field Value Type Description Transform BasePixelScale Declaration public float BasePixelScale Field Value Type Description Single Offset Declaration public Vector3 Offset Field Value Type Description Vector3 OnlyInEditMode Declaration public bool OnlyInEditMode Field Value Type Description Boolean Scale Declaration public Vector3 Scale Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ConnectorFollowType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ConnectorFollowType.html",
    "title": "Enum ConnectorFollowType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ConnectorFollowType How does the Tooltip track with its parent object Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ConnectorFollowType Fields Name Description AnchorOnly The anchor will follow the target - pivot remains unaffected Position Anchor and pivot will follow target position, but not rotation PositionAndXYRotation Anchor and pivot will follow target like it's parented PositionAndYRotation Anchor and pivot will follow target like it's parented, but only on Y axis"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ConnectorOrientType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ConnectorOrientType.html",
    "title": "Enum ConnectorOrientType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ConnectorOrientType How does the Tooltip rotate about the connector Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ConnectorOrientType Fields Name Description OrientToCamera Tooltip will maintain anchor-pivot relationship relative to camera OrientToObject Tooltip will maintain anchor-pivot relationship relative to target object"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ConnectorPivotDirection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ConnectorPivotDirection.html",
    "title": "Enum ConnectorPivotDirection | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ConnectorPivotDirection In which direction does the tooltip connector project. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ConnectorPivotDirection Fields Name Description East InFront Manual Direction will be specified manually North Northeast Northwest South Southeast Southwest West"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ConnectorPivotMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ConnectorPivotMode.html",
    "title": "Enum ConnectorPivotMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ConnectorPivotMode Controls how the tooltip will pivot relative to the camera/other objects. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ConnectorPivotMode Fields Name Description Automatic Tooltip pivot will be set relative to object/camera based on specified direction and line length LocalPosition Tooltip pivot will be set relative to target based on a local position Manual Tooltip pivot will be set manually"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.CursorContextManipulationHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.CursorContextManipulationHandler.html",
    "title": "Class CursorContextManipulationHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class CursorContextManipulationHandler This script provides cursor context for the manipulation handler Inheritance Object CursorContextManipulationHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class CursorContextManipulationHandler : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.CustomInteractablesReceiver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.CustomInteractablesReceiver.html",
    "title": "Class CustomInteractablesReceiver | Mixed Reality Toolkit Documentation",
    "keywords": "Class CustomInteractablesReceiver Example of building a custom receiver that can be loaded as part of the events on the Interactable or in InteractableReceiverList or InteractableReceiver Extend ReceiverBaseMonoBehavior to build external event components Inheritance Object ReceiverBase CustomInteractablesReceiver Inherited Members ReceiverBase.Name ReceiverBase.uEvent ReceiverBase.Event ReceiverBase.Host Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class CustomInteractablesReceiver : ReceiverBase Constructors CustomInteractablesReceiver(UnityEvent) Declaration public CustomInteractablesReceiver(UnityEvent ev) Parameters Type Name Description UnityEvent ev Properties HideUnityEvents Defines whether Unity Events should be hidden in inspector for this type of EventReceiver Declaration public override bool HideUnityEvents { get; } Property Value Type Description Boolean Overrides ReceiverBase.HideUnityEvents Methods OnClick(InteractableStates, Interactable, IMixedRealityPointer) click happened Declaration public override void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer Overrides ReceiverBase.OnClick(InteractableStates, Interactable, IMixedRealityPointer) OnUpdate(InteractableStates, Interactable) Called on update, check to see if the state has changed sense the last call Declaration public override void OnUpdate(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source Overrides ReceiverBase.OnUpdate(InteractableStates, Interactable) OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) voice command called Declaration public override void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index Int32 length Overrides ReceiverBase.OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.DestroyOnAnimationComplete.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.DestroyOnAnimationComplete.html",
    "title": "Class DestroyOnAnimationComplete | Mixed Reality Toolkit Documentation",
    "keywords": "Class DestroyOnAnimationComplete Destroys the Game Object after the length of the Animator component. Attach this script to any game object with Animator component to destroy on animation complete. Inheritance Object DestroyOnAnimationComplete Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class DestroyOnAnimationComplete : MonoBehaviour Properties Delay Declaration public float Delay { get; set; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.DisplayMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.DisplayMode.html",
    "title": "Enum DisplayMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DisplayMode Enum describing the display mode of a ToolTip. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum DisplayMode Fields Name Description None No state to have from Manager Off Tips are always off On Tips are always on OnFocus Looking at Object Activates tip (Object must be interactive)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.Editor.InteractableInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.Editor.InteractableInspector.html",
    "title": "Class InteractableInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableInspector Inheritance Object InteractableInspector Namespace : Microsoft.MixedReality.Toolkit.UI.Editor Assembly : cs.temp.dll.dll Syntax public class InteractableInspector : UnityEditor.Editor Fields actionId Declaration protected SerializedProperty actionId Field Value Type Description SerializedProperty canDeselect Declaration protected SerializedProperty canDeselect Field Value Type Description SerializedProperty canSelect Declaration protected SerializedProperty canSelect Field Value Type Description SerializedProperty dimensionIndex Declaration protected SerializedProperty dimensionIndex Field Value Type Description SerializedProperty dimensions Declaration protected SerializedProperty dimensions Field Value Type Description SerializedProperty enabled Declaration protected bool enabled Field Value Type Description Boolean enabledProperty Declaration protected SerializedProperty enabledProperty Field Value Type Description SerializedProperty inputActionOptions Declaration protected string[] inputActionOptions Field Value Type Description String [] instance Declaration protected Interactable instance Field Value Type Description Interactable isGlobal Declaration protected SerializedProperty isGlobal Field Value Type Description SerializedProperty profileList Declaration protected SerializedProperty profileList Field Value Type Description SerializedProperty ShowEventReceiversPrefKey Declaration protected const string ShowEventReceiversPrefKey = \"InteractableInspectorProfiles_ShowEvents_Receivers\" Field Value Type Description String ShowEventsPrefKey Declaration protected const string ShowEventsPrefKey = \"InteractableInspectorProfiles_ShowEvents\" Field Value Type Description String ShowProfilesPrefKey Declaration protected const string ShowProfilesPrefKey = \"InteractableInspectorProfiles\" Field Value Type Description String speechKeywordOptions Declaration protected string[] speechKeywordOptions Field Value Type Description String [] startDimensionIndex Declaration protected SerializedProperty startDimensionIndex Field Value Type Description SerializedProperty statesProperty Declaration protected SerializedProperty statesProperty Field Value Type Description SerializedProperty voiceCommands Declaration protected SerializedProperty voiceCommands Field Value Type Description SerializedProperty Methods AddEvent(Int32) Declaration protected void AddEvent(int index) Parameters Type Name Description Int32 index AddProfile(Int32) Declaration protected void AddProfile(int index) Parameters Type Name Description Int32 index CreateThemeAsset(String) Declaration protected static Theme CreateThemeAsset(string themeName = null) Parameters Type Name Description String themeName Returns Type Description Theme DrawDropDownProperty(Rect, SerializedProperty, String[], GUIContent) Draws a popup UI with PropertyField type features. Displays prefab pending updates Declaration protected void DrawDropDownProperty(Rect position, SerializedProperty prop, string[] options, GUIContent label) Parameters Type Name Description Rect position SerializedProperty prop String [] options GUIContent label GetDefaultInteractableStatesFile() Declaration public static States GetDefaultInteractableStatesFile() Returns Type Description States OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override sealed void OnInspectorGUI() Remarks There is a check in here that verifies whether or not we can get InputActions, if we can't we show an error help box; otherwise we get them. This method is sealed, if you wish to override OnInspectorGUI() , then override RenderCustomInspector() method instead. RemoveEvent(Int32, SerializedProperty) Declaration protected void RemoveEvent(int index, SerializedProperty prop = null) Parameters Type Name Description Int32 index SerializedProperty prop RemoveProfile(Int32, SerializedProperty) Declaration protected void RemoveProfile(int index, SerializedProperty prop = null) Parameters Type Name Description Int32 index SerializedProperty prop RenderBaseInspector() Declaration protected virtual void RenderBaseInspector() RenderCustomInspector() Declaration public virtual void RenderCustomInspector() RenderGeneralSettings() Declaration protected void RenderGeneralSettings() SpeechKeywordLookup(String, String[]) Get the index of the speech keyword array item based on its name, pop-up field helper Skips the first item in the array (internal added blank value to turn feature off) and returns a 0 if no match is found for the blank value Declaration protected int SpeechKeywordLookup(string option, string[] options) Parameters Type Name Description String option String [] options Returns Type Description Int32 TryGetInputActions(out String[]) Get a list of Mixed Reality Input Actions from the input actions profile. Declaration public static bool TryGetInputActions(out string[] descriptionsArray) Parameters Type Name Description String [] descriptionsArray Returns Type Description Boolean TryGetMixedRealitySpeechCommands(out SpeechCommands[]) Try to get a list of speech commands from the MRTK/Input/SpeechCommands profile Declaration public static bool TryGetMixedRealitySpeechCommands(out SpeechCommands[] commands) Parameters Type Name Description SpeechCommands [] commands Returns Type Description Boolean TryGetSpeechKeywords(out String[]) Look for speech commands in the MRTK Speech Command profile Adds a blank value at index zero so the developer can turn the feature off. Declaration public static bool TryGetSpeechKeywords(out string[] keywords) Parameters Type Name Description String [] keywords Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.Editor.InteractableOnFocusInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.Editor.InteractableOnFocusInspector.html",
    "title": "Class InteractableOnFocusInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableOnFocusInspector Class controls inspector rendering logic for the InteractableOnFocus class Inheritance Object InteractableOnFocusInspector Namespace : Microsoft.MixedReality.Toolkit.UI.Editor Assembly : cs.temp.dll.dll Syntax public class InteractableOnFocusInspector : UnityEditor.Editor Fields listSettings Declaration protected List<InspectorUIUtility.ListSettings> listSettings Field Value Type Description List < InspectorUIUtility.ListSettings > profilesProperty Declaration protected SerializedProperty profilesProperty Field Value Type Description SerializedProperty Methods OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.UI.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.UI.Editor Classes InteractableInspector InteractableOnFocusInspector Class controls inspector rendering logic for the InteractableOnFocus class"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.FollowMeToggle.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.FollowMeToggle.html",
    "title": "Class FollowMeToggle | Mixed Reality Toolkit Documentation",
    "keywords": "Class FollowMeToggle A utility script for toggling the 'Follow Me' behavior by activating/deactivating the Radial View Solver. This script also provides optional toggle at specified distance. Inheritance Object FollowMeToggle Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class FollowMeToggle : MonoBehaviour Properties AutoFollowAtDistance Should following be automatically enabled when the user is further than a certain distance away? Declaration public bool AutoFollowAtDistance { get; set; } Property Value Type Description Boolean AutoFollowDistance If autoFollowAtDistance is enabled, what distance to trigger auto following at. Declaration public float AutoFollowDistance { get; set; } Property Value Type Description Single AutoFollowTransformTarget Optional transform to use when using autoFollowAtDistance. If not specified the local transform is used. Declaration public Transform AutoFollowTransformTarget { get; set; } Property Value Type Description Transform InteractableObject An optional Interactable to select/deselect when toggling the follow behavior. Declaration public Interactable InteractableObject { get; set; } Property Value Type Description Interactable VisualizationObject An optional object for visualizing the 'Follow Me' mode state. Declaration public GameObject VisualizationObject { get; set; } Property Value Type Description GameObject Methods SetFollowMeBehavior(Boolean) Enables or disables the solver based on the follow parameter. Declaration public void SetFollowMeBehavior(bool follow) Parameters Type Name Description Boolean follow True if the solver should be active. ToggleFollowMeBehavior() Toggles the current follow behavior of the solver. Declaration public void ToggleFollowMeBehavior()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.GazeHandHelper.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.GazeHandHelper.html",
    "title": "Class GazeHandHelper | Mixed Reality Toolkit Documentation",
    "keywords": "Class GazeHandHelper This class must be instantiated by a script that implements the IMixedRealitySourceStateHandler , IMixedRealityInputHandler and IMixedRealityInputHandler<T> . It must receive EventData arguments from OnInputDown(), OnInputUp(), OnInputChanged() and OnSourceLost(). This class manages the states of input necessary to calculate a proper grab position The eventData received on inputdown has the point on the target that was hit by the gaze; the mixedrealitypose - eventdata received on input changed contains the handposition in eventdata.inputdata.position It also contains useful retrieval functions. Inheritance Object GazeHandHelper Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class GazeHandHelper Methods AddSource(InputEventData) This function must be called from the OnInputDown handler in a script implementing the IMixedRealityInputHandler<T> . Declaration public void AddSource(InputEventData eventData) Parameters Type Name Description InputEventData eventData The InputEventData argument 'eventData' is passed through to GazeHandHelper GetActiveHandCount() This function returns the number of active hands. Declaration public int GetActiveHandCount() Returns Type Description Int32 GetAllHandPositions() This function gets an array of all active hand positions Declaration public IEnumerable<Vector3> GetAllHandPositions() Returns Type Description IEnumerable < Vector3 > enumerable of Vector3 GetFirstHand() This function retrieves the position of the first active hand. Declaration public Vector3 GetFirstHand() Returns Type Description Vector3 Vector3 representing position GetHandPositionsDictionary() This function retrieves a reference to the Dictionary that maps hand positions to sourceIds. This return value is NOT filtered for whether the hands are active. User should check first using GetActiveHandCount(). Declaration public Dictionary<uint, Vector3> GetHandPositionsDictionary() Returns Type Description Dictionary < UInt32 , Vector3 > Dictionary with uint Keys mapping to Vector3 positions GetHandsCentroid() This function gets the average of the positions of all active hands. Declaration public Vector3 GetHandsCentroid() Returns Type Description Vector3 Vector3 representing the average position RemoveSource(InputEventData) This function must be called from the OnInputUp handler in a script implementing the IMixedRealityInputHandler<T> . Declaration public void RemoveSource(InputEventData eventData) Parameters Type Name Description InputEventData eventData he InputEventData argument 'eventData' is passed through to GazeHandHelper RemoveSource(SourceStateEventData) This function must be called from the OnSourceLost handler in a script implementing the IMixedRealitySourceStateHandler interface. Declaration public void RemoveSource(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData TryGetHandPosition(Handedness, out Vector3) TryGet style function to return HandPosition of a certain handedness if available. Declaration public bool TryGetHandPosition(Handedness handedness, out Vector3 position) Parameters Type Name Description Handedness handedness asks for left or right hand or either Vector3 position out value that gets filled with a Vector3 representing position Returns Type Description Boolean true or false- whether the hand existed TryGetHandPosition(UInt32, out Vector3) TryGet style function to return HandPosition of a certain sourceId if available. Declaration public bool TryGetHandPosition(uint id, out Vector3 handPosition) Parameters Type Name Description UInt32 id asks for the hand position associated with a certain IMixedRealityInputSource id Vector3 handPosition out value that gets filled with a Vector3 representing position Returns Type Description Boolean true or false- whether the hand existed TryGetHandsCentroid(out Vector3) TryGet style function to get the average of all active hand positions. Declaration public bool TryGetHandsCentroid(out Vector3 handsCentroid) Parameters Type Name Description Vector3 handsCentroid out value filled with Vector3 representing average of hand positions Returns Type Description Boolean true if there were any active hands; false if there were no active hands UpdateSource(InputEventData<MixedRealityPose>) This function must be called from the OnInputChanged handler in a script implementing the IMixedRealityInputHandler<T> . Declaration public void UpdateSource(InputEventData<MixedRealityPose> eventData) Parameters Type Name Description InputEventData < MixedRealityPose > eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.HandInteractionPanZoom.HandPanData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.HandInteractionPanZoom.HandPanData.html",
    "title": "Class HandInteractionPanZoom.HandPanData | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandInteractionPanZoom.HandPanData Internal data stored for each hand or pointer. Inheritance Object HandInteractionPanZoom.HandPanData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax protected class HandPanData Fields currentController Declaration public IMixedRealityController currentController Field Value Type Description IMixedRealityController currentPointer Declaration public IMixedRealityPointer currentPointer Field Value Type Description IMixedRealityPointer initialProjectedOffset Declaration public Vector3 initialProjectedOffset Field Value Type Description Vector3 IsActive Declaration public bool IsActive Field Value Type Description Boolean IsSourceNear Declaration public bool IsSourceNear Field Value Type Description Boolean touchingInitialPt Declaration public Vector3 touchingInitialPt Field Value Type Description Vector3 touchingInitialUV Declaration public Vector2 touchingInitialUV Field Value Type Description Vector2 touchingPoint Declaration public Vector3 touchingPoint Field Value Type Description Vector3 touchingPointSmoothed Declaration public Vector3 touchingPointSmoothed Field Value Type Description Vector3 touchingQuadCoord Declaration public Vector2 touchingQuadCoord Field Value Type Description Vector2 touchingRayOffset Declaration public Vector3 touchingRayOffset Field Value Type Description Vector3 touchingSource Declaration public IMixedRealityInputSource touchingSource Field Value Type Description IMixedRealityInputSource touchingUVOffset Declaration public Vector2 touchingUVOffset Field Value Type Description Vector2 touchingUVTotalOffset Declaration public Vector2 touchingUVTotalOffset Field Value Type Description Vector2 uvOffset Declaration public Vector2 uvOffset Field Value Type Description Vector2 uvTotalOffset Declaration public Vector2 uvTotalOffset Field Value Type Description Vector2"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.HandInteractionPanZoom.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.HandInteractionPanZoom.html",
    "title": "Class HandInteractionPanZoom | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandInteractionPanZoom Inheritance Object HandInteractionPanZoom Implements IMixedRealityTouchHandler IMixedRealityPointerHandler IMixedRealitySourceStateHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class HandInteractionPanZoom : BaseFocusHandler, IMixedRealityTouchHandler, IMixedRealityPointerHandler, IMixedRealitySourceStateHandler Fields PanStarted Declaration public PanUnityEvent PanStarted Field Value Type Description PanUnityEvent PanStopped Declaration public PanUnityEvent PanStopped Field Value Type Description PanUnityEvent PanUpdated Declaration public PanUnityEvent PanUpdated Field Value Type Description PanUnityEvent Properties CurrentPanDelta Returns the current pan delta (pan value - previous pan value) in UV coordinates (0 being no pan, 1, being pan of the entire ) Declaration public Vector2 CurrentPanDelta { get; } Property Value Type Description Vector2 CurrentScale Declaration public float CurrentScale { get; } Property Value Type Description Single Enabled This Property sets and gets whether a the pan/zoom behavior is active. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Methods OnFocusEnter(FocusEventData) Declaration public override void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) Declaration public override void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnPointerClicked(MixedRealityPointerEventData) Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) The Input Event handlers receive Hand Ray events. Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnSourceDetected(SourceStateEventData) Declaration public void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Declaration public void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnTouchCompleted(HandTrackingInputEventData) Declaration public void OnTouchCompleted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchStarted(HandTrackingInputEventData) In order to receive Touch Events from the IMixedRealityTouchHandler remember to add a NearInteractionTouchable script to the object that has this script. Declaration public void OnTouchStarted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchUpdated(HandTrackingInputEventData) Declaration public void OnTouchUpdated(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Reset() This function sets the pan and zoom back to their starting settings. Declaration public void Reset() Implements IMixedRealityTouchHandler IMixedRealityPointerHandler IMixedRealitySourceStateHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.HandPanEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.HandPanEventData.html",
    "title": "Class HandPanEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandPanEventData Information associated with a particular hand pan event. Inheritance Object HandPanEventData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class HandPanEventData Properties PanDelta Hand pan delta Declaration public Vector2 PanDelta { get; set; } Property Value Type Description Vector2"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.IInteractableHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.IInteractableHandler.html",
    "title": "Interface IInteractableHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IInteractableHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public interface IInteractableHandler Methods OnClick(InteractableStates, Interactable, IMixedRealityPointer) A click event happened Declaration void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) Parameters Type Name Description InteractableStates state Interactable source IMixedRealityPointer pointer OnStateChange(InteractableStates, Interactable) Declaration void OnStateChange(InteractableStates state, Interactable source) Parameters Type Name Description InteractableStates state Interactable source OnVoiceCommand(InteractableStates, Interactable, String, Int32, Int32) A voice command was called Declaration void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) Parameters Type Name Description InteractableStates state Interactable source String command Int32 index Int32 length"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.UIMaterialInstantiator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.UIMaterialInstantiator.html",
    "title": "Class UIMaterialInstantiator | Mixed Reality Toolkit Documentation",
    "keywords": "Class UIMaterialInstantiator This is required since UnityUI Graphic elements do not support MaterialPropertyBlocks, and any shader operations can end up modifying the material permanently across all shared instances. To prevent that we create a runtime copy of the material. Inheritance Object UIMaterialInstantiator Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class UIMaterialInstantiator Methods TryCreateMaterialCopy(Graphic) Invoke this method to create a copy of the material and use that copy at runtime for Graphic objects to prevent modifying materials in editor or impact shared materials. Declaration public static void TryCreateMaterialCopy(Graphic targetGraphic) Parameters Type Name Description Graphic targetGraphic Graphic element that needs to clone its material"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.VisualProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.VisualProfile.html",
    "title": "Class VisualProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class VisualProfile Profile container for theme and for loading theme settings Inheritance Object VisualProfile Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class VisualProfile Fields Target GameObject to Target Declaration public GameObject Target Field Value Type Description GameObject Theme Theme definition to build Declaration public Theme Theme Field Value Type Description Theme Methods CreateThemeEngines() Create and initialize Theme Engines with the associated Target and Theme property Declaration public List<InteractableThemeBase> CreateThemeEngines() Returns Type Description List < InteractableThemeBase > List of Theme Engine instances"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.UI | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.UI Classes AppBar Logic for the App Bar. Generates buttons, manages states. AppBarButton Button class used by AppBar. BaseStateModel Base class for defining state model logic to use in conjunction with the State class Allows for retrieving current state mode and comparing states Billboard The Billboard class implements the behaviors needed to keep a GameObject oriented towards the user. BoundingBox BoundingBox allows to transform objects (rotate and scale) and draws a cube around the object to visualize the possibility of user triggered transform manipulation. BoundingBox provides scale and rotation handles that can be used for far and near interaction manipulation of the object. It further provides a proximity effect for scale and rotation handles that alters scaling and material. BoundingBoxHelper The BoundingBoxHelper class contains functions for getting geometric info from the non-axis-aligned bounding box of a GameObject. These functions can be used to align another object to the center of a certain face or the center of an edge of a face... etc. The BoundingBoxHelper static function can be used for a one time calculation. The dynamic functions can be used to obtain boundingcube info on an object's Update loop. Operations are minimized in the dynamic use scenario. ButtonBackgroundSize The base layout component for a button or UI elements - easily build UI with Unity Primitives. Helps to create consistency by using values that scale to a designer's 2D layout program. Based on a ratio of 2048 pixels for 1 meter of surface area. Use case: A designer creates a concept image of UI based on a 2048 artboard. 2048 pixels is a nice resolution for a meter of content, two meters away from the user. The FOV of the HoloLens is about 1 meter wide at 2 meters from the user meaning the designer can assume an image area of 2048 x 1184 pixels at 2 meters from the user. The designer or engineer can take pixel based redlines and create UI at 1:1 scale. ButtonBackgroundSizeOffset Scales an object relative the scale of the Anchor Transform Works best when using with Layout3DPixelSize, but not required - See LayoutPixelSize for more info Use Case: Create a button, then add another element who's size should maintain a consistent size relative to the Anchor. Like creating a button background using a Cube and ButtonSize. The add another Cube that is 40 pixels smaller than the background. Event if the background changes size, this element will remain 40 pixels smaller. ButtonBorder Use a Unity primitive cube or cylinder as a border segment relative to the scale of the AnchorTransform Use with ButtonSize on the component and the Anchor for consistent results Works best when using with ButtonSize, but not required - See ButtonSize for more info. ButtonCollider Scales the collider on one object relative to the transform's scale of another object ButtonLayout Place an object in space relative to another object's scale Good for responsive buttons that can stretch and object realign ButtonSize ButtonSizeOffset Scales an object relative the scale of the AnchorTransform CursorContextManipulationHandler This script provides cursor context for the manipulation handler CustomInteractablesReceiver Example of building a custom receiver that can be loaded as part of the events on the Interactable or in InteractableReceiverList or InteractableReceiver Extend ReceiverBaseMonoBehavior to build external event components DestroyOnAnimationComplete Destroys the Game Object after the length of the Animator component. Attach this script to any game object with Animator component to destroy on animation complete. FollowMeToggle A utility script for toggling the 'Follow Me' behavior by activating/deactivating the Radial View Solver. This script also provides optional toggle at specified distance. GazeHandHelper This class must be instantiated by a script that implements the IMixedRealitySourceStateHandler , IMixedRealityInputHandler and IMixedRealityInputHandler<T> . It must receive EventData arguments from OnInputDown(), OnInputUp(), OnInputChanged() and OnSourceLost(). This class manages the states of input necessary to calculate a proper grab position The eventData received on inputdown has the point on the target that was hit by the gaze; the mixedrealitypose - eventdata received on input changed contains the handposition in eventdata.inputdata.position It also contains useful retrieval functions. HandInteractionPanZoom HandInteractionPanZoom.HandPanData Internal data stored for each hand or pointer. HandPanEventData Information associated with a particular hand pan event. InputRecordingControls Utility class to make input recording service accessible through game objects. Hook up buttons to the public functions to start and stop recording input. Interactable Uses input and action data to declare a set of states Maintains a collection of themes that react to state changes and provide sensory feedback Passes state information and input data on to receivers that detect patterns and does stuff. InteractableActivateTheme Theme engine that allows control to enable/disable a GameObject based on the current state InteractableAnimatorTheme ThemeEngine that controls Animator state based on state changes Targets first Animator component returned on initialized GameObject InteractableAudioReceiver Add audio clip to play onClick or on Voice Command InteractableAudioTheme Theme Engine to play particular audio files based on state changes. Add AudioSource component if none is found on initialized GameObject or in children InteractableColorChildrenTheme Theme engine to control the color for all Renderer children under the initialized GameObject based on state changes InteractableColorTheme Theme Engine that can set colors on a Renderer or text object based on state changes This Theme will try to set color on first available text object in order of TextMesh, Text, TextMeshPro, and TextMeshProUGUI object If no text-based component can be found, then will fall back to first Renderer component found on the initialized GameObject and target the color shader property provided in the ThemeDefinition. InteractableEvent Event base class for events attached to Interactables. InteractableEventInspector InteractableGrabScaleTheme ThemeEngine to control initialized GameObject's scale based on associated Interactable grab state and related state changes InteractableHighlight Adds or removes materials to target renderer for highlighting Focused GameObject s. InteractableMaterialTheme Theme Engine to control the material used based on state changes Changes the material for the first Renderer component on the initialized GameObject InteractableOffsetTheme InteractableOnClickReceiver A basic receiver for detecting clicks InteractableOnFocus Adds or removes materials to target renderer for highlighting Focused GameObject s. InteractableOnFocusReceiver A basic focus event receiver InteractableOnGrabReceiver A basic grab event receiver for detecting grab events (OnGrab, OnRelease) or grab state changes from Interactable When the grab states change, on or off, these events are triggered InteractableOnHoldReceiver Basic hold event receiver InteractableOnPressReceiver Basic press event receiver InteractableOnToggleReceiver An event receiver that listens to toggle events InteractableOnTouchReceiver A basic touch event receiver for detecting Physical Touch state changes in the Interactable When the physical touch states change, these events are triggered. InteractablePointerSimulator A way to test button state feedback while in the editor InteractableProfileItem The foundation of profiles that exist on an Interactable Profiles pair ThemeContainers with the objects they manipulate, based on state changes InteractableReceiver Example of building an event system for Interactable that still uses ReceiverBase events InteractableReceiverInspector InteractableReceiverList An example of building an Interactable receiver that uses built-in receivers that extend ReceiverBase InteractableReceiverListInspector InteractableRotationTheme Theme Engine to control a GameObject's rotation based on state changes InteractableScaleTheme Theme Engine to control initialized GameObject's scale based on state changes InteractableShaderTheme Theme Engine to control the value of a particular Shader Property based on state changes Targets the first Renderer component on the initialized GameObject and use MaterialPropertyBlocks InteractableStates list of Interactable states and basic comparison InteractableStringTheme Theme Engine to change the string value on a Text type object based on state changes Finds the first available component searching in order of TextMesh, Text, TextMeshPro, TextMeshProUGUI InteractableTextureTheme Theme Engine to change the texture on a GameObject based on state changes InteractableThemeBase Base abstract class for all Theme Engines. Extend to create custom Theme logic InteractableThemeShaderUtils Collection of shader and material utilities InteractableToggleCollection A way to control a list of radial type buttons or tabs LoaderController Controls how the standard indeterminate loader moves and behaves over time. ManipulationEvent A UnityEvent callback containing a ManipulationEventData payload. ManipulationEventData Information associated with a particular manipulation event. ManipulationHandler This script allows for an object to be movable, scalable, and rotatable with one or two hands. You may also configure the script on only enable certain manipulations. The script works with both HoloLens' gesture input and immersive headset's motion controller input. PanUnityEvent Unity event for a pan / zoom event. Contains the hand pan event data PinchSlider A slider that can be moved by grabbing / pinching a slider thumb PointerBehaviorControls Utility class to control PointerBehavior of pointers. Hook up buttons to the public functions to turn rays on and off. PressableButton A button that can be pushed via direct touch. You can use PhysicalPressEventRouter to route these events to Interactable . PressableButtonHoloLens2 HoloLens 2 shell's style button specific elements ProgressIndicatorLoadingBar Displays progress bar and (optionally) percentage text. ProgressIndicatorObjectDisplay This class manages how a GameObject rotates and/or scales when activated as part of a Progress Indicator effect. ProgressIndicatorOrbsRotator This class manages the 'rotating circle of dots' effect that is used as a Progress Indicator effect. ReceiverBase The base class for all receivers that attach to Interactables ReceiverBaseMonoBehavior A base class for detecting hand handling state changes from an Interactable Extend this class to build new events or receivers from Interactables InteractableReceiver or InteractableReceiverList can be used with ReceiverBase - built-in receivers ScaleOffsetColorTheme Theme Engine to control initialized GameObject's scale, local position offset, and color based on state changes For color, will try to set on first available text object in order of TextMesh, Text, TextMeshPro, and TextMeshProUGUI If none found, then Theme will target first Renderer component available and target the associated shader property found in ThemeDefinition SliderEvent A UnityEvent callback containing a SliderEventData payload. SliderEventData SliderSounds Component that plays sounds to communicate the state of a pinch slider SpeechConfirmationTooltip Tooltip used for speech confirmation label. This inherits ToolTip class and provides generic text string interface for the label. To create your own speech confirmation label, override SpeechConfirmationTooltip and provide SetText(string s) and TriggerConfirmationAnimation() functions. Assign the prefab to the SpeechInputHandler.cs State State data model, state management and comparison instructions States States scriptableObject for storing available states and related state model Theme Theme scriptableObject for loading theme settings ThemeEaseSettings Ease settings and functionality for themes ThemeProperty A simple property with name, tooltip, value and type, used for serialization The custom settings are used in themes to expose properties needed to enhance theme functionality ThemePropertyValue Base values of a theme property, used for serialization ThemeStateProperty Class to store information about a Theme property that contains values per available state ToggleHandVisualisation ToolTip Class for Tooltip object Creates a floating tooltip that is attached to an object and moves to stay in view as object rotates with respect to the view. ToolTipBackgroundBlob A background with 'fake' inertia Useful for soft or liquid objects ToolTipBackgroundCorners Renders meshes at the corners of a tool tip ToolTipBackgroundMesh Renders a background mesh for a tool tip using a mesh renderer If the mesh has an offset anchor point you will get odd results ToolTipConnector Connects a ToolTip to a target Maintains that connection even if the target moves ToolTipLineHighlight Renders an outline around tooltip background ToolTipSpawner Add to any Object to spawn ToolTips on tap or on focus, according to preference Applies its follow settings to the spawned ToolTip's ToolTipConnector component ToolTipUtility Static class providing useful functions for finding ToolTip Attach point information. TouchEvent A UnityEvent callback containing a TouchEventData payload. TransformScaleHandler Component for setting the min/max scale values for ManipulationHandler or BoundingBox UIMaterialInstantiator This is required since UnityUI Graphic elements do not support MaterialPropertyBlocks, and any shader operations can end up modifying the material permanently across all shared instances. To prevent that we create a runtime copy of the material. VisualProfile Profile container for theme and for loading theme settings Structs InteractableColorChildrenTheme.BlocksAndRenderer ShaderProperties Obsolete container. Only exists to support backward compatibility to copy values from old scriptableobjects ThemeDefinition Defines configuration properties and settings to use when initializing a class extending InteractableThemeBase Interfaces IInteractableHandler IProgressIndicator IToolTipBackground IToolTipHighlight Enums AppBar.AppBarDisplayTypeEnum AppBar.AppBarStateEnum AppBar.ButtonTypeEnum BoundingBox.BoundingBoxActivationType This enum defines how the BoundingBox gets activated BoundingBox.BoundsCalculationMethod This enum defines what volume type the bound calculation depends on and its priority for it. BoundingBox.FlattenModeType Enum which describes how an object's BoundingBox is to be flattened. BoundingBox.HandleType Enum which describes whether a BoundingBox handle which has been grabbed, is a Rotation Handle (sphere) or a Scale Handle( cube) BoundingBox.RotationHandlePrefabCollider This enum defines the type of collider in use when a rotation handle prefab is provided. BoundingBox.WireframeType This enum describes which primitive type the wireframe portion of the BoundingBox consists of. ConnectorFollowType How does the Tooltip track with its parent object ConnectorOrientType How does the Tooltip rotate about the connector ConnectorPivotDirection In which direction does the tooltip connector project. ConnectorPivotMode Controls how the tooltip will pivot relative to the camera/other objects. DisplayMode Enum describing the display mode of a ToolTip. InteractableHighlight.HighlightedMaterialStyle InteractableOnPressReceiver.InteractionType Type of valid interaction distances to fire press events InteractableStates.InteractableStateEnum List of valid state types for Interactable ManipulationHandler.HandMovementType ManipulationHandler.ReleaseBehaviorType ManipulationHandler.RotateInOneHandType ManipulationHandler.TwoHandedManipulation PressableButton.SpaceMode Enum for defining space of plane distances. ProgressIndicatorState ReceiverBaseMonoBehavior.SearchScopes Types of directions to search for Interactable component in transform hierarchy SelectionModes Values for user-friendly dimensions settings ShaderPropertyType ThemeEaseSettings.BasicEaseCurves ThemePropertyTypes Theme property value types used for converting theme values back and forth from serialized objects ToolTipAttachPoint Used to find a pivot point that is closest to the anchor. This ensures a natural-looking attachment where the connector line meets the label. ToolTipSpawner.RemainType"
  },
  "api/Microsoft.MixedReality.Toolkit.UnityObjectExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UnityObjectExtensions.html",
    "title": "Class UnityObjectExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityObjectExtensions Extension methods for Unity's Object class Inheritance Object UnityObjectExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class UnityObjectExtensions Methods DestroyObject(Object, Single) Destroys a Unity object appropriately depending if running in in edit or play mode. Declaration public static void DestroyObject(Object obj, float t = 0F) Parameters Type Name Description Object obj Unity object to destroy Single t Time in seconds at which to destroy the object, if applicable. DontDestroyOnLoad(Object) Enable Unity objects to skip \"DontDestroyOnLoad\" when editor isn't playing so test runner passes. Declaration public static void DontDestroyOnLoad(this Object target) Parameters Type Name Description Object target"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.AnimatorParameter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.AnimatorParameter.html",
    "title": "Struct AnimatorParameter | Mixed Reality Toolkit Documentation",
    "keywords": "Struct AnimatorParameter A copy of the AnimatorControllerParameter because that class is not Serializable and cannot be modified in the editor. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public struct AnimatorParameter Constructors AnimatorParameter(String, AnimatorControllerParameterType, Int32, Single, Boolean) Constructor. Declaration public AnimatorParameter(string name, AnimatorControllerParameterType parameterType, int defaultInt = 0, float defaultFloat = 0F, bool defaultBool = false) Parameters Type Name Description String name Name of the animation parameter to modify. AnimatorControllerParameterType parameterType Type of the animation parameter to modify. Int32 defaultInt If the animation parameter type is an int, value to set. Ignored otherwise. Single defaultFloat If the animation parameter type is a float, value to set. Ignored otherwise. Boolean defaultBool \"If the animation parameter type is a bool, value to set. Ignored otherwise. Properties DefaultBool If the animation parameter type is a bool, value to set. Ignored otherwise. Declaration public bool DefaultBool { get; } Property Value Type Description Boolean DefaultFloat If the animation parameter type is a float, value to set. Ignored otherwise. Declaration public float DefaultFloat { get; } Property Value Type Description Single DefaultInt If the animation parameter type is an int, value to set. Ignored otherwise. Declaration public int DefaultInt { get; } Property Value Type Description Int32 Name Name of the animation parameter to modify. Declaration public string Name { get; } Property Value Type Description String NameHash Animator Name String to Hash. Declaration public int NameHash { get; } Property Value Type Description Int32 ParameterType Type of the animation parameter to modify. Declaration public AnimatorControllerParameterType ParameterType { get; } Property Value Type Description AnimatorControllerParameterType"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ArticulatedHandPose.GestureId.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ArticulatedHandPose.GestureId.html",
    "title": "Enum ArticulatedHandPose.GestureId | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ArticulatedHandPose.GestureId Supported hand gestures. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum GestureId Fields Name Description Flat Flat hand with fingers spread out Grab Grab with whole hand, fist shape None Unspecified hand shape Open Relaxed hand pose OpenSteadyGrabPoint Relaxed hand pose, grab point does not move Pinch Index finger and Thumb touching, grab point does not move PinchSteadyWrist Index finger and Thumb touching, wrist does not move Poke Index finger stretched out ThumbsUp OK sign Victory Victory sign"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ArticulatedHandPose.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ArticulatedHandPose.html",
    "title": "Class ArticulatedHandPose | Mixed Reality Toolkit Documentation",
    "keywords": "Class ArticulatedHandPose Shape of an articulated hand defined by joint poses. Inheritance Object ArticulatedHandPose Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ArticulatedHandPose Constructors ArticulatedHandPose() Declaration public ArticulatedHandPose() ArticulatedHandPose(MixedRealityPose[]) Declaration public ArticulatedHandPose(MixedRealityPose[] _localJointPoses) Parameters Type Name Description MixedRealityPose [] _localJointPoses Methods ComputeJointPoses(Handedness, Quaternion, Vector3, MixedRealityPose[]) Compute world space poses from camera-space joint data. Declaration public void ComputeJointPoses(Handedness handedness, Quaternion rotation, Vector3 position, MixedRealityPose[] jointsOut) Parameters Type Name Description Handedness handedness Handedness of the resulting pose Quaternion rotation Rotational offset of the resulting pose Vector3 position Translational offset of the resulting pose MixedRealityPose [] jointsOut Output array of joint poses Copy(ArticulatedHandPose) Copy data from another articulated hand pose. Declaration public void Copy(ArticulatedHandPose other) Parameters Type Name Description ArticulatedHandPose other FromJson(String) Deserialize pose data from JSON format. Declaration public void FromJson(string json) Parameters Type Name Description String json GetGesturePose(ArticulatedHandPose.GestureId) Get pose data for a supported gesture. Declaration public static ArticulatedHandPose GetGesturePose(ArticulatedHandPose.GestureId gesture) Parameters Type Name Description ArticulatedHandPose.GestureId gesture Returns Type Description ArticulatedHandPose GetLocalJointPose(TrackedHandJoint, Handedness) Declaration public MixedRealityPose GetLocalJointPose(TrackedHandJoint joint, Handedness handedness) Parameters Type Name Description TrackedHandJoint joint Handedness handedness Returns Type Description MixedRealityPose InterpolateOffsets(ArticulatedHandPose, ArticulatedHandPose, Single) Blend between two hand poses. Declaration public void InterpolateOffsets(ArticulatedHandPose poseA, ArticulatedHandPose poseB, float value) Parameters Type Name Description ArticulatedHandPose poseA ArticulatedHandPose poseB Single value ParseFromJointPoses(MixedRealityPose[], Handedness, Quaternion, Vector3) Take world space joint poses from any hand and convert into right-hand, camera-space poses. Declaration public void ParseFromJointPoses(MixedRealityPose[] joints, Handedness handedness, Quaternion rotation, Vector3 position) Parameters Type Name Description MixedRealityPose [] joints Input joint poses Handedness handedness Handedness of the input data Quaternion rotation Rotational offset of the input data Vector3 position Translational offset of the input data SetZero() Set all poses to zero. Declaration public void SetZero() ToJson() Serialize pose data to JSON format. Declaration public string ToJson() Returns Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.AutoStartBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.AutoStartBehavior.html",
    "title": "Enum AutoStartBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AutoStartBehavior This enumeration identifies two different ways to handle the startup behavior for a feature. Both will warm up the component, ready for it's use (e.g. connecting backend services or registering for events. The first causes the feature to start immediately. The second allows the feature to be manually started at a later time. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum AutoStartBehavior Fields Name Description AutoStart Automatically start the feature ManualStart Delay the start of the feature until the user requests it to begin"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.AwaiterExtensions.SimpleCoroutineAwaiter-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.AwaiterExtensions.SimpleCoroutineAwaiter-1.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter<T> Processes Coroutine and notifies completion with result. Inheritance Object AwaiterExtensions.SimpleCoroutineAwaiter<T> Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class SimpleCoroutineAwaiter<T> : INotifyCompletion Type Parameters Name Description T The result type. Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods Complete(T, Exception) Declaration public void Complete(T taskResult, Exception e) Parameters Type Name Description T taskResult Exception e GetResult() Declaration public T GetResult() Returns Type Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.AwaiterExtensions.SimpleCoroutineAwaiter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.AwaiterExtensions.SimpleCoroutineAwaiter.html",
    "title": "Class AwaiterExtensions.SimpleCoroutineAwaiter | Mixed Reality Toolkit Documentation",
    "keywords": "Class AwaiterExtensions.SimpleCoroutineAwaiter Processes Coroutine and notifies completion. Inheritance Object AwaiterExtensions.SimpleCoroutineAwaiter Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class SimpleCoroutineAwaiter : INotifyCompletion Properties IsCompleted Declaration public bool IsCompleted { get; } Property Value Type Description Boolean Methods Complete(Exception) Declaration public void Complete(Exception e) Parameters Type Name Description Exception e GetResult() Declaration public void GetResult()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.AwaiterExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.AwaiterExtensions.html",
    "title": "Class AwaiterExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class AwaiterExtensions We could just add a generic GetAwaiter to YieldInstruction and CustomYieldInstruction but instead we add specific methods to each derived class to allow for return values that make the most sense for the specific instruction type. Inheritance Object AwaiterExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class AwaiterExtensions Methods GetAwaiter(AssetBundleCreateRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AssetBundle> GetAwaiter(this AssetBundleCreateRequest instruction) Parameters Type Name Description AssetBundleCreateRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < AssetBundle > GetAwaiter(AssetBundleRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(this AssetBundleRequest instruction) Parameters Type Name Description AssetBundleRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(AsyncOperation) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<AsyncOperation> GetAwaiter(this AsyncOperation instruction) Parameters Type Name Description AsyncOperation instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < AsyncOperation > GetAwaiter(IEnumerator) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<object> GetAwaiter(this IEnumerator coroutine) Parameters Type Name Description IEnumerator coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(WaitForUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForUpdate instruction) Parameters Type Name Description WaitForUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(ResourceRequest) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<Object> GetAwaiter(this ResourceRequest instruction) Parameters Type Name Description ResourceRequest instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter < Object > GetAwaiter(WaitForEndOfFrame) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForEndOfFrame instruction) Parameters Type Name Description WaitForEndOfFrame instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForFixedUpdate) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForFixedUpdate instruction) Parameters Type Name Description WaitForFixedUpdate instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSeconds) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSeconds instruction) Parameters Type Name Description WaitForSeconds instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitForSecondsRealtime) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitForSecondsRealtime instruction) Parameters Type Name Description WaitForSecondsRealtime instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitUntil) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitUntil instruction) Parameters Type Name Description WaitUntil instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(WaitWhile) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter(this WaitWhile instruction) Parameters Type Name Description WaitWhile instruction Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter GetAwaiter<T>(IEnumerator<T>) Declaration public static AwaiterExtensions.SimpleCoroutineAwaiter<T> GetAwaiter<T>(this IEnumerator<T> coroutine) Parameters Type Name Description IEnumerator <T> coroutine Returns Type Description AwaiterExtensions.SimpleCoroutineAwaiter <T> Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.AxisType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.AxisType.html",
    "title": "Enum AxisType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AxisType The AxisType identifies the type of button or input being sent to the framework from a controller. This is mainly information only or for advanced users to understand the input coming directly from the controller. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum AxisType Fields Name Description Digital Digital On/Off input. DualAxis Dual Axis analogue input. None No Specified type. Raw Raw stream from input (proxy only). SingleAxis Single Axis analogue input. SixDof Position AND Rotation analogue input. ThreeDofPosition Position only Axis analogue input. ThreeDofRotation Rotation only Axis analogue input."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.MoveWithCamera.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.MoveWithCamera.html",
    "title": "Class MoveWithCamera | Mixed Reality Toolkit Documentation",
    "keywords": "Class MoveWithCamera A game object with this script attached will follow the main camera's position. This is particularly useful for secondary cameras or sound sources to follow the user around. Inheritance Object MoveWithCamera Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class MoveWithCamera : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.OnLoadStartScene.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.OnLoadStartScene.html",
    "title": "Class OnLoadStartScene | Mixed Reality Toolkit Documentation",
    "keywords": "Class OnLoadStartScene When the button is selected, it triggers starting the specified scene. Inheritance Object OnLoadStartScene Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class OnLoadStartScene : MonoBehaviour Methods Start() Declaration public void Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.OnLookAtRotateByEyeGaze.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.OnLookAtRotateByEyeGaze.html",
    "title": "Class OnLookAtRotateByEyeGaze | Mixed Reality Toolkit Documentation",
    "keywords": "Class OnLookAtRotateByEyeGaze The associated game object will turn depending on which part of the object is looked at: The currently looked at part will move towards the front facing the user. Inheritance Object OnLookAtRotateByEyeGaze Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class OnLookAtRotateByEyeGaze : BaseEyeFocusHandler Methods OnEyeFocusStay() Declaration protected override void OnEyeFocusStay()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.OnSelectVisualizerInputController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.OnSelectVisualizerInputController.html",
    "title": "Class OnSelectVisualizerInputController | Mixed Reality Toolkit Documentation",
    "keywords": "Class OnSelectVisualizerInputController When the button is selected, it triggers starting the specified scene. Inheritance Object OnSelectVisualizerInputController Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class OnSelectVisualizerInputController : BaseEyeFocusHandler, IMixedRealityPointerHandler Fields EventToTrigger Declaration public UnityEvent EventToTrigger Field Value Type Description UnityEvent Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.RotateWithConstSpeedDir.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.RotateWithConstSpeedDir.html",
    "title": "Class RotateWithConstSpeedDir | Mixed Reality Toolkit Documentation",
    "keywords": "Class RotateWithConstSpeedDir The associated GameObject will rotate when RotateTarget() is called based on a given direction and speed. Inheritance Object RotateWithConstSpeedDir Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class RotateWithConstSpeedDir : MonoBehaviour Methods RotateTarget() Rotate game object based on specified rotation speed and Euler angles. Declaration public void RotateTarget()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ScrollRectTransf.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ScrollRectTransf.html",
    "title": "Class ScrollRectTransf | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollRectTransf This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. Inheritance Object PanZoomBase PanZoomBaseRectTransf ScrollRectTransf Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Inherited Members PanZoomBaseRectTransf.Initialize() PanZoomBaseRectTransf.ComputePanSpeed(Single, Single, Single) PanZoomBaseRectTransf.ZoomDir(Boolean) PanZoomBaseRectTransf.ZoomIn() PanZoomBaseRectTransf.ZoomOut() PanZoomBaseRectTransf.UpdatePanZoom() PanZoomBaseRectTransf.UpdateCursorPosInHitBox() PanZoomBase.cursorPos PanZoomBase.scale PanZoomBase.offset PanZoomBase.offsetRate_Zoom PanZoomBase.offsetRate_Pan PanZoomBase.limitPanning PanZoomBase.myEyeTarget PanZoomBase.zoomSpeed PanZoomBase.zoomDir PanZoomBase.dynaZoomInvert PanZoomBase.originalRatio PanZoomBase.originalPivot PanZoomBase.originalScale PanZoomBase.originalOffset PanZoomBase.EyeSaccadeProvider PanZoomBase.AutoPan() PanZoomBase.PanHorizontally(Single) PanZoomBase.PanVertically(Single) PanZoomBase.EnableHandZoom() PanZoomBase.DisableHandZoom() PanZoomBase.ZoomInStart() PanZoomBase.ZoomOutStart() PanZoomBase.ZoomStop() PanZoomBase.ResetNormFixator() PanZoomBase.IncrementNormFixator() PanZoomBase.MyCollider PanZoomBase.LimitScaling(Vector2) PanZoomBase.ZoomIn_Timed() PanZoomBase.ZoomOut_Timed() PanZoomBase.StartFocusing() PanZoomBase.StopFocusing() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ScrollRectTransf : PanZoomBaseRectTransf, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Fields customStartPos Declaration public Vector2 customStartPos Field Value Type Description Vector2 Methods Start() Declaration protected override void Start() Overrides PanZoomBase.Start() Update() Declaration protected override void Update() Overrides PanZoomBase.Update() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ScrollTexture.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.ScrollTexture.html",
    "title": "Class ScrollTexture | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollTexture This script allows to scroll a texture both horizontally and vertically. Inheritance Object PanZoomBase PanZoomBaseTexture ScrollTexture Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler Inherited Members PanZoomBaseTexture.textureRenderer PanZoomBaseTexture.TextureShaderProperty PanZoomBaseTexture.Initialize() PanZoomBaseTexture.Initialize(Single) PanZoomBaseTexture.ComputePanSpeed(Single, Single, Single) PanZoomBaseTexture.UpdatePanZoom() PanZoomBaseTexture.ZoomDir(Boolean) PanZoomBaseTexture.ZoomIn() PanZoomBaseTexture.ZoomOut() PanZoomBaseTexture.UpdateCursorPosInHitBox() PanZoomBase.cursorPos PanZoomBase.scale PanZoomBase.offset PanZoomBase.offsetRate_Zoom PanZoomBase.offsetRate_Pan PanZoomBase.limitPanning PanZoomBase.myEyeTarget PanZoomBase.zoomSpeed PanZoomBase.zoomDir PanZoomBase.dynaZoomInvert PanZoomBase.originalRatio PanZoomBase.originalPivot PanZoomBase.originalScale PanZoomBase.originalOffset PanZoomBase.EyeSaccadeProvider PanZoomBase.AutoPan() PanZoomBase.PanHorizontally(Single) PanZoomBase.PanVertically(Single) PanZoomBase.EnableHandZoom() PanZoomBase.DisableHandZoom() PanZoomBase.ZoomInStart() PanZoomBase.ZoomOutStart() PanZoomBase.ZoomStop() PanZoomBase.ResetNormFixator() PanZoomBase.IncrementNormFixator() PanZoomBase.MyCollider PanZoomBase.LimitScaling(Vector2) PanZoomBase.ZoomIn_Timed() PanZoomBase.ZoomOut_Timed() PanZoomBase.StartFocusing() PanZoomBase.StopFocusing() Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class ScrollTexture : PanZoomBaseTexture, IMixedRealityPointerHandler, IMixedRealityFocusHandler, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler Methods Start() Declaration protected override void Start() Overrides PanZoomBase.Start() Update() Declaration protected override void Update() Overrides PanZoomBase.Update() Implements IMixedRealityPointerHandler IMixedRealityFocusHandler IMixedRealitySourceStateHandler IMixedRealityHandJointHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.SnapTo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.SnapTo.html",
    "title": "Class SnapTo | Mixed Reality Toolkit Documentation",
    "keywords": "Class SnapTo Inheritance Object SnapTo Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class SnapTo : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TriggerZonePlaceObjsWithin.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TriggerZonePlaceObjsWithin.html",
    "title": "Class TriggerZonePlaceObjsWithin | Mixed Reality Toolkit Documentation",
    "keywords": "Class TriggerZonePlaceObjsWithin Inheritance Object TriggerZonePlaceObjsWithin Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TriggerZonePlaceObjsWithin : MonoBehaviour Methods TargetDropped() Public method that can be called externally to indicate that one of the targets has been dropped somewhere. Declaration public void TargetDropped()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Classes AudioFeedbackPlayer AudioFeedbackPlayer eases playing single audio feedback. Good for audio effects. BlendOut This script allows for dynamically blending out a target after it has been looked at for a certain amount of time. ChangeRenderMode This class allows to change the render mode on-the-fly. This is, for example, useful when trying to show a semi-transparent preview of an target. ChangeSize This script allows for dynamically changing the size of a GameObject when it is looked at. This is for example useful for better legibility of small text. ColorTap DoNotRender Simple class that automatically hides a target on startup. This is, for example, useful for trigger zones and visual guides that are useful to show in the Editor, but not in the final application. DrawOnTexture DwellSelection EyeCalibrationChecker Checks whether the user is calibrated and prompts a notification to encourage the user to calibrate. EyeTrackingDemoUtils General useful utility functions. FaceUser The associated game object will turn depending on the user's eye gaze: The currently looked at part will move towards the front, facing the user. FollowEyeGaze Sample for allowing a GameObject to follow the user's eye gaze at a given distance of \"DefaultDistanceInMeters\". FollowEyeGazeGazeProvider Sample for allowing the game object that this script is attached to follow the user's eye gaze at a given distance of \"DefaultDistanceInMeters\". GrabReleaseDetector HitBehaviorDestroyOnSelect Destroys the game object when selected and optionally plays a sound or animation when destroyed. KeepFacingCamera This script continuously updates the orientation of the associated game object to keep facing the camera/user. KeepThisAlive Enforces to keep this GameObject alive across different scenes. LoadAdditiveScene When the button is selected, it triggers starting the specified scene. LoadProfilesOnStartup Automatically loads a given Mixed Reality Toolkit configuration profile when loading up the scene. MoveObjByEyeGaze MoveWithCamera A game object with this script attached will follow the main camera's position. This is particularly useful for secondary cameras or sound sources to follow the user around. OnLoadStartScene When the button is selected, it triggers starting the specified scene. OnLookAtRotateByEyeGaze The associated game object will turn depending on which part of the object is looked at: The currently looked at part will move towards the front facing the user. OnSelectVisualizerInputController When the button is selected, it triggers starting the specified scene. PanZoomBase This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. PanZoomBaseRectTransf This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. PanZoomBaseTexture This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. PanZoomRectTransf This script allows to scroll a texture both horizontally and vertically. PanZoomTexture This script allows to scroll a texture both horizontally and vertically. ParticleHeatmap ParticleHeatmapParticleData RotateWithConstSpeedDir The associated GameObject will rotate when RotateTarget() is called based on a given direction and speed. ScrollRectTransf This script allows to zoom into and pan the texture of a GameObject. It also allows for scrolling by restricting panning to one direction. ScrollTexture This script allows to scroll a texture both horizontally and vertically. SnapTo SpeechVisualFeedback StatusText TargetEventArgs Class specifying targeting event arguments. TargetGroupCreatorRadial Handles the creation of a group of targets based on a list of given templates. TargetGroupIterator Iterates through a given set of targets based on a required TargetGroupCreator. TargetMoveToCamera ToggleGameObject TransportToRespawnLocation The associated GameObject acts as a teleporter to a referenced respawn location. TriggerOnStartup Allows for adding custom behaviors that can be assigned in the Editor and triggered when the scene is loaded. TriggerZonePlaceObjsWithin Enums ChangeRenderMode.BlendMode PlacementSurfaces Delegates TargetGroupIterator.TargetGroupEventHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor.TestGltfLoadingEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor.TestGltfLoadingEditor.html",
    "title": "Class TestGltfLoadingEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestGltfLoadingEditor Editor script for TestGltfLoading scene Inheritance Object TestGltfLoadingEditor Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor Assembly : cs.temp.dll.dll Syntax public class TestGltfLoadingEditor : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.Gltf.Editor Classes TestGltfLoadingEditor Editor script for TestGltfLoading scene"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader Classes MaterialMatrix Builds a matrix of spheres demonstrating a spectrum of two material properties. MaterialMatrixEditor Editor to build a matrix of spheres demonstrating a spectrum of material properties."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SystemKeyboardExample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SystemKeyboardExample.html",
    "title": "Class SystemKeyboardExample | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemKeyboardExample An example script that delegates keyboard API access either to the WMR workaround (MixedRealityKeyboard) or Unity's TouchScreenKeyboard API depending on the platform. Inheritance Object SystemKeyboardExample Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class SystemKeyboardExample : MonoBehaviour Remarks Note that like Unity's TouchScreenKeyboard API, this script only supports WSA, iOS, and Android. Methods OpenSystemKeyboard() Opens a platform specific keyboard. Declaration public void OpenSystemKeyboard()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.TetheredPlacement.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.TetheredPlacement.html",
    "title": "Class TetheredPlacement | Mixed Reality Toolkit Documentation",
    "keywords": "Class TetheredPlacement Helper script to respawn objects if they go too far from their original position. Useful for objects that will fall forever etc. Inheritance Object TetheredPlacement Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class TetheredPlacement : MonoBehaviour Fields DistanceThreshold Declaration public float DistanceThreshold Field Value Type Description Single Methods LockSpawnPoint() Declaration public void LockSpawnPoint()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ToggleBoundingBox.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ToggleBoundingBox.html",
    "title": "Class ToggleBoundingBox | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToggleBoundingBox Inheritance Object ToggleBoundingBox Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax [Obsolete(\"This component is no longer supported\", true)] public class ToggleBoundingBox : MonoBehaviour Fields boundingBox Declaration public BoundingBox boundingBox Field Value Type Description BoundingBox Methods ToggleBoundingBoxActiveState() Declaration public void ToggleBoundingBoxActiveState()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ToggleSpatialMeshVisualization.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ToggleSpatialMeshVisualization.html",
    "title": "Class ToggleSpatialMeshVisualization | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToggleSpatialMeshVisualization This class controls the visualization of the spatial mesh. Inheritance Object ToggleSpatialMeshVisualization Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class ToggleSpatialMeshVisualization : MonoBehaviour Methods ToggleSpatialMeshVisual(Boolean) Toggles the state of the mesh display option. Declaration public void ToggleSpatialMeshVisual(bool mode) Parameters Type Name Description Boolean mode"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors.InspectorFieldsExampleInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors.InspectorFieldsExampleInspector.html",
    "title": "Class InspectorFieldsExampleInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class InspectorFieldsExampleInspector Inheritance Object InspectorFieldsExampleInspector Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors Assembly : cs.temp.dll.dll Syntax public class InspectorFieldsExampleInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos.Utilities.InspectorFields.Inspectors Classes InspectorFieldsExampleInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Examples.Demos Classes BoundaryVisualizationDemo Demo class to show different ways of using the boundary system and visualizing the data. BoundingBoxExampleTest ChangeManipulation Test script that forcefully stops manipulation on the manipulatedObject when it collides with the collisionTrigger ClearSpatialObservations This class demonstrates clearing spatial observations. ColorChanger Change the color of the material on a renderer. Useful for visualizing button presses. ColorChangerUnityUI Change the color of the material on a UnityUI Graphic (ex. Image). Useful for visualizing button presses. DebugTextOutput DemoSpatialMeshHandler This class is an example of the IMixedRealitySpatialAwarenessObservationHandler<T> interface. It keeps track of the IDs of each mesh and tracks the number of updates they have received. DemoTouchButton DisablePointersExample This example demonstrates how to turn pointers on and off by specifying custom behaviors. GridObjectLayoutControl Provides functions to control layout of GridObjectCollection as well as to output positions of child controls to help with building GridObjectCollectionTests. HandInteractionTouch HandInteractionTouchRotate InputDataExample This class demonstrates how to query input data either by using InputUtils or by directly accessing InteractionMappings from all active controllers. InputDataExampleGizmo Attach this component to a game object to synchronize the objects position and rotation to the given input type. If the input data is not available, the component will hide the object by disabling all renderers. LaunchUri LoFiFilterSelection MixedRealityCapabilityDemo Script that demonstrates querying the Mixed Reality Toolkit for platform capabilities. PrimaryPointerHandlerExample Rotator ShowSliderValue SliderChangeColor SliderLunarLander SolverExampleManager SpawnOnPointerEvent SystemKeyboardExample An example script that delegates keyboard API access either to the WMR workaround (MixedRealityKeyboard) or Unity's TouchScreenKeyboard API depending on the platform. TetheredPlacement Helper script to respawn objects if they go too far from their original position. Useful for objects that will fall forever etc. ToggleBoundingBox ToggleSpatialMeshVisualization This class controls the visualization of the spatial mesh."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.ListItemDwell.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.ListItemDwell.html",
    "title": "Class ListItemDwell | Mixed Reality Toolkit Documentation",
    "keywords": "Class ListItemDwell Dwell sample to work on a list of dwell targets Inheritance Object BaseDwellSample ListItemDwell Inherited Members BaseDwellSample.dwellVisualImage BaseDwellSample.targetButton BaseDwellSample.dwellHandler BaseDwellSample.isDwelling BaseDwellSample.DwellStarted(IMixedRealityPointer) BaseDwellSample.DwellIntended(IMixedRealityPointer) BaseDwellSample.DwellCanceled(IMixedRealityPointer) Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class ListItemDwell : BaseDwellSample Methods Awake() Declaration protected override void Awake() Overrides BaseDwellSample.Awake() ButtonExecute() Declaration public override void ButtonExecute() Overrides BaseDwellSample.ButtonExecute() DwellCompleted(IMixedRealityPointer) Declaration public override void DwellCompleted(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Overrides BaseDwellSample.DwellCompleted(IMixedRealityPointer) Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.ToggleDwellSample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.ToggleDwellSample.html",
    "title": "Class ToggleDwellSample | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToggleDwellSample Example script to demonstrate a toggle button using dwell Inheritance Object BaseDwellSample ToggleDwellSample Inherited Members BaseDwellSample.dwellVisualImage BaseDwellSample.targetButton BaseDwellSample.dwellHandler BaseDwellSample.isDwelling BaseDwellSample.Awake() BaseDwellSample.DwellStarted(IMixedRealityPointer) Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class ToggleDwellSample : BaseDwellSample Methods ButtonExecute() Declaration public override void ButtonExecute() Overrides BaseDwellSample.ButtonExecute() DwellCanceled(IMixedRealityPointer) Declaration public override void DwellCanceled(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Overrides BaseDwellSample.DwellCanceled(IMixedRealityPointer) DwellCompleted(IMixedRealityPointer) Declaration public override void DwellCompleted(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Overrides BaseDwellSample.DwellCompleted(IMixedRealityPointer) DwellIntended(IMixedRealityPointer) Declaration public override void DwellIntended(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Overrides BaseDwellSample.DwellIntended(IMixedRealityPointer) Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Dwell | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Dwell Classes BaseDwellSample Example script to demonstrate dwell visuals in sample scene CustomDwellHandler Example to demonstrate DwellHandler override DwellHandler Use this component to add a Dwell modality ( https://docs.microsoft.com/windows/mixed-reality/gaze-and-dwell ) to the UI target. DwellProfile DwellProfileWithDecay Custom profile for the extended dwell profile sample DwellUnityEvent Unity event for a dwell event. Contains the pointer reference. InstantDwellSample Dwell sample with no DwellIntended delay ListItemDwell Dwell sample to work on a list of dwell targets ToggleDwellSample Example script to demonstrate a toggle button using dwell Enums DwellHandler.DwellStateType None = 0 - Default state FocusGained - State reached when Focus enters target DwellIntended - State reached when Focus stays on target for dwellIntentDelay seconds. Signifies user's intent to interact with the target. DwellStarted - State reached when Focus stays on target for dwellIntentDelay + dwellStartDelay seconds. Typically tied to invoke feedback for dwell. DwellCompleted - State reached when Focus stays on target for dwellIntentDelay + dwellStartDelay + timeToCompleteDwell seconds. Typically invokes the button clicked event. DwellCanceled - State reached when DwellStarted state is reached but focus exits the target before timeToCompleteDwell."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Examples.ScrollableListPopulator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Examples.ScrollableListPopulator.html",
    "title": "Class ScrollableListPopulator | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollableListPopulator Simple demonstration of how to instantiate a ScrollingObjectCollection as well as use lazy loading to mitigate the perf cost of a large list of items. Inheritance Object ScrollableListPopulator Namespace : Microsoft.MixedReality.Toolkit.Experimental.Examples Assembly : cs.temp.dll.dll Syntax public class ScrollableListPopulator : MonoBehaviour Properties DynamicItem Object to duplicate in ScrollCollection . Declaration public GameObject DynamicItem { get; set; } Property Value Type Description GameObject ItemsPerFrame Number of items to load each frame during lazy load Declaration public int ItemsPerFrame { get; set; } Property Value Type Description Int32 LazyLoad Demonstrate lazy loading Declaration public bool LazyLoad { get; set; } Property Value Type Description Boolean Loader Indeterminate loader to hide / show for LazyLoad Declaration public GameObject Loader { get; set; } Property Value Type Description GameObject NumItems Number of items to generate Declaration public int NumItems { get; set; } Property Value Type Description Int32 ScrollCollection The ScrollingObjectCollection to populate, if left empty. the populator will create on your behalf. Declaration public ScrollingObjectCollection ScrollCollection { get; set; } Property Value Type Description ScrollingObjectCollection Methods MakeScrollingList() Declaration public void MakeScrollingList()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Examples.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Examples.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Examples | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Examples Classes ScrollableListPopulator Simple demonstration of how to instantiate a ScrollingObjectCollection as well as use lazy loading to mitigate the perf cost of a large list of items."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Input.InputSystemManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Input.InputSystemManager.html",
    "title": "Class InputSystemManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSystemManager Service manager supporting running the input system, without requiring the MixedRealityToolkit object. Inheritance Object BaseServiceManager InputSystemManager Implements IMixedRealityServiceRegistrar Inherited Members BaseServiceManager.registeredServices BaseServiceManager.Update() BaseServiceManager.OnEnable() BaseServiceManager.OnDisable() BaseServiceManager.GetService<T>(String, Boolean) BaseServiceManager.GetServices<T>(String) BaseServiceManager.IsServiceRegistered<T>(String) BaseServiceManager.RegisterService<T>(T) BaseServiceManager.RegisterService<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.UnregisterService<T>(String) BaseServiceManager.UnregisterService<T>(T) BaseServiceManager.Initialize<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.Uninitialize<T>() Namespace : Microsoft.MixedReality.Toolkit.Experimental.Input Assembly : cs.temp.dll.dll Syntax public class InputSystemManager : BaseServiceManager, IMixedRealityServiceRegistrar Methods OnDestroy() Declaration protected override void OnDestroy() Overrides BaseServiceManager.OnDestroy() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Input.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Input.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Input | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Input Classes InputSystemManager Service manager supporting running the input system, without requiring the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Inspectors.ScrollingObjectCollectionInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Inspectors.ScrollingObjectCollectionInspector.html",
    "title": "Class ScrollingObjectCollectionInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollingObjectCollectionInspector Inheritance Object ScrollingObjectCollectionInspector Namespace : Microsoft.MixedReality.Toolkit.Experimental.Inspectors Assembly : cs.temp.dll.dll Syntax public class ScrollingObjectCollectionInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollectionNode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollectionNode.html",
    "title": "Class ScrollingObjectCollectionNode | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollingObjectCollectionNode A ObjectCollectionNode specific for ScrollingObjectCollection . Inheritance Object ScrollingObjectCollectionNode Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class ScrollingObjectCollectionNode : ObjectCollectionNode Constructors ScrollingObjectCollectionNode() Declaration public ScrollingObjectCollectionNode() ScrollingObjectCollectionNode(ObjectCollectionNode) Declaration public ScrollingObjectCollectionNode(ObjectCollectionNode baseCollection) Parameters Type Name Description ObjectCollectionNode baseCollection Fields isClipped Declaration public bool isClipped Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.SliderInputField.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.SliderInputField.html",
    "title": "Class SliderInputField | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderInputField This is an input field that overrides getting deselected Inheritance Object SliderInputField Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class SliderInputField : TMP_InputField Methods OnDeselect(BaseEventData) Override OnDeselect Declaration public override void OnDeselect(BaseEventData eventData) Parameters Type Name Description BaseEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.SymbolDisableHighlight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.SymbolDisableHighlight.html",
    "title": "Class SymbolDisableHighlight | Mixed Reality Toolkit Documentation",
    "keywords": "Class SymbolDisableHighlight Updates the visual state of the text based on the buttons state Inheritance Object SymbolDisableHighlight Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class SymbolDisableHighlight : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.SymbolKeyboard.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.SymbolKeyboard.html",
    "title": "Class SymbolKeyboard | Mixed Reality Toolkit Documentation",
    "keywords": "Class SymbolKeyboard This class switches back and forth between two symbol boards that otherwise do not fit on the keyboard entirely Inheritance Object SymbolKeyboard Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class SymbolKeyboard : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.UICollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.UICollection.html",
    "title": "Class UICollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class UICollection This component represents and ordered collection of UI elements. You can add to the UICollection by either dropping UI elements in the UI element this component is attached to in the Editor or by calling the AddItem(RectTransform) method. UI elements that are added to this collection via the Editor will be automatically arranged when this component executes. To use this component attach it to a UI element (a GameObject with a RectTransform component) such as an Image or Panel. Inheritance Object UICollection Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class UICollection : MonoBehaviour Properties HorizontalSpacing Declaration public float HorizontalSpacing { get; set; } Property Value Type Description Single Items A list of items in this collection. This list should not be modified directly. Instead use AddItem(RectTransform) and RemoveItem(RectTransform). Declaration public List<RectTransform> Items { get; } Property Value Type Description List < RectTransform > MaxHeight Declaration public float MaxHeight { get; set; } Property Value Type Description Single MaxWidth Declaration public float MaxWidth { get; set; } Property Value Type Description Single VerticalSpacing Declaration public float VerticalSpacing { get; set; } Property Value Type Description Single Methods AddItem(RectTransform) Adds a UI element to the collection. This will cause the collection layout to update immediately. NOTE: The added item's RectTransform will get modified in order to layout properly in this collection. Declaration public void AddItem(RectTransform item) Parameters Type Name Description RectTransform item The UI element to add to the collection. RemoveAllItems() Removes all UI elements added to the collection. This will cause the collection layout to update immediately. NOTE: This method does not call Destroy removed items. Declaration public void RemoveAllItems() RemoveItem(RectTransform) Removes a UI element from the collection. This will cause the collection layout to update immediately. NOTE: This method does not call Destroy removed items. Declaration public void RemoveItem(RectTransform item) Parameters Type Name Description RectTransform item The UI element to remove from the collection. UpdateLayout() Declaration protected virtual void UpdateLayout()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.UI | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.UI Classes AxisSlider Axis slider is a script to lock a bar across a specific axis. CapsLockHighlight This class toggles the Caps Lock image based on the NonNativeKeyboard's IsCapsLocked state KeyboardKeyFunc Represents a key on the keyboard that has a function. KeyboardTest This component links the NonNativeKeyboard to a TMP_InputField Put it on the TMP_InputField and assign the NonNativeKeyboard.prefab KeyboardValueKey Represents a key on the keyboard that has a string value for input. MixedRealityKeyboard Class that can launch and hide a system keyboard specifically for HoloLens 2. Implements a workaround for UWP TouchScreenKeyboard bug which prevents UWP keyboard from showing up again after it is closed. Unity bug tracking the issue https://fogbugz.unity3d.com/default.asp?1137074_rttdnt8t1lccmtd3 MixedRealityKeyboardPreview Component to manage the visuals for a Mixed Reality Keyboard Preview window. NonNativeKeyboard A simple general use keyboard that is ideal for AR/VR applications that do not provide a native keyboard. ScrollingObjectCollection A set of child objects organized in a series of Rows/Columns that can scroll in either the X or Y direction. ScrollingObjectCollection.ScrollEvent The UnityEvent type the ScrollingObjectCollection sends. GameObject is the object the fired the scroll. ScrollingObjectCollectionNode A ObjectCollectionNode specific for ScrollingObjectCollection . SliderInputField This is an input field that overrides getting deselected SymbolDisableHighlight Updates the visual state of the text based on the buttons state SymbolKeyboard This class switches back and forth between two symbol boards that otherwise do not fit on the keyboard entirely UICollection This component represents and ordered collection of UI elements. You can add to the UICollection by either dropping UI elements in the UI element this component is attached to in the Editor or by calling the AddItem(RectTransform) method. UI elements that are added to this collection via the Editor will be automatically arranged when this component executes. To use this component attach it to a UI element (a GameObject with a RectTransform component) such as an Image or Panel. Enums AxisSlider.EAxis KeyboardKeyFunc.Function Possible functionality for a button. NonNativeKeyboard.LayoutType Layout type enum for the type of keyboard layout to use. This is used when spawning to enable the correct keys based on layout type. ScrollingObjectCollection.ScrollDirectionType The direction in which a ScrollingObjectCollection can scroll. ScrollingObjectCollection.VelocityType How velocity is applied to a ScrollingObjectCollection when a scroll is released."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArEnumConversion.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArEnumConversion.html",
    "title": "Class ArEnumConversion | Mixed Reality Toolkit Documentation",
    "keywords": "Class ArEnumConversion Class that performs conversions between Unity's AR enum values and the provider's custom enums. Inheritance Object ArEnumConversion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public static class ArEnumConversion Methods ToUnityTrackedPose(ArTrackedPose) Converts from a ArTrackedPose to a Unity tracked pose value. Declaration public static TrackedPoseDriver.TrackedPose ToUnityTrackedPose(ArTrackedPose pose) Parameters Type Name Description ArTrackedPose pose Value to convert. Returns Type Description TrackedPoseDriver.TrackedPose Unity tracked pose equivalent of the ArTrackedPose . ToUnityTrackingType(ArTrackingType) Converts from a ArTrackingType to a Unity tracking type value. Declaration public static TrackedPoseDriver.TrackingType ToUnityTrackingType(ArTrackingType trackingType) Parameters Type Name Description ArTrackingType trackingType Value to convert. Returns Type Description TrackedPoseDriver.TrackingType Unity tracking type equivalent of the ArTrackingType . ToUnityUpdateType(ArUpdateType) Converts from a ArUpdateType to a Unity update type value. Declaration public static TrackedPoseDriver.UpdateType ToUnityUpdateType(ArUpdateType updateType) Parameters Type Name Description ArUpdateType updateType Value to convert. Returns Type Description TrackedPoseDriver.UpdateType Unity update type equivalent of the ArUpdateType ."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArTrackedPose.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UnityAR.ArTrackedPose.html",
    "title": "Enum ArTrackedPose | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ArTrackedPose Enumeration indicating the available types of augmented reality tracking poses. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UnityAR Assembly : cs.temp.dll.dll Syntax public enum ArTrackedPose Fields Name Description Center The center eye of a head mounted device, this is typically the default for most such devices. ColorCamera The color camera of a mobile (ex: phone) device. Head The \"head\" eye of a head mounted device, this location is often slightly above the center eye for most such devices. LeftEye The left eye of a head mounted device. LeftPose The left hand controller pose. RightEye The left eye of a head mounted device. RightPose The right hand controller pose."
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Classes CameraFaderQuad Quad-based implementation if ICameraFader. Instantiates quads in front of cameras to achieve fade out / in effect. LoadContentScene Utility class to load scenes through MRTK Scene System using a scene transition. Otherwise, it uses Scene System's LoadContent() SceneTransitionService SceneTransitionServiceProfile Interfaces ICameraFader Basic interface for fading in / out a color on a camera. ISceneTransitionService Enums CameraFaderState CameraFaderTargets"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.BasicLostTrackingVisual.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.BasicLostTrackingVisual.html",
    "title": "Class BasicLostTrackingVisual | Mixed Reality Toolkit Documentation",
    "keywords": "Class BasicLostTrackingVisual A basic lost tracking visual for HoloLens devices. Inheritance Object BasicLostTrackingVisual Implements ILostTrackingVisual Namespace : Microsoft.MixedReality.Toolkit.Extensions.Tracking Assembly : cs.temp.dll.dll Syntax public class BasicLostTrackingVisual : MonoBehaviour, ILostTrackingVisual Properties Enabled Completely enables or disables the visual. Should probably be linked to the root game object's active value. Declaration public bool Enabled { get; set; } Property Value Type Description Boolean Methods ResetVisual() Resets the visual state to default. Declaration public void ResetVisual() SetLayer(Int32) Sets all visual components to the layer provided. Declaration public void SetLayer(int layer) Parameters Type Name Description Int32 layer The layer to set for the visual components. Implements ILostTrackingVisual"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.ILostTrackingService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.ILostTrackingService.html",
    "title": "Interface ILostTrackingService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface ILostTrackingService A service that detects when tracking is lost on WSA devices. When tracking is lost, the service displays a visual indicator and sets the main camera's culling mask to hide all other objects. When tracking is restored, the camera mask is restored and the visual indicator is hidden. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Extensions.Tracking Assembly : cs.temp.dll.dll Syntax public interface ILostTrackingService : IMixedRealityExtensionService, IMixedRealityService, IDisposable Properties OnTrackingLost Called when tracking is lost. (When UnityEngine.VR.WSA.PositionalLocatorState is Inhibited.) Declaration Action OnTrackingLost { get; set; } Property Value Type Description Action OnTrackingRestored Called when tracking is stored (UnityEngine.VR.WSA.PositionalLocatorState is anything other than Inhibited.) Declaration Action OnTrackingRestored { get; set; } Property Value Type Description Action TrackingLost True if tracking is lost, false if tracking is present. Declaration bool TrackingLost { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.ILostTrackingVisual.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.ILostTrackingVisual.html",
    "title": "Interface ILostTrackingVisual | Mixed Reality Toolkit Documentation",
    "keywords": "Interface ILostTrackingVisual Interface for a lost tracking visual. Used by the ILostTrackingService extension. Namespace : Microsoft.MixedReality.Toolkit.Extensions.Tracking Assembly : cs.temp.dll.dll Syntax public interface ILostTrackingVisual Properties Enabled Completely enables or disables the visual. Should probably be linked to the root game object's active value. Declaration bool Enabled { get; set; } Property Value Type Description Boolean Methods ResetVisual() Resets the visual state to default. Declaration void ResetVisual() SetLayer(Int32) Sets all visual components to the layer provided. Declaration void SetLayer(int layer) Parameters Type Name Description Int32 layer The layer to set for the visual components."
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.LostTrackingService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.LostTrackingService.html",
    "title": "Class LostTrackingService | Mixed Reality Toolkit Documentation",
    "keywords": "Class LostTrackingService A service that detects when tracking is lost on WSA devices. When tracking is lost, the service displays a visual indicator and sets the main camera's culling mask to hide all other objects. When tracking is restored, the camera mask is restored and the visual indicator is hidden. Inheritance Object BaseService BaseExtensionService LostTrackingService Implements ILostTrackingService IMixedRealityExtensionService IMixedRealityService IDisposable Inherited Members BaseExtensionService.Registrar BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Extensions.Tracking Assembly : cs.temp.dll.dll Syntax public class LostTrackingService : BaseExtensionService, ILostTrackingService, IMixedRealityExtensionService, IMixedRealityService, IDisposable Constructors LostTrackingService(IMixedRealityServiceRegistrar, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public LostTrackingService(IMixedRealityServiceRegistrar registrar, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. LostTrackingService(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public LostTrackingService(string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties OnTrackingLost Called when tracking is lost. (When UnityEngine.VR.WSA.PositionalLocatorState is Inhibited.) Declaration public Action OnTrackingLost { get; set; } Property Value Type Description Action OnTrackingRestored Called when tracking is stored (UnityEngine.VR.WSA.PositionalLocatorState is anything other than Inhibited.) Declaration public Action OnTrackingRestored { get; set; } Property Value Type Description Action TrackingLost True if tracking is lost, false if tracking is present. Declaration public bool TrackingLost { get; } Property Value Type Description Boolean Methods Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() Implements ILostTrackingService IMixedRealityExtensionService IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.LostTrackingServiceProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.LostTrackingServiceProfile.html",
    "title": "Class LostTrackingServiceProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class LostTrackingServiceProfile The profile definition for an ILostTrackingService . Inheritance Object BaseMixedRealityProfile LostTrackingServiceProfile Namespace : Microsoft.MixedReality.Toolkit.Extensions.Tracking Assembly : cs.temp.dll.dll Syntax public class LostTrackingServiceProfile : BaseMixedRealityProfile Properties HaltAudioOnTrackingLost If true, the service will pause audio while tracking is lost. Declaration public bool HaltAudioOnTrackingLost { get; } Property Value Type Description Boolean HaltTimeWhileTrackingLost If true, the service will set timescale to 0 while tracking is lost. Declaration public bool HaltTimeWhileTrackingLost { get; } Property Value Type Description Boolean TrackingLostCullingMask The culling mask to use when tracking is lost. The tracking lost visual layer is automatically included. Declaration public LayerMask TrackingLostCullingMask { get; } Property Value Type Description LayerMask TrackingLostVisualLayer The layer used to display the lost tracking visual. Declaration public int TrackingLostVisualLayer { get; } Property Value Type Description Int32 TrackingLostVisualPrefab Prefab for the lost tracking visual. Must include a component that implements ILostTrackingVisual. A radial solver or tagalong script is recommended as well. Declaration public GameObject TrackingLostVisualPrefab { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.Tracking.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Extensions.Tracking | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Extensions.Tracking Classes BasicLostTrackingVisual A basic lost tracking visual for HoloLens devices. LostTrackingService A service that detects when tracking is lost on WSA devices. When tracking is lost, the service displays a visual indicator and sets the main camera's culling mask to hide all other objects. When tracking is restored, the camera mask is restored and the visual indicator is hidden. LostTrackingServiceProfile The profile definition for an ILostTrackingService . Interfaces ILostTrackingService A service that detects when tracking is lost on WSA devices. When tracking is lost, the service displays a visual indicator and sets the main camera's culling mask to hide all other objects. When tracking is restored, the camera mask is restored and the visual indicator is hidden. ILostTrackingVisual Interface for a lost tracking visual. Used by the ILostTrackingService extension."
  },
  "api/Microsoft.MixedReality.Toolkit.FloatExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.FloatExtensions.html",
    "title": "Class FloatExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class FloatExtensions Extension methods for the .Net Float struct Inheritance Object FloatExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class FloatExtensions Methods Approximately(Single, Single, Single) Checks if two numbers are approximately equal. Similar to Mathf.Approximately(float, float) , but the tolerance can be specified. Declaration public static bool Approximately(this float number, float other, float tolerance) Parameters Type Name Description Single number One of the numbers to compare. Single other The other number to compare. Single tolerance The amount of tolerance to allow while still considering the numbers approximately equal. Returns Type Description Boolean True if the difference between the numbers is less than or equal to the tolerance, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseGenericInputSource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseGenericInputSource.html",
    "title": "Class BaseGenericInputSource | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseGenericInputSource Base class for input sources that don't inherit from MonoBehaviour. Inheritance Object BaseGenericInputSource Implements IMixedRealityInputSource IMixedRealityEventSource IEqualityComparer IDisposable Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class BaseGenericInputSource : IMixedRealityInputSource, IMixedRealityEventSource, IEqualityComparer, IDisposable Remarks This base class does not support adding or removing pointers, because many will never pass pointers in their constructors and will fall back to either the Gaze or Mouse Pointer. Constructors BaseGenericInputSource(String, IMixedRealityPointer[], InputSourceType) Constructor. Declaration public BaseGenericInputSource(string name, IMixedRealityPointer[] pointers = null, InputSourceType sourceType = InputSourceType.Other) Parameters Type Name Description String name IMixedRealityPointer [] pointers InputSourceType sourceType Properties Pointers Array of pointers associated with this input source. Declaration public virtual IMixedRealityPointer[] Pointers { get; } Property Value Type Description IMixedRealityPointer [] SourceId The Unique Source Id of this Event Source. Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration public string SourceName { get; } Property Value Type Description String SourceType The type of input source this object represents. Declaration public InputSourceType SourceType { get; set; } Property Value Type Description InputSourceType Methods Dispose() Dispose. Declaration public virtual void Dispose() Equals(IMixedRealityInputSource, IMixedRealityInputSource) Declaration public static bool Equals(IMixedRealityInputSource left, IMixedRealityInputSource right) Parameters Type Name Description IMixedRealityInputSource left IMixedRealityInputSource right Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() Implements IMixedRealityInputSource IMixedRealityEventSource IEqualityComparer IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseHand.html",
    "title": "Class BaseHand | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseHand Inheritance Object BaseController BaseHand SimulatedHand Implements IMixedRealityHand IMixedRealityController Inherited Members BaseController.DefaultInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseHand : BaseController, IMixedRealityHand, IMixedRealityController Constructors BaseHand(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration protected BaseHand(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultLeftHandedInteractions The Default Left Handed interactions for this controller. Declaration public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultLeftHandedInteractions DefaultRightHandedInteractions The Default Right Handed interactions for this controller. Declaration public override MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultRightHandedInteractions HandRay Declaration protected HandRay HandRay { get; } Property Value Type Description HandRay IsInPointingPose Declaration public override bool IsInPointingPose { get; } Property Value Type Description Boolean Overrides BaseController.IsInPointingPose Methods GetPalmNormal() Declaration protected Vector3 GetPalmNormal() Returns Type Description Vector3 SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness, if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) TryGetJoint(TrackedHandJoint, out MixedRealityPose) Declaration public abstract bool TryGetJoint(TrackedHandJoint joint, out MixedRealityPose pose) Parameters Type Name Description TrackedHandJoint joint MixedRealityPose pose Returns Type Description Boolean UpdateVelocity() Declaration protected void UpdateVelocity() Implements IMixedRealityHand IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseHandVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseHandVisualizer.html",
    "title": "Class BaseHandVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseHandVisualizer Inheritance Object BaseHandVisualizer Implements IMixedRealityHandVisualizer IMixedRealityControllerVisualizer IMixedRealitySourceStateHandler IMixedRealityHandJointHandler IMixedRealityHandMeshHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class BaseHandVisualizer : MonoBehaviour, IMixedRealityHandVisualizer, IMixedRealityControllerVisualizer, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler, IMixedRealityHandMeshHandler, IEventSystemHandler Fields handMeshFilter Declaration protected MeshFilter handMeshFilter Field Value Type Description MeshFilter joints Declaration protected readonly Dictionary<TrackedHandJoint, Transform> joints Field Value Type Description Dictionary < TrackedHandJoint , Transform > Properties Controller Declaration public IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController GameObjectProxy Declaration public GameObject GameObjectProxy { get; } Property Value Type Description GameObject Handedness Declaration public virtual Handedness Handedness { get; set; } Property Value Type Description Handedness Methods OnHandMeshUpdated(InputEventData<HandMeshInfo>) Declaration public void OnHandMeshUpdated(InputEventData<HandMeshInfo> eventData) Parameters Type Name Description InputEventData < HandMeshInfo > eventData TryGetJointTransform(TrackedHandJoint, out Transform) Declaration public bool TryGetJointTransform(TrackedHandJoint joint, out Transform jointTransform) Parameters Type Name Description TrackedHandJoint joint Transform jointTransform Returns Type Description Boolean Explicit Interface Implementations IMixedRealityHandJointHandler.OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>>) Declaration void IMixedRealityHandJointHandler.OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>> eventData) Parameters Type Name Description InputEventData < IDictionary < TrackedHandJoint , MixedRealityPose >> eventData IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) Declaration void IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) Declaration void IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Implements IMixedRealityHandVisualizer IMixedRealityControllerVisualizer IMixedRealitySourceStateHandler IMixedRealityHandJointHandler IMixedRealityHandMeshHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRResources.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRResources.html",
    "title": "Class CVRResources | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRResources Inheritance Object CVRResources Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRResources Methods GetResourceFullPath(String, String, StringBuilder, UInt32) Declaration public uint GetResourceFullPath(string pchResourceName, string pchResourceTypeDirectory, StringBuilder pchPathBuffer, uint unBufferLen) Parameters Type Name Description String pchResourceName String pchResourceTypeDirectory StringBuilder pchPathBuffer UInt32 unBufferLen Returns Type Description UInt32 LoadSharedResource(String, String, UInt32) Declaration public uint LoadSharedResource(string pchResourceName, string pchBuffer, uint unBufferLen) Parameters Type Name Description String pchResourceName String pchBuffer UInt32 unBufferLen Returns Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRScreenshots.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRScreenshots.html",
    "title": "Class CVRScreenshots | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRScreenshots Inheritance Object CVRScreenshots Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRScreenshots Methods GetScreenshotPropertyFilename(UInt32, EVRScreenshotPropertyFilenames, StringBuilder, UInt32, ref EVRScreenshotError) Declaration public uint GetScreenshotPropertyFilename(uint screenshotHandle, EVRScreenshotPropertyFilenames filenameType, StringBuilder pchFilename, uint cchFilename, ref EVRScreenshotError pError) Parameters Type Name Description UInt32 screenshotHandle EVRScreenshotPropertyFilenames filenameType StringBuilder pchFilename UInt32 cchFilename EVRScreenshotError pError Returns Type Description UInt32 GetScreenshotPropertyType(UInt32, ref EVRScreenshotError) Declaration public EVRScreenshotType GetScreenshotPropertyType(uint screenshotHandle, ref EVRScreenshotError pError) Parameters Type Name Description UInt32 screenshotHandle EVRScreenshotError pError Returns Type Description EVRScreenshotType HookScreenshot(EVRScreenshotType[]) Declaration public EVRScreenshotError HookScreenshot(EVRScreenshotType[] pSupportedTypes) Parameters Type Name Description EVRScreenshotType [] pSupportedTypes Returns Type Description EVRScreenshotError RequestScreenshot(ref UInt32, EVRScreenshotType, String, String) Declaration public EVRScreenshotError RequestScreenshot(ref uint pOutScreenshotHandle, EVRScreenshotType type, string pchPreviewFilename, string pchVRFilename) Parameters Type Name Description UInt32 pOutScreenshotHandle EVRScreenshotType type String pchPreviewFilename String pchVRFilename Returns Type Description EVRScreenshotError SubmitScreenshot(UInt32, EVRScreenshotType, String, String) Declaration public EVRScreenshotError SubmitScreenshot(uint screenshotHandle, EVRScreenshotType type, string pchSourcePreviewFilename, string pchSourceVRFilename) Parameters Type Name Description UInt32 screenshotHandle EVRScreenshotType type String pchSourcePreviewFilename String pchSourceVRFilename Returns Type Description EVRScreenshotError TakeStereoScreenshot(ref UInt32, String, String) Declaration public EVRScreenshotError TakeStereoScreenshot(ref uint pOutScreenshotHandle, string pchPreviewFilename, string pchVRFilename) Parameters Type Name Description UInt32 pOutScreenshotHandle String pchPreviewFilename String pchVRFilename Returns Type Description EVRScreenshotError UpdateScreenshotProgress(UInt32, Single) Declaration public EVRScreenshotError UpdateScreenshotProgress(uint screenshotHandle, float flProgress) Parameters Type Name Description UInt32 screenshotHandle Single flProgress Returns Type Description EVRScreenshotError"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSettingHelper.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSettingHelper.html",
    "title": "Struct CVRSettingHelper | Mixed Reality Toolkit Documentation",
    "keywords": "Struct CVRSettingHelper Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct CVRSettingHelper Fields m_pSettings Declaration public IntPtr m_pSettings Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSettings.html",
    "title": "Class CVRSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRSettings Inheritance Object CVRSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRSettings Methods GetBool(String, String, ref EVRSettingsError) Declaration public bool GetBool(string pchSection, string pchSettingsKey, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey EVRSettingsError peError Returns Type Description Boolean GetFloat(String, String, ref EVRSettingsError) Declaration public float GetFloat(string pchSection, string pchSettingsKey, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey EVRSettingsError peError Returns Type Description Single GetInt32(String, String, ref EVRSettingsError) Declaration public int GetInt32(string pchSection, string pchSettingsKey, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey EVRSettingsError peError Returns Type Description Int32 GetSettingsErrorNameFromEnum(EVRSettingsError) Declaration public string GetSettingsErrorNameFromEnum(EVRSettingsError eError) Parameters Type Name Description EVRSettingsError eError Returns Type Description String GetString(String, String, StringBuilder, UInt32, ref EVRSettingsError) Declaration public void GetString(string pchSection, string pchSettingsKey, StringBuilder pchValue, uint unValueLen, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey StringBuilder pchValue UInt32 unValueLen EVRSettingsError peError RemoveKeyInSection(String, String, ref EVRSettingsError) Declaration public void RemoveKeyInSection(string pchSection, string pchSettingsKey, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey EVRSettingsError peError RemoveSection(String, ref EVRSettingsError) Declaration public void RemoveSection(string pchSection, ref EVRSettingsError peError) Parameters Type Name Description String pchSection EVRSettingsError peError SetBool(String, String, Boolean, ref EVRSettingsError) Declaration public void SetBool(string pchSection, string pchSettingsKey, bool bValue, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey Boolean bValue EVRSettingsError peError SetFloat(String, String, Single, ref EVRSettingsError) Declaration public void SetFloat(string pchSection, string pchSettingsKey, float flValue, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey Single flValue EVRSettingsError peError SetInt32(String, String, Int32, ref EVRSettingsError) Declaration public void SetInt32(string pchSection, string pchSettingsKey, int nValue, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey Int32 nValue EVRSettingsError peError SetString(String, String, String, ref EVRSettingsError) Declaration public void SetString(string pchSection, string pchSettingsKey, string pchValue, ref EVRSettingsError peError) Parameters Type Name Description String pchSection String pchSettingsKey String pchValue EVRSettingsError peError Sync(Boolean, ref EVRSettingsError) Declaration public bool Sync(bool bForce, ref EVRSettingsError peError) Parameters Type Name Description Boolean bForce EVRSettingsError peError Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSpatialAnchors.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSpatialAnchors.html",
    "title": "Class CVRSpatialAnchors | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRSpatialAnchors Inheritance Object CVRSpatialAnchors Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRSpatialAnchors Methods CreateSpatialAnchorFromDescriptor(String, ref UInt32) Declaration public EVRSpatialAnchorError CreateSpatialAnchorFromDescriptor(string pchDescriptor, ref uint pHandleOut) Parameters Type Name Description String pchDescriptor UInt32 pHandleOut Returns Type Description EVRSpatialAnchorError CreateSpatialAnchorFromPose(UInt32, ETrackingUniverseOrigin, ref SpatialAnchorPose_t, ref UInt32) Declaration public EVRSpatialAnchorError CreateSpatialAnchorFromPose(uint unDeviceIndex, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPose, ref uint pHandleOut) Parameters Type Name Description UInt32 unDeviceIndex ETrackingUniverseOrigin eOrigin SpatialAnchorPose_t pPose UInt32 pHandleOut Returns Type Description EVRSpatialAnchorError GetSpatialAnchorDescriptor(UInt32, StringBuilder, ref UInt32) Declaration public EVRSpatialAnchorError GetSpatialAnchorDescriptor(uint unHandle, StringBuilder pchDescriptorOut, ref uint punDescriptorBufferLenInOut) Parameters Type Name Description UInt32 unHandle StringBuilder pchDescriptorOut UInt32 punDescriptorBufferLenInOut Returns Type Description EVRSpatialAnchorError GetSpatialAnchorPose(UInt32, ETrackingUniverseOrigin, ref SpatialAnchorPose_t) Declaration public EVRSpatialAnchorError GetSpatialAnchorPose(uint unHandle, ETrackingUniverseOrigin eOrigin, ref SpatialAnchorPose_t pPoseOut) Parameters Type Name Description UInt32 unHandle ETrackingUniverseOrigin eOrigin SpatialAnchorPose_t pPoseOut Returns Type Description EVRSpatialAnchorError"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRSystem.html",
    "title": "Class CVRSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRSystem Inheritance Object CVRSystem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRSystem Methods AcknowledgeQuit_Exiting() Declaration public void AcknowledgeQuit_Exiting() AcknowledgeQuit_UserPrompt() Declaration public void AcknowledgeQuit_UserPrompt() ApplyTransform(ref TrackedDevicePose_t, ref TrackedDevicePose_t, ref HmdMatrix34_t) Declaration public void ApplyTransform(ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pTrackedDevicePose, ref HmdMatrix34_t pTransform) Parameters Type Name Description TrackedDevicePose_t pOutputPose TrackedDevicePose_t pTrackedDevicePose HmdMatrix34_t pTransform ComputeDistortion(EVREye, Single, Single, ref DistortionCoordinates_t) Declaration public bool ComputeDistortion(EVREye eEye, float fU, float fV, ref DistortionCoordinates_t pDistortionCoordinates) Parameters Type Name Description EVREye eEye Single fU Single fV DistortionCoordinates_t pDistortionCoordinates Returns Type Description Boolean DriverDebugRequest(UInt32, String, StringBuilder, UInt32) Declaration public uint DriverDebugRequest(uint unDeviceIndex, string pchRequest, StringBuilder pchResponseBuffer, uint unResponseBufferSize) Parameters Type Name Description UInt32 unDeviceIndex String pchRequest StringBuilder pchResponseBuffer UInt32 unResponseBufferSize Returns Type Description UInt32 GetArrayTrackedDeviceProperty(UInt32, ETrackedDeviceProperty, UInt32, IntPtr, UInt32, ref ETrackedPropertyError) Declaration public uint GetArrayTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, uint propType, IntPtr pBuffer, uint unBufferSize, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop UInt32 propType IntPtr pBuffer UInt32 unBufferSize ETrackedPropertyError pError Returns Type Description UInt32 GetBoolTrackedDeviceProperty(UInt32, ETrackedDeviceProperty, ref ETrackedPropertyError) Declaration public bool GetBoolTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop ETrackedPropertyError pError Returns Type Description Boolean GetButtonIdNameFromEnum(EVRButtonId) Declaration public string GetButtonIdNameFromEnum(EVRButtonId eButtonId) Parameters Type Name Description EVRButtonId eButtonId Returns Type Description String GetControllerAxisTypeNameFromEnum(EVRControllerAxisType) Declaration public string GetControllerAxisTypeNameFromEnum(EVRControllerAxisType eAxisType) Parameters Type Name Description EVRControllerAxisType eAxisType Returns Type Description String GetControllerRoleForTrackedDeviceIndex(UInt32) Declaration public ETrackedControllerRole GetControllerRoleForTrackedDeviceIndex(uint unDeviceIndex) Parameters Type Name Description UInt32 unDeviceIndex Returns Type Description ETrackedControllerRole GetControllerState(UInt32, ref VRControllerState_t, UInt32) Declaration public bool GetControllerState(uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize) Parameters Type Name Description UInt32 unControllerDeviceIndex VRControllerState_t pControllerState UInt32 unControllerStateSize Returns Type Description Boolean GetControllerStateWithPose(ETrackingUniverseOrigin, UInt32, ref VRControllerState_t, UInt32, ref TrackedDevicePose_t) Declaration public bool GetControllerStateWithPose(ETrackingUniverseOrigin eOrigin, uint unControllerDeviceIndex, ref VRControllerState_t pControllerState, uint unControllerStateSize, ref TrackedDevicePose_t pTrackedDevicePose) Parameters Type Name Description ETrackingUniverseOrigin eOrigin UInt32 unControllerDeviceIndex VRControllerState_t pControllerState UInt32 unControllerStateSize TrackedDevicePose_t pTrackedDevicePose Returns Type Description Boolean GetD3D9AdapterIndex() Declaration public int GetD3D9AdapterIndex() Returns Type Description Int32 GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin, Single, TrackedDevicePose_t[]) Declaration public void GetDeviceToAbsoluteTrackingPose(ETrackingUniverseOrigin eOrigin, float fPredictedSecondsToPhotonsFromNow, TrackedDevicePose_t[] pTrackedDevicePoseArray) Parameters Type Name Description ETrackingUniverseOrigin eOrigin Single fPredictedSecondsToPhotonsFromNow TrackedDevicePose_t [] pTrackedDevicePoseArray GetDXGIOutputInfo(ref Int32) Declaration public void GetDXGIOutputInfo(ref int pnAdapterIndex) Parameters Type Name Description Int32 pnAdapterIndex GetEventTypeNameFromEnum(EVREventType) Declaration public string GetEventTypeNameFromEnum(EVREventType eType) Parameters Type Name Description EVREventType eType Returns Type Description String GetEyeToHeadTransform(EVREye) Declaration public HmdMatrix34_t GetEyeToHeadTransform(EVREye eEye) Parameters Type Name Description EVREye eEye Returns Type Description HmdMatrix34_t GetFloatTrackedDeviceProperty(UInt32, ETrackedDeviceProperty, ref ETrackedPropertyError) Declaration public float GetFloatTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop ETrackedPropertyError pError Returns Type Description Single GetHiddenAreaMesh(EVREye, EHiddenAreaMeshType) Declaration public HiddenAreaMesh_t GetHiddenAreaMesh(EVREye eEye, EHiddenAreaMeshType type) Parameters Type Name Description EVREye eEye EHiddenAreaMeshType type Returns Type Description HiddenAreaMesh_t GetInt32TrackedDeviceProperty(UInt32, ETrackedDeviceProperty, ref ETrackedPropertyError) Declaration public int GetInt32TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop ETrackedPropertyError pError Returns Type Description Int32 GetMatrix34TrackedDeviceProperty(UInt32, ETrackedDeviceProperty, ref ETrackedPropertyError) Declaration public HmdMatrix34_t GetMatrix34TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop ETrackedPropertyError pError Returns Type Description HmdMatrix34_t GetOutputDevice(ref UInt64, ETextureType, IntPtr) Declaration public void GetOutputDevice(ref ulong pnDevice, ETextureType textureType, IntPtr pInstance) Parameters Type Name Description UInt64 pnDevice ETextureType textureType IntPtr pInstance GetProjectionMatrix(EVREye, Single, Single) Declaration public HmdMatrix44_t GetProjectionMatrix(EVREye eEye, float fNearZ, float fFarZ) Parameters Type Name Description EVREye eEye Single fNearZ Single fFarZ Returns Type Description HmdMatrix44_t GetProjectionRaw(EVREye, ref Single, ref Single, ref Single, ref Single) Declaration public void GetProjectionRaw(EVREye eEye, ref float pfLeft, ref float pfRight, ref float pfTop, ref float pfBottom) Parameters Type Name Description EVREye eEye Single pfLeft Single pfRight Single pfTop Single pfBottom GetPropErrorNameFromEnum(ETrackedPropertyError) Declaration public string GetPropErrorNameFromEnum(ETrackedPropertyError error) Parameters Type Name Description ETrackedPropertyError error Returns Type Description String GetRawZeroPoseToStandingAbsoluteTrackingPose() Declaration public HmdMatrix34_t GetRawZeroPoseToStandingAbsoluteTrackingPose() Returns Type Description HmdMatrix34_t GetRecommendedRenderTargetSize(ref UInt32, ref UInt32) Declaration public void GetRecommendedRenderTargetSize(ref uint pnWidth, ref uint pnHeight) Parameters Type Name Description UInt32 pnWidth UInt32 pnHeight GetSeatedZeroPoseToStandingAbsoluteTrackingPose() Declaration public HmdMatrix34_t GetSeatedZeroPoseToStandingAbsoluteTrackingPose() Returns Type Description HmdMatrix34_t GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass, UInt32[], UInt32) Declaration public uint GetSortedTrackedDeviceIndicesOfClass(ETrackedDeviceClass eTrackedDeviceClass, uint[] punTrackedDeviceIndexArray, uint unRelativeToTrackedDeviceIndex) Parameters Type Name Description ETrackedDeviceClass eTrackedDeviceClass UInt32 [] punTrackedDeviceIndexArray UInt32 unRelativeToTrackedDeviceIndex Returns Type Description UInt32 GetStringTrackedDeviceProperty(UInt32, ETrackedDeviceProperty, StringBuilder, UInt32, ref ETrackedPropertyError) Declaration public uint GetStringTrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, StringBuilder pchValue, uint unBufferSize, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop StringBuilder pchValue UInt32 unBufferSize ETrackedPropertyError pError Returns Type Description UInt32 GetTimeSinceLastVsync(ref Single, ref UInt64) Declaration public bool GetTimeSinceLastVsync(ref float pfSecondsSinceLastVsync, ref ulong pulFrameCounter) Parameters Type Name Description Single pfSecondsSinceLastVsync UInt64 pulFrameCounter Returns Type Description Boolean GetTrackedDeviceActivityLevel(UInt32) Declaration public EDeviceActivityLevel GetTrackedDeviceActivityLevel(uint unDeviceId) Parameters Type Name Description UInt32 unDeviceId Returns Type Description EDeviceActivityLevel GetTrackedDeviceClass(UInt32) Declaration public ETrackedDeviceClass GetTrackedDeviceClass(uint unDeviceIndex) Parameters Type Name Description UInt32 unDeviceIndex Returns Type Description ETrackedDeviceClass GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole) Declaration public uint GetTrackedDeviceIndexForControllerRole(ETrackedControllerRole unDeviceType) Parameters Type Name Description ETrackedControllerRole unDeviceType Returns Type Description UInt32 GetUint64TrackedDeviceProperty(UInt32, ETrackedDeviceProperty, ref ETrackedPropertyError) Declaration public ulong GetUint64TrackedDeviceProperty(uint unDeviceIndex, ETrackedDeviceProperty prop, ref ETrackedPropertyError pError) Parameters Type Name Description UInt32 unDeviceIndex ETrackedDeviceProperty prop ETrackedPropertyError pError Returns Type Description UInt64 IsDisplayOnDesktop() Declaration public bool IsDisplayOnDesktop() Returns Type Description Boolean IsInputAvailable() Declaration public bool IsInputAvailable() Returns Type Description Boolean IsSteamVRDrawingControllers() Declaration public bool IsSteamVRDrawingControllers() Returns Type Description Boolean IsTrackedDeviceConnected(UInt32) Declaration public bool IsTrackedDeviceConnected(uint unDeviceIndex) Parameters Type Name Description UInt32 unDeviceIndex Returns Type Description Boolean PerformFirmwareUpdate(UInt32) Declaration public EVRFirmwareError PerformFirmwareUpdate(uint unDeviceIndex) Parameters Type Name Description UInt32 unDeviceIndex Returns Type Description EVRFirmwareError PollNextEvent(ref VREvent_t, UInt32) Declaration public bool PollNextEvent(ref VREvent_t pEvent, uint uncbVREvent) Parameters Type Name Description VREvent_t pEvent UInt32 uncbVREvent Returns Type Description Boolean PollNextEventWithPose(ETrackingUniverseOrigin, ref VREvent_t, UInt32, ref TrackedDevicePose_t) Declaration public bool PollNextEventWithPose(ETrackingUniverseOrigin eOrigin, ref VREvent_t pEvent, uint uncbVREvent, ref TrackedDevicePose_t pTrackedDevicePose) Parameters Type Name Description ETrackingUniverseOrigin eOrigin VREvent_t pEvent UInt32 uncbVREvent TrackedDevicePose_t pTrackedDevicePose Returns Type Description Boolean ResetSeatedZeroPose() Declaration public void ResetSeatedZeroPose() SetDisplayVisibility(Boolean) Declaration public bool SetDisplayVisibility(bool bIsVisibleOnDesktop) Parameters Type Name Description Boolean bIsVisibleOnDesktop Returns Type Description Boolean ShouldApplicationPause() Declaration public bool ShouldApplicationPause() Returns Type Description Boolean ShouldApplicationReduceRenderingWork() Declaration public bool ShouldApplicationReduceRenderingWork() Returns Type Description Boolean TriggerHapticPulse(UInt32, UInt32, UInt16) Declaration public void TriggerHapticPulse(uint unControllerDeviceIndex, uint unAxisId, ushort usDurationMicroSec) Parameters Type Name Description UInt32 unControllerDeviceIndex UInt32 unAxisId UInt16 usDurationMicroSec"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRTrackedCamera.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRTrackedCamera.html",
    "title": "Class CVRTrackedCamera | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRTrackedCamera Inheritance Object CVRTrackedCamera Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRTrackedCamera Methods AcquireVideoStreamingService(UInt32, ref UInt64) Declaration public EVRTrackedCameraError AcquireVideoStreamingService(uint nDeviceIndex, ref ulong pHandle) Parameters Type Name Description UInt32 nDeviceIndex UInt64 pHandle Returns Type Description EVRTrackedCameraError GetCameraErrorNameFromEnum(EVRTrackedCameraError) Declaration public string GetCameraErrorNameFromEnum(EVRTrackedCameraError eCameraError) Parameters Type Name Description EVRTrackedCameraError eCameraError Returns Type Description String GetCameraFrameSize(UInt32, EVRTrackedCameraFrameType, ref UInt32, ref UInt32, ref UInt32) Declaration public EVRTrackedCameraError GetCameraFrameSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref uint pnWidth, ref uint pnHeight, ref uint pnFrameBufferSize) Parameters Type Name Description UInt32 nDeviceIndex EVRTrackedCameraFrameType eFrameType UInt32 pnWidth UInt32 pnHeight UInt32 pnFrameBufferSize Returns Type Description EVRTrackedCameraError GetCameraIntrinsics(UInt32, UInt32, EVRTrackedCameraFrameType, ref HmdVector2_t, ref HmdVector2_t) Declaration public EVRTrackedCameraError GetCameraIntrinsics(uint nDeviceIndex, uint nCameraIndex, EVRTrackedCameraFrameType eFrameType, ref HmdVector2_t pFocalLength, ref HmdVector2_t pCenter) Parameters Type Name Description UInt32 nDeviceIndex UInt32 nCameraIndex EVRTrackedCameraFrameType eFrameType HmdVector2_t pFocalLength HmdVector2_t pCenter Returns Type Description EVRTrackedCameraError GetCameraProjection(UInt32, UInt32, EVRTrackedCameraFrameType, Single, Single, ref HmdMatrix44_t) Declaration public EVRTrackedCameraError GetCameraProjection(uint nDeviceIndex, uint nCameraIndex, EVRTrackedCameraFrameType eFrameType, float flZNear, float flZFar, ref HmdMatrix44_t pProjection) Parameters Type Name Description UInt32 nDeviceIndex UInt32 nCameraIndex EVRTrackedCameraFrameType eFrameType Single flZNear Single flZFar HmdMatrix44_t pProjection Returns Type Description EVRTrackedCameraError GetVideoStreamFrameBuffer(UInt64, EVRTrackedCameraFrameType, IntPtr, UInt32, ref CameraVideoStreamFrameHeader_t, UInt32) Declaration public EVRTrackedCameraError GetVideoStreamFrameBuffer(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pFrameBuffer, uint nFrameBufferSize, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize) Parameters Type Name Description UInt64 hTrackedCamera EVRTrackedCameraFrameType eFrameType IntPtr pFrameBuffer UInt32 nFrameBufferSize CameraVideoStreamFrameHeader_t pFrameHeader UInt32 nFrameHeaderSize Returns Type Description EVRTrackedCameraError GetVideoStreamTextureD3D11(UInt64, EVRTrackedCameraFrameType, IntPtr, ref IntPtr, ref CameraVideoStreamFrameHeader_t, UInt32) Declaration public EVRTrackedCameraError GetVideoStreamTextureD3D11(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize) Parameters Type Name Description UInt64 hTrackedCamera EVRTrackedCameraFrameType eFrameType IntPtr pD3D11DeviceOrResource IntPtr ppD3D11ShaderResourceView CameraVideoStreamFrameHeader_t pFrameHeader UInt32 nFrameHeaderSize Returns Type Description EVRTrackedCameraError GetVideoStreamTextureGL(UInt64, EVRTrackedCameraFrameType, ref UInt32, ref CameraVideoStreamFrameHeader_t, UInt32) Declaration public EVRTrackedCameraError GetVideoStreamTextureGL(ulong hTrackedCamera, EVRTrackedCameraFrameType eFrameType, ref uint pglTextureId, ref CameraVideoStreamFrameHeader_t pFrameHeader, uint nFrameHeaderSize) Parameters Type Name Description UInt64 hTrackedCamera EVRTrackedCameraFrameType eFrameType UInt32 pglTextureId CameraVideoStreamFrameHeader_t pFrameHeader UInt32 nFrameHeaderSize Returns Type Description EVRTrackedCameraError GetVideoStreamTextureSize(UInt32, EVRTrackedCameraFrameType, ref VRTextureBounds_t, ref UInt32, ref UInt32) Declaration public EVRTrackedCameraError GetVideoStreamTextureSize(uint nDeviceIndex, EVRTrackedCameraFrameType eFrameType, ref VRTextureBounds_t pTextureBounds, ref uint pnWidth, ref uint pnHeight) Parameters Type Name Description UInt32 nDeviceIndex EVRTrackedCameraFrameType eFrameType VRTextureBounds_t pTextureBounds UInt32 pnWidth UInt32 pnHeight Returns Type Description EVRTrackedCameraError HasCamera(UInt32, ref Boolean) Declaration public EVRTrackedCameraError HasCamera(uint nDeviceIndex, ref bool pHasCamera) Parameters Type Name Description UInt32 nDeviceIndex Boolean pHasCamera Returns Type Description EVRTrackedCameraError ReleaseVideoStreamingService(UInt64) Declaration public EVRTrackedCameraError ReleaseVideoStreamingService(ulong hTrackedCamera) Parameters Type Name Description UInt64 hTrackedCamera Returns Type Description EVRTrackedCameraError ReleaseVideoStreamTextureGL(UInt64, UInt32) Declaration public EVRTrackedCameraError ReleaseVideoStreamTextureGL(ulong hTrackedCamera, uint glTextureId) Parameters Type Name Description UInt64 hTrackedCamera UInt32 glTextureId Returns Type Description EVRTrackedCameraError"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.D3D12TextureData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.D3D12TextureData_t.html",
    "title": "Struct D3D12TextureData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct D3D12TextureData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct D3D12TextureData_t Fields m_nNodeMask Declaration public uint m_nNodeMask Field Value Type Description UInt32 m_pCommandQueue Declaration public IntPtr m_pCommandQueue Field Value Type Description IntPtr m_pResource Declaration public IntPtr m_pResource Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.DistortionCoordinates_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.DistortionCoordinates_t.html",
    "title": "Struct DistortionCoordinates_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct DistortionCoordinates_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct DistortionCoordinates_t Fields rfBlue0 Declaration public float rfBlue0 Field Value Type Description Single rfBlue1 Declaration public float rfBlue1 Field Value Type Description Single rfGreen0 Declaration public float rfGreen0 Field Value Type Description Single rfGreen1 Declaration public float rfGreen1 Field Value Type Description Single rfRed0 Declaration public float rfRed0 Field Value Type Description Single rfRed1 Declaration public float rfRed1 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.DriverDirectMode_FrameTiming.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.DriverDirectMode_FrameTiming.html",
    "title": "Struct DriverDirectMode_FrameTiming | Mixed Reality Toolkit Documentation",
    "keywords": "Struct DriverDirectMode_FrameTiming Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct DriverDirectMode_FrameTiming Fields m_nNumDroppedFrames Declaration public uint m_nNumDroppedFrames Field Value Type Description UInt32 m_nNumFramePresents Declaration public uint m_nNumFramePresents Field Value Type Description UInt32 m_nNumMisPresented Declaration public uint m_nNumMisPresented Field Value Type Description UInt32 m_nReprojectionFlags Declaration public uint m_nReprojectionFlags Field Value Type Description UInt32 m_nSize Declaration public uint m_nSize Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVREye.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVREye.html",
    "title": "Enum EVREye | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVREye Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVREye Fields Name Description Eye_Left Eye_Right"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRFinger.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRFinger.html",
    "title": "Enum EVRFinger | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRFinger Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRFinger Fields Name Description Count Index Middle Pinky Ring Thumb"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRFingerSplay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRFingerSplay.html",
    "title": "Enum EVRFingerSplay | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRFingerSplay Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRFingerSplay Fields Name Description Count Index_Middle Middle_Ring Ring_Pinky Thumb_Index"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRFirmwareError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRFirmwareError.html",
    "title": "Enum EVRFirmwareError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRFirmwareError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRFirmwareError Fields Name Description Fail None Success"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInitError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInitError.html",
    "title": "Enum EVRInitError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRInitError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRInitError Fields Name Description Compositor_D3D11HardwareRequired Compositor_Failed Compositor_FirmwareRequiresUpdate Compositor_OverlayInitFailed Compositor_ScreenshotsInitFailed Compositor_UnableToCreateDevice Driver_CalibrationInvalid Driver_Failed Driver_HmdDisplayMirrored Driver_HmdDisplayNotFound Driver_HmdDriverIdOutOfBounds Driver_HmdInUse Driver_HmdUnknown Driver_NotCalibrated Driver_NotLoaded Driver_RuntimeOutOfDate Driver_TrackedDeviceInterfaceUnknown Driver_Unknown Init_AnotherAppLaunching Init_AppInfoInitFailed Init_FactoryNotFound Init_FileNotFound Init_FirmwareRecoveryBusy Init_FirmwareUpdateBusy Init_HmdDriverIdIsNone Init_HmdNotFound Init_HmdNotFoundPresenceFailed Init_InitCanceledByUser Init_InstallationCorrupt Init_InstallationNotFound Init_InterfaceNotFound Init_Internal Init_InvalidApplicationType Init_InvalidInterface Init_LowPowerWatchdogNotSupported Init_NoConfigPath Init_NoLogPath Init_NoServerForBackgroundApp Init_NotAvailableToUtilityApps Init_NotAvailableToWatchdogApps Init_NotInitialized Init_NotSupportedWithCompositor Init_PathRegistryNotFound Init_PathRegistryNotWritable Init_RebootingBusy Init_Retry Init_SettingsInitFailed Init_ShuttingDown Init_TooManyObjects Init_TrackerManagerInitFailed Init_USBServiceBusy Init_UserConfigDirectoryInvalid Init_VRClientDLLNotFound Init_VRDashboardNotFound Init_VRDashboardStartupFailed Init_VRHomeNotFound Init_VRHomeStartupFailed Init_VRMonitorNotFound Init_VRMonitorStartupFailed Init_VRWebHelperStartupFailed Init_WatchdogDisabledInSettings IPC_CompositorConnectFailed IPC_CompositorInitFailed IPC_CompositorInvalidConnectResponse IPC_ConnectFailed IPC_ConnectFailedAfterMultipleAttempts IPC_Failed IPC_MutexInitFailed IPC_ServerInitFailed IPC_SharedStateInitFailed None Steam_SteamInstallationNotFound Unknown VendorSpecific_HmdFound_CantOpenDevice VendorSpecific_HmdFound_CantReadFirmwareVersion VendorSpecific_HmdFound_ConfigFailedSanityCheck VendorSpecific_HmdFound_ConfigTooBig VendorSpecific_HmdFound_ConfigTooSmall VendorSpecific_HmdFound_NoStoredConfig VendorSpecific_HmdFound_UnableToGetUserDataNext VendorSpecific_HmdFound_UnableToGetUserDataStart VendorSpecific_HmdFound_UnableToInitZLib VendorSpecific_HmdFound_UnableToRequestConfigStart VendorSpecific_HmdFound_UnableToSendUserDataStart VendorSpecific_HmdFound_UserDataAddressRange VendorSpecific_HmdFound_UserDataError VendorSpecific_UnableToConnectToOculusRuntime VendorSpecific_WindowsNotInDevMode"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInputError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRInputError.html",
    "title": "Enum EVRInputError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRInputError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRInputError Fields Name Description BufferTooSmall InvalidBoneCount InvalidBoneIndex InvalidCompressedData InvalidDevice InvalidHandle InvalidParam InvalidSkeleton IPCError MaxCapacityReached MismatchedActionManifest MissingSkeletonData NameNotFound NoActiveActionSet NoData None NoSteam WrongType"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.NotificationBitmap_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.NotificationBitmap_t.html",
    "title": "Struct NotificationBitmap_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct NotificationBitmap_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct NotificationBitmap_t Fields m_nBytesPerPixel Declaration public int m_nBytesPerPixel Field Value Type Description Int32 m_nHeight Declaration public int m_nHeight Field Value Type Description Int32 m_nWidth Declaration public int m_nWidth Field Value Type Description Int32 m_pImageData Declaration public IntPtr m_pImageData Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.OpenVR.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.OpenVR.html",
    "title": "Class OpenVR | Mixed Reality Toolkit Documentation",
    "keywords": "Class OpenVR Inheritance Object OpenVR Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class OpenVR Fields IVRApplications_Version Declaration public const string IVRApplications_Version = \"IVRApplications_006\" Field Value Type Description String IVRChaperone_Version Declaration public const string IVRChaperone_Version = \"IVRChaperone_003\" Field Value Type Description String IVRChaperoneSetup_Version Declaration public const string IVRChaperoneSetup_Version = \"IVRChaperoneSetup_006\" Field Value Type Description String IVRCompositor_Version Declaration public const string IVRCompositor_Version = \"IVRCompositor_022\" Field Value Type Description String IVRDriverManager_Version Declaration public const string IVRDriverManager_Version = \"IVRDriverManager_001\" Field Value Type Description String IVRExtendedDisplay_Version Declaration public const string IVRExtendedDisplay_Version = \"IVRExtendedDisplay_001\" Field Value Type Description String IVRInput_Version Declaration public const string IVRInput_Version = \"IVRInput_005\" Field Value Type Description String IVRIOBuffer_Version Declaration public const string IVRIOBuffer_Version = \"IVRIOBuffer_001\" Field Value Type Description String IVRNotifications_Version Declaration public const string IVRNotifications_Version = \"IVRNotifications_002\" Field Value Type Description String IVROverlay_Version Declaration public const string IVROverlay_Version = \"IVROverlay_019\" Field Value Type Description String IVRRenderModels_Version Declaration public const string IVRRenderModels_Version = \"IVRRenderModels_006\" Field Value Type Description String IVRResources_Version Declaration public const string IVRResources_Version = \"IVRResources_001\" Field Value Type Description String IVRScreenshots_Version Declaration public const string IVRScreenshots_Version = \"IVRScreenshots_001\" Field Value Type Description String IVRSettings_Version Declaration public const string IVRSettings_Version = \"IVRSettings_002\" Field Value Type Description String IVRSpatialAnchors_Version Declaration public const string IVRSpatialAnchors_Version = \"IVRSpatialAnchors_001\" Field Value Type Description String IVRSystem_Version Declaration public const string IVRSystem_Version = \"IVRSystem_019\" Field Value Type Description String IVRTrackedCamera_Version Declaration public const string IVRTrackedCamera_Version = \"IVRTrackedCamera_005\" Field Value Type Description String k_nDriverNone Declaration public const uint k_nDriverNone = 4294967295U Field Value Type Description UInt32 k_pch_App_ActionManifestURL_String Declaration public const string k_pch_App_ActionManifestURL_String = \"ActionManifestURL\" Field Value Type Description String k_pch_App_BindingAutosaveURLSuffix_String Declaration public const string k_pch_App_BindingAutosaveURLSuffix_String = \"AutosaveURL\" Field Value Type Description String k_pch_App_BindingCurrentURLSuffix_String Declaration public const string k_pch_App_BindingCurrentURLSuffix_String = \"CurrentURL\" Field Value Type Description String k_pch_App_NeedToUpdateAutosaveSuffix_Bool Declaration public const string k_pch_App_NeedToUpdateAutosaveSuffix_Bool = \"NeedToUpdateAutosave\" Field Value Type Description String k_pch_audio_OffPlaybackDevice_String Declaration public const string k_pch_audio_OffPlaybackDevice_String = \"offPlaybackDevice\" Field Value Type Description String k_pch_audio_OffRecordDevice_String Declaration public const string k_pch_audio_OffRecordDevice_String = \"offRecordDevice\" Field Value Type Description String k_pch_audio_OnPlaybackDevice_String Declaration public const string k_pch_audio_OnPlaybackDevice_String = \"onPlaybackDevice\" Field Value Type Description String k_pch_audio_OnPlaybackMirrorDevice_String Declaration public const string k_pch_audio_OnPlaybackMirrorDevice_String = \"onPlaybackMirrorDevice\" Field Value Type Description String k_pch_audio_OnRecordDevice_String Declaration public const string k_pch_audio_OnRecordDevice_String = \"onRecordDevice\" Field Value Type Description String k_pch_audio_Section Declaration public const string k_pch_audio_Section = \"audio\" Field Value Type Description String k_pch_audio_VIVEHDMIGain Declaration public const string k_pch_audio_VIVEHDMIGain = \"viveHDMIGain\" Field Value Type Description String k_pch_Camera_BoundsColorGammaA_Int32 Declaration public const string k_pch_Camera_BoundsColorGammaA_Int32 = \"cameraBoundsColorGammaA\" Field Value Type Description String k_pch_Camera_BoundsColorGammaB_Int32 Declaration public const string k_pch_Camera_BoundsColorGammaB_Int32 = \"cameraBoundsColorGammaB\" Field Value Type Description String k_pch_Camera_BoundsColorGammaG_Int32 Declaration public const string k_pch_Camera_BoundsColorGammaG_Int32 = \"cameraBoundsColorGammaG\" Field Value Type Description String k_pch_Camera_BoundsColorGammaR_Int32 Declaration public const string k_pch_Camera_BoundsColorGammaR_Int32 = \"cameraBoundsColorGammaR\" Field Value Type Description String k_pch_Camera_BoundsStrength_Int32 Declaration public const string k_pch_Camera_BoundsStrength_Int32 = \"cameraBoundsStrength\" Field Value Type Description String k_pch_Camera_EnableCamera_Bool Declaration public const string k_pch_Camera_EnableCamera_Bool = \"enableCamera\" Field Value Type Description String k_pch_Camera_EnableCameraForCollisionBounds_Bool Declaration public const string k_pch_Camera_EnableCameraForCollisionBounds_Bool = \"enableCameraForCollisionBounds\" Field Value Type Description String k_pch_Camera_EnableCameraForRoomView_Bool Declaration public const string k_pch_Camera_EnableCameraForRoomView_Bool = \"enableCameraForRoomView\" Field Value Type Description String k_pch_Camera_EnableCameraInDashboard_Bool Declaration public const string k_pch_Camera_EnableCameraInDashboard_Bool = \"enableCameraInDashboard\" Field Value Type Description String k_pch_Camera_RoomViewMode_Int32 Declaration public const string k_pch_Camera_RoomViewMode_Int32 = \"cameraRoomViewMode\" Field Value Type Description String k_pch_Camera_Section Declaration public const string k_pch_Camera_Section = \"camera\" Field Value Type Description String k_pch_CollisionBounds_CenterMarkerOn_Bool Declaration public const string k_pch_CollisionBounds_CenterMarkerOn_Bool = \"CollisionBoundsCenterMarkerOn\" Field Value Type Description String k_pch_CollisionBounds_ColorGammaA_Int32 Declaration public const string k_pch_CollisionBounds_ColorGammaA_Int32 = \"CollisionBoundsColorGammaA\" Field Value Type Description String k_pch_CollisionBounds_ColorGammaB_Int32 Declaration public const string k_pch_CollisionBounds_ColorGammaB_Int32 = \"CollisionBoundsColorGammaB\" Field Value Type Description String k_pch_CollisionBounds_ColorGammaG_Int32 Declaration public const string k_pch_CollisionBounds_ColorGammaG_Int32 = \"CollisionBoundsColorGammaG\" Field Value Type Description String k_pch_CollisionBounds_ColorGammaR_Int32 Declaration public const string k_pch_CollisionBounds_ColorGammaR_Int32 = \"CollisionBoundsColorGammaR\" Field Value Type Description String k_pch_CollisionBounds_FadeDistance_Float Declaration public const string k_pch_CollisionBounds_FadeDistance_Float = \"CollisionBoundsFadeDistance\" Field Value Type Description String k_pch_CollisionBounds_GroundPerimeterOn_Bool Declaration public const string k_pch_CollisionBounds_GroundPerimeterOn_Bool = \"CollisionBoundsGroundPerimeterOn\" Field Value Type Description String k_pch_CollisionBounds_PlaySpaceOn_Bool Declaration public const string k_pch_CollisionBounds_PlaySpaceOn_Bool = \"CollisionBoundsPlaySpaceOn\" Field Value Type Description String k_pch_CollisionBounds_Section Declaration public const string k_pch_CollisionBounds_Section = \"collisionBounds\" Field Value Type Description String k_pch_CollisionBounds_Style_Int32 Declaration public const string k_pch_CollisionBounds_Style_Int32 = \"CollisionBoundsStyle\" Field Value Type Description String k_pch_Controller_Component_Base Declaration public const string k_pch_Controller_Component_Base = \"base\" Field Value Type Description String k_pch_Controller_Component_GDC2015 Declaration public const string k_pch_Controller_Component_GDC2015 = \"gdc2015\" Field Value Type Description String k_pch_Controller_Component_HandGrip Declaration public const string k_pch_Controller_Component_HandGrip = \"handgrip\" Field Value Type Description String k_pch_Controller_Component_Status Declaration public const string k_pch_Controller_Component_Status = \"status\" Field Value Type Description String k_pch_Controller_Component_Tip Declaration public const string k_pch_Controller_Component_Tip = \"tip\" Field Value Type Description String k_pch_Dashboard_ArcadeMode_Bool Declaration public const string k_pch_Dashboard_ArcadeMode_Bool = \"arcadeMode\" Field Value Type Description String k_pch_Dashboard_EnableDashboard_Bool Declaration public const string k_pch_Dashboard_EnableDashboard_Bool = \"enableDashboard\" Field Value Type Description String k_pch_Dashboard_EnableWebUI Declaration public const string k_pch_Dashboard_EnableWebUI = \"webUI\" Field Value Type Description String k_pch_Dashboard_EnableWebUIDashboardReplacement Declaration public const string k_pch_Dashboard_EnableWebUIDashboardReplacement = \"webUIDashboard\" Field Value Type Description String k_pch_Dashboard_EnableWebUIDevTools Declaration public const string k_pch_Dashboard_EnableWebUIDevTools = \"webUIDevTools\" Field Value Type Description String k_pch_Dashboard_Section Declaration public const string k_pch_Dashboard_Section = \"dashboard\" Field Value Type Description String k_pch_DesktopUI_Section Declaration public const string k_pch_DesktopUI_Section = \"DesktopUI\" Field Value Type Description String k_pch_DirectMode_Count_Int32 Declaration public const string k_pch_DirectMode_Count_Int32 = \"count\" Field Value Type Description String k_pch_DirectMode_EdidPid_Int32 Declaration public const string k_pch_DirectMode_EdidPid_Int32 = \"edidPid\" Field Value Type Description String k_pch_DirectMode_EdidVid_Int32 Declaration public const string k_pch_DirectMode_EdidVid_Int32 = \"edidVid\" Field Value Type Description String k_pch_DirectMode_Enable_Bool Declaration public const string k_pch_DirectMode_Enable_Bool = \"enable\" Field Value Type Description String k_pch_DirectMode_Section Declaration public const string k_pch_DirectMode_Section = \"direct_mode\" Field Value Type Description String k_pch_Driver_Enable_Bool Declaration public const string k_pch_Driver_Enable_Bool = \"enable\" Field Value Type Description String k_pch_Keyboard_OffsetLeftX Declaration public const string k_pch_Keyboard_OffsetLeftX = \"OffsetLeftX\" Field Value Type Description String k_pch_Keyboard_OffsetRightX Declaration public const string k_pch_Keyboard_OffsetRightX = \"OffsetRightX\" Field Value Type Description String k_pch_Keyboard_OffsetY Declaration public const string k_pch_Keyboard_OffsetY = \"OffsetY\" Field Value Type Description String k_pch_Keyboard_ScaleX Declaration public const string k_pch_Keyboard_ScaleX = \"ScaleX\" Field Value Type Description String k_pch_Keyboard_ScaleY Declaration public const string k_pch_Keyboard_ScaleY = \"ScaleY\" Field Value Type Description String k_pch_Keyboard_Section Declaration public const string k_pch_Keyboard_Section = \"keyboard\" Field Value Type Description String k_pch_Keyboard_Smoothing Declaration public const string k_pch_Keyboard_Smoothing = \"Smoothing\" Field Value Type Description String k_pch_Keyboard_TutorialCompletions Declaration public const string k_pch_Keyboard_TutorialCompletions = \"TutorialCompletions\" Field Value Type Description String k_pch_LastKnown_HMDManufacturer_String Declaration public const string k_pch_LastKnown_HMDManufacturer_String = \"HMDManufacturer\" Field Value Type Description String k_pch_LastKnown_HMDModel_String Declaration public const string k_pch_LastKnown_HMDModel_String = \"HMDModel\" Field Value Type Description String k_pch_LastKnown_Section Declaration public const string k_pch_LastKnown_Section = \"LastKnown\" Field Value Type Description String k_pch_Lighthouse_DBHistory_Bool Declaration public const string k_pch_Lighthouse_DBHistory_Bool = \"dbhistory\" Field Value Type Description String k_pch_Lighthouse_DisableIMU_Bool Declaration public const string k_pch_Lighthouse_DisableIMU_Bool = \"disableimu\" Field Value Type Description String k_pch_Lighthouse_DisableIMUExceptHMD_Bool Declaration public const string k_pch_Lighthouse_DisableIMUExceptHMD_Bool = \"disableimuexcepthmd\" Field Value Type Description String k_pch_Lighthouse_DisambiguationDebug_Int32 Declaration public const string k_pch_Lighthouse_DisambiguationDebug_Int32 = \"disambiguationdebug\" Field Value Type Description String k_pch_Lighthouse_EnableBluetooth_Bool Declaration public const string k_pch_Lighthouse_EnableBluetooth_Bool = \"enableBluetooth\" Field Value Type Description String k_pch_Lighthouse_EnableImuFallback_Bool Declaration public const string k_pch_Lighthouse_EnableImuFallback_Bool = \"enableImuFallback\" Field Value Type Description String k_pch_Lighthouse_PowerManagedBaseStations_String Declaration public const string k_pch_Lighthouse_PowerManagedBaseStations_String = \"PowerManagedBaseStations\" Field Value Type Description String k_pch_Lighthouse_PowerManagedBaseStations2_String Declaration public const string k_pch_Lighthouse_PowerManagedBaseStations2_String = \"PowerManagedBaseStations2\" Field Value Type Description String k_pch_Lighthouse_PrimaryBasestation_Int32 Declaration public const string k_pch_Lighthouse_PrimaryBasestation_Int32 = \"primarybasestation\" Field Value Type Description String k_pch_Lighthouse_Section Declaration public const string k_pch_Lighthouse_Section = \"driver_lighthouse\" Field Value Type Description String k_pch_Lighthouse_UseDisambiguation_String Declaration public const string k_pch_Lighthouse_UseDisambiguation_String = \"usedisambiguation\" Field Value Type Description String k_pch_MimeType_GameTheater Declaration public const string k_pch_MimeType_GameTheater = \"vr/game_theater\" Field Value Type Description String k_pch_MimeType_HomeApp Declaration public const string k_pch_MimeType_HomeApp = \"vr/home\" Field Value Type Description String k_pch_modelskin_Section Declaration public const string k_pch_modelskin_Section = \"modelskins\" Field Value Type Description String k_pch_Notifications_DoNotDisturb_Bool Declaration public const string k_pch_Notifications_DoNotDisturb_Bool = \"DoNotDisturb\" Field Value Type Description String k_pch_Notifications_Section Declaration public const string k_pch_Notifications_Section = \"notifications\" Field Value Type Description String k_pch_Null_DisplayFrequency_Float Declaration public const string k_pch_Null_DisplayFrequency_Float = \"displayFrequency\" Field Value Type Description String k_pch_Null_ModelNumber_String Declaration public const string k_pch_Null_ModelNumber_String = \"modelNumber\" Field Value Type Description String k_pch_Null_RenderHeight_Int32 Declaration public const string k_pch_Null_RenderHeight_Int32 = \"renderHeight\" Field Value Type Description String k_pch_Null_RenderWidth_Int32 Declaration public const string k_pch_Null_RenderWidth_Int32 = \"renderWidth\" Field Value Type Description String k_pch_Null_SecondsFromVsyncToPhotons_Float Declaration public const string k_pch_Null_SecondsFromVsyncToPhotons_Float = \"secondsFromVsyncToPhotons\" Field Value Type Description String k_pch_Null_Section Declaration public const string k_pch_Null_Section = \"driver_null\" Field Value Type Description String k_pch_Null_SerialNumber_String Declaration public const string k_pch_Null_SerialNumber_String = \"serialNumber\" Field Value Type Description String k_pch_Null_WindowHeight_Int32 Declaration public const string k_pch_Null_WindowHeight_Int32 = \"windowHeight\" Field Value Type Description String k_pch_Null_WindowWidth_Int32 Declaration public const string k_pch_Null_WindowWidth_Int32 = \"windowWidth\" Field Value Type Description String k_pch_Null_WindowX_Int32 Declaration public const string k_pch_Null_WindowX_Int32 = \"windowX\" Field Value Type Description String k_pch_Null_WindowY_Int32 Declaration public const string k_pch_Null_WindowY_Int32 = \"windowY\" Field Value Type Description String k_pch_Perf_AllowTimingStore_Bool Declaration public const string k_pch_Perf_AllowTimingStore_Bool = \"allowTimingStore\" Field Value Type Description String k_pch_Perf_LinuxGPUProfiling_Bool Declaration public const string k_pch_Perf_LinuxGPUProfiling_Bool = \"linuxGPUProfiling\" Field Value Type Description String k_pch_Perf_PerfGraphInHMD_Bool Declaration public const string k_pch_Perf_PerfGraphInHMD_Bool = \"perfGraphInHMD\" Field Value Type Description String k_pch_Perf_SaveTimingsOnExit_Bool Declaration public const string k_pch_Perf_SaveTimingsOnExit_Bool = \"saveTimingsOnExit\" Field Value Type Description String k_pch_Perf_Section Declaration public const string k_pch_Perf_Section = \"perfcheck\" Field Value Type Description String k_pch_Perf_TestData_Float Declaration public const string k_pch_Perf_TestData_Float = \"perfTestData\" Field Value Type Description String k_pch_Power_AutoLaunchSteamVROnButtonPress Declaration public const string k_pch_Power_AutoLaunchSteamVROnButtonPress = \"autoLaunchSteamVROnButtonPress\" Field Value Type Description String k_pch_Power_PauseCompositorOnStandby_Bool Declaration public const string k_pch_Power_PauseCompositorOnStandby_Bool = \"pauseCompositorOnStandby\" Field Value Type Description String k_pch_Power_PowerOffOnExit_Bool Declaration public const string k_pch_Power_PowerOffOnExit_Bool = \"powerOffOnExit\" Field Value Type Description String k_pch_Power_ReturnToWatchdogTimeout_Float Declaration public const string k_pch_Power_ReturnToWatchdogTimeout_Float = \"returnToWatchdogTimeout\" Field Value Type Description String k_pch_Power_Section Declaration public const string k_pch_Power_Section = \"power\" Field Value Type Description String k_pch_Power_TurnOffControllersTimeout_Float Declaration public const string k_pch_Power_TurnOffControllersTimeout_Float = \"turnOffControllersTimeout\" Field Value Type Description String k_pch_Power_TurnOffScreensTimeout_Float Declaration public const string k_pch_Power_TurnOffScreensTimeout_Float = \"turnOffScreensTimeout\" Field Value Type Description String k_pch_SteamVR_ActivateMultipleDrivers_Bool Declaration public const string k_pch_SteamVR_ActivateMultipleDrivers_Bool = \"activateMultipleDrivers\" Field Value Type Description String k_pch_SteamVR_AllowDisplayLockedMode_Bool Declaration public const string k_pch_SteamVR_AllowDisplayLockedMode_Bool = \"allowDisplayLockedMode\" Field Value Type Description String k_pch_SteamVR_AllowSupersampleFiltering_Bool Declaration public const string k_pch_SteamVR_AllowSupersampleFiltering_Bool = \"allowSupersampleFiltering\" Field Value Type Description String k_pch_SteamVR_Background_String Declaration public const string k_pch_SteamVR_Background_String = \"background\" Field Value Type Description String k_pch_SteamVR_BackgroundCameraHeight_Float Declaration public const string k_pch_SteamVR_BackgroundCameraHeight_Float = \"backgroundCameraHeight\" Field Value Type Description String k_pch_SteamVR_BackgroundDomeRadius_Float Declaration public const string k_pch_SteamVR_BackgroundDomeRadius_Float = \"backgroundDomeRadius\" Field Value Type Description String k_pch_SteamVR_BackgroundUseDomeProjection_Bool Declaration public const string k_pch_SteamVR_BackgroundUseDomeProjection_Bool = \"backgroundUseDomeProjection\" Field Value Type Description String k_pch_SteamVR_BaseStationPowerManagement_Bool Declaration public const string k_pch_SteamVR_BaseStationPowerManagement_Bool = \"basestationPowerManagement\" Field Value Type Description String k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 Declaration public const string k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32 = \"CycleBackgroundImageTimeSec\" Field Value Type Description String k_pch_SteamVR_DebugInput Declaration public const string k_pch_SteamVR_DebugInput = \"debugInput\" Field Value Type Description String k_pch_SteamVR_DebugInputBinding Declaration public const string k_pch_SteamVR_DebugInputBinding = \"debugInputBinding\" Field Value Type Description String k_pch_SteamVR_DebugProcessPipe_String Declaration public const string k_pch_SteamVR_DebugProcessPipe_String = \"debugProcessPipe\" Field Value Type Description String k_pch_SteamVR_DefaultMirrorView_Int32 Declaration public const string k_pch_SteamVR_DefaultMirrorView_Int32 = \"mirrorView\" Field Value Type Description String k_pch_SteamVR_DisplayDebug_Bool Declaration public const string k_pch_SteamVR_DisplayDebug_Bool = \"displayDebug\" Field Value Type Description String k_pch_SteamVR_DisplayDebugX_Int32 Declaration public const string k_pch_SteamVR_DisplayDebugX_Int32 = \"displayDebugX\" Field Value Type Description String k_pch_SteamVR_DisplayDebugY_Int32 Declaration public const string k_pch_SteamVR_DisplayDebugY_Int32 = \"displayDebugY\" Field Value Type Description String k_pch_SteamVR_EnableHomeApp Declaration public const string k_pch_SteamVR_EnableHomeApp = \"enableHomeApp\" Field Value Type Description String k_pch_SteamVR_EnableLinuxVulkanAsync_Bool Declaration public const string k_pch_SteamVR_EnableLinuxVulkanAsync_Bool = \"enableLinuxVulkanAsync\" Field Value Type Description String k_pch_SteamVR_EnableSafeMode Declaration public const string k_pch_SteamVR_EnableSafeMode = \"enableSafeMode\" Field Value Type Description String k_pch_SteamVR_EnableSharedResourceJournaling Declaration public const string k_pch_SteamVR_EnableSharedResourceJournaling = \"enableSharedResourceJournaling\" Field Value Type Description String k_pch_SteamVR_ForcedDriverKey_String Declaration public const string k_pch_SteamVR_ForcedDriverKey_String = \"forcedDriver\" Field Value Type Description String k_pch_SteamVR_ForcedHmdKey_String Declaration public const string k_pch_SteamVR_ForcedHmdKey_String = \"forcedHmd\" Field Value Type Description String k_pch_SteamVR_ForceFadeOnBadTracking_Bool Declaration public const string k_pch_SteamVR_ForceFadeOnBadTracking_Bool = \"forceFadeOnBadTracking\" Field Value Type Description String k_pch_SteamVR_ForceWindows32bitVRMonitor Declaration public const string k_pch_SteamVR_ForceWindows32bitVRMonitor = \"forceWindows32BitVRMonitor\" Field Value Type Description String k_pch_SteamVR_GridColor_String Declaration public const string k_pch_SteamVR_GridColor_String = \"gridColor\" Field Value Type Description String k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool Declaration public const string k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool = \"haveStartedTutorialForNativeChaperoneDriver\" Field Value Type Description String k_pch_SteamVR_InputBindingUIBlock Declaration public const string k_pch_SteamVR_InputBindingUIBlock = \"inputBindingUI\" Field Value Type Description String k_pch_SteamVR_IPD_Float Declaration public const string k_pch_SteamVR_IPD_Float = \"ipd\" Field Value Type Description String k_pch_SteamVR_IpdOffset_Float Declaration public const string k_pch_SteamVR_IpdOffset_Float = \"ipdOffset\" Field Value Type Description String k_pch_SteamVR_LegacyInputRebinding Declaration public const string k_pch_SteamVR_LegacyInputRebinding = \"legacyInputRebinding\" Field Value Type Description String k_pch_SteamVR_LogLevel_Int32 Declaration public const string k_pch_SteamVR_LogLevel_Int32 = \"loglevel\" Field Value Type Description String k_pch_SteamVR_MaxRecommendedResolution_Int32 Declaration public const string k_pch_SteamVR_MaxRecommendedResolution_Int32 = \"maxRecommendedResolution\" Field Value Type Description String k_pch_SteamVR_MirrorViewGeometry_String Declaration public const string k_pch_SteamVR_MirrorViewGeometry_String = \"mirrorViewGeometry\" Field Value Type Description String k_pch_SteamVR_MirrorViewGeometryMaximized_String Declaration public const string k_pch_SteamVR_MirrorViewGeometryMaximized_String = \"mirrorViewGeometryMaximized\" Field Value Type Description String k_pch_SteamVR_MotionSmoothing_Bool Declaration public const string k_pch_SteamVR_MotionSmoothing_Bool = \"motionSmoothing\" Field Value Type Description String k_pch_SteamVR_MotionSmoothingOverride_Int32 Declaration public const string k_pch_SteamVR_MotionSmoothingOverride_Int32 = \"motionSmoothingOverride\" Field Value Type Description String k_pch_SteamVR_NeverKillProcesses_Bool Declaration public const string k_pch_SteamVR_NeverKillProcesses_Bool = \"neverKillProcesses\" Field Value Type Description String k_pch_SteamVR_PlayAreaColor_String Declaration public const string k_pch_SteamVR_PlayAreaColor_String = \"playAreaColor\" Field Value Type Description String k_pch_SteamVR_PreferredRefreshRate Declaration public const string k_pch_SteamVR_PreferredRefreshRate = \"preferredRefreshRate\" Field Value Type Description String k_pch_SteamVR_RenderCameraMode Declaration public const string k_pch_SteamVR_RenderCameraMode = \"renderCameraMode\" Field Value Type Description String k_pch_SteamVR_RequireHmd_String Declaration public const string k_pch_SteamVR_RequireHmd_String = \"requireHmd\" Field Value Type Description String k_pch_SteamVR_RetailDemo_Bool Declaration public const string k_pch_SteamVR_RetailDemo_Bool = \"retailDemo\" Field Value Type Description String k_pch_SteamVR_Section Declaration public const string k_pch_SteamVR_Section = \"steamvr\" Field Value Type Description String k_pch_SteamVR_SendSystemButtonToAllApps_Bool Declaration public const string k_pch_SteamVR_SendSystemButtonToAllApps_Bool = \"sendSystemButtonToAllApps\" Field Value Type Description String k_pch_SteamVR_ShowMirrorView_Bool Declaration public const string k_pch_SteamVR_ShowMirrorView_Bool = \"showMirrorView\" Field Value Type Description String k_pch_SteamVR_ShowStage_Bool Declaration public const string k_pch_SteamVR_ShowStage_Bool = \"showStage\" Field Value Type Description String k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float Declaration public const string k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float = \"speakersForwardYawOffsetDegrees\" Field Value Type Description String k_pch_SteamVR_StartCompositorFromAppLaunch_Bool Declaration public const string k_pch_SteamVR_StartCompositorFromAppLaunch_Bool = \"startCompositorFromAppLaunch\" Field Value Type Description String k_pch_SteamVR_StartDashboardFromAppLaunch_Bool Declaration public const string k_pch_SteamVR_StartDashboardFromAppLaunch_Bool = \"startDashboardFromAppLaunch\" Field Value Type Description String k_pch_SteamVR_StartMonitorFromAppLaunch Declaration public const string k_pch_SteamVR_StartMonitorFromAppLaunch = \"startMonitorFromAppLaunch\" Field Value Type Description String k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool Declaration public const string k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool = \"startOverlayAppsFromDashboard\" Field Value Type Description String k_pch_SteamVR_SupersampleManualOverride_Bool Declaration public const string k_pch_SteamVR_SupersampleManualOverride_Bool = \"supersampleManualOverride\" Field Value Type Description String k_pch_SteamVR_SupersampleScale_Float Declaration public const string k_pch_SteamVR_SupersampleScale_Float = \"supersampleScale\" Field Value Type Description String k_pch_SteamVR_UsingSpeakers_Bool Declaration public const string k_pch_SteamVR_UsingSpeakers_Bool = \"usingSpeakers\" Field Value Type Description String k_pch_Trackers_Section Declaration public const string k_pch_Trackers_Section = \"trackers\" Field Value Type Description String k_pch_TrackingOverride_Section Declaration public const string k_pch_TrackingOverride_Section = \"TrackingOverrides\" Field Value Type Description String k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool Declaration public const string k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool = \"HidePopupsWhenStatusMinimized\" Field Value Type Description String k_pch_UserInterface_MinimizeToTray_Bool Declaration public const string k_pch_UserInterface_MinimizeToTray_Bool = \"MinimizeToTray\" Field Value Type Description String k_pch_UserInterface_Screenshots_Bool Declaration public const string k_pch_UserInterface_Screenshots_Bool = \"screenshots\" Field Value Type Description String k_pch_UserInterface_ScreenshotType_Int Declaration public const string k_pch_UserInterface_ScreenshotType_Int = \"screenshotType\" Field Value Type Description String k_pch_UserInterface_Section Declaration public const string k_pch_UserInterface_Section = \"userinterface\" Field Value Type Description String k_pch_UserInterface_StatusAlwaysOnTop_Bool Declaration public const string k_pch_UserInterface_StatusAlwaysOnTop_Bool = \"StatusAlwaysOnTop\" Field Value Type Description String k_pch_VRWebHelper_DebuggerEnabled_Bool Declaration public const string k_pch_VRWebHelper_DebuggerEnabled_Bool = \"DebuggerEnabled\" Field Value Type Description String k_pch_VRWebHelper_DebuggerPort_Int32 Declaration public const string k_pch_VRWebHelper_DebuggerPort_Int32 = \"DebuggerPort\" Field Value Type Description String k_pch_VRWebHelper_Section Declaration public const string k_pch_VRWebHelper_Section = \"VRWebHelper\" Field Value Type Description String k_pch_WebInterface_Section Declaration public const string k_pch_WebInterface_Section = \"WebInterface\" Field Value Type Description String k_pch_WebInterface_WebEnable_Bool Declaration public const string k_pch_WebInterface_WebEnable_Bool = \"WebEnable\" Field Value Type Description String k_pch_WebInterface_WebPort_String Declaration public const string k_pch_WebInterface_WebPort_String = \"WebPort\" Field Value Type Description String k_ulInvalidActionHandle Declaration public const ulong k_ulInvalidActionHandle = 0UL Field Value Type Description UInt64 k_ulInvalidActionSetHandle Declaration public const ulong k_ulInvalidActionSetHandle = 0UL Field Value Type Description UInt64 k_ulInvalidDriverHandle Declaration public const ulong k_ulInvalidDriverHandle = 0UL Field Value Type Description UInt64 k_ulInvalidInputValueHandle Declaration public const ulong k_ulInvalidInputValueHandle = 0UL Field Value Type Description UInt64 k_ulInvalidIOBufferHandle Declaration public const ulong k_ulInvalidIOBufferHandle = 0UL Field Value Type Description UInt64 k_ulInvalidPropertyContainer Declaration public const ulong k_ulInvalidPropertyContainer = 0UL Field Value Type Description UInt64 k_ulInvalidSpatialAnchorHandle Declaration public const uint k_ulInvalidSpatialAnchorHandle = 0U Field Value Type Description UInt32 k_ulOverlayHandleInvalid Declaration public const ulong k_ulOverlayHandleInvalid = 0UL Field Value Type Description UInt64 k_unActionPropertyTag Declaration public const uint k_unActionPropertyTag = 32U Field Value Type Description UInt32 k_unBoolPropertyTag Declaration public const uint k_unBoolPropertyTag = 4U Field Value Type Description UInt32 k_unControllerStateAxisCount Declaration public const uint k_unControllerStateAxisCount = 5U Field Value Type Description UInt32 k_unFloatPropertyTag Declaration public const uint k_unFloatPropertyTag = 1U Field Value Type Description UInt32 k_unHapticVibrationPropertyTag Declaration public const uint k_unHapticVibrationPropertyTag = 35U Field Value Type Description UInt32 k_unHiddenAreaPropertyTag Declaration public const uint k_unHiddenAreaPropertyTag = 30U Field Value Type Description UInt32 k_unHmdMatrix34PropertyTag Declaration public const uint k_unHmdMatrix34PropertyTag = 20U Field Value Type Description UInt32 k_unHmdMatrix44PropertyTag Declaration public const uint k_unHmdMatrix44PropertyTag = 21U Field Value Type Description UInt32 k_unHmdQuadPropertyTag Declaration public const uint k_unHmdQuadPropertyTag = 25U Field Value Type Description UInt32 k_unHmdVector2PropertyTag Declaration public const uint k_unHmdVector2PropertyTag = 24U Field Value Type Description UInt32 k_unHmdVector3PropertyTag Declaration public const uint k_unHmdVector3PropertyTag = 22U Field Value Type Description UInt32 k_unHmdVector4PropertyTag Declaration public const uint k_unHmdVector4PropertyTag = 23U Field Value Type Description UInt32 k_unInputValuePropertyTag Declaration public const uint k_unInputValuePropertyTag = 33U Field Value Type Description UInt32 k_unInt32PropertyTag Declaration public const uint k_unInt32PropertyTag = 2U Field Value Type Description UInt32 k_unInvalidPropertyTag Declaration public const uint k_unInvalidPropertyTag = 0U Field Value Type Description UInt32 k_unJsonPropertyTag Declaration public const uint k_unJsonPropertyTag = 41U Field Value Type Description UInt32 k_unMaxActionNameLength Declaration public const uint k_unMaxActionNameLength = 64U Field Value Type Description UInt32 k_unMaxActionOriginCount Declaration public const uint k_unMaxActionOriginCount = 16U Field Value Type Description UInt32 k_unMaxActionSetNameLength Declaration public const uint k_unMaxActionSetNameLength = 64U Field Value Type Description UInt32 k_unMaxApplicationKeyLength Declaration public const uint k_unMaxApplicationKeyLength = 128U Field Value Type Description UInt32 k_unMaxBoneNameLength Declaration public const uint k_unMaxBoneNameLength = 32U Field Value Type Description UInt32 k_unMaxDistortionFunctionParameters Declaration public const uint k_unMaxDistortionFunctionParameters = 8U Field Value Type Description UInt32 k_unMaxDriverDebugResponseSize Declaration public const uint k_unMaxDriverDebugResponseSize = 32768U Field Value Type Description UInt32 k_unMaxOverlayCount Declaration public const uint k_unMaxOverlayCount = 64U Field Value Type Description UInt32 k_unMaxOverlayIntersectionMaskPrimitivesCount Declaration public const uint k_unMaxOverlayIntersectionMaskPrimitivesCount = 32U Field Value Type Description UInt32 k_unMaxPropertyStringSize Declaration public const uint k_unMaxPropertyStringSize = 32768U Field Value Type Description UInt32 k_unMaxSettingsKeyLength Declaration public const uint k_unMaxSettingsKeyLength = 128U Field Value Type Description UInt32 k_unMaxTrackedDeviceCount Declaration public const uint k_unMaxTrackedDeviceCount = 64U Field Value Type Description UInt32 k_unNotificationTextMaxSize Declaration public const uint k_unNotificationTextMaxSize = 256U Field Value Type Description UInt32 k_unOpenVRInternalReserved_End Declaration public const uint k_unOpenVRInternalReserved_End = 10000U Field Value Type Description UInt32 k_unOpenVRInternalReserved_Start Declaration public const uint k_unOpenVRInternalReserved_Start = 1000U Field Value Type Description UInt32 k_unPathHandleInfoTag Declaration public const uint k_unPathHandleInfoTag = 31U Field Value Type Description UInt32 k_unScreenshotHandleInvalid Declaration public const uint k_unScreenshotHandleInvalid = 0U Field Value Type Description UInt32 k_unSkeletonPropertyTag Declaration public const uint k_unSkeletonPropertyTag = 36U Field Value Type Description UInt32 k_unSpatialAnchorPosePropertyTag Declaration public const uint k_unSpatialAnchorPosePropertyTag = 40U Field Value Type Description UInt32 k_unStringPropertyTag Declaration public const uint k_unStringPropertyTag = 5U Field Value Type Description UInt32 k_unTrackedDeviceIndex_Hmd Declaration public const uint k_unTrackedDeviceIndex_Hmd = 0U Field Value Type Description UInt32 k_unTrackedDeviceIndexInvalid Declaration public const uint k_unTrackedDeviceIndexInvalid = 4294967295U Field Value Type Description UInt32 k_unTrackedDeviceIndexOther Declaration public const uint k_unTrackedDeviceIndexOther = 4294967294U Field Value Type Description UInt32 k_unUint64PropertyTag Declaration public const uint k_unUint64PropertyTag = 3U Field Value Type Description UInt32 k_unVROverlayMaxKeyLength Declaration public const uint k_unVROverlayMaxKeyLength = 128U Field Value Type Description UInt32 k_unVROverlayMaxNameLength Declaration public const uint k_unVROverlayMaxNameLength = 128U Field Value Type Description UInt32 k_unWildcardPropertyTag Declaration public const uint k_unWildcardPropertyTag = 34U Field Value Type Description UInt32 Properties Applications Declaration public static CVRApplications Applications { get; } Property Value Type Description CVRApplications Chaperone Declaration public static CVRChaperone Chaperone { get; } Property Value Type Description CVRChaperone ChaperoneSetup Declaration public static CVRChaperoneSetup ChaperoneSetup { get; } Property Value Type Description CVRChaperoneSetup Compositor Declaration public static CVRCompositor Compositor { get; } Property Value Type Description CVRCompositor ExtendedDisplay Declaration public static CVRExtendedDisplay ExtendedDisplay { get; } Property Value Type Description CVRExtendedDisplay Input Declaration public static CVRInput Input { get; } Property Value Type Description CVRInput Overlay Declaration public static CVROverlay Overlay { get; } Property Value Type Description CVROverlay RenderModels Declaration public static CVRRenderModels RenderModels { get; } Property Value Type Description CVRRenderModels Screenshots Declaration public static CVRScreenshots Screenshots { get; } Property Value Type Description CVRScreenshots Settings Declaration public static CVRSettings Settings { get; } Property Value Type Description CVRSettings SpatialAnchors Declaration public static CVRSpatialAnchors SpatialAnchors { get; } Property Value Type Description CVRSpatialAnchors System Declaration public static CVRSystem System { get; } Property Value Type Description CVRSystem TrackedCamera Declaration public static CVRTrackedCamera TrackedCamera { get; } Property Value Type Description CVRTrackedCamera Methods GetGenericInterface(String, ref EVRInitError) Declaration public static IntPtr GetGenericInterface(string pchInterfaceVersion, ref EVRInitError peError) Parameters Type Name Description String pchInterfaceVersion EVRInitError peError Returns Type Description IntPtr GetInitToken() Declaration public static uint GetInitToken() Returns Type Description UInt32 GetStringForHmdError(EVRInitError) Declaration public static string GetStringForHmdError(EVRInitError error) Parameters Type Name Description EVRInitError error Returns Type Description String Init(ref EVRInitError, EVRApplicationType, String) Declaration public static CVRSystem Init(ref EVRInitError peError, EVRApplicationType eApplicationType = EVRApplicationType.VRApplication_Scene, string pchStartupInfo = \"\") Parameters Type Name Description EVRInitError peError EVRApplicationType eApplicationType String pchStartupInfo Returns Type Description CVRSystem InitInternal(ref EVRInitError, EVRApplicationType) Declaration public static uint InitInternal(ref EVRInitError peError, EVRApplicationType eApplicationType) Parameters Type Name Description EVRInitError peError EVRApplicationType eApplicationType Returns Type Description UInt32 InitInternal2(ref EVRInitError, EVRApplicationType, String) Declaration public static uint InitInternal2(ref EVRInitError peError, EVRApplicationType eApplicationType, string pchStartupInfo) Parameters Type Name Description EVRInitError peError EVRApplicationType eApplicationType String pchStartupInfo Returns Type Description UInt32 IsHmdPresent() Declaration public static bool IsHmdPresent() Returns Type Description Boolean IsInterfaceVersionValid(String) Declaration public static bool IsInterfaceVersionValid(string pchInterfaceVersion) Parameters Type Name Description String pchInterfaceVersion Returns Type Description Boolean IsRuntimeInstalled() Declaration public static bool IsRuntimeInstalled() Returns Type Description Boolean RuntimePath() Declaration public static string RuntimePath() Returns Type Description String Shutdown() Declaration public static void Shutdown() ShutdownInternal() Declaration public static void ShutdownInternal()"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.OpenVRInterop.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.OpenVRInterop.html",
    "title": "Class OpenVRInterop | Mixed Reality Toolkit Documentation",
    "keywords": "Class OpenVRInterop Inheritance Object OpenVRInterop Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class OpenVRInterop"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_ComponentState_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_ComponentState_t.html",
    "title": "Struct RenderModel_ComponentState_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_ComponentState_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_ComponentState_t Fields mTrackingToComponentLocal Declaration public HmdMatrix34_t mTrackingToComponentLocal Field Value Type Description HmdMatrix34_t mTrackingToComponentRenderModel Declaration public HmdMatrix34_t mTrackingToComponentRenderModel Field Value Type Description HmdMatrix34_t uProperties Declaration public uint uProperties Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_ControllerMode_State_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_ControllerMode_State_t.html",
    "title": "Struct RenderModel_ControllerMode_State_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_ControllerMode_State_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_ControllerMode_State_t Fields bScrollWheelVisible Declaration public bool bScrollWheelVisible Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_t.html",
    "title": "Struct RenderModel_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_t Fields diffuseTextureId Declaration public int diffuseTextureId Field Value Type Description Int32 rIndexData Declaration public IntPtr rIndexData Field Value Type Description IntPtr rVertexData Declaration public IntPtr rVertexData Field Value Type Description IntPtr unTriangleCount Declaration public uint unTriangleCount Field Value Type Description UInt32 unVertexCount Declaration public uint unVertexCount Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_TextureMap_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_TextureMap_t.html",
    "title": "Struct RenderModel_TextureMap_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_TextureMap_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_TextureMap_t Fields rubTextureMapData Declaration public IntPtr rubTextureMapData Field Value Type Description IntPtr unHeight Declaration public ushort unHeight Field Value Type Description UInt16 unWidth Declaration public ushort unWidth Field Value Type Description UInt16"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_TextureMap_t_Packed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_TextureMap_t_Packed.html",
    "title": "Struct RenderModel_TextureMap_t_Packed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_TextureMap_t_Packed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_TextureMap_t_Packed Constructors RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t) Declaration public RenderModel_TextureMap_t_Packed(RenderModel_TextureMap_t unpacked) Parameters Type Name Description RenderModel_TextureMap_t unpacked Fields rubTextureMapData Declaration public IntPtr rubTextureMapData Field Value Type Description IntPtr unHeight Declaration public ushort unHeight Field Value Type Description UInt16 unWidth Declaration public ushort unWidth Field Value Type Description UInt16 Methods Unpack(ref RenderModel_TextureMap_t) Declaration public void Unpack(ref RenderModel_TextureMap_t unpacked) Parameters Type Name Description RenderModel_TextureMap_t unpacked"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_t_Packed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_t_Packed.html",
    "title": "Struct RenderModel_t_Packed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_t_Packed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_t_Packed Constructors RenderModel_t_Packed(RenderModel_t) Declaration public RenderModel_t_Packed(RenderModel_t unpacked) Parameters Type Name Description RenderModel_t unpacked Fields diffuseTextureId Declaration public int diffuseTextureId Field Value Type Description Int32 rIndexData Declaration public IntPtr rIndexData Field Value Type Description IntPtr rVertexData Declaration public IntPtr rVertexData Field Value Type Description IntPtr unTriangleCount Declaration public uint unTriangleCount Field Value Type Description UInt32 unVertexCount Declaration public uint unVertexCount Field Value Type Description UInt32 Methods Unpack(ref RenderModel_t) Declaration public void Unpack(ref RenderModel_t unpacked) Parameters Type Name Description RenderModel_t unpacked"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_Vertex_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.RenderModel_Vertex_t.html",
    "title": "Struct RenderModel_Vertex_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct RenderModel_Vertex_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct RenderModel_Vertex_t Fields rfTextureCoord0 Declaration public float rfTextureCoord0 Field Value Type Description Single rfTextureCoord1 Declaration public float rfTextureCoord1 Field Value Type Description Single vNormal Declaration public HmdVector3_t vNormal Field Value Type Description HmdVector3_t vPosition Declaration public HmdVector3_t vPosition Field Value Type Description HmdVector3_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureBounds_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureBounds_t.html",
    "title": "Struct VRTextureBounds_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRTextureBounds_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRTextureBounds_t Fields uMax Declaration public float uMax Field Value Type Description Single uMin Declaration public float uMin Field Value Type Description Single vMax Declaration public float vMax Field Value Type Description Single vMin Declaration public float vMin Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureDepthInfo_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureDepthInfo_t.html",
    "title": "Struct VRTextureDepthInfo_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRTextureDepthInfo_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRTextureDepthInfo_t Fields handle Declaration public IntPtr handle Field Value Type Description IntPtr mProjection Declaration public HmdMatrix44_t mProjection Field Value Type Description HmdMatrix44_t vRange Declaration public HmdVector2_t vRange Field Value Type Description HmdVector2_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureWithDepth_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureWithDepth_t.html",
    "title": "Struct VRTextureWithDepth_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRTextureWithDepth_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRTextureWithDepth_t Fields depth Declaration public VRTextureDepthInfo_t depth Field Value Type Description VRTextureDepthInfo_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureWithPoseAndDepth_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureWithPoseAndDepth_t.html",
    "title": "Struct VRTextureWithPoseAndDepth_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRTextureWithPoseAndDepth_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRTextureWithPoseAndDepth_t Fields depth Declaration public VRTextureDepthInfo_t depth Field Value Type Description VRTextureDepthInfo_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureWithPose_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRTextureWithPose_t.html",
    "title": "Struct VRTextureWithPose_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRTextureWithPose_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRTextureWithPose_t Fields mDeviceToAbsoluteTracking Declaration public HmdMatrix34_t mDeviceToAbsoluteTracking Field Value Type Description HmdMatrix34_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRVulkanTextureData_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRVulkanTextureData_t.html",
    "title": "Struct VRVulkanTextureData_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRVulkanTextureData_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRVulkanTextureData_t Fields m_nFormat Declaration public uint m_nFormat Field Value Type Description UInt32 m_nHeight Declaration public uint m_nHeight Field Value Type Description UInt32 m_nImage Declaration public ulong m_nImage Field Value Type Description UInt64 m_nQueueFamilyIndex Declaration public uint m_nQueueFamilyIndex Field Value Type Description UInt32 m_nSampleCount Declaration public uint m_nSampleCount Field Value Type Description UInt32 m_nWidth Declaration public uint m_nWidth Field Value Type Description UInt32 m_pDevice Declaration public IntPtr m_pDevice Field Value Type Description IntPtr m_pInstance Declaration public IntPtr m_pInstance Field Value Type Description IntPtr m_pPhysicalDevice Declaration public IntPtr m_pPhysicalDevice Field Value Type Description IntPtr m_pQueue Declaration public IntPtr m_pQueue Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.LayoutAnchor.html",
    "title": "Enum LayoutAnchor | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LayoutAnchor Describes where parent should be located relative to child layout elements. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum LayoutAnchor Fields Name Description BottomCenter Parent will be in bottom center of collection BottomLeft Parent will be in bottom left of collection BottomRight Parent will be in bottom right of collection MiddleCenter Parent will be in middle center of collection MiddleLeft Parent will be in middle left of collection MiddleRight Parent will be in middle right of collection UpperCenter Parent will be in upper center of collection UpperLeft Parent will be in upper left corner of collection UpperRight Parent will be in upper right of collection"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.LayoutOrder.html",
    "title": "Enum LayoutOrder | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LayoutOrder Collection layout type enum Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum LayoutOrder Fields Name Description ColumnThenRow Sort by column, then by row Horizontal Sort horizontally RowThenColumn Sort by row, then by column Vertical Sort vertically"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.LineFollower.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.LineFollower.html",
    "title": "Class LineFollower | Mixed Reality Toolkit Documentation",
    "keywords": "Class LineFollower Synchronizes the follower's transform position with the point along the line. Inheritance Object LineFollower Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class LineFollower : MonoBehaviour Properties Follower The transform that will follow the point along the line. Declaration public Transform Follower { get; set; } Property Value Type Description Transform NormalizedLength Gets a point along the line at the specified normalized length. Declaration public float NormalizedLength { get; set; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.LineUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.LineUtility.html",
    "title": "Class LineUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class LineUtility Mixed Reality line utility class with helpful math functions for calculation, and other convenience methods. Inheritance Object LineUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class LineUtility Methods GetEllipsePoint(Vector2, Single) Calculate the ellipse point at the angle provided. Declaration public static Vector3 GetEllipsePoint(Vector2 radius, float angle) Parameters Type Name Description Vector2 radius The radius of the ellipse. Single angle Angle along the ellipse to find the point. Returns Type Description Vector3 The calculated point at the specified angle. GetPointAlongConstrainedParabola(Vector3, Vector3, Vector3, Single, Single) Gets the point along a constrained parabola. Declaration public static Vector3 GetPointAlongConstrainedParabola(Vector3 origin, Vector3 end, Vector3 upDirection, float height, float normalizedLength) Parameters Type Name Description Vector3 origin The point in space where the parabola starts. Vector3 end The point in space where the parabola ends. Vector3 upDirection The up direction of the arc. Single height The height of the arc. Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. GetPointAlongPhysicalParabola(Vector3, Vector3, Single, Vector3, Single) Gets the point along a physics based parabola. Declaration public static Vector3 GetPointAlongPhysicalParabola(Vector3 origin, Vector3 direction, float velocity, Vector3 gravity, float time) Parameters Type Name Description Vector3 origin The point in space where the parabola starts Vector3 direction The direction the line is intended to go Single velocity Vector3 gravity Single time Returns Type Description Vector3 The calculated point. GetPointAlongSpline(MixedRealityPose[], Single, InterpolationType) Gets the point along the spline. Declaration public static Vector3 GetPointAlongSpline(MixedRealityPose[] points, float normalizedLength, InterpolationType interpolation = InterpolationType.Bezier) Parameters Type Name Description MixedRealityPose [] points the points of the whole spline. Single normalizedLength the normalized length along the line to calculate the point. InterpolationType interpolation Optional Interpolation type to use when calculating the point. Returns Type Description Vector3 The calculated point found along the normalized length. GetVectorCollectionBlend(Vector3[], Single, Boolean) Returns a blended value from a collection of vectors Declaration public static Vector3 GetVectorCollectionBlend(Vector3[] vectorCollection, float normalizedLength, bool repeat) Parameters Type Name Description Vector3 [] vectorCollection The collection to use to calculate the blend. Single normalizedLength the normalized length along the line to calculate the point. Boolean repeat Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateBezierPoints(Vector3, Vector3, Vector3, Vector3, Single) Interpolate the provided points using the standard Bezier algorithm. Declaration public static Vector3 InterpolateBezierPoints(Vector3 point1, Vector3 point2, Vector3 point3, Vector3 point4, float normalizedLength) Parameters Type Name Description Vector3 point1 Vector3 point2 Vector3 point3 Vector3 point4 Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateCatmullRomPoints(Vector3, Vector3, Vector3, Vector3, Single) Interpolate the provided points using Catmull Rom algorithm. Declaration public static Vector3 InterpolateCatmullRomPoints(Vector3 point1, Vector3 point2, Vector3 point3, Vector3 point4, float normalizedLength) Parameters Type Name Description Vector3 point1 Vector3 point2 Vector3 point3 Vector3 point4 Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateHermitePoints(Vector3, Vector3, Vector3, Vector3, Single) Interpolate the provided points using the Hermite algorithm. Declaration public static Vector3 InterpolateHermitePoints(Vector3 point1, Vector3 point2, Vector3 point3, Vector3 point4, float normalizedLength) Parameters Type Name Description Vector3 point1 Vector3 point2 Vector3 point3 Vector3 point4 Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. InterpolateVectorArray(Vector3[], Single) Interpolate a position between the provided points. Declaration public static Vector3 InterpolateVectorArray(Vector3[] points, float normalizedLength) Parameters Type Name Description Vector3 [] points The points to use in the calculation. Single normalizedLength the normalized length along the line to calculate the point. Returns Type Description Vector3 The calculated point found along the normalized length. Invert(Color) Inverts the color Declaration public static Color Invert(this Color color) Parameters Type Name Description Color color Returns Type Description Color"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MaintainBorderLightWidth.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MaintainBorderLightWidth.html",
    "title": "Class MaintainBorderLightWidth | Mixed Reality Toolkit Documentation",
    "keywords": "Class MaintainBorderLightWidth Utility component to keep the border light width a constant size no mater the object scale. This component should be used in conjunction with the \"MixedRealityToolkit/Standard\" shader \"_BorderLight\" feature. Inheritance Object MaintainBorderLightWidth Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class MaintainBorderLightWidth : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MathUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MathUtilities.html",
    "title": "Class MathUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class MathUtilities Math Utilities class. Inheritance Object MathUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class MathUtilities Methods Add(Matrix4x4, Matrix4x4) Element-wise addition of two Matrix4x4s - extension method Declaration public static Matrix4x4 Add(Matrix4x4 a, Matrix4x4 b) Parameters Type Name Description Matrix4x4 a matrix Matrix4x4 b matrix Returns Type Description Matrix4x4 element-wise (a+b) AngularScaleFromDistance(Single, Single) Declaration [Obsolete(\"Method obsolete. Use ScaleFromAngularSizeAndDistance instead\")] public static float AngularScaleFromDistance(float angle, float distance) Parameters Type Name Description Single angle Single distance Returns Type Description Single CLampLerp(Single, Single, Single, Single) Clamps via a lerp for a \"soft\" clamp effect Declaration public static float CLampLerp(float pos, float min, float max, float clampFactor) Parameters Type Name Description Single pos number to clamp Single min if pos is less than min, then lerp clamps to this value Single max if pos is more than max, lerp clamps to this value Single clampFactor Range from 0.0f to 1.0f of how close to snap to min and max Returns Type Description Single A soft clamped value ClosestPointOnLineSegmentToPoint(Vector3, Vector3, Vector3) Declaration public static Vector3 ClosestPointOnLineSegmentToPoint(Vector3 point, Vector3 lineStart, Vector3 lineEnd) Parameters Type Name Description Vector3 point Vector3 lineStart Vector3 lineEnd Returns Type Description Vector3 ClosestPointOnLineToPoint(Vector3, Vector3, Vector3) Declaration public static Vector3 ClosestPointOnLineToPoint(Vector3 point, Vector3 linePointA, Vector3 linePointB) Parameters Type Name Description Vector3 point Vector3 linePointA Vector3 linePointB Returns Type Description Vector3 DegreesToRadians(Double) Convert degrees to radians. Declaration public static float DegreesToRadians(double degrees) Parameters Type Name Description Double degrees Angle, in degrees. Returns Type Description Single Angle, in radians. DistanceOfPointToLine(Ray, Vector3) find unsigned distance of 3D point to an infinite line Declaration public static float DistanceOfPointToLine(Ray ray, Vector3 point) Parameters Type Name Description Ray ray ray that specifies an infinite line Vector3 point 3D point Returns Type Description Single unsigned perpendicular distance from point to line DistanceOfPointToLine(Vector3, Vector3, Vector3) Returns the distance between a point and an infinite line defined by two points; linePointA and linePointB Declaration public static float DistanceOfPointToLine(Vector3 point, Vector3 linePointA, Vector3 linePointB) Parameters Type Name Description Vector3 point Vector3 linePointA Vector3 linePointB Returns Type Description Single DistanceOfPointToLineSegment(Vector3, Vector3, Vector3) Declaration public static float DistanceOfPointToLineSegment(Vector3 point, Vector3 lineStart, Vector3 lineEnd) Parameters Type Name Description Vector3 point Vector3 lineStart Vector3 lineEnd Returns Type Description Single GetAngleBetween(Vector2, Vector2) Calculates the angle (at pointA) between two, two-dimensional points. Declaration public static float GetAngleBetween(Vector2 pointA, Vector2 pointB) Parameters Type Name Description Vector2 pointA The first point. Vector2 pointB The second point. Returns Type Description Single The angle between the two points. GetDirection(Quaternion) Calculates the direction vector from a rotation. Declaration public static Vector3 GetDirection(Quaternion rotation) Parameters Type Name Description Quaternion rotation Quaternion representing the rotation of the object. Returns Type Description Vector3 Normalized Vector3 representing the direction vector. InRange(Vector2, Vector2, Vector2) Tests component-wise if a Vector2 is in a given range Declaration public static bool InRange(Vector2 vec, Vector2 lower, Vector2 upper) Parameters Type Name Description Vector2 vec The vector to test Vector2 lower The lower bounds Vector2 upper The upper bounds Returns Type Description Boolean true if in range, otherwise false InRange(Vector3, Vector3, Vector3) Tests component-wise if a Vector3 is in a given range Declaration public static bool InRange(Vector3 vec, Vector3 lower, Vector3 upper) Parameters Type Name Description Vector3 vec The vector to test Vector3 lower The lower bounds Vector3 upper The upper bounds Returns Type Description Boolean true if in range, otherwise false IsInFOV(Vector3, Transform, Single, Single, Single, Single) Returns if a point lies within a frame of reference view as defined by arguments Declaration public static bool IsInFOV(Vector3 testPosition, Transform frameOfReference, float verticalFOV, float horizontalFOV, float minPlaneDistance, float maxPlaneDistance) Parameters Type Name Description Vector3 testPosition Transform frameOfReference Single verticalFOV Single horizontalFOV Single minPlaneDistance Single maxPlaneDistance Returns Type Description Boolean Remarks Field of view parameters are in degrees and plane distances are in meters NearestPointToLines(Ray, Ray) Find 3D point that minimizes distance to 2 lines, midpoint of the shortest perpendicular line segment between them Declaration public static Vector3 NearestPointToLines(Ray p, Ray q) Parameters Type Name Description Ray p ray that specifies a line Ray q ray that specifies a line Returns Type Description Vector3 point nearest to the lines NearestPointToLinesLeastSquares(IEnumerable<Ray>) Find 3D point that minimizes distance to a set of 2 or more lines Declaration public static Vector3 NearestPointToLinesLeastSquares(IEnumerable<Ray> rays) Parameters Type Name Description IEnumerable < Ray > rays each ray specifies an infinite line Returns Type Description Vector3 point nearest to the set of lines NearestPointToLinesRANSAC(List<Ray>, Int32, Single, out Int32) Find 3D point that minimizes distance to a set of 2 or more lines, ignoring outliers Declaration public static Vector3 NearestPointToLinesRANSAC(List<Ray> rays, int ransac_iterations, float ransac_threshold, out int numActualInliers) Parameters Type Name Description List < Ray > rays list of rays, each specifying a line, must have at least 1 Int32 ransac_iterations number of iterations: log(1-p)/log(1-(1-E)^s) where p is probability of at least one sample containing s points is all inliers E is proportion of outliers (1-ransac_ratio) e.g. p=0.999, ransac_ratio=0.54, s=2 ==> log(0.001)/(log(1-0.54^2) = 20 Single ransac_threshold minimum distance from point to line for a line to be considered an inlier Int32 numActualInliers return number of inliers: lines that are within ransac_threshold of nearest point Returns Type Description Vector3 point nearest to the set of lines, ignoring outliers QuaternionFromMatrix(Matrix4x4) Creates a quaternion containing the rotation from the input matrix. Declaration public static Quaternion QuaternionFromMatrix(Matrix4x4 m) Parameters Type Name Description Matrix4x4 m Input matrix to convert to quaternion Returns Type Description Quaternion RadiansToDegrees(Single) Convert radians to degrees. Declaration public static float RadiansToDegrees(float radians) Parameters Type Name Description Single radians Angle, in radians. Returns Type Description Single Angle, in degrees. ScaleFromAngularSizeAndDistance(Single, Single) Retrieve angular measurement describing how large a sphere or circle appears from a given point of view. Takes an angle (at given point of view) and a distance and returns the actual diameter of the object. Declaration public static float ScaleFromAngularSizeAndDistance(float angle, float distance) Parameters Type Name Description Single angle Single distance Returns Type Description Single Subtract(Matrix4x4, Matrix4x4) Element-wise subtraction of two Matrix4x4s - extension method Declaration public static Matrix4x4 Subtract(Matrix4x4 a, Matrix4x4 b) Parameters Type Name Description Matrix4x4 a matrix Matrix4x4 b matrix Returns Type Description Matrix4x4 element-wise (a-b) TestPlanesAABB(Plane[], Int32, Bounds, out Boolean) Declaration public static bool TestPlanesAABB(Plane[] planes, int planeMask, Bounds bounds, out bool entirelyInside) Parameters Type Name Description Plane [] planes Int32 planeMask Bounds bounds Boolean entirelyInside Returns Type Description Boolean ToTranslationRotation(Matrix4x4, out Vector3, out Quaternion) Extract the translation and rotation components of a Unity matrix Declaration public static void ToTranslationRotation(Matrix4x4 unityMtx, out Vector3 translation, out Quaternion rotation) Parameters Type Name Description Matrix4x4 unityMtx Vector3 translation Quaternion rotation TransformDirectionFromTo(Transform, Transform, Vector3) Takes a direction in the coordinate space specified by the \"from\" transform and transforms it to be the correct direction in the coordinate space specified by the \"to\" transform applies rotation only, no translation or scale Declaration public static Vector3 TransformDirectionFromTo(Transform from, Transform to, Vector3 fromDirection) Parameters Type Name Description Transform from Transform to Vector3 fromDirection Returns Type Description Vector3 Direction to. TransformPointFromTo(Transform, Transform, Vector3) Takes a point in the coordinate space specified by the \"from\" transform and transforms it to be the correct point in the coordinate space specified by the \"to\" transform applies rotation, scale and translation. Declaration public static Vector3 TransformPointFromTo(Transform from, Transform to, Vector3 fromPoint) Parameters Type Name Description Transform from Transform to Vector3 fromPoint Returns Type Description Vector3 Point to. TransformRayFromTo(Transform, Transform, Ray) Takes a ray in the coordinate space specified by the \"from\" transform and transforms it to be the correct ray in the coordinate space specified by the \"to\" transform Declaration public static Ray TransformRayFromTo(Transform from, Transform to, Ray rayToConvert) Parameters Type Name Description Transform from Transform to Ray rayToConvert Returns Type Description Ray TransformVectorFromTo(Transform, Transform, Vector3) Takes a vector in the coordinate space specified by the \"from\" transform and transforms it to be the correct direction in the coordinate space specified by the \"to\" transform applies rotation and scale, no translation Declaration public static Vector3 TransformVectorFromTo(Transform from, Transform to, Vector3 vecInFrom) Parameters Type Name Description Transform from Transform to Vector3 vecInFrom Returns Type Description Vector3 XYProject(Vector3) Project vector onto XY plane Declaration public static Vector3 XYProject(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 result of projecting v onto XY plane XZProject(Vector3) Project vector onto XZ plane Declaration public static Vector3 XZProject(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 result of projecting v onto XZ plane YZProject(Vector3) Project vector onto YZ plane Declaration public static Vector3 YZProject(Vector3 v) Parameters Type Name Description Vector3 v Returns Type Description Vector3 result of projecting v onto YZ plane"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MeshLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MeshLineRenderer.html",
    "title": "Class MeshLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MeshLineRenderer Creates instances of a mesh along the line Inheritance Object BaseMixedRealityLineRenderer MeshLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.PointDistributionMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) BaseMixedRealityLineRenderer.GetNormalizedPointAlongLine(Int32) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshLineRenderer : BaseMixedRealityLineRenderer Properties ColorProperty Declaration public string ColorProperty { get; set; } Property Value Type Description String LineMaterial Declaration public Material LineMaterial { get; set; } Property Value Type Description Material LineMesh Declaration public Mesh LineMesh { get; set; } Property Value Type Description Mesh Methods OnEnable() Declaration protected virtual void OnEnable() UpdateLine() Declaration protected override void UpdateLine() Overrides BaseMixedRealityLineRenderer.UpdateLine()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MeshOutline.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MeshOutline.html",
    "title": "Class MeshOutline | Mixed Reality Toolkit Documentation",
    "keywords": "Class MeshOutline Component which can be used to render an outline around a mesh renderer. Enabling this component introduces an additional render pass of the object being outlined, but is designed to run performantly on mobile Mixed Reality devices and does not utilize any post processes. This behavior is designed to be used in conjunction with the MRTK/Standard shader. Limitations of this effect include it not working well on objects which are not watertight (or required to be two sided) and depth sorting issues can occur on overlapping objects. Inheritance Object BaseMeshOutline MeshOutline Inherited Members BaseMeshOutline.OutlineMaterial BaseMeshOutline.outlineMaterial BaseMeshOutline.OutlineWidth BaseMeshOutline.outlineWidth BaseMeshOutline.OnValidate() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshOutline : BaseMeshOutline Methods ApplyOutlineMaterial() Prepares and applies the current outline material to the renderer. Declaration protected override void ApplyOutlineMaterial() Overrides BaseMeshOutline.ApplyOutlineMaterial() ApplyOutlineWidth() Updates the current vertex extrusion value used by the shader. Declaration protected override void ApplyOutlineWidth() Overrides BaseMeshOutline.ApplyOutlineWidth()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MeshOutlineHierarchy.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MeshOutlineHierarchy.html",
    "title": "Class MeshOutlineHierarchy | Mixed Reality Toolkit Documentation",
    "keywords": "Class MeshOutlineHierarchy Component which can be used to render an outline around a hierarchy of mesh renderers using the MeshOutline component. Inheritance Object BaseMeshOutline MeshOutlineHierarchy Inherited Members BaseMeshOutline.OutlineMaterial BaseMeshOutline.outlineMaterial BaseMeshOutline.OutlineWidth BaseMeshOutline.outlineWidth BaseMeshOutline.OnValidate() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshOutlineHierarchy : BaseMeshOutline Methods ApplyOutlineMaterial() Forwards the outlineMaterial to all children MeshOutline s. Declaration protected override void ApplyOutlineMaterial() Overrides BaseMeshOutline.ApplyOutlineMaterial() ApplyOutlineWidth() Forwards the outlineWidth to all children MeshOutline s. Declaration protected override void ApplyOutlineWidth() Overrides BaseMeshOutline.ApplyOutlineWidth()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MeshSmoother.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MeshSmoother.html",
    "title": "Class MeshSmoother | Mixed Reality Toolkit Documentation",
    "keywords": "Class MeshSmoother Component which can be used to automatically generate smoothed normals on a mesh and pack those normals into a UV set. Smoothed normals can be used for a variety of effects including extruding disjoint meshes along a vertex normal. This behavior is designed to be used in conjunction with the MRTK/Standard shader which assumes smoothed normals are packed into the 3rd UV set. Inheritance Object MeshSmoother Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshSmoother : MonoBehaviour Methods SmoothNormals() Performs normal smoothing on the current mesh filter associated with this component synchronously. This method will not try and re-smooth meshes which have already been smoothed. Declaration public void SmoothNormals() SmoothNormalsAsync() Performs normal smoothing on the current mesh filter associated with this component asynchronously. This method will not try and re-smooth meshes which have already been smoothed. Declaration public Task SmoothNormalsAsync() Returns Type Description Task A task which will complete once normal smoothing is finished."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MixedRealityLineRenderer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MixedRealityLineRenderer.html",
    "title": "Class MixedRealityLineRenderer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityLineRenderer Implements Unity's built in line renderer component, and applies the line data to it. Inheritance Object BaseMixedRealityLineRenderer MixedRealityLineRenderer Inherited Members BaseMixedRealityLineRenderer.lineDataSource BaseMixedRealityLineRenderer.LineDataSource BaseMixedRealityLineRenderer.LineColor BaseMixedRealityLineRenderer.LineWidth BaseMixedRealityLineRenderer.WidthMultiplier BaseMixedRealityLineRenderer.ColorOffset BaseMixedRealityLineRenderer.WidthOffset BaseMixedRealityLineRenderer.StepMode BaseMixedRealityLineRenderer.PointDistributionMode BaseMixedRealityLineRenderer.LineStepCount BaseMixedRealityLineRenderer.GetColor(Single) BaseMixedRealityLineRenderer.GetWidth(Single) BaseMixedRealityLineRenderer.GetNormalizedPointAlongLine(Int32) Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class MixedRealityLineRenderer : BaseMixedRealityLineRenderer Properties FadeLineAnimationTime The amount the pointer line will fade if fadeLineBrightnessOnEnable is true\" Declaration public float FadeLineAnimationTime { get; set; } Property Value Type Description Single FadeLineBrightnessOnEnable Sets whether the ray line will animate to a lower brightness level after a hand/controller is recognized Declaration public bool FadeLineBrightnessOnEnable { get; set; } Property Value Type Description Boolean FadeLinePercentage The amount the pointer line will fade if fadeLineBrightnessOnEnable is true\" Declaration public float FadeLinePercentage { get; set; } Property Value Type Description Single LineMaterial Declaration public Material LineMaterial { get; set; } Property Value Type Description Material RoundedCaps Declaration public bool RoundedCaps { get; set; } Property Value Type Description Boolean RoundedEdges Declaration public bool RoundedEdges { get; set; } Property Value Type Description Boolean Methods UpdateLine() Declaration protected override void UpdateLine() Overrides BaseMixedRealityLineRenderer.UpdateLine()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MixedRealityOptimizeUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MixedRealityOptimizeUtils.html",
    "title": "Class MixedRealityOptimizeUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityOptimizeUtils Inheritance Object MixedRealityOptimizeUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public static class MixedRealityOptimizeUtils Methods ChangeProperty(SerializedObject, String, Action<SerializedProperty>) Declaration public static void ChangeProperty(SerializedObject target, string name, Action<SerializedProperty> changer) Parameters Type Name Description SerializedObject target String name Action < SerializedProperty > changer GetLighmapSettings() Declaration public static SerializedObject GetLighmapSettings() Returns Type Description SerializedObject GetSettingsObject(String) Declaration public static SerializedObject GetSettingsObject(string className) Parameters Type Name Description String className Returns Type Description SerializedObject IsBakedGlobalIlluminationEnabled() Declaration public static bool IsBakedGlobalIlluminationEnabled() Returns Type Description Boolean IsBuildTargetAndroid() Declaration public static bool IsBuildTargetAndroid() Returns Type Description Boolean IsBuildTargetIOS() Declaration public static bool IsBuildTargetIOS() Returns Type Description Boolean IsBuildTargetOpenVR() Declaration public static bool IsBuildTargetOpenVR() Returns Type Description Boolean IsBuildTargetUWP() Declaration public static bool IsBuildTargetUWP() Returns Type Description Boolean IsDepthBufferSharingEnabled() Checks if the project has depth buffer sharing enabled. Declaration public static bool IsDepthBufferSharingEnabled() Returns Type Description Boolean True if the project has depth buffer sharing enabled, false otherwise. IsRealtimeGlobalIlluminationEnabled() Declaration public static bool IsRealtimeGlobalIlluminationEnabled() Returns Type Description Boolean IsSinglePassInstanced() Declaration public static bool IsSinglePassInstanced() Returns Type Description Boolean IsWMRDepthBufferFormat16bit() Declaration public static bool IsWMRDepthBufferFormat16bit() Returns Type Description Boolean SetBakedGlobalIlluminationEnabled(Boolean) Declaration public static void SetBakedGlobalIlluminationEnabled(bool enabled) Parameters Type Name Description Boolean enabled SetDepthBufferFormat(Boolean) Declaration public static void SetDepthBufferFormat(bool set16BitDepthBuffer) Parameters Type Name Description Boolean set16BitDepthBuffer SetDepthBufferSharing(Boolean) Declaration public static void SetDepthBufferSharing(bool enableDepthBuffer) Parameters Type Name Description Boolean enableDepthBuffer SetRealtimeGlobalIlluminationEnabled(Boolean) Declaration public static void SetRealtimeGlobalIlluminationEnabled(bool enabled) Parameters Type Name Description Boolean enabled SetSinglePassInstanced() Declaration public static void SetSinglePassInstanced()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MixedRealityPose.html",
    "title": "Struct MixedRealityPose | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityPose Implements IEqualityComparer Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public struct MixedRealityPose : IEqualityComparer Constructors MixedRealityPose(Quaternion) Constructor. Declaration public MixedRealityPose(Quaternion rotation) Parameters Type Name Description Quaternion rotation MixedRealityPose(Vector3) Constructor. Declaration public MixedRealityPose(Vector3 position) Parameters Type Name Description Vector3 position MixedRealityPose(Vector3, Quaternion) Constructor. Declaration public MixedRealityPose(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation Properties Forward The Z axis of the pose in world space. Declaration public Vector3 Forward { get; } Property Value Type Description Vector3 Position The position of the pose. Declaration public Vector3 Position { get; set; } Property Value Type Description Vector3 Right The X axis of the pose in world space. Declaration public Vector3 Right { get; } Property Value Type Description Vector3 Rotation The rotation of the pose. Declaration public Quaternion Rotation { get; set; } Property Value Type Description Quaternion Up The Y axis of the pose in world space. Declaration public Vector3 Up { get; } Property Value Type Description Vector3 ZeroIdentity The default value for a Six Dof Transform. Declaration public static MixedRealityPose ZeroIdentity { get; } Property Value Type Description MixedRealityPose Vector3.zero and Quaternion.identity . Methods Equals(MixedRealityPose) Declaration public bool Equals(MixedRealityPose other) Parameters Type Name Description MixedRealityPose other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() Operators Addition(MixedRealityPose, MixedRealityPose) Declaration public static MixedRealityPose operator +(MixedRealityPose left, MixedRealityPose right) Parameters Type Name Description MixedRealityPose left MixedRealityPose right Returns Type Description MixedRealityPose Equality(MixedRealityPose, MixedRealityPose) Declaration public static bool operator ==(MixedRealityPose left, MixedRealityPose right) Parameters Type Name Description MixedRealityPose left MixedRealityPose right Returns Type Description Boolean Inequality(MixedRealityPose, MixedRealityPose) Declaration public static bool operator !=(MixedRealityPose left, MixedRealityPose right) Parameters Type Name Description MixedRealityPose left MixedRealityPose right Returns Type Description Boolean Implements IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.MovementConstraintType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.MovementConstraintType.html",
    "title": "Enum MovementConstraintType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MovementConstraintType Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum MovementConstraintType Fields Name Description FixDistanceFromHead None"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ObjectCollectionNode.html",
    "title": "Class ObjectCollectionNode | Mixed Reality Toolkit Documentation",
    "keywords": "Class ObjectCollectionNode Collection node is a data storage class for individual data about an object in a collection. Inheritance Object ObjectCollectionNode Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public class ObjectCollectionNode Fields Colliders Declaration public Collider[] Colliders Field Value Type Description Collider [] Name Declaration public string Name Field Value Type Description String Offset Declaration public Vector2 Offset Field Value Type Description Vector2 Radius Declaration public float Radius Field Value Type Description Single Transform Declaration public Transform Transform Field Value Type Description Transform"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.ObjectOrientationSurfaceType.html",
    "title": "Enum ObjectOrientationSurfaceType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ObjectOrientationSurfaceType The type of surface to map the collect to. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum ObjectOrientationSurfaceType Fields Name Description Cylinder Plane Radial Sphere"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRCompositor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRCompositor.html",
    "title": "Class CVRCompositor | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRCompositor Inheritance Object CVRCompositor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRCompositor Methods CanRenderScene() Declaration public bool CanRenderScene() Returns Type Description Boolean ClearLastSubmittedFrame() Declaration public void ClearLastSubmittedFrame() ClearSkyboxOverride() Declaration public void ClearSkyboxOverride() CompositorBringToFront() Declaration public void CompositorBringToFront() CompositorDumpImages() Declaration public void CompositorDumpImages() CompositorGoToBack() Declaration public void CompositorGoToBack() CompositorQuit() Declaration public void CompositorQuit() FadeGrid(Single, Boolean) Declaration public void FadeGrid(float fSeconds, bool bFadeIn) Parameters Type Name Description Single fSeconds Boolean bFadeIn FadeToColor(Single, Single, Single, Single, Single, Boolean) Declaration public void FadeToColor(float fSeconds, float fRed, float fGreen, float fBlue, float fAlpha, bool bBackground) Parameters Type Name Description Single fSeconds Single fRed Single fGreen Single fBlue Single fAlpha Boolean bBackground ForceInterleavedReprojectionOn(Boolean) Declaration public void ForceInterleavedReprojectionOn(bool bOverride) Parameters Type Name Description Boolean bOverride ForceReconnectProcess() Declaration public void ForceReconnectProcess() GetCumulativeStats(ref Compositor_CumulativeStats, UInt32) Declaration public void GetCumulativeStats(ref Compositor_CumulativeStats pStats, uint nStatsSizeInBytes) Parameters Type Name Description Compositor_CumulativeStats pStats UInt32 nStatsSizeInBytes GetCurrentFadeColor(Boolean) Declaration public HmdColor_t GetCurrentFadeColor(bool bBackground) Parameters Type Name Description Boolean bBackground Returns Type Description HmdColor_t GetCurrentGridAlpha() Declaration public float GetCurrentGridAlpha() Returns Type Description Single GetCurrentSceneFocusProcess() Declaration public uint GetCurrentSceneFocusProcess() Returns Type Description UInt32 GetFrameTimeRemaining() Declaration public float GetFrameTimeRemaining() Returns Type Description Single GetFrameTiming(ref Compositor_FrameTiming, UInt32) Declaration public bool GetFrameTiming(ref Compositor_FrameTiming pTiming, uint unFramesAgo) Parameters Type Name Description Compositor_FrameTiming pTiming UInt32 unFramesAgo Returns Type Description Boolean GetFrameTimings(ref Compositor_FrameTiming, UInt32) Declaration public uint GetFrameTimings(ref Compositor_FrameTiming pTiming, uint nFrames) Parameters Type Name Description Compositor_FrameTiming pTiming UInt32 nFrames Returns Type Description UInt32 GetLastFrameRenderer() Declaration public uint GetLastFrameRenderer() Returns Type Description UInt32 GetLastPoseForTrackedDeviceIndex(UInt32, ref TrackedDevicePose_t, ref TrackedDevicePose_t) Declaration public EVRCompositorError GetLastPoseForTrackedDeviceIndex(uint unDeviceIndex, ref TrackedDevicePose_t pOutputPose, ref TrackedDevicePose_t pOutputGamePose) Parameters Type Name Description UInt32 unDeviceIndex TrackedDevicePose_t pOutputPose TrackedDevicePose_t pOutputGamePose Returns Type Description EVRCompositorError GetLastPoses(TrackedDevicePose_t[], TrackedDevicePose_t[]) Declaration public EVRCompositorError GetLastPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray) Parameters Type Name Description TrackedDevicePose_t [] pRenderPoseArray TrackedDevicePose_t [] pGamePoseArray Returns Type Description EVRCompositorError GetMirrorTextureD3D11(EVREye, IntPtr, ref IntPtr) Declaration public EVRCompositorError GetMirrorTextureD3D11(EVREye eEye, IntPtr pD3D11DeviceOrResource, ref IntPtr ppD3D11ShaderResourceView) Parameters Type Name Description EVREye eEye IntPtr pD3D11DeviceOrResource IntPtr ppD3D11ShaderResourceView Returns Type Description EVRCompositorError GetMirrorTextureGL(EVREye, ref UInt32, IntPtr) Declaration public EVRCompositorError GetMirrorTextureGL(EVREye eEye, ref uint pglTextureId, IntPtr pglSharedTextureHandle) Parameters Type Name Description EVREye eEye UInt32 pglTextureId IntPtr pglSharedTextureHandle Returns Type Description EVRCompositorError GetTrackingSpace() Declaration public ETrackingUniverseOrigin GetTrackingSpace() Returns Type Description ETrackingUniverseOrigin GetVulkanDeviceExtensionsRequired(IntPtr, StringBuilder, UInt32) Declaration public uint GetVulkanDeviceExtensionsRequired(IntPtr pPhysicalDevice, StringBuilder pchValue, uint unBufferSize) Parameters Type Name Description IntPtr pPhysicalDevice StringBuilder pchValue UInt32 unBufferSize Returns Type Description UInt32 GetVulkanInstanceExtensionsRequired(StringBuilder, UInt32) Declaration public uint GetVulkanInstanceExtensionsRequired(StringBuilder pchValue, uint unBufferSize) Parameters Type Name Description StringBuilder pchValue UInt32 unBufferSize Returns Type Description UInt32 HideMirrorWindow() Declaration public void HideMirrorWindow() IsFullscreen() Declaration public bool IsFullscreen() Returns Type Description Boolean IsMirrorWindowVisible() Declaration public bool IsMirrorWindowVisible() Returns Type Description Boolean IsMotionSmoothingEnabled() Declaration public bool IsMotionSmoothingEnabled() Returns Type Description Boolean LockGLSharedTextureForAccess(IntPtr) Declaration public void LockGLSharedTextureForAccess(IntPtr glSharedTextureHandle) Parameters Type Name Description IntPtr glSharedTextureHandle PostPresentHandoff() Declaration public void PostPresentHandoff() ReleaseMirrorTextureD3D11(IntPtr) Declaration public void ReleaseMirrorTextureD3D11(IntPtr pD3D11ShaderResourceView) Parameters Type Name Description IntPtr pD3D11ShaderResourceView ReleaseSharedGLTexture(UInt32, IntPtr) Declaration public bool ReleaseSharedGLTexture(uint glTextureId, IntPtr glSharedTextureHandle) Parameters Type Name Description UInt32 glTextureId IntPtr glSharedTextureHandle Returns Type Description Boolean SetExplicitTimingMode(EVRCompositorTimingMode) Declaration public void SetExplicitTimingMode(EVRCompositorTimingMode eTimingMode) Parameters Type Name Description EVRCompositorTimingMode eTimingMode SetSkyboxOverride(Texture_t[]) Declaration public EVRCompositorError SetSkyboxOverride(Texture_t[] pTextures) Parameters Type Name Description Texture_t [] pTextures Returns Type Description EVRCompositorError SetTrackingSpace(ETrackingUniverseOrigin) Declaration public void SetTrackingSpace(ETrackingUniverseOrigin eOrigin) Parameters Type Name Description ETrackingUniverseOrigin eOrigin ShouldAppRenderWithLowResources() Declaration public bool ShouldAppRenderWithLowResources() Returns Type Description Boolean ShowMirrorWindow() Declaration public void ShowMirrorWindow() Submit(EVREye, ref Texture_t, ref VRTextureBounds_t, EVRSubmitFlags) Declaration public EVRCompositorError Submit(EVREye eEye, ref Texture_t pTexture, ref VRTextureBounds_t pBounds, EVRSubmitFlags nSubmitFlags) Parameters Type Name Description EVREye eEye Texture_t pTexture VRTextureBounds_t pBounds EVRSubmitFlags nSubmitFlags Returns Type Description EVRCompositorError SubmitExplicitTimingData() Declaration public EVRCompositorError SubmitExplicitTimingData() Returns Type Description EVRCompositorError SuspendRendering(Boolean) Declaration public void SuspendRendering(bool bSuspend) Parameters Type Name Description Boolean bSuspend UnlockGLSharedTextureForAccess(IntPtr) Declaration public void UnlockGLSharedTextureForAccess(IntPtr glSharedTextureHandle) Parameters Type Name Description IntPtr glSharedTextureHandle WaitGetPoses(TrackedDevicePose_t[], TrackedDevicePose_t[]) Declaration public EVRCompositorError WaitGetPoses(TrackedDevicePose_t[] pRenderPoseArray, TrackedDevicePose_t[] pGamePoseArray) Parameters Type Name Description TrackedDevicePose_t [] pRenderPoseArray TrackedDevicePose_t [] pGamePoseArray Returns Type Description EVRCompositorError"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRDriverManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRDriverManager.html",
    "title": "Class CVRDriverManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRDriverManager Inheritance Object CVRDriverManager Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRDriverManager Methods GetDriverCount() Declaration public uint GetDriverCount() Returns Type Description UInt32 GetDriverHandle(String) Declaration public ulong GetDriverHandle(string pchDriverName) Parameters Type Name Description String pchDriverName Returns Type Description UInt64 GetDriverName(UInt32, StringBuilder, UInt32) Declaration public uint GetDriverName(uint nDriver, StringBuilder pchValue, uint unBufferSize) Parameters Type Name Description UInt32 nDriver StringBuilder pchValue UInt32 unBufferSize Returns Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedDeviceProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedDeviceProperty.html",
    "title": "Enum ETrackedDeviceProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETrackedDeviceProperty Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETrackedDeviceProperty Fields Name Description Prop_AdditionalDeviceSettingsPath_String Prop_AllWirelessDongleDescriptions_String Prop_AttachedDeviceId_String Prop_AudioBridgeFirmwareVersion_Uint64 Prop_AudioFirmwareVersion_Uint64 Prop_Axis0Type_Int32 Prop_Axis1Type_Int32 Prop_Axis2Type_Int32 Prop_Axis3Type_Int32 Prop_Axis4Type_Int32 Prop_BlockServerShutdown_Bool Prop_CameraCompatibilityMode_Int32 Prop_CameraFirmwareDescription_String Prop_CameraFirmwareVersion_Uint64 Prop_CameraFrameLayout_Int32 Prop_CameraStreamFormat_Int32 Prop_CameraToHeadTransform_Matrix34 Prop_CameraToHeadTransforms_Matrix34_Array Prop_CanUnifyCoordinateSystemWithHmd_Bool Prop_ConfigurationIncludesLighthouse20Features_Bool Prop_ConnectedWirelessDongle_String Prop_ContainsProximitySensor_Bool Prop_ControllerHandSelectionPriority_Int32 Prop_ControllerRoleHint_Int32 Prop_ControllerType_String Prop_CurrentUniverseId_Uint64 Prop_DeviceBatteryPercentage_Float Prop_DeviceCanPowerOff_Bool Prop_DeviceClass_Int32 Prop_DeviceIsCharging_Bool Prop_DeviceIsWireless_Bool Prop_DeviceProvidesBatteryStatus_Bool Prop_DisplayAllowNightMode_Bool Prop_DisplayBootloaderVersion_Uint64 Prop_DisplayDebugMode_Bool Prop_DisplayFirmwareVersion_Uint64 Prop_DisplayFPGAVersion_Uint64 Prop_DisplayFrequency_Float Prop_DisplayGCBlackClamp_Float Prop_DisplayGCImage_String Prop_DisplayGCOffset_Float Prop_DisplayGCPrescale_Float Prop_DisplayGCScale_Float Prop_DisplayGCType_Int32 Prop_DisplayHardwareVersion_Uint64 Prop_DisplayHiddenArea_Binary_End Prop_DisplayHiddenArea_Binary_Start Prop_DisplayMCImageData_Binary Prop_DisplayMCImageHeight_Int32 Prop_DisplayMCImageLeft_String Prop_DisplayMCImageNumChannels_Int32 Prop_DisplayMCImageRight_String Prop_DisplayMCImageWidth_Int32 Prop_DisplayMCOffset_Float Prop_DisplayMCScale_Float Prop_DisplayMCType_Int32 Prop_DisplaySuppressed_Bool Prop_DistortionMeshResolution_Int32 Prop_DongleVersion_Uint64 Prop_DoNotApplyPrediction_Bool Prop_DriverDirectModeSendsVsyncEvents_Bool Prop_DriverIsDrawingControllers_Bool Prop_DriverProvidedChaperonePath_String Prop_DriverRequestedMuraCorrectionMode_Int32 Prop_DriverRequestedMuraFeather_InnerBottom_Int32 Prop_DriverRequestedMuraFeather_InnerLeft_Int32 Prop_DriverRequestedMuraFeather_InnerRight_Int32 Prop_DriverRequestedMuraFeather_InnerTop_Int32 Prop_DriverRequestedMuraFeather_OuterBottom_Int32 Prop_DriverRequestedMuraFeather_OuterLeft_Int32 Prop_DriverRequestedMuraFeather_OuterRight_Int32 Prop_DriverRequestedMuraFeather_OuterTop_Int32 Prop_DriverRequestsApplicationPause_Bool Prop_DriverRequestsReducedRendering_Bool Prop_DriverVersion_String Prop_EdidProductID_Int32 Prop_EdidVendorID_Int32 Prop_ExpectedControllerCount_Int32 Prop_ExpectedTrackingReferenceCount_Int32 Prop_FieldOfViewBottomDegrees_Float Prop_FieldOfViewLeftDegrees_Float Prop_FieldOfViewRightDegrees_Float Prop_FieldOfViewTopDegrees_Float Prop_Firmware_ForceUpdateRequired_Bool Prop_Firmware_ManualUpdate_Bool Prop_Firmware_ManualUpdateURL_String Prop_Firmware_ProgrammingTarget_String Prop_Firmware_UpdateAvailable_Bool Prop_FirmwareVersion_Uint64 Prop_FPGAVersion_Uint64 Prop_GraphicsAdapterLuid_Uint64 Prop_HardwareRevision_String Prop_HardwareRevision_Uint64 Prop_HasCamera_Bool Prop_HasCameraComponent_Bool Prop_HasControllerComponent_Bool Prop_HasDisplayComponent_Bool Prop_HasDriverDirectModeComponent_Bool Prop_HasSpatialAnchorsSupport_Bool Prop_HasVirtualDisplayComponent_Bool Prop_IconPathName_String Prop_Identifiable_Bool Prop_ImageBridgeFirmwareVersion_Uint64 Prop_ImuFactoryAccelerometerBias_Vector3 Prop_ImuFactoryAccelerometerScale_Vector3 Prop_ImuFactoryGyroBias_Vector3 Prop_ImuFactoryGyroScale_Vector3 Prop_ImuToHeadTransform_Matrix34 Prop_InputProfilePath_String Prop_InstallPath_String Prop_Invalid Prop_IsOnDesktop_Bool Prop_LegacyInputProfile_String Prop_LensCenterLeftU_Float Prop_LensCenterLeftV_Float Prop_LensCenterRightU_Float Prop_LensCenterRightV_Float Prop_ManufacturerName_String Prop_MinimumIpdStepMeters_Float Prop_ModeLabel_String Prop_ModelNumber_String Prop_NamedIconPathControllerLeftDeviceOff_String Prop_NamedIconPathControllerRightDeviceOff_String Prop_NamedIconPathDeviceAlertLow_String Prop_NamedIconPathDeviceNotReady_String Prop_NamedIconPathDeviceOff_String Prop_NamedIconPathDeviceReady_String Prop_NamedIconPathDeviceReadyAlert_String Prop_NamedIconPathDeviceSearching_String Prop_NamedIconPathDeviceSearchingAlert_String Prop_NamedIconPathDeviceStandby_String Prop_NamedIconPathTrackingReferenceDeviceOff_String Prop_NeverTracked_Bool Prop_NumCameras_Int32 Prop_ParentContainer Prop_ParentDriver_Uint64 Prop_PreviousUniverseId_Uint64 Prop_RadioVersion_Uint64 Prop_RegisteredDeviceType_String Prop_RenderModelName_String Prop_ReportsTimeSinceVSync_Bool Prop_ResourceRoot_String Prop_ScreenshotHorizontalFieldOfViewDegrees_Float Prop_ScreenshotVerticalFieldOfViewDegrees_Float Prop_SecondsFromPhotonsToVblank_Float Prop_SecondsFromVsyncToPhotons_Float Prop_SerialNumber_String Prop_StatusDisplayTransform_Matrix34 Prop_SupportedButtons_Uint64 Prop_TrackedDeviceProperty_Max Prop_TrackingFirmwareVersion_String Prop_TrackingRangeMaximumMeters_Float Prop_TrackingRangeMinimumMeters_Float Prop_TrackingSystemName_String Prop_UserConfigPath_String Prop_UserHeadToEyeDepthMeters_Float Prop_UserIpdMeters_Float Prop_VendorSpecific_Reserved_End Prop_VendorSpecific_Reserved_Start Prop_ViveSystemButtonFixRequired_Bool Prop_VRCVersion_Uint64 Prop_WillDriftInYaw_Bool"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedPropertyError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedPropertyError.html",
    "title": "Enum ETrackedPropertyError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETrackedPropertyError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETrackedPropertyError Fields Name Description TrackedProp_BufferTooSmall TrackedProp_CannotWriteToWildcards TrackedProp_CouldNotContactServer TrackedProp_InvalidDevice TrackedProp_InvalidOperation TrackedProp_IPCReadFailure TrackedProp_NotYetAvailable TrackedProp_PermissionDenied TrackedProp_StringExceedsMaximumLength TrackedProp_Success TrackedProp_UnknownProperty TrackedProp_ValueNotProvidedByDevice TrackedProp_WrongDataType TrackedProp_WrongDeviceClass"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackingResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackingResult.html",
    "title": "Enum ETrackingResult | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETrackingResult Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETrackingResult Fields Name Description Calibrating_InProgress Calibrating_OutOfRange Fallback_RotationOnly Running_OK Running_OutOfRange Uninitialized"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackingUniverseOrigin.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackingUniverseOrigin.html",
    "title": "Enum ETrackingUniverseOrigin | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETrackingUniverseOrigin Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETrackingUniverseOrigin Fields Name Description TrackingUniverseRawAndUncalibrated TrackingUniverseSeated TrackingUniverseStanding"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationError.html",
    "title": "Enum EVRApplicationError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRApplicationError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRApplicationError Fields Name Description AppKeyAlreadyExists ApplicationAlreadyRunning ApplicationAlreadyStarting BufferTooSmall InvalidApplication InvalidIndex InvalidManifest InvalidParameter IPCFailed IsTemplate LaunchFailed LaunchInProgress NoApplication NoManifest None OldApplicationQuitting PropertyNotSet SteamVRIsExiting TransitionAborted UnknownApplication UnknownProperty"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationProperty.html",
    "title": "Enum EVRApplicationProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRApplicationProperty Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRApplicationProperty Fields Name Description ActionManifestURL_String Arguments_String BinaryPath_String Description_String ImagePath_String IsDashboardOverlay_Bool IsInstanced_Bool IsInternal_Bool IsTemplate_Bool LastLaunchTime_Uint64 LaunchType_String Name_String NewsURL_String Source_String URL_String WantsCompositorPauseInStandby_Bool WorkingDirectory_String"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationTransitionState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationTransitionState.html",
    "title": "Enum EVRApplicationTransitionState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRApplicationTransitionState Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRApplicationTransitionState Fields Name Description VRApplicationTransition_NewAppLaunched VRApplicationTransition_None VRApplicationTransition_OldAppQuitSent VRApplicationTransition_WaitingForExternalLaunch"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRApplicationType.html",
    "title": "Enum EVRApplicationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRApplicationType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRApplicationType Fields Name Description VRApplication_Background VRApplication_Bootstrapper VRApplication_Max VRApplication_Other VRApplication_Overlay VRApplication_Scene VRApplication_SteamWatchdog VRApplication_Utility VRApplication_VRMonitor VRApplication_WebHelper"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRButtonId.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRButtonId.html",
    "title": "Enum EVRButtonId | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRButtonId Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRButtonId Fields Name Description k_EButton_A k_EButton_ApplicationMenu k_EButton_Axis0 k_EButton_Axis1 k_EButton_Axis2 k_EButton_Axis3 k_EButton_Axis4 k_EButton_Dashboard_Back k_EButton_DPad_Down k_EButton_DPad_Left k_EButton_DPad_Right k_EButton_DPad_Up k_EButton_Grip k_EButton_Knuckles_A k_EButton_Knuckles_B k_EButton_Knuckles_JoyStick k_EButton_Max k_EButton_ProximitySensor k_EButton_SteamVR_Touchpad k_EButton_SteamVR_Trigger k_EButton_System"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRComponentProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRComponentProperty.html",
    "title": "Enum EVRComponentProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRComponentProperty Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRComponentProperty Fields Name Description IsPressed IsScrolled IsStatic IsTouched IsVisible"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRCompositorError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRCompositorError.html",
    "title": "Enum EVRCompositorError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRCompositorError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRCompositorError Fields Name Description AlreadySubmitted DoNotHaveFocus IncompatibleVersion IndexOutOfRange InvalidBounds InvalidTexture IsNotSceneApplication None RequestFailed SharedTexturesNotSupported TextureIsOnWrongDevice TextureUsesUnsupportedFormat"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRCompositorTimingMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRCompositorTimingMode.html",
    "title": "Enum EVRCompositorTimingMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRCompositorTimingMode Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRCompositorTimingMode Fields Name Description Explicit_ApplicationPerformsPostPresentHandoff Explicit_RuntimePerformsPostPresentHandoff Implicit"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRControllerAxisType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRControllerAxisType.html",
    "title": "Enum EVRControllerAxisType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRControllerAxisType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRControllerAxisType Fields Name Description k_eControllerAxis_Joystick k_eControllerAxis_None k_eControllerAxis_TrackPad k_eControllerAxis_Trigger"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRControllerEventOutputType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRControllerEventOutputType.html",
    "title": "Enum EVRControllerEventOutputType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRControllerEventOutputType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRControllerEventOutputType Fields Name Description ControllerEventOutput_OSEvents ControllerEventOutput_VREvents"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVROverlay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVROverlay.html",
    "title": "Struct IVROverlay | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVROverlay Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVROverlay"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRRenderModels.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.IVRRenderModels.html",
    "title": "Struct IVRRenderModels | Mixed Reality Toolkit Documentation",
    "keywords": "Struct IVRRenderModels Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct IVRRenderModels"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ShowUI_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ShowUI_t.html",
    "title": "Struct VREvent_ShowUI_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_ShowUI_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_ShowUI_t Fields eType Declaration public EShowUIType eType Field Value Type Description EShowUIType"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_SpatialAnchor_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_SpatialAnchor_t.html",
    "title": "Struct VREvent_SpatialAnchor_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_SpatialAnchor_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_SpatialAnchor_t Fields unHandle Declaration public uint unHandle Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Status_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Status_t.html",
    "title": "Struct VREvent_Status_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Status_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Status_t Fields statusState Declaration public uint statusState Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_t.html",
    "title": "Struct VREvent_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_t Fields data Declaration public VREvent_Data_t data Field Value Type Description VREvent_Data_t eventAgeSeconds Declaration public float eventAgeSeconds Field Value Type Description Single eventType Declaration public uint eventType Field Value Type Description UInt32 trackedDeviceIndex Declaration public uint trackedDeviceIndex Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_TouchPadMove_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_TouchPadMove_t.html",
    "title": "Struct VREvent_TouchPadMove_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_TouchPadMove_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_TouchPadMove_t Fields bFingerDown Declaration public bool bFingerDown Field Value Type Description Boolean flSecondsFingerDown Declaration public float flSecondsFingerDown Field Value Type Description Single fValueXFirst Declaration public float fValueXFirst Field Value Type Description Single fValueXRaw Declaration public float fValueXRaw Field Value Type Description Single fValueYFirst Declaration public float fValueYFirst Field Value Type Description Single fValueYRaw Declaration public float fValueYRaw Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_t_Packed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_t_Packed.html",
    "title": "Struct VREvent_t_Packed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_t_Packed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_t_Packed Constructors VREvent_t_Packed(VREvent_t) Declaration public VREvent_t_Packed(VREvent_t unpacked) Parameters Type Name Description VREvent_t unpacked Fields data Declaration public VREvent_Data_t data Field Value Type Description VREvent_Data_t eventAgeSeconds Declaration public float eventAgeSeconds Field Value Type Description Single eventType Declaration public uint eventType Field Value Type Description UInt32 trackedDeviceIndex Declaration public uint trackedDeviceIndex Field Value Type Description UInt32 Methods Unpack(ref VREvent_t) Declaration public void Unpack(ref VREvent_t unpacked) Parameters Type Name Description VREvent_t unpacked"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_WebConsole_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_WebConsole_t.html",
    "title": "Struct VREvent_WebConsole_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_WebConsole_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_WebConsole_t Fields webConsoleHandle Declaration public ulong webConsoleHandle Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRMessageOverlayResponse.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRMessageOverlayResponse.html",
    "title": "Enum VRMessageOverlayResponse | Mixed Reality Toolkit Documentation",
    "keywords": "Enum VRMessageOverlayResponse Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum VRMessageOverlayResponse Fields Name Description ApplicationQuit ButtonPress_0 ButtonPress_1 ButtonPress_2 ButtonPress_3 CouldntFindOrCreateClientOverlay CouldntFindSystemOverlay"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayFlags.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayFlags.html",
    "title": "Enum VROverlayFlags | Mixed Reality Toolkit Documentation",
    "keywords": "Enum VROverlayFlags Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum VROverlayFlags Fields Name Description AcceptsGamepadEvents Curved MakeOverlaysInteractiveIfVisible NoDashboardTab None Panorama RGSS4X SendVRScrollEvents SendVRTouchpadEvents ShowGamepadFocus ShowTouchPadScrollWheel SideBySide_Crossed SideBySide_Parallel SortWithNonSceneOverlays StereoPanorama TransferOwnershipToInternalProcess VisibleInDashboard"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayInputMethod.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayInputMethod.html",
    "title": "Enum VROverlayInputMethod | Mixed Reality Toolkit Documentation",
    "keywords": "Enum VROverlayInputMethod Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum VROverlayInputMethod Fields Name Description DualAnalog Mouse None"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionMaskPrimitive_Data_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionMaskPrimitive_Data_t.html",
    "title": "Struct VROverlayIntersectionMaskPrimitive_Data_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VROverlayIntersectionMaskPrimitive_Data_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VROverlayIntersectionMaskPrimitive_Data_t Fields m_Circle Declaration public IntersectionMaskCircle_t m_Circle Field Value Type Description IntersectionMaskCircle_t m_Rectangle Declaration public IntersectionMaskRectangle_t m_Rectangle Field Value Type Description IntersectionMaskRectangle_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionMaskPrimitive_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionMaskPrimitive_t.html",
    "title": "Struct VROverlayIntersectionMaskPrimitive_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VROverlayIntersectionMaskPrimitive_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VROverlayIntersectionMaskPrimitive_t Fields m_nPrimitiveType Declaration public EVROverlayIntersectionMaskPrimitiveType m_nPrimitiveType Field Value Type Description EVROverlayIntersectionMaskPrimitiveType m_Primitive Declaration public VROverlayIntersectionMaskPrimitive_Data_t m_Primitive Field Value Type Description VROverlayIntersectionMaskPrimitive_Data_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionParams_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionParams_t.html",
    "title": "Struct VROverlayIntersectionParams_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VROverlayIntersectionParams_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VROverlayIntersectionParams_t Fields eOrigin Declaration public ETrackingUniverseOrigin eOrigin Field Value Type Description ETrackingUniverseOrigin vDirection Declaration public HmdVector3_t vDirection Field Value Type Description HmdVector3_t vSource Declaration public HmdVector3_t vSource Field Value Type Description HmdVector3_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionResults_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VROverlayIntersectionResults_t.html",
    "title": "Struct VROverlayIntersectionResults_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VROverlayIntersectionResults_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VROverlayIntersectionResults_t Fields fDistance Declaration public float fDistance Field Value Type Description Single vNormal Declaration public HmdVector3_t vNormal Field Value Type Description HmdVector3_t vPoint Declaration public HmdVector3_t vPoint Field Value Type Description HmdVector3_t vUVs Declaration public HmdVector2_t vUVs Field Value Type Description HmdVector2_t"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DictationHandler.StringUnityEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DictationHandler.StringUnityEvent.html",
    "title": "Class DictationHandler.StringUnityEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class DictationHandler.StringUnityEvent Inheritance Object DictationHandler.StringUnityEvent Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Serializable] public class StringUnityEvent : UnityEvent<string>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.DictationHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.DictationHandler.html",
    "title": "Class DictationHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class DictationHandler Script used to start and stop recording sessions in the current dictation system and report the transcribed text via UnityEvents. For this script to work, a dictation system like 'Windows Dictation Input Provider' must be added to the Data Providers in the Input System profile. Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler DictationHandler Implements IMixedRealityDictationHandler IEventSystemHandler Inherited Members BaseInputHandler.IsFocusRequired BaseInputHandler.OnEnable() BaseInputHandler.Update() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class DictationHandler : BaseInputHandler, IMixedRealityDictationHandler, IEventSystemHandler Fields OnDictationComplete Event raised when the recognizer stops. Contains the final recognized string. Declaration public DictationHandler.StringUnityEvent OnDictationComplete Field Value Type Description DictationHandler.StringUnityEvent OnDictationError Event raised when an error occurs. Contains the string representation of the error reason. Declaration public DictationHandler.StringUnityEvent OnDictationError Field Value Type Description DictationHandler.StringUnityEvent OnDictationHypothesis Event raised while the user is talking. As the recognizer listens, it provides text of what it's heard so far. Declaration public DictationHandler.StringUnityEvent OnDictationHypothesis Field Value Type Description DictationHandler.StringUnityEvent OnDictationResult Event raised after the user pauses, typically at the end of a sentence. Contains the full recognized string so far. Declaration public DictationHandler.StringUnityEvent OnDictationResult Field Value Type Description DictationHandler.StringUnityEvent Methods OnDisable() Declaration protected override void OnDisable() Overrides BaseInputHandler.OnDisable() RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() Start() Declaration protected override void Start() Overrides BaseInputHandler.Start() StartRecording() Start a recording session in the dictation system. Declaration public void StartRecording() StopRecording() Stop a recording session in the dictation system. Declaration public void StopRecording() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Explicit Interface Implementations IMixedRealityDictationHandler.OnDictationComplete(DictationEventData) Declaration void IMixedRealityDictationHandler.OnDictationComplete(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData IMixedRealityDictationHandler.OnDictationError(DictationEventData) Declaration void IMixedRealityDictationHandler.OnDictationError(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData IMixedRealityDictationHandler.OnDictationHypothesis(DictationEventData) Declaration void IMixedRealityDictationHandler.OnDictationHypothesis(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData IMixedRealityDictationHandler.OnDictationResult(DictationEventData) Declaration void IMixedRealityDictationHandler.OnDictationResult(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData Implements IMixedRealityDictationHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.GazeProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.GazeProvider.html",
    "title": "Class GazeProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class GazeProvider This class provides Gaze as an Input Source so users can interact with objects using their head. Inheritance Object InputSystemGlobalHandlerListener GazeProvider Implements IMixedRealityEyeGazeProvider IMixedRealityGazeProvider IMixedRealityInputHandler IMixedRealityBaseInputHandler IEventSystemHandler Inherited Members InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class GazeProvider : InputSystemGlobalHandlerListener, IMixedRealityEyeGazeProvider, IMixedRealityGazeProvider, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IEventSystemHandler Properties Enabled Enable or disable the Component attached to the GameObjectReference Declaration public bool Enabled { get; set; } Property Value Type Description Boolean GameObjectReference Get the GameObject reference for this Gaze Provider. Declaration public GameObject GameObjectReference { get; } Property Value Type Description GameObject GazeCursor The Gaze Cursor for the provider. Declaration public IMixedRealityCursor GazeCursor { get; } Property Value Type Description IMixedRealityCursor GazeCursorPrefab The prefab to be instantiated as the gaze cursor. Declaration public GameObject GazeCursorPrefab { set; } Property Value Type Description GameObject GazeDirection Normal of the gaze. Declaration public Vector3 GazeDirection { get; } Property Value Type Description Vector3 GazeInputSource The Gaze Input Source for the provider. Declaration public IMixedRealityInputSource GazeInputSource { get; } Property Value Type Description IMixedRealityInputSource GazeOrigin Origin of the gaze. Declaration public Vector3 GazeOrigin { get; } Property Value Type Description Vector3 GazePointer The Gaze Pointer for the provider. Declaration public IMixedRealityPointer GazePointer { get; } Property Value Type Description IMixedRealityPointer GazeTarget The game object that is currently being gazed at, if any. Declaration public GameObject GazeTarget { get; } Property Value Type Description GameObject HeadMovementDirection The current head movement direction. Declaration public Vector3 HeadMovementDirection { get; } Property Value Type Description Vector3 HeadVelocity The current head velocity. Declaration public Vector3 HeadVelocity { get; } Property Value Type Description Vector3 HitInfo HitInfo property gives access to information at the object being gazed at, if any. Declaration public MixedRealityRaycastHit HitInfo { get; } Property Value Type Description MixedRealityRaycastHit HitNormal Normal of the point at which the gaze manager hit an object. If no object is currently being hit, this will return the previous normal. Declaration public Vector3 HitNormal { get; } Property Value Type Description Vector3 HitPosition Position at which the gaze manager hit an object. If no object is currently being hit, this will use the last hit distance. Declaration public Vector3 HitPosition { get; } Property Value Type Description Vector3 IsEyeCalibrationValid Boolean to check whether the user went through the eye tracking calibration. Initially the parameter will return null until it has received valid information from the eye tracking system. Declaration public bool? IsEyeCalibrationValid { get; } Property Value Type Description Nullable < Boolean > IsEyeGazeValid Whether eye gaze is valid. It may be invalid due to timeout or lack of tracking hardware or permissions. Declaration public bool IsEyeGazeValid { get; } Property Value Type Description Boolean Timestamp DateTime in UTC when the signal was last updated. Declaration public DateTime Timestamp { get; } Property Value Type Description DateTime UseEyeTracking If true, eye-based tracking will be used when available. Declaration public bool UseEyeTracking { get; set; } Property Value Type Description Boolean Remarks The usage of eye-based tracking depends on having the Gaze Input permission set and user approved, along with proper device eye calibration. This will fallback to head-based gaze when eye-based tracking is not available. Methods OnDisable() Declaration protected override void OnDisable() Overrides InputSystemGlobalHandlerListener.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides InputSystemGlobalHandlerListener.OnEnable() OnInputDown(InputEventData) Declaration public void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputUp(InputEventData) Declaration public void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() SetGazeCursor(GameObject) Set the gaze cursor. Declaration public void SetGazeCursor(GameObject cursor) Parameters Type Name Description GameObject cursor Start() Declaration protected override void Start() Overrides InputSystemGlobalHandlerListener.Start() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() UpdateEyeGaze(IMixedRealityEyeGazeDataProvider, Ray, DateTime) Declaration public void UpdateEyeGaze(IMixedRealityEyeGazeDataProvider provider, Ray eyeRay, DateTime timestamp) Parameters Type Name Description IMixedRealityEyeGazeDataProvider provider Ray eyeRay DateTime timestamp UpdateEyeTrackingStatus(IMixedRealityEyeGazeDataProvider, Boolean) Declaration public void UpdateEyeTrackingStatus(IMixedRealityEyeGazeDataProvider provider, bool userIsEyeCalibrated) Parameters Type Name Description IMixedRealityEyeGazeDataProvider provider Boolean userIsEyeCalibrated UpdateGazeInfoFromHit(MixedRealityRaycastHit) Notifies this gaze provider of its new hit details. Declaration public void UpdateGazeInfoFromHit(MixedRealityRaycastHit raycastHit) Parameters Type Name Description MixedRealityRaycastHit raycastHit Remarks For components that care where the user's looking, we need to separately update the gaze info even if gaze isn't used for focus. Implements IMixedRealityEyeGazeProvider IMixedRealityGazeProvider IMixedRealityInputHandler IMixedRealityBaseInputHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.GenericPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.GenericPointer.html",
    "title": "Class GenericPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericPointer Base Class for pointers that don't inherit from MonoBehaviour. Inheritance Object GenericPointer Implements IMixedRealityPointer IEqualityComparer Inherited Members Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class GenericPointer : IMixedRealityPointer, IEqualityComparer Constructors GenericPointer(String, IMixedRealityInputSource) Constructor. Declaration protected GenericPointer(string pointerName, IMixedRealityInputSource inputSourceParent) Parameters Type Name Description String pointerName IMixedRealityInputSource inputSourceParent Properties BaseCursor The pointer's cursor. Declaration public IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller The pointer's current controller reference. Declaration public virtual IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController CursorModifier The currently active cursor modifier. Declaration public ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier FocusTarget The currently focused target. Declaration public IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent This pointer's input source parent. Declaration public virtual IMixedRealityInputSource InputSourceParent { get; protected set; } Property Value Type Description IMixedRealityInputSource IsActive Declaration public bool IsActive { get; set; } Property Value Type Description Boolean IsFocusLocked Is the focus for this pointer currently locked? Declaration public bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration public bool IsInteractionEnabled { get; set; } Property Value Type Description Boolean IsTargetPositionLockedOnFocusLock Specifies whether the pointer's target position (cursor) is locked to the target object when focus is locked. Declaration public bool IsTargetPositionLockedOnFocusLock { get; set; } Property Value Type Description Boolean PointerExtent The pointer's maximum extent when raycasting. Declaration public virtual float PointerExtent { get; set; } Property Value Type Description Single PointerId This pointer's id. Declaration public uint PointerId { get; } Property Value Type Description UInt32 PointerName This pointer's name. Declaration public string PointerName { get; set; } Property Value Type Description String Position Pointer position. Declaration public abstract Vector3 Position { get; } Property Value Type Description Vector3 PrioritizedLayerMasksOverride The physics layers to use when performing scene queries. Declaration public LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] Remarks If set, will override the IMixedRealityInputSystem 's default scene query layer mask array. Rays The scene query rays. Declaration public RayStep[] Rays { get; protected set; } Property Value Type Description RayStep [] RayStabilizer Ray stabilizer used when calculating position of pointer end point. Declaration public IBaseRayStabilizer RayStabilizer { get; set; } Property Value Type Description IBaseRayStabilizer Result The scene query pointer result. Declaration public IPointerResult Result { get; set; } Property Value Type Description IPointerResult Rotation Pointer rotation. Declaration public abstract Quaternion Rotation { get; } Property Value Type Description Quaternion SceneQueryType The type of physics scene query to use. Declaration public SceneQueryType SceneQueryType { get; set; } Property Value Type Description SceneQueryType SphereCastRadius The radius to use when SceneQueryType is set to Sphere or SphereColliders. Declaration public float SphereCastRadius { get; set; } Property Value Type Description Single TeleportHotSpot Declaration public IMixedRealityTeleportHotSpot TeleportHotSpot { get; set; } Property Value Type Description IMixedRealityTeleportHotSpot Methods Equals(IMixedRealityPointer, IMixedRealityPointer) Declaration public static bool Equals(IMixedRealityPointer left, IMixedRealityPointer right) Parameters Type Name Description IMixedRealityPointer left IMixedRealityPointer right Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() OnPostSceneQuery() Called after performing the scene query. Declaration public abstract void OnPostSceneQuery() OnPreCurrentPointerTargetChange() Called during the scene query just before the current pointer target changes. Declaration public abstract void OnPreCurrentPointerTargetChange() OnPreSceneQuery() Called before performing the scene query. Declaration public abstract void OnPreSceneQuery() Implements IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.GestureInputType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.GestureInputType.html",
    "title": "Enum GestureInputType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GestureInputType The GestureInputType defines the types of gestures exposed by a controller. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum GestureInputType Fields Name Description Hold Manipulation Navigation None Select"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.GGVPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.GGVPointer.html",
    "title": "Class GGVPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class GGVPointer This class allows for HoloLens 1 style input, using a far gaze ray for focus with hand and gesture-based input and interaction across it. Inheritance Object InputSystemGlobalHandlerListener GGVPointer Implements IMixedRealityPointer IEqualityComparer IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < MixedRealityPose > IMixedRealitySourceStateHandler IEventSystemHandler Inherited Members InputSystemGlobalHandlerListener.Start() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class GGVPointer : InputSystemGlobalHandlerListener, IMixedRealityPointer, IEqualityComparer, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<MixedRealityPose>, IMixedRealitySourceStateHandler, IEventSystemHandler Remarks This pointer's position is given by hand position (grip pose), and the input focus is given by head gaze. Properties BaseCursor Declaration public IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller The pointer's current controller reference. Declaration public IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController CursorModifier Declaration public ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier FocusTarget Declaration public IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent Declaration public IMixedRealityInputSource InputSourceParent { get; } Property Value Type Description IMixedRealityInputSource IsActive Declaration public bool IsActive { get; set; } Property Value Type Description Boolean IsFocusLocked Is the focus for this pointer currently locked? Declaration public bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Declaration public bool IsInteractionEnabled { get; } Property Value Type Description Boolean IsTargetPositionLockedOnFocusLock Specifies whether the pointer's target position (cursor) is locked to the target object when focus is locked. Declaration public bool IsTargetPositionLockedOnFocusLock { get; set; } Property Value Type Description Boolean PointerId This pointer's id. Declaration public uint PointerId { get; } Property Value Type Description UInt32 PointerName This pointer's name. Declaration public string PointerName { get; set; } Property Value Type Description String Position Pointer position. Declaration public virtual Vector3 Position { get; } Property Value Type Description Vector3 PrioritizedLayerMasksOverride Declaration public LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] Rays Declaration public RayStep[] Rays { get; protected set; } Property Value Type Description RayStep [] Result The scene query pointer result. Declaration public IPointerResult Result { get; set; } Property Value Type Description IPointerResult Rotation Pointer rotation. Declaration public virtual Quaternion Rotation { get; } Property Value Type Description Quaternion SceneQueryType The type of physics scene query to use. Declaration public virtual SceneQueryType SceneQueryType { get; set; } Property Value Type Description SceneQueryType SphereCastRadius Declaration public float SphereCastRadius { get; set; } Property Value Type Description Single Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 OnDisable() Declaration protected override void OnDisable() Overrides InputSystemGlobalHandlerListener.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides InputSystemGlobalHandlerListener.OnEnable() OnInputChanged(InputEventData<MixedRealityPose>) Declaration public void OnInputChanged(InputEventData<MixedRealityPose> eventData) Parameters Type Name Description InputEventData < MixedRealityPose > eventData OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration public void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration public void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnPostSceneQuery() Declaration public void OnPostSceneQuery() OnPreCurrentPointerTargetChange() Declaration public void OnPreCurrentPointerTargetChange() OnPreSceneQuery() Declaration public void OnPreSceneQuery() OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected override void RegisterHandlers() Overrides InputSystemGlobalHandlerListener.RegisterHandlers() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected override void UnregisterHandlers() Overrides InputSystemGlobalHandlerListener.UnregisterHandlers() Implements IMixedRealityPointer IEqualityComparer IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealitySourceStateHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandBounds.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandBounds.html",
    "title": "Class HandBounds | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandBounds Utility behavior to access the axis aligned bounds of IMixedRealityHands (or the proxy visualizer of IMixedRealityControllers). Inheritance Object HandBounds Implements IMixedRealitySourceStateHandler IMixedRealityHandJointHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class HandBounds : MonoBehaviour, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler, IEventSystemHandler Properties Bounds Accessor for the bounds associated with a handedness. Declaration public Dictionary<Handedness, Bounds> Bounds { get; } Property Value Type Description Dictionary < Handedness , Bounds > DrawBoundsGizmo Should a gizmo be drawn to represent the hand bounds. Declaration public bool DrawBoundsGizmo { get; set; } Property Value Type Description Boolean Methods OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>>) Declaration public void OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>> eventData) Parameters Type Name Description InputEventData < IDictionary < TrackedHandJoint , MixedRealityPose >> eventData OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Implements IMixedRealitySourceStateHandler IMixedRealityHandJointHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandJointService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandJointService.html",
    "title": "Class HandJointService | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandJointService Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager HandJointService Implements IMixedRealityHandJointService IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.GetActiveControllers() BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class HandJointService : BaseInputDeviceManager, IMixedRealityHandJointService, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors HandJointService(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public HandJointService(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. HandJointService(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public HandJointService(IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() IsHandTracked(Handedness) Declaration public bool IsHandTracked(Handedness handedness) Parameters Type Name Description Handedness handedness Returns Type Description Boolean LateUpdate() Optional LateUpdate function to that is called after Update has been called on all services. Declaration public override void LateUpdate() Overrides BaseService.LateUpdate() RequestJointTransform(TrackedHandJoint, Handedness) Declaration public Transform RequestJointTransform(TrackedHandJoint joint, Handedness handedness) Parameters Type Name Description TrackedHandJoint joint Handedness handedness Returns Type Description Transform Implements IMixedRealityHandJointService IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandJointUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandJointUtils.html",
    "title": "Class HandJointUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandJointUtils Inheritance Object HandJointUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public static class HandJointUtils Methods FindHand(Handedness) Find the first detected hand controller with matching handedness. Declaration public static IMixedRealityHand FindHand(Handedness handedness) Parameters Type Name Description Handedness handedness Returns Type Description IMixedRealityHand Remarks The given handedness should be either Handedness.Left or Handedness.Right. FindHand<T>(Handedness) Find the first detected hand controller of the given type with matching handedness. Declaration public static T FindHand<T>(Handedness handedness) where T : class, IMixedRealityHand Parameters Type Name Description Handedness handedness Returns Type Description T Type Parameters Name Description T TryGetJointPose(TrackedHandJoint, Handedness, out MixedRealityPose) Tries to get the pose of the requested joint for the first controller with the specified handedness. Declaration public static bool TryGetJointPose(TrackedHandJoint joint, Handedness handedness, out MixedRealityPose pose) Parameters Type Name Description TrackedHandJoint joint The requested joint Handedness handedness The specific hand of interest. This should be either Handedness.Left or Handedness.Right MixedRealityPose pose The output pose data Returns Type Description Boolean TryGetJointPose<T>(TrackedHandJoint, Handedness, out MixedRealityPose) Try to find the first matching hand controller of the given type and return the pose of the requested joint for that hand. Declaration public static bool TryGetJointPose<T>(TrackedHandJoint joint, Handedness handedness, out MixedRealityPose pose) where T : class, IMixedRealityHand Parameters Type Name Description TrackedHandJoint joint Handedness handedness MixedRealityPose pose Returns Type Description Boolean Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.HandMeshInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.HandMeshInfo.html",
    "title": "Class HandMeshInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class HandMeshInfo Inheritance Object HandMeshInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class HandMeshInfo Fields normals Declaration public Vector3[] normals Field Value Type Description Vector3 [] position Declaration public Vector3 position Field Value Type Description Vector3 rotation Declaration public Quaternion rotation Field Value Type Description Quaternion triangles Declaration public int[] triangles Field Value Type Description Int32 [] uvs Declaration public Vector2[] uvs Field Value Type Description Vector2 [] vertices Declaration public Vector3[] vertices Field Value Type Description Vector3 []"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandJointHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandJointHandler.html",
    "title": "Interface IMixedRealityHandJointHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityHandJointHandler Interface to implement for hand joint information. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityHandJointHandler : IEventSystemHandler Methods OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>>) Declaration void OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>> eventData) Parameters Type Name Description InputEventData < IDictionary < TrackedHandJoint , MixedRealityPose >> eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandJointService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandJointService.html",
    "title": "Interface IMixedRealityHandJointService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityHandJointService Mixed Reality Toolkit device definition, used to instantiate and manage a specific device / SDK Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityHandJointService : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Methods IsHandTracked(Handedness) Declaration bool IsHandTracked(Handedness handedness) Parameters Type Name Description Handedness handedness Returns Type Description Boolean RequestJointTransform(TrackedHandJoint, Handedness) Get a game object following the hand joint. Declaration Transform RequestJointTransform(TrackedHandJoint joint, Handedness handedness) Parameters Type Name Description TrackedHandJoint joint Handedness handedness Returns Type Description Transform"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandMeshHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandMeshHandler.html",
    "title": "Interface IMixedRealityHandMeshHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityHandMeshHandler Interface to implement for hand mesh information. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityHandMeshHandler : IEventSystemHandler Methods OnHandMeshUpdated(InputEventData<HandMeshInfo>) Declaration void OnHandMeshUpdated(InputEventData<HandMeshInfo> eventData) Parameters Type Name Description InputEventData < HandMeshInfo > eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityHandVisualizer.html",
    "title": "Interface IMixedRealityHandVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityHandVisualizer Hand visualization definition, used to provide access to hand joint objects. Inherited Members IMixedRealityControllerVisualizer.GameObjectProxy IMixedRealityControllerVisualizer.Controller Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityHandVisualizer : IMixedRealityControllerVisualizer Methods TryGetJointTransform(TrackedHandJoint, out Transform) Get a game object following the hand joint. Declaration bool TryGetJointTransform(TrackedHandJoint joint, out Transform jointTransform) Parameters Type Name Description TrackedHandJoint joint Transform jointTransform Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputActionHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputActionHandler.html",
    "title": "Interface IMixedRealityInputActionHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputActionHandler Interface to receive input action events. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputActionHandler : IMixedRealityBaseInputHandler, IEventSystemHandler Methods OnActionEnded(BaseInputEventData) Received on action end, e.g when a button is released or a gesture completed. Declaration void OnActionEnded(BaseInputEventData eventData) Parameters Type Name Description BaseInputEventData eventData Input event that triggered the action OnActionStarted(BaseInputEventData) Received on action start, e.g when a button is pressed or a gesture starts. Declaration void OnActionStarted(BaseInputEventData eventData) Parameters Type Name Description BaseInputEventData eventData Input event that triggered the action"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputDeviceManager.html",
    "title": "Interface IMixedRealityInputDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputDeviceManager Mixed Reality Toolkit input device definition, used to instantiate and manage one or more input devices Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputDeviceManager : IMixedRealityDataProvider, IMixedRealityService, IDisposable Methods GetActiveControllers() Retrieve all controllers currently registered with this device at runtime (if direct access is required) Declaration IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController []"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpherePointerVisual.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpherePointerVisual.html",
    "title": "Class SpherePointerVisual | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpherePointerVisual Inheritance Object SpherePointerVisual Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpherePointerVisual : MonoBehaviour Properties TetherEndPoint Declaration public Transform TetherEndPoint { get; } Property Value Type Description Transform TetherVisualsEnabled Declaration public bool TetherVisualsEnabled { get; } Property Value Type Description Boolean Methods OnDestroy() Declaration public void OnDestroy() OnEnable() Declaration public void OnEnable() Start() Declaration public void Start() Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpriteCursor.SpriteCursorDatum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpriteCursor.SpriteCursorDatum.html",
    "title": "Struct SpriteCursor.SpriteCursorDatum | Mixed Reality Toolkit Documentation",
    "keywords": "Struct SpriteCursor.SpriteCursorDatum Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct SpriteCursorDatum Fields CursorColor Declaration public Color CursorColor Field Value Type Description Color CursorSprite Declaration public Sprite CursorSprite Field Value Type Description Sprite CursorState Declaration public CursorStateEnum CursorState Field Value Type Description CursorStateEnum Name Declaration public string Name Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SpriteCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SpriteCursor.html",
    "title": "Class SpriteCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpriteCursor Object that represents a cursor comprised of sprites and colors for each state Inheritance Object BaseCursor SpriteCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseCursor.CursorState BaseCursor.CursorContext BaseCursor.SurfaceCursorDistance BaseCursor.UseUnscaledTime BaseCursor.PositionLerpTime BaseCursor.ScaleLerpTime BaseCursor.RotationLerpTime BaseCursor.LookRotationBlend BaseCursor.ResizeCursorWithDistance BaseCursor.CursorAngularScale BaseCursor.CursorAngularSize BaseCursor.PrimaryCursorVisual BaseCursor.IsSourceDetected BaseCursor.SourceDownIds BaseCursor.IsPointerDown BaseCursor.TargetedObject BaseCursor.VisibleSourcesCount BaseCursor.targetPosition BaseCursor.targetScale BaseCursor.targetRotation BaseCursor.Pointer BaseCursor.IsPointerValid BaseCursor.DefaultCursorDistance BaseCursor.Position BaseCursor.Rotation BaseCursor.LocalScale BaseCursor.SetVisibility(Boolean) BaseCursor.Destroy() BaseCursor.IsVisible BaseCursor.SetVisibilityOnSourceDetected BaseCursor.GameObjectReference BaseCursor.OnSourceDetected(SourceStateEventData) BaseCursor.OnSourceLost(SourceStateEventData) BaseCursor.OnBeforeFocusChange(FocusEventData) BaseCursor.OnFocusChanged(FocusEventData) BaseCursor.OnPointerDown(MixedRealityPointerEventData) BaseCursor.OnPointerDragged(MixedRealityPointerEventData) BaseCursor.OnPointerClicked(MixedRealityPointerEventData) BaseCursor.OnPointerUp(MixedRealityPointerEventData) BaseCursor.Start() BaseCursor.OnDisable() BaseCursor.RegisterManagers() BaseCursor.UnregisterManagers() BaseCursor.UpdateCursorTransform() BaseCursor.LerpToTargetTransform() BaseCursor.SnapToTargetTransform() BaseCursor.OnInputDisabled() BaseCursor.OnInputEnabled() BaseCursor.CheckCursorState() BaseCursor.CheckCursorContext() BaseCursor.OnCursorContextChange(CursorContextEnum) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SpriteCursor : BaseCursor, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Fields CursorStateData Declaration public SpriteCursor.SpriteCursorDatum[] CursorStateData Field Value Type Description SpriteCursor.SpriteCursorDatum [] TargetRenderer Sprite renderer to change. If null find one in children Declaration public SpriteRenderer TargetRenderer Field Value Type Description SpriteRenderer Methods OnCursorStateChange(CursorStateEnum) Override OnCursorState change to set the correct sprite state for the cursor Declaration public override void OnCursorStateChange(CursorStateEnum state) Parameters Type Name Description CursorStateEnum state Overrides BaseCursor.OnCursorStateChange(CursorStateEnum) OnEnable() On enable look for a sprite renderer on children Declaration protected override void OnEnable() Overrides BaseCursor.OnEnable() Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SupportedControllerType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SupportedControllerType.html",
    "title": "Enum SupportedControllerType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SupportedControllerType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum SupportedControllerType Fields Name Description ArticulatedHand GenericOpenVR GenericUnity GGVHand Mouse OculusRemote OculusTouch TouchScreen ViveKnuckles ViveWand WindowsMixedReality Xbox"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.TouchableEventType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.TouchableEventType.html",
    "title": "Enum TouchableEventType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TouchableEventType Type of Events to receive from a PokePointer. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum TouchableEventType Fields Name Description Pointer Touch"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.TouchHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.TouchHandler.html",
    "title": "Class TouchHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class TouchHandler Inheritance Object TouchHandler Implements IMixedRealityTouchHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class TouchHandler : MonoBehaviour, IMixedRealityTouchHandler, IEventSystemHandler Fields OnTouchCompleted Declaration public TouchEvent OnTouchCompleted Field Value Type Description TouchEvent OnTouchStarted Declaration public TouchEvent OnTouchStarted Field Value Type Description TouchEvent OnTouchUpdated Declaration public TouchEvent OnTouchUpdated Field Value Type Description TouchEvent Explicit Interface Implementations IMixedRealityTouchHandler.OnTouchCompleted(HandTrackingInputEventData) Declaration void IMixedRealityTouchHandler.OnTouchCompleted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData IMixedRealityTouchHandler.OnTouchStarted(HandTrackingInputEventData) Declaration void IMixedRealityTouchHandler.OnTouchStarted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData IMixedRealityTouchHandler.OnTouchUpdated(HandTrackingInputEventData) Declaration void IMixedRealityTouchHandler.OnTouchUpdated(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData Implements IMixedRealityTouchHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.TouchPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.TouchPointer.html",
    "title": "Class TouchPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class TouchPointer Touch Pointer Implementation. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer TouchPointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityTouchPointer IMixedRealityPointer IEqualityComparer Inherited Members BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.OnEnable() BaseControllerPointer.Start() BaseControllerPointer.OnDisable() BaseControllerPointer.Controller BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.OnPostSceneQuery() BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() BaseControllerPointer.OnInputUp(InputEventData) BaseControllerPointer.OnInputDown(InputEventData) ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class TouchPointer : BaseControllerPointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityTouchPointer, IMixedRealityPointer, IEqualityComparer Properties FingerId Current finger id of the touch. Declaration public int FingerId { get; set; } Property Value Type Description Int32 IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration public override bool IsInteractionEnabled { get; } Property Value Type Description Boolean Overrides BaseControllerPointer.IsInteractionEnabled Position Pointer position. Declaration public override Vector3 Position { get; } Property Value Type Description Vector3 Overrides BaseControllerPointer.Position Rotation Pointer rotation. Declaration public override Quaternion Rotation { get; } Property Value Type Description Quaternion Overrides BaseControllerPointer.Rotation TouchRay Current touch ray. Declaration public Ray TouchRay { get; set; } Property Value Type Description Ray Methods OnPreSceneQuery() Called before performing the scene query. Declaration public override void OnPreSceneQuery() Overrides BaseControllerPointer.OnPreSceneQuery() OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public override void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public override void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides BaseControllerPointer.OnSourceLost(SourceStateEventData) Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityTouchPointer IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.GenericJoystickController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.GenericJoystickController.html",
    "title": "Class GenericJoystickController | Mixed Reality Toolkit Documentation",
    "keywords": "Class GenericJoystickController Inheritance Object BaseController GenericJoystickController XboxController Implements IMixedRealityController Inherited Members BaseController.DefaultInteractions BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.IsInPointingPose BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class GenericJoystickController : BaseController, IMixedRealityController Constructors GenericJoystickController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Declaration public GenericJoystickController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Fields CurrentControllerPose The current pose of this controller. Declaration protected MixedRealityPose CurrentControllerPose Field Value Type Description MixedRealityPose CurrentControllerPosition The current position of this controller. Declaration protected Vector3 CurrentControllerPosition Field Value Type Description Vector3 CurrentControllerRotation The current rotation of this controller. Declaration protected Quaternion CurrentControllerRotation Field Value Type Description Quaternion LastControllerPose The previous pose of this controller. Declaration protected MixedRealityPose LastControllerPose Field Value Type Description MixedRealityPose Properties PointerOffsetAngle The pointer's offset angle. Declaration public float PointerOffsetAngle { get; protected set; } Property Value Type Description Single Methods SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness, if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) UpdateButtonData(MixedRealityInteractionMapping) Update an Interaction Bool data type from a Bool input Declaration protected void UpdateButtonData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping Remarks Raises an Input System \"Input Down\" event when the key is down, and raises an \"Input Up\" when it is released (e.g. a Button) Also raises a \"Pressed\" event while pressed UpdateController() Update the controller data from Unity's Input Manager Declaration public virtual void UpdateController() UpdateDualAxisData(MixedRealityInteractionMapping) Update the Touchpad / Thumbstick input from the device (in OpenVR, touchpad and thumbstick are the same input control) Declaration protected void UpdateDualAxisData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping UpdatePoseData(MixedRealityInteractionMapping) Update Spatial Pointer Data. Declaration protected void UpdatePoseData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping UpdateSingleAxisData(MixedRealityInteractionMapping) Update an Interaction Float data type from a SingleAxis (float) input Declaration protected void UpdateSingleAxisData(MixedRealityInteractionMapping interactionMapping) Parameters Type Name Description MixedRealityInteractionMapping interactionMapping Remarks Raises a Float Input Changed event when the float data changes Implements IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.TemplateFiles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.TemplateFiles.html",
    "title": "Class TemplateFiles | Mixed Reality Toolkit Documentation",
    "keywords": "Class TemplateFiles A helper class to manage (and locate) all the templates. Inheritance Object TemplateFiles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class TemplateFiles Properties Instance Gets the singleton instance (created on demand) of this class. Declaration public static TemplateFiles Instance { get; } Property Value Type Description TemplateFiles MSBuildSolutionTemplatePath Gets the MSBuild Solution file (.sln) template path. Declaration public string MSBuildSolutionTemplatePath { get; } Property Value Type Description String OtherFiles Gets a list of all other files included among the templates. Declaration public IReadOnlyList<string> OtherFiles { get; } Property Value Type Description IReadOnlyList < String > PlatformPropsTemplatePath Gets the MSBuild Platform Props file (.props) template path. Declaration public string PlatformPropsTemplatePath { get; } Property Value Type Description String PlatformTemplates Gets a list of specialized platform templates. Declaration public IReadOnlyDictionary<string, string> PlatformTemplates { get; } Property Value Type Description IReadOnlyDictionary < String , String > PluginMetaTemplatePaths Gets a list of meta files for plugins templates. Declaration public IReadOnlyDictionary<BuildTargetGroup, FileInfo> PluginMetaTemplatePaths { get; } Property Value Type Description IReadOnlyDictionary < BuildTargetGroup , FileInfo > SDKProjectFileTemplatePath Gets the MSBuild C# SDK Project file (.csproj) template path. Declaration public string SDKProjectFileTemplatePath { get; } Property Value Type Description String Methods GetTemplateFilePathForPlatform(String, String) Gets the correct platform template file path. Declaration public string GetTemplateFilePathForPlatform(string platform, string configuration) Parameters Type Name Description String platform The platform of the requested template. String configuration The configuration of the requested template. Returns Type Description String The absolute file path for the platform template to use."
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.UnityProjectInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.UnityProjectInfo.html",
    "title": "Class UnityProjectInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityProjectInfo A helper class to parse the state of the current Unity project. Inheritance Object UnityProjectInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public class UnityProjectInfo Constructors UnityProjectInfo(IEnumerable<CompilationPlatformInfo>, String) Declaration public UnityProjectInfo(IEnumerable<CompilationPlatformInfo> availablePlatforms, string projectOutputPath) Parameters Type Name Description IEnumerable < CompilationPlatformInfo > availablePlatforms String projectOutputPath Properties CSProjects Gets all the parsed CSProjects for this Unity project. Declaration public IReadOnlyDictionary<string, CSProjectInfo> CSProjects { get; } Property Value Type Description IReadOnlyDictionary < String , CSProjectInfo > Plugins Gets all the parsed DLLs for this Unity project. Declaration public IReadOnlyCollection<PluginAssemblyInfo> Plugins { get; } Property Value Type Description IReadOnlyCollection < PluginAssemblyInfo > UnityProjectName Gets the name of this Unity Project. Declaration public string UnityProjectName { get; } Property Value Type Description String Methods ExportSolution(String, String, String) Exports the project info into a solution file, and the CSProject files. Declaration public void ExportSolution(string solutionTemplateText, string projectFileTemplateText, string generatedProjectPath) Parameters Type Name Description String solutionTemplateText The solution file template text. String projectFileTemplateText The project file template text. String generatedProjectPath The output folder of the platform props."
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.Utilities.html",
    "title": "Class Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class Utilities Helper Utilities methods used by other classes. Inheritance Object Utilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.MSBuild Assembly : cs.temp.dll.dll Syntax public static class Utilities Fields MetaFileGuidRegex Declaration public const string MetaFileGuidRegex = \"guid:\\\\s*([0-9a-fA-F]{32})\" Field Value Type Description String PackagesCopyFolderName Declaration public const string PackagesCopyFolderName = \"PackagesCopy\" Field Value Type Description String Properties AssetPath Declaration public static string AssetPath { get; } Property Value Type Description String BuiltInPackagesPath Declaration public static string BuiltInPackagesPath { get; } Property Value Type Description String MSBuildOutputFolder Declaration public static string MSBuildOutputFolder { get; } Property Value Type Description String PackagesCopyPath Declaration public static string PackagesCopyPath { get; } Property Value Type Description String ProjectPath Declaration public static string ProjectPath { get; } Property Value Type Description String Methods CopyDirectory(String, String) Copies the source directory to the output directory creating all the directories first then copying. Declaration public static void CopyDirectory(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath String destinationPath DeleteDirectory(String, Boolean) Delete directory helper that also waits for delete to completely propagate through the system. Declaration public static void DeleteDirectory(string targetDir, bool waitForDirectoryDelete = false) Parameters Type Name Description String targetDir Boolean waitForDirectoryDelete EnsureCleanDirectory(String) Deletes a directory then waits for it to be flushed in the system as deleted before creating. Sometimes deleting and creating to quickly will result in an exception. Declaration public static void EnsureCleanDirectory(string path) Parameters Type Name Description String path GetAssetLocation(FileInfo) Gets the known AssetLocation for the asset file. Declaration public static AssetLocation GetAssetLocation(FileInfo assetFile) Parameters Type Name Description FileInfo assetFile The asset file. Returns Type Description AssetLocation The AssetLocation if valid; throws an exception otherwise. GetAssetsRelativePathFrom(String) Get a path relative to the assets folder from the absolute path. Declaration public static string GetAssetsRelativePathFrom(string absolutePath) Parameters Type Name Description String absolutePath Returns Type Description String GetBuildTargetGroup(BuildTarget) Gets a BuildTargetGroup for a specified BuildTarget . Declaration public static BuildTargetGroup GetBuildTargetGroup(BuildTarget buildTarget) Parameters Type Name Description BuildTarget buildTarget Returns Type Description BuildTargetGroup GetFullPathFromAssetsRelative(String) Converts an assets relative path to an absolute path. Declaration public static string GetFullPathFromAssetsRelative(string assetsRelativePath) Parameters Type Name Description String assetsRelativePath Returns Type Description String GetFullPathFromKnownRelative(String) Gets a full path from one of the two known relative paths (Assets, Packages). Packages is converted to use PackagesCopy. Declaration public static string GetFullPathFromKnownRelative(string path) Parameters Type Name Description String path Returns Type Description String GetFullPathFromPackagesRelative(String) Converts a Packages relative path to an absolute path using PackagesCopy directory instead. Declaration public static string GetFullPathFromPackagesRelative(string path) Parameters Type Name Description String path Returns Type Description String GetNormalizedPath(String, Boolean) Gets a normalized path (with back slashes only), and optionally can make full path. Declaration public static string GetNormalizedPath(string path, bool makeFullPath = false) Parameters Type Name Description String path Boolean makeFullPath Returns Type Description String GetPackagesRelativePathFrom(String) Get a path relative to the Packages folder from the absolute path, uses PackagesOutput folder. Declaration public static string GetPackagesRelativePathFrom(string absolutePath) Parameters Type Name Description String absolutePath Returns Type Description String GetPathsFromGuidsInPlace(String[], Boolean) Given a list of Asset guids converts them to asset paths in place. Declaration public static void GetPathsFromGuidsInPlace(string[] guids, bool fullPaths = false) Parameters Type Name Description String [] guids Boolean fullPaths GetRelativePath(String, String) Gets a relative path between two absolute paths. Declaration public static string GetRelativePath(string thisAbsolute, string thatAbsolute) Parameters Type Name Description String thisAbsolute String thatAbsolute Returns Type Description String GetRelativePathForKnownFolders(String, String) Gets a relative path between two known relative paths (inside Assets or Packages) Declaration public static string GetRelativePathForKnownFolders(string thisKnownFolder, string thatKnownFolder) Parameters Type Name Description String thisKnownFolder String thatKnownFolder Returns Type Description String GetUWPSDKs() Declaration public static IEnumerable<Version> GetUWPSDKs() Returns Type Description IEnumerable < Version > IsManagedAssembly(String) A helper to check whether a DLL is a managed assembly. Declaration public static bool IsManagedAssembly(string assemblyPath) Parameters Type Name Description String assemblyPath The path to the assembly. Returns Type Description Boolean True if a managed assembly. Remarks Taken from https://stackoverflow.com/questions/367761/how-to-determine-whether-a-dll-is-a-managed-assembly-or-native-prevent-loading . IsPlatformInstalled(BuildTarget) Helper to see if the specified BuildTarget is installed in the editor. Declaration public static bool IsPlatformInstalled(BuildTarget buildTarget) Parameters Type Name Description BuildTarget buildTarget Returns Type Description Boolean ReadUntil(StreamReader, String[]) Reads until some contents is encountered, or the end of the stream is reached. Declaration public static string ReadUntil(this StreamReader reader, params string[] contents) Parameters Type Name Description StreamReader reader The StreamReader to use for reading. String [] contents The contents to search for in the lines being read. Returns Type Description String The line on which some of the contents was found. ReadWhile(StreamReader, Func<String, Boolean>) Reads while the predicate is satisfied, returns the line on which it failed. Declaration public static string ReadWhile(this StreamReader reader, Func<string, bool> predicate) Parameters Type Name Description StreamReader reader The StreamReader to use for reading. Func < String , Boolean > predicate The predicate that should return false when reading should stop. Returns Type Description String The line on which the predicate returned false. ReplaceTokens(String, Dictionary<String, String>, Boolean) Helper to replace tokens in text using StringBuilder. Declaration public static string ReplaceTokens(string text, Dictionary<string, string> tokens, bool verifyAllTokensPresent = false) Parameters Type Name Description String text Dictionary < String , String > tokens Boolean verifyAllTokensPresent Returns Type Description String TryGetGuidForAsset(FileInfo, out Guid) Parses a .meta file to extract a guid for the asset. Declaration public static bool TryGetGuidForAsset(FileInfo assetPath, out Guid guid) Parameters Type Name Description FileInfo assetPath The path to the asset (not the .meta file). Guid guid The guid extracted. Returns Type Description Boolean True if the operation was successful. TryGetTextTemplate(String, String, out String) Helper to fetch a normal text file based template ('prefixed with #') Declaration public static bool TryGetTextTemplate(string text, string templateName, out string fullTemplate) Parameters Type Name Description String text String templateName String fullTemplate Returns Type Description Boolean TryGetTextTemplate(String, String, out String, out String) Helper to fetch a normal text file based template ('prefixed with #') Declaration public static bool TryGetTextTemplate(string text, string templateName, out string fullTemplate, out string templateBody) Parameters Type Name Description String text String templateName String fullTemplate String templateBody Returns Type Description Boolean TryGetXMLTemplate(String, String, out String) Helper to fetch an XML based template. Declaration public static bool TryGetXMLTemplate(string text, string templateName, out string template) Parameters Type Name Description String text String templateName String template Returns Type Description Boolean TryIOWithRetries(Action, Int32, TimeSpan, Boolean) Helper to perform an IO operation with retries. Declaration public static bool TryIOWithRetries(Action operation, int numRetries, TimeSpan sleepBetweenRetries, bool throwOnLastRetry = false) Parameters Type Name Description Action operation Int32 numRetries TimeSpan sleepBetweenRetries Boolean throwOnLastRetry Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.MSBuild.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MSBuild.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.MSBuild | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.MSBuild Classes AssemblyDefinitionInfo This class represents an AssemblyDefinition file of a Unity project. It can be used to parse the file contents using JsonUtility.FromJson . AssetScriptReferenceRetargeter CompilationPlatformInfo This contains parsed information using Unity configuration about a specific compilation platform. CSProjectDependency<T> A helper common class to reference dependencies for a CS Project. CSProjectInfo A class representing a CSProject to be outputed. MSBuildTools Class that exposes the MSBuild project generation operation. PluginAssemblyInfo This is the information for the plugins in the Unity project. ReferenceItemInfo A common base class for reference items such as C# Projects and DLLs to be added to MSBuild. SourceFileInfo Parsed information for a source file. TargetFrameworkExtensions Helper extensions for the TargetFramework enum. TemplateFiles A helper class to manage (and locate) all the templates. UnityProjectInfo A helper class to parse the state of the current Unity project. Utilities Helper Utilities methods used by other classes. Enums AssetLocation Represents where a Unity project reference asset is located. PluginType Type of Plugin. ProjectType From which source was the project created. TargetFramework Represents TargetFrameworks that Unity supports."
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.AppOverrideKeys_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.AppOverrideKeys_t.html",
    "title": "Struct AppOverrideKeys_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct AppOverrideKeys_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct AppOverrideKeys_t Fields pchKey Declaration public IntPtr pchKey Field Value Type Description IntPtr pchValue Declaration public IntPtr pchValue Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CameraVideoStreamFrameHeader_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CameraVideoStreamFrameHeader_t.html",
    "title": "Struct CameraVideoStreamFrameHeader_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct CameraVideoStreamFrameHeader_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct CameraVideoStreamFrameHeader_t Fields eFrameType Declaration public EVRTrackedCameraFrameType eFrameType Field Value Type Description EVRTrackedCameraFrameType nBytesPerPixel Declaration public uint nBytesPerPixel Field Value Type Description UInt32 nFrameSequence Declaration public uint nFrameSequence Field Value Type Description UInt32 nHeight Declaration public uint nHeight Field Value Type Description UInt32 nWidth Declaration public uint nWidth Field Value Type Description UInt32 standingTrackedDevicePose Declaration public TrackedDevicePose_t standingTrackedDevicePose Field Value Type Description TrackedDevicePose_t ulFrameExposureTime Declaration public ulong ulFrameExposureTime Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ChaperoneCalibrationState.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ChaperoneCalibrationState.html",
    "title": "Enum ChaperoneCalibrationState | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ChaperoneCalibrationState Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ChaperoneCalibrationState Fields Name Description Error Error_BaseStationConflict Error_BaseStationUninitialized Error_CollisionBoundsInvalid Error_PlayAreaInvalid OK Warning Warning_BaseStationMayHaveMoved Warning_BaseStationRemoved Warning_SeatedBoundsInvalid"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Compositor_CumulativeStats.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Compositor_CumulativeStats.html",
    "title": "Struct Compositor_CumulativeStats | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Compositor_CumulativeStats Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct Compositor_CumulativeStats Fields m_nNumDroppedFrames Declaration public uint m_nNumDroppedFrames Field Value Type Description UInt32 m_nNumDroppedFramesLoading Declaration public uint m_nNumDroppedFramesLoading Field Value Type Description UInt32 m_nNumDroppedFramesOnStartup Declaration public uint m_nNumDroppedFramesOnStartup Field Value Type Description UInt32 m_nNumDroppedFramesTimedOut Declaration public uint m_nNumDroppedFramesTimedOut Field Value Type Description UInt32 m_nNumFramePresents Declaration public uint m_nNumFramePresents Field Value Type Description UInt32 m_nNumFramePresentsLoading Declaration public uint m_nNumFramePresentsLoading Field Value Type Description UInt32 m_nNumFramePresentsOnStartup Declaration public uint m_nNumFramePresentsOnStartup Field Value Type Description UInt32 m_nNumFramePresentsTimedOut Declaration public uint m_nNumFramePresentsTimedOut Field Value Type Description UInt32 m_nNumLoading Declaration public uint m_nNumLoading Field Value Type Description UInt32 m_nNumReprojectedFrames Declaration public uint m_nNumReprojectedFrames Field Value Type Description UInt32 m_nNumReprojectedFramesLoading Declaration public uint m_nNumReprojectedFramesLoading Field Value Type Description UInt32 m_nNumReprojectedFramesOnStartup Declaration public uint m_nNumReprojectedFramesOnStartup Field Value Type Description UInt32 m_nNumReprojectedFramesTimedOut Declaration public uint m_nNumReprojectedFramesTimedOut Field Value Type Description UInt32 m_nNumTimedOut Declaration public uint m_nNumTimedOut Field Value Type Description UInt32 m_nPid Declaration public uint m_nPid Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.LoadContentScene.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions.LoadContentScene.html",
    "title": "Class LoadContentScene | Mixed Reality Toolkit Documentation",
    "keywords": "Class LoadContentScene Utility class to load scenes through MRTK Scene System using a scene transition. Otherwise, it uses Scene System's LoadContent() Inheritance Object LoadContentScene Namespace : Microsoft.MixedReality.Toolkit.Extensions.SceneTransitions Assembly : cs.temp.dll.dll Syntax public class LoadContentScene : MonoBehaviour Methods LoadContent() Load a scene with contentScene.Name Declaration public void LoadContent()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointerMediator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointerMediator.html",
    "title": "Interface IMixedRealityPointerMediator | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPointerMediator Interface for handling groups of pointers resolving conflicts between them. E.g., ensuring that far pointers are disabled when a near pointer is active. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPointerMediator Methods RegisterPointers(IMixedRealityPointer[]) Declaration void RegisterPointers(IMixedRealityPointer[] pointer) Parameters Type Name Description IMixedRealityPointer [] pointer UnregisterPointers(IMixedRealityPointer[]) Declaration void UnregisterPointers(IMixedRealityPointer[] pointers) Parameters Type Name Description IMixedRealityPointer [] pointers UpdatePointers() Declaration void UpdatePointers()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPrimaryPointerSelector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPrimaryPointerSelector.html",
    "title": "Interface IMixedRealityPrimaryPointerSelector | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPrimaryPointerSelector Interface used by the focus provider to select the pointer that will be considered as primary. The current primary pointer can we obtained via PrimaryPointer or subscribing to the primary pointer changed event via SubscribeToPrimaryPointerChanged(PrimaryPointerChangedHandler, Boolean) . Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPrimaryPointerSelector Methods Destroy() Called on destruction of the focus provider to destroy the selector. Declaration void Destroy() Initialize() Called on initialization of the focus provider to initialize the selector. Declaration void Initialize() RegisterPointer(IMixedRealityPointer) Registers a pointer with the selector. Declaration void RegisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer UnregisterPointer(IMixedRealityPointer) Unregisters a pointer with the selector. Declaration void UnregisterPointer(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Update() Called from the focus provider after updating pointers to obtain the new primary pointer. Declaration IMixedRealityPointer Update() Returns Type Description IMixedRealityPointer The new primary pointer or null if none."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityRaycastProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityRaycastProvider.html",
    "title": "Interface IMixedRealityRaycastProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityRaycastProvider Interface to handle raycasts into the scene. Used by FocusProvider to perform ray and sphere cast queries for pointers. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityRaycastProvider : IMixedRealityService, IDisposable Remarks Implementations of IMixedRealityRaycastProvider would likely use Unity's physics system to get hit results from Colliders. However, in a custom implementation, the raycast does not have to rely only on Unity-based Colliders to provide hit results, e.g. a GameObject may use a different mechanism for raycasting, and with a custom implementation, it could be included in the hit result. Methods GraphicsRaycast(EventSystem, PointerEventData, LayerMask[]) Performs a graphics raycast against the specified layerMasks. Declaration RaycastResult GraphicsRaycast(EventSystem eventSystem, PointerEventData pointerEventData, LayerMask[] layerMasks) Parameters Type Name Description EventSystem eventSystem PointerEventData pointerEventData LayerMask [] layerMasks Returns Type Description RaycastResult The RaycastResult of the raycast. Raycast(RayStep, LayerMask[], Boolean, out MixedRealityRaycastHit) Performs a raycast using the specified RayStep . Declaration bool Raycast(RayStep step, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out MixedRealityRaycastHit hitInfo) Parameters Type Name Description RayStep step LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider MixedRealityRaycastHit hitInfo Returns Type Description Boolean Whether or not the raycast hit something. SphereCast(RayStep, Single, LayerMask[], Boolean, out MixedRealityRaycastHit) Performs a sphere cast with the specified RayStep and radius. Declaration bool SphereCast(RayStep step, float radius, LayerMask[] prioritizedLayerMasks, bool focusIndividualCompoundCollider, out MixedRealityRaycastHit hitInfo) Parameters Type Name Description RayStep step Single radius LayerMask [] prioritizedLayerMasks Boolean focusIndividualCompoundCollider MixedRealityRaycastHit hitInfo Returns Type Description Boolean Whether or not the SphereCast hit something."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySourcePoseHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySourcePoseHandler.html",
    "title": "Interface IMixedRealitySourcePoseHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySourcePoseHandler Interface to implement to react to source Inherited Members IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySourcePoseHandler : IMixedRealitySourceStateHandler, IEventSystemHandler Methods OnSourcePoseChanged(SourcePoseEventData<TrackingState>) Raised when the source pose tracking state is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<TrackingState> eventData) Parameters Type Name Description SourcePoseEventData < TrackingState > eventData OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) Raised when the source pose is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose> eventData) Parameters Type Name Description SourcePoseEventData < MixedRealityPose > eventData OnSourcePoseChanged(SourcePoseEventData<Quaternion>) Raised when the source rotation is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<Quaternion> eventData) Parameters Type Name Description SourcePoseEventData < Quaternion > eventData OnSourcePoseChanged(SourcePoseEventData<Vector2>) Raised when the source position is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<Vector2> eventData) Parameters Type Name Description SourcePoseEventData < Vector2 > eventData OnSourcePoseChanged(SourcePoseEventData<Vector3>) Raised when the source position is changed. Declaration void OnSourcePoseChanged(SourcePoseEventData<Vector3> eventData) Parameters Type Name Description SourcePoseEventData < Vector3 > eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySourceStateHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySourceStateHandler.html",
    "title": "Interface IMixedRealitySourceStateHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySourceStateHandler Interface to implement to react to source state changes, such as when an input source is detected or lost. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySourceStateHandler : IEventSystemHandler Methods OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySpeechHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySpeechHandler.html",
    "title": "Interface IMixedRealitySpeechHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpeechHandler Interface to implement to react to speech recognition. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpeechHandler : IMixedRealityBaseInputHandler, IEventSystemHandler Methods OnSpeechKeywordRecognized(SpeechEventData) Declaration void OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySpeechSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealitySpeechSystem.html",
    "title": "Interface IMixedRealitySpeechSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpeechSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpeechSystem : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties IsRecognitionActive Query whether or not the speech system is active Declaration bool IsRecognitionActive { get; } Property Value Type Description Boolean Methods StartRecognition() Make sure the keyword recognizer is on, then stop it. Otherwise, leave it alone because it's already in the desired state. Declaration void StartRecognition() StopRecognition() Make sure the keyword recognizer is on, then stop it. Otherwise, leave it alone because it's already in the desired state. Declaration void StopRecognition()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTeleportPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityTeleportPointer.html",
    "title": "Interface IMixedRealityTeleportPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportPointer Inherited Members IMixedRealityPointer.Controller IMixedRealityPointer.PointerId IMixedRealityPointer.PointerName IMixedRealityPointer.InputSourceParent IMixedRealityPointer.BaseCursor IMixedRealityPointer.CursorModifier IMixedRealityPointer.IsInteractionEnabled IMixedRealityPointer.IsActive IMixedRealityPointer.IsFocusLocked IMixedRealityPointer.IsTargetPositionLockedOnFocusLock IMixedRealityPointer.Rays IMixedRealityPointer.PrioritizedLayerMasksOverride IMixedRealityPointer.FocusTarget IMixedRealityPointer.Result IMixedRealityPointer.SceneQueryType IMixedRealityPointer.SphereCastRadius IMixedRealityPointer.Position IMixedRealityPointer.Rotation IMixedRealityPointer.OnPreSceneQuery() IMixedRealityPointer.OnPostSceneQuery() IMixedRealityPointer.OnPreCurrentPointerTargetChange() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportPointer : IMixedRealityPointer, IEqualityComparer Properties PointerOrientation The Y orientation of the pointer - used for touchpad rotation and navigation Declaration float PointerOrientation { get; } Property Value Type Description Single TeleportHotSpot The currently active teleport hotspot. Declaration IMixedRealityTeleportHotSpot TeleportHotSpot { get; set; } Property Value Type Description IMixedRealityTeleportHotSpot TeleportRequestRaised True when teleport pointer has raised a request with the teleport manager. Declaration bool TeleportRequestRaised { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PointerUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PointerUtils.html",
    "title": "Class PointerUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerUtils Inheritance Object PointerUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public static class PointerUtils Methods GetPointer<T>(Handedness) Find the first detected pointer of the given type with matching handedness. Declaration public static T GetPointer<T>(Handedness handedness) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Returns Type Description T Type Parameters Name Description T GetPointerBehavior<T>(Handedness, InputSourceType) Queries input system for the behavior of a given pointer type. See PointerBehavior . Declaration public static PointerBehavior GetPointerBehavior<T>(Handedness handedness, InputSourceType inputSourceType) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Handedness to query InputSourceType inputSourceType Returns Type Description PointerBehavior PointerBehavior for the given pointer type and handedness Type Parameters Name Description T Type of pointer to query GetPointers() Iterate over all pointers in the input system. May contain duplicates. Declaration public static IEnumerable<IMixedRealityPointer> GetPointers() Returns Type Description IEnumerable < IMixedRealityPointer > GetPointers<T>(Handedness) Returns iterator over all pointers of specific type, with specific handedness. Declaration public static IEnumerable<T> GetPointers<T>(Handedness handedness = null) where T : IMixedRealityPointer Parameters Type Name Description Handedness handedness Handedness of pointer Returns Type Description IEnumerable <T> Iterator over all pointers of specific type, with specific handedness Type Parameters Name Description T Return only pointers with this input type GetPointers<T>(Handedness, InputSourceType) Returns all pointers with given handedness and input type. Declaration public static IEnumerable<T> GetPointers<T>(Handedness handedness, InputSourceType sourceType) where T : IMixedRealityPointer Parameters Type Name Description Handedness handedness Handedness of pointer InputSourceType sourceType Only return pointers of this input source type Returns Type Description IEnumerable <T> Iterator over all pointers that match the source type, with specific handedness Type Parameters Name Description T SetGazePointerBehavior(PointerBehavior) Sets the behavior for the gaze pointer. Declaration public static void SetGazePointerBehavior(PointerBehavior pointerBehavior) Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . SetHandGrabPointerBehavior(PointerBehavior, Handedness) Sets the behavior for the grab pointer with given handedness. Declaration public static void SetHandGrabPointerBehavior(PointerBehavior pointerBehavior, Handedness handedness = null) Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . Handedness handedness Specify handedness to restrict to only right, left. SetHandPokePointerBehavior(PointerBehavior, Handedness) Sets the behavior for the poke pointer with given handedness. Declaration public static void SetHandPokePointerBehavior(PointerBehavior pointerBehavior, Handedness handedness = null) Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . Handedness handedness Specify handedness to restrict to only right, left. SetHandRayPointerBehavior(PointerBehavior, Handedness) Sets the behavior for the hand ray with given handedness Declaration public static void SetHandRayPointerBehavior(PointerBehavior pointerBehavior, Handedness handedness = null) Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . Handedness handedness Specify handedness to restrict to only right, left hands. SetMotionControllerRayPointerBehavior(PointerBehavior, Handedness) Sets the behavior for the motion controller ray with given handedness Declaration public static void SetMotionControllerRayPointerBehavior(PointerBehavior pointerBehavior, Handedness handedness = null) Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . Handedness handedness Specify handedness to restrict to only right, left. SetPointerBehavior<T>(PointerBehavior, Handedness) Sets the pointer behavior for pointer of type T, for all input types. Declaration public static void SetPointerBehavior<T>(PointerBehavior pointerBehavior, Handedness handedness = null) where T : class, IMixedRealityPointer Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . Handedness handedness Specify handedness to restrict to only right, left. Type Parameters Name Description T All pointer types that equal or derive from this type will be set. SetPointerBehavior<T>(PointerBehavior, InputSourceType, Handedness) Sets the behavior for the given pointer type and input type. Declaration public static void SetPointerBehavior<T>(PointerBehavior pointerBehavior, InputSourceType sourceType, Handedness handedness = null) where T : class, IMixedRealityPointer Parameters Type Name Description PointerBehavior pointerBehavior Desired PointerBehavior . InputSourceType sourceType Allows setting different behaviors for different input types (hands, controllers, etc.) Handedness handedness Specify handedness to restrict to only right, left. Type Parameters Name Description T All pointer types that equal or derive from this type will be set. TryGetHandRayEndPoint(Handedness, out Vector3) Tries to get the end point of a hand ray. If no hand ray of given handedness is found, returns false and sets result to zero. Declaration public static bool TryGetHandRayEndPoint(Handedness handedness, out Vector3 endPoint) Parameters Type Name Description Handedness handedness Handedness of ray Vector3 endPoint The output position Returns Type Description Boolean True if pointer found, false otherwise. If not found, endPoint is set to zero TryGetMotionControllerEndPoint(Handedness, out Vector3) Tries to get the end point of a motion controller. If no pointer of given handedness is found, returns false and sets result to zero. Declaration public static bool TryGetMotionControllerEndPoint(Handedness handedness, out Vector3 endPoint) Parameters Type Name Description Handedness handedness Handedness of ray Vector3 endPoint The output position Returns Type Description Boolean True if pointer found, false otherwise. If not found, endPoint is set to zero TryGetPointerEndpoint<T>(Handedness, InputSourceType, out Vector3) Tries to get the end point of a pointer by source type and handedness. If no pointer of given handedness is found, returns false and sets result to zero. Declaration public static bool TryGetPointerEndpoint<T>(Handedness handedness, InputSourceType inputType, out Vector3 endPoint) where T : IMixedRealityPointer Parameters Type Name Description Handedness handedness Handedness of pointer InputSourceType inputType Input type of pointer Vector3 endPoint Output point position Returns Type Description Boolean True if pointer found, false otherwise. If not found, endPoint is set to zero Type Parameters Name Description T Type of pointer to query TryGetPointerEndpoint<T>(Handedness, out Vector3) Tries to get the end point of a pointer of a pointer type and handedness. If no pointer of given handedness is found, returns false and sets result to zero. Declaration public static bool TryGetPointerEndpoint<T>(Handedness handedness, out Vector3 endPoint) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Handedness of pointer Vector3 endPoint The output point position Returns Type Description Boolean True if pointer found, false otherwise. If not found, endPoint is set to zero Type Parameters Name Description T Type of pointer to query"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PokePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PokePointer.html",
    "title": "Class PokePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class PokePointer A near interaction pointer that generates touch events based on touchables in close proximity. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer PokePointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityNearPointer IMixedRealityPointer IEqualityComparer Inherited Members BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.Start() BaseControllerPointer.OnDisable() BaseControllerPointer.Controller BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.Position BaseControllerPointer.Rotation BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class PokePointer : BaseControllerPointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityNearPointer, IMixedRealityPointer, IEqualityComparer Remarks Reachable Objects are objects with a both a BaseNearInteractionTouchable and a collider within TouchableDistance from the poke pointer (based on OverlapSphere ). If a poke pointer has no CurrentTouchableObjectDown , then it will try to select one from the Reachable Objects based on: Layer mask priority: Lower-priority layer masks will only be considered if higher-priority layers don't contain any Reachable Objects. Touchable Distance: the closest object in the highest priority layers is selected based on DistanceToTouchable . Ray Distance: The object becomes the CurrentTouchableObjectDown once the ray cast distance becomes negative (behind the surface). At this point the OnTouchStarted or OnPointerDown event is raised. If a poke pointer does have a CurrentTouchableObjectDown it will not consider any other object, until the DistanceToTouchable exceeds the DebounceThreshold (in front of the surface). At this point the active object is cleared and the OnTouchCompleted or OnPointerUp event is raised. Fields line Declaration protected LineRenderer line Field Value Type Description LineRenderer touchableDistance Declaration protected float touchableDistance Field Value Type Description Single triggerInteraction Declaration protected QueryTriggerInteraction triggerInteraction Field Value Type Description QueryTriggerInteraction visuals Declaration protected GameObject visuals Field Value Type Description GameObject Properties ClosestProximityTouchable The closest touchable component that has been detected. Declaration public BaseNearInteractionTouchable ClosestProximityTouchable { get; } Property Value Type Description BaseNearInteractionTouchable Remarks The closest touchable component limits the set of objects which are currently touchable. These are all the game objects in the subtree of the closest touchable component's owner object. CurrentTouchableObjectDown The current object that is being touched. Declaration public GameObject CurrentTouchableObjectDown { get; } Property Value Type Description GameObject IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration public override bool IsInteractionEnabled { get; } Property Value Type Description Boolean Overrides BaseControllerPointer.IsInteractionEnabled IsNearObject Returns true if the hand is near anything that's grabbable Currently performs a sphere cast in the direction of the hand ray. Currently anything that has a collider is considered \"Grabbable\" Eventually we need to filter based on things that can respond to grab events. Declaration public bool IsNearObject { get; } Property Value Type Description Boolean PokeLayerMasks The LayerMasks, in prioritized order, that are used to determine the touchable objects. Declaration public LayerMask[] PokeLayerMasks { get; } Property Value Type Description LayerMask [] Remarks Only BaseNearInteractionTouchables in one of the LayerMasks will raise touch events. PreviousPosition Declaration public Vector3 PreviousPosition { get; } Property Value Type Description Vector3 SceneQueryBufferSize Maximum number of colliders that can be detected in a scene query. Declaration public int SceneQueryBufferSize { get; } Property Value Type Description Int32 TouchableDistance Maximum distance a which a touchable surface can be interacted with. Declaration public float TouchableDistance { get; } Property Value Type Description Single TriggerInteraction Specify whether queries for touchable surfaces hit triggers. Declaration public QueryTriggerInteraction TriggerInteraction { get; } Property Value Type Description QueryTriggerInteraction Methods OnEnable() Declaration protected override void OnEnable() Overrides BaseControllerPointer.OnEnable() OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration public override void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides BaseControllerPointer.OnInputDown(InputEventData) OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration public override void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides BaseControllerPointer.OnInputUp(InputEventData) OnPostSceneQuery() Called after performing the scene query. Declaration public override void OnPostSceneQuery() Overrides BaseControllerPointer.OnPostSceneQuery() OnPreCurrentPointerTargetChange() Called during the scene query just before the current pointer target changes. Declaration public override void OnPreCurrentPointerTargetChange() Overrides BaseControllerPointer.OnPreCurrentPointerTargetChange() OnPreSceneQuery() Declaration public override void OnPreSceneQuery() Overrides BaseControllerPointer.OnPreSceneQuery() OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public override void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public override void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides BaseControllerPointer.OnSourceLost(SourceStateEventData) OnValidate() Declaration protected void OnValidate() Explicit Interface Implementations IMixedRealityNearPointer.TryGetDistanceToNearestSurface(out Single) Near pointers often interact with surfaces. This method provides a mechanism to get the distance to the closest surface the near pointer is interacting with. Declaration bool IMixedRealityNearPointer.TryGetDistanceToNearestSurface(out float distance) Parameters Type Name Description Single distance Out parameter filled with the distance along the surface normal from the surface to the pointer if available, otherwise 0.0f. Returns Type Description Boolean True if a distance was retrieved, false if not. IMixedRealityNearPointer.TryGetNearGraspPoint(out Vector3) For near pointer we may want to draw a tether between the pointer and the object. The visual grasp point (average of index and thumb) may actually be different from the pointer position (the palm). This method provides a mechanism to get the visual grasp point. NOTE: Not all near pointers have a grasp point (for example a poke pointer). Declaration bool IMixedRealityNearPointer.TryGetNearGraspPoint(out Vector3 position) Parameters Type Name Description Vector3 position Returns Type Description Boolean True if a grasp point was retrieved, false if not. IMixedRealityNearPointer.TryGetNormalToNearestSurface(out Vector3) Near pointers often interact with surfaces. This method provides a mechanism to get the normal of the closest surface the near pointer is interacting with. Declaration bool IMixedRealityNearPointer.TryGetNormalToNearestSurface(out Vector3 normal) Parameters Type Name Description Vector3 normal Out parameter filled with the surface normal if available, otherwise Vector3.zero . Returns Type Description Boolean True if a normal was retrieved, false if not. Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityNearPointer IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PrimaryPointerChangedHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PrimaryPointerChangedHandler.html",
    "title": "Delegate PrimaryPointerChangedHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate PrimaryPointerChangedHandler Delegate type used to handle primary pointer changes. Old and new pointer values can be null to indicate transition from or to no primary pointer, but they won't both be null simultaneously. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public delegate void PrimaryPointerChangedHandler(IMixedRealityPointer oldPointer, IMixedRealityPointer newPointer); Parameters Type Name Description IMixedRealityPointer oldPointer IMixedRealityPointer newPointer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ScreenSpaceMousePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ScreenSpaceMousePointer.html",
    "title": "Class ScreenSpaceMousePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScreenSpaceMousePointer Uses the desktop mouse cursor instead of any mouse representation within the scene. It's movement is bound to screenspace. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer BaseMousePointer ScreenSpaceMousePointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityMousePointer IMixedRealityPointer IEqualityComparer Inherited Members BaseMousePointer.timeoutTimer BaseMousePointer.isDisabled BaseMousePointer.HideCursorWhenInactive BaseMousePointer.MovementThresholdToUnHide BaseMousePointer.HideTimeout BaseMousePointer.IsInteractionEnabled BaseMousePointer.Controller BaseMousePointer.Position BaseMousePointer.OnSourceDetected(SourceStateEventData) BaseMousePointer.OnSourceLost(SourceStateEventData) BaseMousePointer.OnInputDown(InputEventData) BaseMousePointer.OnInputUp(InputEventData) BaseMousePointer.Start() BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.OnEnable() BaseControllerPointer.OnDisable() BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.Rotation BaseControllerPointer.OnPostSceneQuery() BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class ScreenSpaceMousePointer : BaseMousePointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityMousePointer, IMixedRealityPointer, IEqualityComparer Properties ControllerName Declaration protected override string ControllerName { get; } Property Value Type Description String Overrides BaseMousePointer.ControllerName Methods OnPreSceneQuery() Called before performing the scene query. Declaration public override void OnPreSceneQuery() Overrides BaseControllerPointer.OnPreSceneQuery() SetVisibility(Boolean) Declaration protected override void SetVisibility(bool visible) Parameters Type Name Description Boolean visible Overrides BaseMousePointer.SetVisibility(Boolean) Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityMousePointer IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ShellHandRayPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ShellHandRayPointer.html",
    "title": "Class ShellHandRayPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ShellHandRayPointer Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer LinePointer ShellHandRayPointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityPointer IEqualityComparer Inherited Members LinePointer.LineCastResolution LinePointer.LineColorSelected LinePointer.LineColorValid LinePointer.LineColorInvalid LinePointer.LineColorNoTarget LinePointer.LineColorLockFocus LinePointer.LineBase LinePointer.LineRenderers LinePointer.OnDisable() LinePointer.OnPreSceneQuery() LinePointer.IsInteractionEnabled BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.Start() BaseControllerPointer.Controller BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.Position BaseControllerPointer.Rotation BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() BaseControllerPointer.OnSourceLost(SourceStateEventData) BaseControllerPointer.OnInputUp(InputEventData) BaseControllerPointer.OnInputDown(InputEventData) ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class ShellHandRayPointer : LinePointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityPointer, IEqualityComparer Methods OnEnable() Declaration protected override void OnEnable() Overrides LinePointer.OnEnable() OnPostSceneQuery() Called after performing the scene query. Declaration public override void OnPostSceneQuery() Overrides LinePointer.OnPostSceneQuery() SetLinePoints(Vector3, Vector3, Single) Declaration protected override void SetLinePoints(Vector3 startPoint, Vector3 endPoint, float distance) Parameters Type Name Description Vector3 startPoint Vector3 endPoint Single distance Overrides LinePointer.SetLinePoints(Vector3, Vector3, Single) Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedArticulatedHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedArticulatedHand.html",
    "title": "Class SimulatedArticulatedHand | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimulatedArticulatedHand Inheritance Object BaseController BaseHand SimulatedHand SimulatedArticulatedHand Implements IMixedRealityHand IMixedRealityController Inherited Members SimulatedHand.jointCount SimulatedHand.jointPoses SimulatedHand.TryGetJoint(TrackedHandJoint, MixedRealityPose) SimulatedHand.UpdateState(SimulatedHandData) BaseHand.HandRay BaseHand.IsInPointingPose BaseHand.DefaultLeftHandedInteractions BaseHand.DefaultRightHandedInteractions BaseHand.SetupDefaultInteractions(Handedness) BaseHand.UpdateVelocity() BaseHand.GetPalmNormal() BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SimulatedArticulatedHand : SimulatedHand, IMixedRealityHand, IMixedRealityController Constructors SimulatedArticulatedHand(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public SimulatedArticulatedHand(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The Windows Mixed Reality Controller default interactions. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Remarks A single interaction mapping works for both left and right controllers. SimulationMode Declaration public override HandSimulationMode SimulationMode { get; } Property Value Type Description HandSimulationMode Overrides SimulatedHand.SimulationMode Methods UpdateInteractions(SimulatedHandData) Declaration protected override void UpdateInteractions(SimulatedHandData handData) Parameters Type Name Description SimulatedHandData handData Overrides SimulatedHand.UpdateInteractions(SimulatedHandData) Implements IMixedRealityHand IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedGestureHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedGestureHand.html",
    "title": "Class SimulatedGestureHand | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimulatedGestureHand Inheritance Object BaseController BaseHand SimulatedHand SimulatedGestureHand Implements IMixedRealityHand IMixedRealityController Inherited Members SimulatedHand.jointCount SimulatedHand.jointPoses SimulatedHand.TryGetJoint(TrackedHandJoint, MixedRealityPose) SimulatedHand.UpdateState(SimulatedHandData) BaseHand.HandRay BaseHand.IsInPointingPose BaseHand.DefaultLeftHandedInteractions BaseHand.DefaultRightHandedInteractions BaseHand.SetupDefaultInteractions(Handedness) BaseHand.UpdateVelocity() BaseHand.GetPalmNormal() BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class SimulatedGestureHand : SimulatedHand, IMixedRealityHand, IMixedRealityController Constructors SimulatedGestureHand(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public SimulatedGestureHand(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The GGV default interactions. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Remarks A single interaction mapping works for both left and right controllers. SimulationMode Declaration public override HandSimulationMode SimulationMode { get; } Property Value Type Description HandSimulationMode Overrides SimulatedHand.SimulationMode Methods UpdateInteractions(SimulatedHandData) Declaration protected override void UpdateInteractions(SimulatedHandData handData) Parameters Type Name Description SimulatedHandData handData Overrides SimulatedHand.UpdateInteractions(SimulatedHandData) Implements IMixedRealityHand IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities.SpatialMeshExporter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities.SpatialMeshExporter.html",
    "title": "Class SpatialMeshExporter | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialMeshExporter Utility to export current Spatial Mesh Data to OBJ file Inheritance Object SpatialMeshExporter Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities Assembly : cs.temp.dll.dll Syntax public static class SpatialMeshExporter Methods Save(IMixedRealitySpatialAwarenessMeshObserver, String, Boolean) Save spatial mesh data for given observer to folder path provided Declaration public static Task Save(IMixedRealitySpatialAwarenessMeshObserver meshObserver, string folderPath, bool consolidate = true) Parameters Type Name Description IMixedRealitySpatialAwarenessMeshObserver meshObserver Observer to target for requests of spatial mesh data String folderPath Folder path to pull all OBJ files Boolean consolidate if true, merge all mesh data from observer into one OBJ file. If false, create OBJ file per mesh object Returns Type Description Task Remarks Accessing GameObject/Mesh data will occur as Coroutine on Unity Main thread. May impact performance. If folder path does not exist, throws exception Save(String, Boolean) Save spatial mesh data for all observers under the current Spatial Awareness system Declaration public static Task Save(string folderPath, bool consolidate = true) Parameters Type Name Description String folderPath Absolute folder path to place OBJ files Boolean consolidate If true, attempts to consolidate all meshes per Observer into one OBJ file. If false, creates an OBJ file per mesh object on each observer Returns Type Description Task Remarks Accessing GameObject/Mesh data will occur as Coroutine on Unity Main thread. May impact performance. If folder path does not exist, throws exception"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipSpawner.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipSpawner.html",
    "title": "Class ToolTipSpawner | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipSpawner Add to any Object to spawn ToolTips on tap or on focus, according to preference Applies its follow settings to the spawned ToolTip's ToolTipConnector component Inheritance Object ToolTipSpawner Implements IMixedRealityInputHandler IMixedRealityInputHandler < Single > Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTipSpawner : BaseFocusHandler, IMixedRealityInputHandler, IMixedRealityInputHandler<float> Methods OnFocusEnter(FocusEventData) Declaration public override void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) Declaration public override void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Implements IMixedRealityInputHandler IMixedRealityInputHandler<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor.ProjectPreferencesTest.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor.ProjectPreferencesTest.html",
    "title": "Class ProjectPreferencesTest | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProjectPreferencesTest Test structure to test ProjectPreferences Inheritance Object ProjectPreferencesTest Namespace : Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class ProjectPreferencesTest : MonoBehaviour Methods TestDefaultValues() Validate that the default value provided with Get is returned for new prefernce entries Declaration public void TestDefaultValues() TestNewPreferences() Test basic ProjectPreferences uses of setting a key and then retrieving that item for various data types Declaration public void TestNewPreferences()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.Core.Utilities.Editor Classes ProjectPreferencesTest Test structure to test ProjectPreferences"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Core.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Core.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.Core | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.Core Classes MixedRealityToolkitFilesTests MixedRealityToolkitTests"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.CoreServicesTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.CoreServicesTests.html",
    "title": "Class CoreServicesTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class CoreServicesTests Inheritance Object CoreServicesTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class CoreServicesTests Methods TestDynamicServices() Test if we can register and deregister a core MRTK service Declaration public IEnumerator TestDynamicServices() Returns Type Description IEnumerator enumerator for Unity"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Extensions.CameraExtensionTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Extensions.CameraExtensionTests.html",
    "title": "Class CameraExtensionTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraExtensionTests Inheritance Object CameraExtensionTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.Extensions Assembly : cs.temp.dll.dll Syntax public class CameraExtensionTests Methods SetUp() Declaration public void SetUp() TearDown() Declaration public void TearDown() TestIsInFOV() Test that the Camera extension method IsInFov returns valid points that would be renderable on the camera Declaration public void TestIsInFOV()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Extensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Extensions.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.Extensions | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.Extensions Classes CameraExtensionTests"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.FocusedObjectEventCatcher-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.FocusedObjectEventCatcher-1.html",
    "title": "Class FocusedObjectEventCatcher<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusedObjectEventCatcher<T> Base class for counting events raised on the focused object. Inheritance Object FocusedObjectEventCatcher<T> TouchEventCatcher Implements IDisposable Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public abstract class FocusedObjectEventCatcher<T> : MonoBehaviour, IDisposable where T : MonoBehaviour Type Parameters Name Description T Properties EventsCompleted Declaration public int EventsCompleted { get; protected set; } Property Value Type Description Int32 EventsStarted Declaration public int EventsStarted { get; protected set; } Property Value Type Description Int32 Methods Create(GameObject) Declaration public static T Create(GameObject gameObject) Parameters Type Name Description GameObject gameObject Returns Type Description T Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.FocusProviderRaycastTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.FocusProviderRaycastTests.html",
    "title": "Class FocusProviderRaycastTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusProviderRaycastTests This class is used to test that FocusProvider raycasts are selecting the correct focus object. Inheritance Object FocusProviderRaycastTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class FocusProviderRaycastTests Methods SetupFocusProviderRaycastTests() Declaration public void SetupFocusProviderRaycastTests() ShutdownFocusProviderRaycastTests() Declaration public void ShutdownFocusProviderRaycastTests() TestRaycastProxies() For each FocusRaycastTestProxy in the raycast test prefab, set the relevant values on the TestPointer , then wait for the Update() and Assert that the ExpectedHitObject matches the TestPointer 's CurrentPointerTarget . Declaration public IEnumerator TestRaycastProxies() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.FocusProviderTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.FocusProviderTests.html",
    "title": "Class FocusProviderTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusProviderTests Inheritance Object FocusProviderTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class FocusProviderTests Methods Setup() Declaration public void Setup() TearDown() Declaration public void TearDown() TestDestroyFocusLockedObject() Ensure that focused object is set to null, and that focus lock is reset when we destroy the currently focus-locked (aka grabbed) object Declaration public IEnumerator TestDestroyFocusLockedObject() Returns Type Description IEnumerator TestDestroyFocusObject() Ensure that focused object is set to null when we destroy the currently focused object Declaration public IEnumerator TestDestroyFocusObject() Returns Type Description IEnumerator TestDisableFocusLockedObject() Ensure that focused object is set to null, and that focus lock is reset when we disable the currently focus-locked (aka grabbed) object Declaration public IEnumerator TestDisableFocusLockedObject() Returns Type Description IEnumerator TestDisableFocusObject() Ensure that focused object is set to null when we disable the currently focused object Declaration public IEnumerator TestDisableFocusObject() Returns Type Description IEnumerator TestGazeCursorArticulated() Declaration public IEnumerator TestGazeCursorArticulated() Returns Type Description IEnumerator TestGazeProviderTargetNotNull() Ensure that the gaze provider hit result is not null when looking at an object, even when the hand is up Declaration public IEnumerator TestGazeProviderTargetNotNull() Returns Type Description IEnumerator TestOverrideFocusDetails() Ensure FocusProvider's FocusDetails can be overridden. Declaration public IEnumerator TestOverrideFocusDetails() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.FocusRaycastTestProxy.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.FocusRaycastTestProxy.html",
    "title": "Class FocusRaycastTestProxy | Mixed Reality Toolkit Documentation",
    "keywords": "Class FocusRaycastTestProxy Used by FocusProviderRaycastTests to represent a single raycast test. This is used to set any necessary values on the TestPointer for performing the test, including positioning (through RayLineData ), as well as the GameObject that the test author expects to be selected as the pointer's new focus target after the values are set on the TestPointer , and it is updated by the FocusProvider . Inheritance Object FocusRaycastTestProxy Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class FocusRaycastTestProxy : MonoBehaviour Fields ExpectedHitObject The object that is expected to be set for the TestPointer 's CurrentPointerTarget after Update() . If the target object doesn't match, it will fail the test. Declaration public GameObject ExpectedHitObject Field Value Type Description GameObject LineCastResolution The number of RaySteps to generate from RayLineData . Corresponds to LineCastResolution and is used to set that value on the TestPointer . Declaration public int LineCastResolution Field Value Type Description Int32 PrioritizedLayerMasks The physics layers used for the FocusProvider raycasts and prioritization. Corresponds to PrioritizedLayerMasksOverride and is used to set that value on the TestPointer . Declaration public LayerMask[] PrioritizedLayerMasks Field Value Type Description LayerMask [] RayLineData Represents the ray line along which the FocusProvider will raycast. Corresponds to LineBase and is used to set that value on the TestPointer . Declaration public BaseMixedRealityLineDataProvider RayLineData Field Value Type Description BaseMixedRealityLineDataProvider"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.GlobalEventCatcher-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.GlobalEventCatcher-1.html",
    "title": "Class GlobalEventCatcher<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class GlobalEventCatcher<T> Base class for counting global events. Inheritance Object GlobalEventCatcher<T> Implements IDisposable Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public abstract class GlobalEventCatcher<T> : InputSystemGlobalHandlerListener, IDisposable where T : MonoBehaviour Type Parameters Name Description T Properties EventsCompleted Declaration public int EventsCompleted { get; protected set; } Property Value Type Description Int32 EventsStarted Declaration public int EventsStarted { get; protected set; } Property Value Type Description Int32 Methods Create() Declaration public static T Create() Returns Type Description T Dispose() Declaration public void Dispose() Implements IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputRayUtilsTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputRayUtilsTests.html",
    "title": "Class InputRayUtilsTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputRayUtilsTests Inheritance Object InputRayUtilsTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class InputRayUtilsTests Methods HandRayTest() Declaration public IEnumerator HandRayTest() Returns Type Description IEnumerator HeadGazeRayTest() Declaration public IEnumerator HeadGazeRayTest() Returns Type Description IEnumerator SetUp() Declaration public void SetUp() TearDown() Declaration public void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.ControllerMappingTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.ControllerMappingTests.html",
    "title": "Class ControllerMappingTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerMappingTests Inheritance Object ControllerMappingTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.InputSystem Assembly : cs.temp.dll.dll Syntax public class ControllerMappingTests Methods GenericOpenVRControllerUpdateTest() Declaration public void GenericOpenVRControllerUpdateTest() MouseControllerUpdateTest() Declaration public void MouseControllerUpdateTest() OculusRemoteControllerUpdateTest() Declaration public void OculusRemoteControllerUpdateTest() OculusTouchControllerUpdateTest() Declaration public void OculusTouchControllerUpdateTest() SetUp() Declaration public void SetUp() TearDown() Declaration public void TearDown() ViveKnucklesControllerUpdateTest() Declaration public void ViveKnucklesControllerUpdateTest() ViveWandControllerUpdateTest() Declaration public void ViveWandControllerUpdateTest() WindowsMixedRealityOpenVRMotionControllerUpdateTest() Declaration public void WindowsMixedRealityOpenVRMotionControllerUpdateTest() XboxControllerUpdateTest() Declaration public void XboxControllerUpdateTest()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.DefaultPrimaryPointerSelectorTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.DefaultPrimaryPointerSelectorTests.html",
    "title": "Class DefaultPrimaryPointerSelectorTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class DefaultPrimaryPointerSelectorTests Inheritance Object DefaultPrimaryPointerSelectorTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.InputSystem Assembly : cs.temp.dll.dll Syntax public class DefaultPrimaryPointerSelectorTests Methods TearDown() Declaration public void TearDown() Test() Declaration public void Test()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.InputSystemTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.InputSystemTests.html",
    "title": "Class InputSystemTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSystemTests Inheritance Object InputSystemTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.InputSystem Assembly : cs.temp.dll.dll Syntax public class InputSystemTests Methods CreateInputSystem() Declaration public void CreateInputSystem() TearDown() Declaration public void TearDown() TestDataProviderRegistration() Declaration public void TestDataProviderRegistration() TestEmptyDataProvider() Declaration public void TestEmptyDataProvider() TestGetInputSystem() Declaration public void TestGetInputSystem() TestInputSystemDoesNotExist() Declaration public void TestInputSystemDoesNotExist() TestInputSystemExists() Declaration public void TestInputSystemExists()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.InteractionDefinitionTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.InteractionDefinitionTests.html",
    "title": "Class InteractionDefinitionTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractionDefinitionTests Inheritance Object InteractionDefinitionTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.InputSystem Assembly : cs.temp.dll.dll Syntax public class InteractionDefinitionTests Methods InteractionArrayBool() Declaration public void InteractionArrayBool() InteractionArrayFloat() Declaration public void InteractionArrayFloat() InteractionArrayMixedRealityPose() Declaration public void InteractionArrayMixedRealityPose() InteractionArrayObject() Declaration public void InteractionArrayObject() InteractionArrayQuaternion() Declaration public void InteractionArrayQuaternion() InteractionArrayVector2() Declaration public void InteractionArrayVector2() InteractionArrayVector3() Declaration public void InteractionArrayVector3() TesMixedRealityPoseNoChange() Declaration public void TesMixedRealityPoseNoChange() TestBoolChanged() Declaration public void TestBoolChanged() TestBoolNoChange() Declaration public void TestBoolNoChange() TestFloatChanged() Declaration public void TestFloatChanged() TestFloatNoChange() Declaration public void TestFloatNoChange() TestMixedRealityPoseChanged() Declaration public void TestMixedRealityPoseChanged() TestObjectChanged() Declaration public void TestObjectChanged() TestObjectNoChange() Declaration public void TestObjectNoChange() TestQuaternionChanged() Declaration public void TestQuaternionChanged() TestQuaternionNoChange() Declaration public void TestQuaternionNoChange() TestVector2() Declaration public void TestVector2() TestVector3Changed() Declaration public void TestVector3Changed() TestVector3NoChange() Declaration public void TestVector3NoChange()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InputRecordingControls.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InputRecordingControls.html",
    "title": "Class InputRecordingControls | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputRecordingControls Utility class to make input recording service accessible through game objects. Hook up buttons to the public functions to start and stop recording input. Inheritance Object InputRecordingControls Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InputRecordingControls : MonoBehaviour Fields OnRecordingStarted Event raised when input recording is started. Declaration public UnityEvent OnRecordingStarted Field Value Type Description UnityEvent OnRecordingStopped Event raised when input recording is stopped. Declaration public UnityEvent OnRecordingStopped Field Value Type Description UnityEvent Methods SaveRecordedInput() Export recorded input. Declaration public void SaveRecordedInput() Remarks This will only save recorded input after recording has been stopped. ToggleRecording() Toggle input recording. Declaration public void ToggleRecording()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.Interactable.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.Interactable.html",
    "title": "Class Interactable | Mixed Reality Toolkit Documentation",
    "keywords": "Class Interactable Uses input and action data to declare a set of states Maintains a collection of themes that react to state changes and provide sensory feedback Passes state information and input data on to receivers that detect patterns and does stuff. Inheritance Object Interactable Implements IMixedRealityFocusChangedHandler IMixedRealityFocusHandler IMixedRealityInputHandler IMixedRealitySpeechHandler IMixedRealityTouchHandler IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < MixedRealityPose > Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class Interactable : MonoBehaviour, IMixedRealityFocusChangedHandler, IMixedRealityFocusHandler, IMixedRealityInputHandler, IMixedRealitySpeechHandler, IMixedRealityTouchHandler, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<MixedRealityPose> Fields CanDeselect Can the user deselect a toggle? A radial button or tab should set this to false Declaration public bool CanDeselect Field Value Type Description Boolean CanSelect Is the interactive selectable? When a multi-dimension button, can the user initiate switching dimensions? Declaration public bool CanSelect Field Value Type Description Boolean clickTime A click must occur within this many seconds after an input down Declaration protected float clickTime Field Value Type Description Single clickValidTimer Declaration protected Coroutine clickValidTimer Field Value Type Description Coroutine dimensionIndex Declaration protected int dimensionIndex Field Value Type Description Int32 Dimensions A way of adding more layers of states for controls like toggles. This is capitalized and doesn't match conventions for backwards compatibility (to not break people using Interactable). We tried using FormerlySerializedAs(\"Dimensions) and renaming to \"dimensions\", however Unity did not properly pick up the former serialization, so we maintained the old value. See https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6169 Declaration protected int Dimensions Field Value Type Description Int32 dragStartPosition The position of the controller when input down occurs. Used to determine when controller has moved far enough to trigger gesture Declaration protected Vector3? dragStartPosition Field Value Type Description Nullable < Vector3 > focusingPointers Declaration protected readonly List<IMixedRealityPointer> focusingPointers Field Value Type Description List < IMixedRealityPointer > forceUpdate Declaration protected bool forceUpdate Field Value Type Description Boolean globalFeedbackClickTime Amount of time to \"simulate\" press states for interactions that do not utilize input up/down such as voice command This allows for visual feedbacks and other typical UX responsiveness and behavior to occur Declaration protected const float globalFeedbackClickTime = 0.3F Field Value Type Description Single globalTimer Declaration protected Coroutine globalTimer Field Value Type Description Coroutine handlers Declaration protected List<IInteractableHandler> handlers Field Value Type Description List < IInteractableHandler > isGlobal Declaration protected bool isGlobal Field Value Type Description Boolean lastState Declaration protected State lastState Field Value Type Description State OnClick Base onclick event Declaration public UnityEvent OnClick Field Value Type Description UnityEvent pressingInputSources Declaration protected readonly HashSet<IMixedRealityInputSource> pressingInputSources Field Value Type Description HashSet < IMixedRealityInputSource > rollOffTime Declaration protected float rollOffTime Field Value Type Description Single rollOffTimer Declaration protected float rollOffTimer Field Value Type Description Single VoiceCommand This string keyword is the voice command that will fire a click on this Interactable. Declaration public string VoiceCommand Field Value Type Description String voiceRequiresFocus Declaration public bool voiceRequiresFocus Field Value Type Description Boolean Properties ActiveThemes The list of running theme instances to receive state changes When the dimension index changes, activeThemes updates to those assigned to that dimension. Declaration public IReadOnlyList<InteractableThemeBase> ActiveThemes { get; } Property Value Type Description IReadOnlyList < InteractableThemeBase > ButtonMode Returns the current selection mode of the Interactable based on the number of Dimensions available Declaration public SelectionModes ButtonMode { get; } Property Value Type Description SelectionModes Remarks Returns the following under the associated conditions: SelectionModes.Invalid => Dimensions less than or equal to 0 SelectionModes.Button => Dimensions == 1 SelectionModes.Toggle => Dimensions == 2 SelectionModes.MultiDimension => Dimensions > 2 ClickCount How many times this interactable was clicked Declaration public int ClickCount { get; } Property Value Type Description Int32 Remarks Useful for checking when a click event occurs. CurrentDimension Current Dimension index based zero and must be less than Dimensions Declaration public int CurrentDimension { get; set; } Property Value Type Description Int32 Enabled Is the interactable enabled? Declaration [Obsolete(\"Use IsEnabled instead\")] public bool Enabled { get; set; } Property Value Type Description Boolean FocusEnabled Does this interactable require focus Declaration [Obsolete(\"Use IsGlobal instead\")] public bool FocusEnabled { get; set; } Property Value Type Description Boolean FocusingPointers Pointers that are focusing the interactable Declaration public List<IMixedRealityPointer> FocusingPointers { get; } Property Value Type Description List < IMixedRealityPointer > HasCollision State that corresponds to Interactable is touching another object Currently not controlled by Interactable directly Declaration public virtual bool HasCollision { get; set; } Property Value Type Description Boolean HasCustom State that corresponds to miscellaneous/custom use by consumers Currently not controlled by Interactable directly Declaration public virtual bool HasCustom { get; set; } Property Value Type Description Boolean HasFocus Has focus Declaration public virtual bool HasFocus { get; set; } Property Value Type Description Boolean HasGesture Currently pressed and some movement has occurred Declaration public virtual bool HasGesture { get; set; } Property Value Type Description Boolean HasGestureMax State that corresponds to Gesture reaching max threshold or limits Currently not controlled by Interactable directly Declaration public virtual bool HasGestureMax { get; set; } Property Value Type Description Boolean HasGrab A near interaction grabbable is actively being grabbed Declaration public virtual bool HasGrab { get; set; } Property Value Type Description Boolean HasObservation State that corresponds to no focus,and finger is down. Currently not controlled by Interactable directly Declaration public virtual bool HasObservation { get; set; } Property Value Type Description Boolean HasObservationTargeted State that corresponds to has focus,and finger down. Currently not controlled by Interactable directly Declaration public virtual bool HasObservationTargeted { get; set; } Property Value Type Description Boolean HasPhysicalTouch A near interaction touchable is actively being touched Declaration public virtual bool HasPhysicalTouch { get; set; } Property Value Type Description Boolean HasPress Currently being pressed Declaration public virtual bool HasPress { get; set; } Property Value Type Description Boolean HasVoiceCommand A voice command has just occurred Declaration public virtual bool HasVoiceCommand { get; set; } Property Value Type Description Boolean InputAction The Interactable will only respond to input down events fired with the corresponding assigned Input Action. Available input actions are populated via the Input Actions Profile under the MRTK Input System Profile assigned in the current scene Declaration public MixedRealityInputAction InputAction { get; set; } Property Value Type Description MixedRealityInputAction InteractableEvents List of events added to this interactable Declaration public List<InteractableEvent> InteractableEvents { get; set; } Property Value Type Description List < InteractableEvent > IsDisabled Is disabled Declaration [Obsolete(\"Use IsEnabled instead\")] public bool IsDisabled { get; set; } Property Value Type Description Boolean IsEnabled Defines whether the Interactable is enabled or not internally This is different than the Enabled property at the GameObject/Component level When false, Interactable will continue to run in Unity but not respond to Input. Declaration public virtual bool IsEnabled { get; set; } Property Value Type Description Boolean Remarks Property is useful for disabling UX, such as greying out a button, until a user completes some pre-mandatory step such as fill out their name, etc IsGlobal If true, this Interactable will listen globally for any IMixedRealityInputHandler input events. These include general input up/down and clicks. If false, this Interactable will only respond to general input click events if the pointer target is this GameObject's, or one of it's children's, collider. Declaration public bool IsGlobal { get; set; } Property Value Type Description Boolean IsInteractive State that corresponds to no focus,and finger is up. Currently not controlled by Interactable directly Declaration public virtual bool IsInteractive { get; set; } Property Value Type Description Boolean IsTargeted Targeted means the item has focus and finger is up Currently not controlled by Interactable directly Declaration public virtual bool IsTargeted { get; set; } Property Value Type Description Boolean IsToggleButton True if Selection is \"Toggle\" (Dimensions == 2) Declaration [Obsolete(\"Use ButtonMode to test if equal to SelectionModes.Toggle instead\")] public bool IsToggleButton { get; } Property Value Type Description Boolean IsToggled Determines whether Interactable is toggled or not. If true, CurrentDimension should be 1 and if false, CurrentDimension should be 0 Declaration public virtual bool IsToggled { get; set; } Property Value Type Description Boolean Remarks Only valid when ButtonMode == SelectionMode.Toggle (i.e Dimensions == 2) IsVisited The Interactable has been clicked Declaration public virtual bool IsVisited { get; set; } Property Value Type Description Boolean NumOfDimensions A way of adding more layers of states for controls like toggles Declaration public int NumOfDimensions { get; set; } Property Value Type Description Int32 PressingInputSources Input sources that are pressing the interactable Declaration public HashSet<IMixedRealityInputSource> PressingInputSources { get; } Property Value Type Description HashSet < IMixedRealityInputSource > Profiles List of profile configurations that match Visual Themes with GameObjects targets Setting at runtime will re-create the runtime Theme Engines (i.e ActiveThemes property) being used by this class Declaration public List<InteractableProfileItem> Profiles { get; set; } Property Value Type Description List < InteractableProfileItem > RequiresFocus Do voice commands require focus? Declaration [Obsolete(\"Use VoiceRequiresFocus instead\")] public bool RequiresFocus { get; set; } Property Value Type Description Boolean StateManager The state logic for comparing state Declaration public InteractableStates StateManager { get; protected set; } Property Value Type Description InteractableStates States ScriptableObject to reference for basic state logic to follow when interacting and transitioning between states. Should generally be \"DefaultInteractableStates\" object Declaration public States States { get; set; } Property Value Type Description States VoiceRequiresFocus Does the voice command require this to have focus? Registers as a global listener for speech commands, ignores input events Declaration public bool VoiceRequiresFocus { get; set; } Property Value Type Description Boolean Methods AddHandler(IInteractableHandler) Register OnClick extra handlers Declaration public void AddHandler(IInteractableHandler handler) Parameters Type Name Description IInteractableHandler handler AddReceiver<T>() Event receivers can be used to listen for different events at runtime. This method allows receivers to be dynamically added at runtime. Declaration public T AddReceiver<T>() where T : ReceiverBase, new() Returns Type Description T The new event receiver Type Parameters Name Description T Awake() Declaration protected virtual void Awake() CanInteract() Based on button settings and state, should this button listen to input? Declaration protected virtual bool CanInteract() Returns Type Description Boolean ConvertToSelectionMode(Int32) Helper method to convert number of dimensions to the appropriate SelectionModes Declaration public static SelectionModes ConvertToSelectionMode(int dimensions) Parameters Type Name Description Int32 dimensions number of dimensions Returns Type Description SelectionModes SelectionModes for corresponding number of dimensions DecreaseDimension() Decreases the Current Dimension by 1. If at zero, then loop around to end (i.e Dimensions - 1) Declaration public void DecreaseDimension() ForceUpdateThemes() Force re-initialization of Interactable from events, themes and state references Declaration [Obsolete(\"Use RefreshSetup() instead\")] public void ForceUpdateThemes() GetDefaultInteractableStates() Creates the default States ScriptableObject configured for Interactable Declaration public static States GetDefaultInteractableStates() Returns Type Description States Default Interactable States asset GetDefaultThemeAsset(List<ThemeDefinition>) Helper function to create a new Theme asset using Default Interactable States and provided theme definitions Declaration public static Theme GetDefaultThemeAsset(List<ThemeDefinition> themeDefintions) Parameters Type Name Description List < ThemeDefinition > themeDefintions List of Theme Definitions to associate with Theme asset Returns Type Description Theme Theme ScriptableObject instance GetDimensionIndex() A public way to access the current dimension Declaration [Obsolete(\"Use CurrentDimension property instead\")] public int GetDimensionIndex() Returns Type Description Int32 GetReceiver<T>() Returns the first receiver of type T on the interactable, or null if nothing is found. Declaration public T GetReceiver<T>() where T : ReceiverBase Returns Type Description T Type Parameters Name Description T GetReceivers<T>() Returns all receivers of type T on the interactable. If nothing is found, returns empty list. Declaration public List<T> GetReceivers<T>() where T : ReceiverBase Returns Type Description List <T> Type Parameters Name Description T GetStates() Returns a list of states assigned to the Interactable Declaration [Obsolete(\"Use States.StateList instead\")] public State[] GetStates() Returns Type Description State [] GetStateValue(InteractableStates.InteractableStateEnum) Grabs the state value index, returns -1 if no StateManager available Declaration public int GetStateValue(InteractableStates.InteractableStateEnum state) Parameters Type Name Description InteractableStates.InteractableStateEnum state Returns Type Description Int32 GlobalVisualReset(Single) Clears up any automated visual states Declaration protected IEnumerator GlobalVisualReset(float time) Parameters Type Name Description Single time Returns Type Description IEnumerator IncreaseDimension() Increases the Current Dimension by 1. If at end (i.e Dimensions - 1), then loop around to beginning (i.e 0) Declaration public void IncreaseDimension() InputDownTimer(Single) A timer for the MixedRealityInputHandlers, clicks should occur within a certain time. Declaration protected IEnumerator InputDownTimer(float time) Parameters Type Name Description Single time Returns Type Description IEnumerator OnBeforeFocusChange(FocusEventData) Declaration public void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnFocusChanged(FocusEventData) Declaration public void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusEnter(FocusEventData) Declaration public void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) Declaration public void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnInputChanged(InputEventData<MixedRealityPose>) Declaration public void OnInputChanged(InputEventData<MixedRealityPose> eventData) Parameters Type Name Description InputEventData < MixedRealityPose > eventData OnInputChanged(InputEventData<Vector2>) Declaration public void OnInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData OnInputChanged(InputEventData<Vector3>) Declaration public void OnInputChanged(InputEventData<Vector3> eventData) Parameters Type Name Description InputEventData < Vector3 > eventData OnInputDown(InputEventData) Declaration public void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputUp(InputEventData) Declaration public void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnPositionInputChanged(InputEventData<Vector2>) Declaration public void OnPositionInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData OnSpeechKeywordRecognized(SpeechEventData) Voice commands from MixedRealitySpeechCommandProfile, keyword recognized Declaration public void OnSpeechKeywordRecognized(SpeechEventData eventData) Parameters Type Name Description SpeechEventData eventData OnTouchCompleted(HandTrackingInputEventData) Declaration public void OnTouchCompleted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchStarted(HandTrackingInputEventData) Declaration public void OnTouchStarted(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData OnTouchUpdated(HandTrackingInputEventData) Declaration public void OnTouchUpdated(HandTrackingInputEventData eventData) Parameters Type Name Description HandTrackingInputEventData eventData RefreshSetup() Force re-initialization of Interactable from events, themes and state references Declaration public void RefreshSetup() RemoveHandler(IInteractableHandler) Remove onClick handlers Declaration public void RemoveHandler(IInteractableHandler handler) Parameters Type Name Description IInteractableHandler handler ResetAllStates() Reset all states in the Interactable and pointer information Declaration public void ResetAllStates() ResetBaseStates() Resets input tracking states such as focus or grab that are directly controlled by Interactable Declaration [Obsolete(\"Use ResetInputTrackingStates property instead\")] public void ResetBaseStates() ResetInputTrackingStates() Reset the input tracking states directly managed by Interactable such as whether the component has focus or is being grabbed Useful for when needing to reset input interactions Declaration public void ResetInputTrackingStates() ResolveInputAction(Int32) Assigns the InputAction based on the InputActionId Declaration public static MixedRealityInputAction ResolveInputAction(int index) Parameters Type Name Description Int32 index Returns Type Description MixedRealityInputAction SendOnClick(IMixedRealityPointer) Call onClick methods on receivers or IInteractableHandlers Declaration protected void SendOnClick(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer SendVoiceCommands(String, Int32, Int32) call OnVoinceCommand methods on receivers or IInteractableHandlers Declaration protected void SendVoiceCommands(string command, int index, int length) Parameters Type Name Description String command Int32 index Int32 length SetCollision(Boolean) Change the collision state Declaration [Obsolete(\"Use HasCollision property instead\")] public virtual void SetCollision(bool collision) Parameters Type Name Description Boolean collision SetCustom(Boolean) Change the custom state Declaration [Obsolete(\"Use HasCustom property instead\")] public virtual void SetCustom(bool custom) Parameters Type Name Description Boolean custom SetDimensionIndex(Int32) a public way to set the dimension index Declaration [Obsolete(\"Use CurrentDimension property instead\")] public void SetDimensionIndex(int index) Parameters Type Name Description Int32 index SetDisabled(Boolean) Change the disabled state, will override the Enabled property Declaration [Obsolete(\"Use IsEnabled property instead\")] public virtual void SetDisabled(bool disabled) Parameters Type Name Description Boolean disabled SetFocus(Boolean) Handle focus state changes Declaration [Obsolete(\"Use Focus property instead\")] public virtual void SetFocus(bool focus) Parameters Type Name Description Boolean focus SetGesture(Boolean) Change the gesture state Declaration [Obsolete(\"Use HasGesture property instead\")] public virtual void SetGesture(bool gesture) Parameters Type Name Description Boolean gesture SetGestureMax(Boolean) Change the gesture max state Declaration [Obsolete(\"Use HasGestureMax property instead\")] public virtual void SetGestureMax(bool gesture) Parameters Type Name Description Boolean gesture SetGrab(Boolean) Change the grab state Declaration [Obsolete(\"Use HasGrab property instead\")] public virtual void SetGrab(bool grab) Parameters Type Name Description Boolean grab SetInputDown() Public method that can be used to set state of interactable corresponding to an input going down (select button, menu button, touch) Declaration public void SetInputDown() SetInputUp() Public method that can be used to set state of interactable corresponding to an input going up. Declaration public void SetInputUp() SetInteractive(Boolean) Change the Interactive state Declaration [Obsolete(\"Use IsInteractive property instead\")] public virtual void SetInteractive(bool interactive) Parameters Type Name Description Boolean interactive SetObservation(Boolean) Change the observation state Declaration [Obsolete(\"Use HasObservation property instead\")] public virtual void SetObservation(bool observation) Parameters Type Name Description Boolean observation SetObservationTargeted(Boolean) Change the observation targeted state Declaration [Obsolete(\"Use HasObservationTargeted property instead\")] public virtual void SetObservationTargeted(bool targeted) Parameters Type Name Description Boolean targeted SetPhysicalTouch(Boolean) Change the physical touch state Declaration [Obsolete(\"Use HasPhysicalTouch property instead\")] public virtual void SetPhysicalTouch(bool touch) Parameters Type Name Description Boolean touch SetPress(Boolean) Change the press state Declaration [Obsolete(\"Use Press property instead\")] public virtual void SetPress(bool press) Parameters Type Name Description Boolean press SetState(InteractableStates.InteractableStateEnum, Boolean) a public way to set state directly Declaration public void SetState(InteractableStates.InteractableStateEnum state, bool value) Parameters Type Name Description InteractableStates.InteractableStateEnum state Boolean value SetTargeted(Boolean) Change the targeted state Declaration [Obsolete(\"Use IsTargeted property instead\")] public virtual void SetTargeted(bool targeted) Parameters Type Name Description Boolean targeted SetToggled(Boolean) Change the toggled state Declaration [Obsolete(\"Use IsToggled property instead\")] public virtual void SetToggled(bool toggled) Parameters Type Name Description Boolean toggled SetupEvents() Creates the event receiver instances from the Events list Declaration protected virtual void SetupEvents() SetupStates() starts the StateManager Declaration protected virtual void SetupStates() SetVisited(Boolean) Change the visited state Declaration [Obsolete(\"Use IsVisited property instead\")] public virtual void SetVisited(bool visited) Parameters Type Name Description Boolean visited SetVoiceCommand(Boolean) Change the voice command state Declaration [Obsolete(\"Use HasVoiceCommand property instead\")] public virtual void SetVoiceCommand(bool voice) Parameters Type Name Description Boolean voice ShouldListenToUpDownEvent(InputEventData) Based on inputAction and state, should interactable listen to this up/down event. Declaration protected virtual bool ShouldListenToUpDownEvent(InputEventData data) Parameters Type Name Description InputEventData data Returns Type Description Boolean Start() Declaration protected virtual void Start() StartClickTimer(Boolean) Starts a timer to check if input is in progress Make sure global pointer events are not double firing Make sure Global Input events are not double firing Make sure pointer events are not duplicating an input event Declaration protected void StartClickTimer(bool isFromInputDown = false) Parameters Type Name Description Boolean isFromInputDown StartGlobalVisual(Boolean) For input \"clicks\" that do not have corresponding input up/down tracking such as voice commands Simulate pressed and start timer to reset states after some click time Declaration protected void StartGlobalVisual(bool voiceCommand = false) Parameters Type Name Description Boolean voiceCommand StopClickTimer() Declaration protected void StopClickTimer() TriggerOnClick() A public way to trigger or route an onClick event from an external source, like PressableButton Declaration public void TriggerOnClick() Update() Declaration protected virtual void Update() UpdateActiveThemes() Updates the list of active themes based the current dimensions index Declaration protected virtual void UpdateActiveThemes() UpdateState() runs the state logic and sets state based on the current state values Declaration protected virtual void UpdateState() Implements IMixedRealityFocusChangedHandler IMixedRealityFocusHandler IMixedRealityInputHandler IMixedRealitySpeechHandler IMixedRealityTouchHandler IMixedRealityInputHandler<> IMixedRealityInputHandler<> IMixedRealityInputHandler<>"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableActivateTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableActivateTheme.html",
    "title": "Class InteractableActivateTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableActivateTheme Theme engine that allows control to enable/disable a GameObject based on the current state Inheritance Object InteractableThemeBase InteractableActivateTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.Init(GameObject, ThemeDefinition) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableActivateTheme : InteractableThemeBase Constructors InteractableActivateTheme() Declaration public InteractableActivateTheme() Properties IsEasingSupported Indicates whether the current Theme engine implementation supports easing between state values Declaration public override bool IsEasingSupported { get; } Property Value Type Description Boolean Overrides InteractableThemeBase.IsEasingSupported Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.InteractableAnimatorTheme.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.InteractableAnimatorTheme.html",
    "title": "Class InteractableAnimatorTheme | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableAnimatorTheme ThemeEngine that controls Animator state based on state changes Targets first Animator component returned on initialized GameObject Inheritance Object InteractableThemeBase InteractableAnimatorTheme Inherited Members InteractableThemeBase.Types InteractableThemeBase.Name InteractableThemeBase.StateProperties InteractableThemeBase.Properties InteractableThemeBase.Host InteractableThemeBase.Ease InteractableThemeBase.Loaded InteractableThemeBase.IsEasingSupported InteractableThemeBase.AreShadersSupported InteractableThemeBase.CreateTheme(Type) InteractableThemeBase.CreateAndInitTheme(ThemeDefinition, GameObject) InteractableThemeBase.OnUpdate(Int32, Boolean) InteractableThemeBase.LerpFloat(Single, Single, Single) InteractableThemeBase.LerpInt(Int32, Int32, Single) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class InteractableAnimatorTheme : InteractableThemeBase Constructors InteractableAnimatorTheme() Declaration public InteractableAnimatorTheme() Methods GetDefaultThemeDefinition() Generates the default theme definition configuration for the current theme implementation Declaration public override ThemeDefinition GetDefaultThemeDefinition() Returns Type Description ThemeDefinition Default ThemeDefinition to initialize with the current theme engine implementation Overrides InteractableThemeBase.GetDefaultThemeDefinition() GetProperty(ThemeStateProperty) Get the current property value for the provided state property Declaration public override ThemePropertyValue GetProperty(ThemeStateProperty property) Parameters Type Name Description ThemeStateProperty property state property to access Returns Type Description ThemePropertyValue Value currently for given state property Overrides InteractableThemeBase.GetProperty(ThemeStateProperty) Init(GameObject, ThemeDefinition) Initialize current Theme Engine with given configuration and target the provided GameObject Declaration public override void Init(GameObject host, ThemeDefinition settings) Parameters Type Name Description GameObject host GameObject to target changes against ThemeDefinition settings Overrides InteractableThemeBase.Init(GameObject, ThemeDefinition) SetValue(ThemeStateProperty, Int32, Single) Instruct theme to set value for current property with given index state and at given lerp percentage Declaration public override void SetValue(ThemeStateProperty property, int index, float percentage) Parameters Type Name Description ThemeStateProperty property property to update value Int32 index index of state to access array of values Single percentage percentage transition between values Overrides InteractableThemeBase.SetValue(ThemeStateProperty, Int32, Single)"
  },
  "api/Microsoft.MixedReality.Toolkit.BaseMixedRealityProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseMixedRealityProfile.html",
    "title": "Class BaseMixedRealityProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseMixedRealityProfile Inheritance Object BaseMixedRealityProfile MixedRealityBoundaryVisualizationProfile BaseCameraSettingsProfile MixedRealityDiagnosticsProfile SceneTransitionServiceProfile LostTrackingServiceProfile MixedRealityControllerMappingProfile MixedRealityControllerVisualizationProfile MixedRealityEyeTrackingProfile MixedRealityGesturesProfile MixedRealityHandTrackingProfile MixedRealityInputActionRulesProfile MixedRealityInputActionsProfile MixedRealityInputRecordingProfile MixedRealityInputSimulationProfile MixedRealityInputSystemProfile MixedRealityMouseInputProfile MixedRealityPointerProfile MixedRealitySpeechCommandsProfile MixedRealityCameraProfile MixedRealityRegisteredServiceProvidersProfile MixedRealityToolkitConfigurationProfile MixedRealitySceneSystemProfile BaseSpatialAwarenessObserverProfile MixedRealitySpatialAwarenessSystemProfile Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseMixedRealityProfile : ScriptableObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.Edge.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.Edge.html",
    "title": "Struct Edge | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Edge The Edge structure defines the points of a line segment that are used to construct a polygonal boundary. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public struct Edge Constructors Edge(Vector2, Vector2) Initializes the Edge structure. Declaration public Edge(Vector2 pointA, Vector2 pointB) Parameters Type Name Description Vector2 pointA The first point of the line segment. Vector2 pointB The second point of the line segment. Edge(Vector3, Vector3) Initializes the Edge structure. Declaration public Edge(Vector3 pointA, Vector3 pointB) Parameters Type Name Description Vector3 pointA The first point of the line segment. Vector3 pointB The second point of the line segment. Fields PointA The first point of the edge line segment. Declaration public readonly Vector2 PointA Field Value Type Description Vector2 PointB The second point of the edge line segment. Declaration public readonly Vector2 PointB Field Value Type Description Vector2"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.IMixedRealityBoundaryHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.IMixedRealityBoundaryHandler.html",
    "title": "Interface IMixedRealityBoundaryHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityBoundaryHandler Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityBoundaryHandler : IEventSystemHandler Methods OnBoundaryVisualizationChanged(BoundaryEventData) Raised when the boundary visualization has changed. Declaration void OnBoundaryVisualizationChanged(BoundaryEventData eventData) Parameters Type Name Description BoundaryEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.MixedRealityBoundarySystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.MixedRealityBoundarySystem.html",
    "title": "Class MixedRealityBoundarySystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityBoundarySystem The Boundary system controls the presentation and display of the users boundary in a scene. Inheritance Object BaseService BaseEventSystem BaseCoreSystem MixedRealityBoundarySystem Implements IMixedRealityBoundarySystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public class MixedRealityBoundarySystem : BaseCoreSystem, IMixedRealityBoundarySystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Constructors MixedRealityBoundarySystem(MixedRealityBoundaryVisualizationProfile, ExperienceScale) Constructor. Declaration public MixedRealityBoundarySystem(MixedRealityBoundaryVisualizationProfile profile, ExperienceScale scale) Parameters Type Name Description MixedRealityBoundaryVisualizationProfile profile The configuration profile for the service. ExperienceScale scale The application's configured ExperienceScale . MixedRealityBoundarySystem(IMixedRealityServiceRegistrar, MixedRealityBoundaryVisualizationProfile, ExperienceScale) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public MixedRealityBoundarySystem(IMixedRealityServiceRegistrar registrar, MixedRealityBoundaryVisualizationProfile profile, ExperienceScale scale) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealityBoundaryVisualizationProfile profile The configuration profile for the service. ExperienceScale scale The application's configured ExperienceScale . Properties BoundaryHeight The height of the play space, in meters. Declaration public float BoundaryHeight { get; set; } Property Value Type Description Single Remarks This is used to create a three dimensional boundary volume. BoundaryVisualizationProfile Typed representation of the ConfigurationProfile property. Declaration public MixedRealityBoundaryVisualizationProfile BoundaryVisualizationProfile { get; } Property Value Type Description MixedRealityBoundaryVisualizationProfile BoundaryWallsPhysicsLayer The physics layer that the generated boundary walls are assigned to. Declaration public int BoundaryWallsPhysicsLayer { get; set; } Property Value Type Description Int32 Bounds Two dimensional representation of the geometry of the boundary, as provided by the platform. Declaration public Edge[] Bounds { get; } Property Value Type Description Edge [] Remarks BoundaryGeometry should be treated as the outline of the player's space, placed on the floor. CeilingPhysicsLayer The physics layer that the generated boundary ceiling is assigned to. Declaration public int CeilingPhysicsLayer { get; set; } Property Value Type Description Int32 FloorHeight Indicates the height of the floor, in relation to the coordinate system origin. Declaration public float? FloorHeight { get; } Property Value Type Description Nullable < Single > Remarks If a floor has been located, FloorHeight.HasValue will be true, otherwise it will be false. FloorPhysicsLayer The physics layer that the generated floor is assigned to. Declaration public int FloorPhysicsLayer { get; set; } Property Value Type Description Int32 Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name PlayAreaPhysicsLayer The physics layer that the generated play area is assigned to. Declaration public int PlayAreaPhysicsLayer { get; set; } Property Value Type Description Int32 Scale The scale (ex: World Scale) of the experience. Declaration public ExperienceScale Scale { get; set; } Property Value Type Description ExperienceScale ShowBoundaryCeiling Enable / disable ceiling rendering. Declaration public bool ShowBoundaryCeiling { get; set; } Property Value Type Description Boolean Remarks The ceiling is defined as a GameObject positioned BoundaryHeight above the floor. ShowBoundaryWalls Enable / disable boundary wall rendering. Declaration public bool ShowBoundaryWalls { get; set; } Property Value Type Description Boolean ShowFloor Enable / disable floor rendering. Declaration public bool ShowFloor { get; set; } Property Value Type Description Boolean ShowPlayArea Enable / disable play area rendering. Declaration public bool ShowPlayArea { get; set; } Property Value Type Description Boolean ShowTrackedArea Enable / disable tracked area rendering. Declaration public bool ShowTrackedArea { get; set; } Property Value Type Description Boolean SourceId The Unique Source Id of this Event Source. Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration public string SourceName { get; } Property Value Type Description String TrackedAreaPhysicsLayer The physics layer that the generated tracked area is assigned to. Declaration public int TrackedAreaPhysicsLayer { get; set; } Property Value Type Description Int32 Methods Contains(Vector3, BoundaryType) Determines if a location is within the specified area of the boundary space. Declaration public bool Contains(Vector3 location, BoundaryType boundaryType = BoundaryType.TrackedArea) Parameters Type Name Description Vector3 location The location to be checked. BoundaryType boundaryType The type of boundary space being checked. Returns Type Description Boolean True if the location is within the specified area of the boundary space. Remarks Use: BoundaryType.PlayArea for the inscribed volume BoundaryType.TrackedArea for the area defined by the boundary edges. Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() GetBoundaryCeilingVisualization() Gets the GameObject that represents the upper surface of the user's boundary. Declaration public GameObject GetBoundaryCeilingVisualization() Returns Type Description GameObject The boundary ceiling visualization object or null if one does not exist. GetBoundaryWallVisualization() Gets the GameObject that represents the user's boundary walls. Declaration public GameObject GetBoundaryWallVisualization() Returns Type Description GameObject The boundary wall visualization object or null if one does not exist. GetFloorVisualization() Gets the GameObject that represents the user's floor. Declaration public GameObject GetFloorVisualization() Returns Type Description GameObject The floor visualization object or null if one does not exist. GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 GetPlayAreaVisualization() Gets the GameObject that represents the user's play area. Declaration public GameObject GetPlayAreaVisualization() Returns Type Description GameObject The play area visualization object or null if one does not exist. GetTrackedAreaVisualization() Gets the GameObject that represents the user's tracked area. Declaration public GameObject GetTrackedAreaVisualization() Returns Type Description GameObject The tracked area visualization object or null if one does not exist. HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Declaration public override void HandleEvent<T>(BaseEventData eventData, ExecuteEvents.EventFunction<T> eventHandler) where T : IEventSystemHandler Parameters Type Name Description BaseEventData eventData ExecuteEvents.EventFunction <T> eventHandler Type Parameters Name Description T Overrides Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() Register(GameObject) Registers the GameObject to listen for boundary events. Declaration public override void Register(GameObject listener) Parameters Type Name Description GameObject listener Overrides BaseEventSystem.Register(GameObject) TryGetRectangularBoundsParams(out Vector2, out Single, out Single, out Single) Returns the description of the inscribed rectangular bounds. Declaration public bool TryGetRectangularBoundsParams(out Vector2 center, out float angle, out float width, out float height) Parameters Type Name Description Vector2 center The center of the rectangle. Single angle The orientation of the rectangle. Single width The width of the rectangle. Single height The height of the rectangle. Returns Type Description Boolean True if an inscribed rectangle was found in the boundary geometry, false otherwise. Unregister(GameObject) UnRegisters the GameObject to listen for boundary events. /// Declaration public override void Unregister(GameObject listener) Parameters Type Name Description GameObject listener Overrides BaseEventSystem.Unregister(GameObject) Implements IMixedRealityBoundarySystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.BoundsExtensions.Axis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BoundsExtensions.Axis.html",
    "title": "Enum BoundsExtensions.Axis | Mixed Reality Toolkit Documentation",
    "keywords": "Enum BoundsExtensions.Axis Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum Axis Fields Name Description X Y Z"
  },
  "api/Microsoft.MixedReality.Toolkit.BoundsExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BoundsExtensions.html",
    "title": "Class BoundsExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundsExtensions Extension methods for Unity's Bounds struct Inheritance Object BoundsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class BoundsExtensions Fields BCK Declaration public const int BCK = 5 Field Value Type Description Int32 BOT Declaration public const int BOT = 1 Field Value Type Description Int32 FWD Declaration public const int FWD = 4 Field Value Type Description Int32 LB Declaration public const int LB = 1 Field Value Type Description Int32 LB_LT Declaration public const int LB_LT = 7 Field Value Type Description Int32 LBB Declaration public const int LBB = 1 Field Value Type Description Int32 LBF Declaration public const int LBF = 0 Field Value Type Description Int32 LBF_LBB Declaration public const int LBF_LBB = 18 Field Value Type Description Int32 LBF_RBF Declaration public const int LBF_RBF = 9 Field Value Type Description Int32 LFT Declaration public const int LFT = 2 Field Value Type Description Int32 LT Declaration public const int LT = 0 Field Value Type Description Int32 LT_RT Declaration public const int LT_RT = 4 Field Value Type Description Int32 LTB Declaration public const int LTB = 3 Field Value Type Description Int32 LTB_LBB Declaration public const int LTB_LBB = 14 Field Value Type Description Int32 LTF Declaration public const int LTF = 2 Field Value Type Description Int32 LTF_LBF Declaration public const int LTF_LBF = 12 Field Value Type Description Int32 LTF_LTB Declaration public const int LTF_LTB = 19 Field Value Type Description Int32 LTF_RTF Declaration public const int LTF_RTF = 8 Field Value Type Description Int32 RB Declaration public const int RB = 3 Field Value Type Description Int32 RB_LB Declaration public const int RB_LB = 6 Field Value Type Description Int32 RBB Declaration public const int RBB = 5 Field Value Type Description Int32 RBB_LBB Declaration public const int RBB_LBB = 11 Field Value Type Description Int32 RBF Declaration public const int RBF = 4 Field Value Type Description Int32 RBF_RBB Declaration public const int RBF_RBB = 16 Field Value Type Description Int32 RHT Declaration public const int RHT = 3 Field Value Type Description Int32 RT Declaration public const int RT = 2 Field Value Type Description Int32 RT_RB Declaration public const int RT_RB = 5 Field Value Type Description Int32 RTB Declaration public const int RTB = 7 Field Value Type Description Int32 RTB_LTB Declaration public const int RTB_LTB = 10 Field Value Type Description Int32 RTB_RBB Declaration public const int RTB_RBB = 13 Field Value Type Description Int32 RTF Declaration public const int RTF = 6 Field Value Type Description Int32 RTF_RBF Declaration public const int RTF_RBF = 15 Field Value Type Description Int32 RTF_RTB Declaration public const int RTF_RTB = 17 Field Value Type Description Int32 TOP Declaration public const int TOP = 0 Field Value Type Description Int32 Methods CloserToPoint(Bounds, Vector3, Bounds) Checks to see whether point is closer to bounds or otherBounds Declaration public static bool CloserToPoint(this Bounds bounds, Vector3 point, Bounds otherBounds) Parameters Type Name Description Bounds bounds Vector3 point Bounds otherBounds Returns Type Description Boolean ContainsBounds(Bounds, Bounds) Checks to see if bounds contains the other bounds completely. Declaration public static bool ContainsBounds(this Bounds bounds, Bounds otherBounds) Parameters Type Name Description Bounds bounds Bounds otherBounds Returns Type Description Boolean ExpandToContain(Bounds, Bounds) Returns bounds that contain both this bounds and the bounds passed in. Declaration public static Bounds ExpandToContain(this Bounds originalBounds, Bounds otherBounds) Parameters Type Name Description Bounds originalBounds Bounds otherBounds Returns Type Description Bounds GetColliderBoundsPoints(Collider, List<Vector3>, LayerMask) Method to get bounds from a single Collider Declaration public static void GetColliderBoundsPoints(Collider collider, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description Collider collider Target collider List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetColliderBoundsPoints(GameObject, List<Vector3>, LayerMask) Method to get bounding box points using Collider method. Declaration public static void GetColliderBoundsPoints(GameObject target, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description GameObject target gameObject that boundingBox bounds. List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetCornerAndMidPointPositions(Bounds, Transform, ref Vector3[]) Gets all the corner points and mid points from Renderer's Bounds Declaration public static void GetCornerAndMidPointPositions(this Bounds bounds, Transform transform, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions GetCornerAndMidPointPositions2D(Bounds, Transform, ref Vector3[], BoundsExtensions.Axis) Gets all the corner points and mid points from Renderer's Bounds, ignoring the z axis Declaration public static void GetCornerAndMidPointPositions2D(this Bounds bounds, Transform transform, ref Vector3[] positions, BoundsExtensions.Axis flattenAxis) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions BoundsExtensions.Axis flattenAxis GetCornerPositions(Bounds, Transform, ref Vector3[]) Gets all the corner points of the bounds in world space by transforming input bounds using the given transform Declaration public static void GetCornerPositions(this Bounds bounds, Transform transform, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Input bounds, in local space Transform transform Local to world transform Vector3 [] positions Output corner positions Remarks Use BoxColliderExtensions.{Left|Right}{Bottom|Top}{Front|Back} consts to index into the output corners array. GetCornerPositions(Bounds, ref Vector3[]) Gets all the corner points of the bounds Declaration public static void GetCornerPositions(this Bounds bounds, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Vector3 [] positions Remarks Use BoxColliderExtensions.{Left|Right}{Bottom|Top}{Front|Back} consts to index into the output corners array. GetCornerPositionsFromRendererBounds(Bounds, ref Vector3[]) Gets all the corner points from Renderer's Bounds Declaration public static void GetCornerPositionsFromRendererBounds(this Bounds bounds, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Vector3 [] positions GetFacePositions(Bounds, Transform, ref Vector3[]) Declaration public static void GetFacePositions(this Bounds bounds, Transform transform, ref Vector3[] positions) Parameters Type Name Description Bounds bounds Transform transform Vector3 [] positions GetInvalidBoundsInstance() Returns an instance of the 'Bounds' class which is invalid. An invalid 'Bounds' instance is one which has its size vector set to 'float.MaxValue' for all 3 components. The center of an invalid bounds instance is the zero vector. Declaration public static Bounds GetInvalidBoundsInstance() Returns Type Description Bounds GetMeshFilterBoundsPoints(GameObject, List<Vector3>, LayerMask) GetMeshFilterBoundsPoints - gets bounding box points using MeshFilter method. Declaration public static void GetMeshFilterBoundsPoints(GameObject target, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description GameObject target gameObject that boundingbox bounds List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetRenderBoundsPoints(GameObject, List<Vector3>, LayerMask) GetRenderBoundsPoints gets bounding box points using Render method. Declaration public static void GetRenderBoundsPoints(GameObject target, List<Vector3> boundsPoints, LayerMask ignoreLayers) Parameters Type Name Description GameObject target gameObject that boundingbox bounds List < Vector3 > boundsPoints array reference that gets filled with points LayerMask ignoreLayers layerMask to simplify search GetScaleToMatchBounds(Bounds, Bounds, Vector3) Calculates how much scale is required for this Bounds to match another Bounds. Declaration public static Vector3 GetScaleToMatchBounds(this Bounds bounds, Bounds otherBounds, Vector3 padding = null) Parameters Type Name Description Bounds bounds Bounds otherBounds Object representation to be scaled to Vector3 padding padding multiplied into another bounds Returns Type Description Vector3 Scale represented as a Vector3 GetScreenRectangle(Bounds, Camera) Returns the rectangle which encloses the specifies 'Bounds' instance in screen space. Declaration public static Rect GetScreenRectangle(this Bounds bounds, Camera camera) Parameters Type Name Description Bounds bounds Camera camera Returns Type Description Rect GetScreenSpaceCornerPoints(Bounds, Camera) Returns the screen space corner points of the specified 'Bounds' instance. Declaration public static Vector2[] GetScreenSpaceCornerPoints(this Bounds bounds, Camera camera) Parameters Type Name Description Bounds bounds Camera camera The camera used for rendering to the screen. This is needed to perform the transformation to screen space. Returns Type Description Vector2 [] IsValid(Bounds) Checks if the specified bounds instance is valid. A valid 'Bounds' instance is one whose size vector does not have all 3 components set to 'float.MaxValue'. Declaration public static bool IsValid(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description Boolean Transform(Bounds, Matrix4x4) Transforms 'bounds' using the specified transform matrix. Declaration public static Bounds Transform(this Bounds bounds, Matrix4x4 transformMatrix) Parameters Type Name Description Bounds bounds The 'Bounds' instance which must be transformed. Matrix4x4 transformMatrix The specified 'Bounds' instance will be transformed using this transform matrix. The function assumes that the matrix doesn't contain any projection or skew transformation. Returns Type Description Bounds The transformed 'Bounds' instance. Remarks Transforming a 'Bounds' instance means that the function will construct a new 'Bounds' instance which has its center translated using the translation information stored in the specified matrix and its size adjusted to account for rotation and scale. The size of the new 'Bounds' instance will be calculated in such a way that it will contain the old 'Bounds'. Volume(Bounds) Returns the volume of the bounds. Declaration public static float Volume(this Bounds bounds) Parameters Type Name Description Bounds bounds Returns Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpAppxBuildTools.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpAppxBuildTools.html",
    "title": "Class UwpAppxBuildTools | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpAppxBuildTools Inheritance Object UwpAppxBuildTools Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public static class UwpAppxBuildTools Properties IsBuilding Query the build process to see if we're already building. Declaration public static bool IsBuilding { get; } Property Value Type Description Boolean Methods AddCapabilities(IBuildInfo, XElement) Adds capabilities according to the values in the buildInfo to the manifest file. Declaration public static void AddCapabilities(IBuildInfo buildInfo, XElement rootElement = null) Parameters Type Name Description IBuildInfo buildInfo An IBuildInfo containing a valid OutputDirectory and all capabilities XElement rootElement AddCapability(XElement, XName, String) Adds a capability to the given rootNode, which must be the read AppX manifest from the build output. Declaration public static void AddCapability(XElement rootNode, XName capability, string value) Parameters Type Name Description XElement rootNode An XElement containing the AppX manifest from the build output XName capability The added capabilities tag as XName String value Value of the Name-XAttribute of the added capability AddGazeInputCapability(XElement) Adds the 'Gaze Input' capability to the manifest. Declaration public static void AddGazeInputCapability(XElement rootNode) Parameters Type Name Description XElement rootNode Remarks This is a workaround for versions of Unity which don't have native support for the 'Gaze Input' capability in its Player Settings preference location. Note that this function is only public to poke a hole for testing - do not take a dependency on this function. AddResearchModeCapability(XElement) Adds the 'Research Mode' capability to the manifest. Declaration public static void AddResearchModeCapability(XElement rootNode) Parameters Type Name Description XElement rootNode Remarks This is only for research projects and should not be used in production. For further information take a look at https://docs.microsoft.com/windows/mixed-reality/research-mode . Note that this function is only public to poke a hole for testing - do not take a dependency on this function. AllowUnsafeCode(XElement) Enables unsafe code in the generated Assembly-CSharp project. Declaration public static void AllowUnsafeCode(XElement rootNode) Parameters Type Name Description XElement rootNode Remarks This is not required by the research mode, but not using unsafe code with direct memory access results in poor performance. So its kinda recommended to use unsafe code. For further information take a look at https://docs.microsoft.com/windows/mixed-reality/research-mode . Note that this function is only public to poke a hole for testing - do not take a dependency on this function. BuildAppxAsync(UwpBuildInfo, CancellationToken) Build the UWP appx bundle for this project. Requires that BuildPlayer(String, Boolean, CancellationToken) has already be run or a user has previously built the Unity Player with the WSA Player as the Build Target. Declaration public static Task<bool> BuildAppxAsync(UwpBuildInfo buildInfo, CancellationToken cancellationToken = null) Parameters Type Name Description UwpBuildInfo buildInfo CancellationToken cancellationToken Returns Type Description Task < Boolean > True, if the appx build was successful. UpdateAssemblyCSharpProject(IBuildInfo) Updates 'Assembly-CSharp.csproj' file according to the values set in buildInfo. Declaration public static void UpdateAssemblyCSharpProject(IBuildInfo buildInfo) Parameters Type Name Description IBuildInfo buildInfo An IBuildInfo containing a valid OutputDirectory Remarks Only used with the .NET backend in Unity 2018 or older, with Unity C# Projects enabled."
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpBuildDeployPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.UwpBuildDeployPreferences.html",
    "title": "Class UwpBuildDeployPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Class UwpBuildDeployPreferences Inheritance Object UwpBuildDeployPreferences Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public static class UwpBuildDeployPreferences Fields MIN_PLATFORM_VERSION The minimum version of the OS that must exist on the device that the application is deployed to. Declaration public static Version MIN_PLATFORM_VERSION Field Value Type Description Version Remarks This is intentionally set to a very low version, so that the application can be deployed to variety of different devices which may be on older OS versions. MIN_SDK_VERSION The minimum Windows SDK that must be present on the build machine in order for a build to be successful. Declaration public static Version MIN_SDK_VERSION Field Value Type Description Version Remarks This controls the version of the Windows SDK that is build against on the local machine, NOT the version of the OS that must be present on the device that the built application is deployed to (this other aspect is controlled by MIN_PLATFORM_VERSION) Properties AllowUnsafeCode Current setting to modify 'Assembly-CSharp.csproj' file to allow unsafe code. Declaration public static bool AllowUnsafeCode { get; set; } Property Value Type Description Boolean BuildConfig The current Build Configuration. (Debug, Release, or Master) Declaration public static string BuildConfig { get; set; } Property Value Type Description String DevicePortalConnections The current device portal connections. Declaration public static string DevicePortalConnections { get; set; } Property Value Type Description String ForceRebuild Current setting to force rebuilding the appx. Declaration public static bool ForceRebuild { get; set; } Property Value Type Description Boolean FullReinstall Current setting to fully uninstall and reinstall the appx. Declaration public static bool FullReinstall { get; set; } Property Value Type Description Boolean GazeInputCapabilityEnabled If true, the 'Gaze Input' capability will be added to the AppX manifest after the Unity build. Declaration public static bool GazeInputCapabilityEnabled { get; set; } Property Value Type Description Boolean MulticoreAppxBuildEnabled If true, the appx will be built with multicore support enabled in the MSBuild process. Declaration public static bool MulticoreAppxBuildEnabled { get; set; } Property Value Type Description Boolean PlatformToolset The current Platform Toolset. (Solution, v141, or v142) Declaration public static string PlatformToolset { get; set; } Property Value Type Description String ResearchModeCapabilityEnabled Current setting to modify 'Package.appxmanifest' file for sensor access. Declaration public static bool ResearchModeCapabilityEnabled { get; set; } Property Value Type Description Boolean TargetAllConnections Current setting to target all the devices registered to the build window. Declaration public static bool TargetAllConnections { get; set; } Property Value Type Description Boolean UseSSL Current setting to use Single Socket Layer connections to the device portal. Declaration public static bool UseSSL { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.DisplayType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.DisplayType.html",
    "title": "Enum DisplayType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DisplayType The type of displays on which an application may run. Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public enum DisplayType Fields Name Description Opaque The display is opaque. Devices on the digital reality (ex: VR) side of the Mixed Reality spectrum generally have opaque displays. Transparent The display is transparent. Devices on the physical reality (ex: Microsoft HoloLens) side of the Mixed Reality spectrum generally have transparent displays."
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.IMixedRealityCameraSettingsProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.IMixedRealityCameraSettingsProvider.html",
    "title": "Interface IMixedRealityCameraSettingsProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityCameraSettingsProvider Interface defining the a camera system settings provider. Inherited Members IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityCameraSettingsProvider : IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties IsOpaque Returns whether or not the current display rendering mode is opaque. Declaration bool IsOpaque { get; } Property Value Type Description Boolean Methods ApplyConfiguration() Applies provider specific configuration settings. Declaration void ApplyConfiguration()"
  },
  "api/Microsoft.MixedReality.Toolkit.Color32Extensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Color32Extensions.html",
    "title": "Class Color32Extensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class Color32Extensions Extension methods for Unity's Color32 struct Inheritance Object Color32Extensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class Color32Extensions Methods ParseHexcode(String) Creates a Color from a hexcode string Declaration public static Color ParseHexcode(string hexstring) Parameters Type Name Description String hexstring Returns Type Description Color PremultiplyAlpha(Color) Declaration public static Color PremultiplyAlpha(Color col) Parameters Type Name Description Color col Returns Type Description Color PremultiplyAlpha(Color32) Declaration public static Color32 PremultiplyAlpha(Color32 col) Parameters Type Name Description Color32 col Returns Type Description Color32"
  },
  "api/Microsoft.MixedReality.Toolkit.ComparerExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ComparerExtensions.html",
    "title": "Class ComparerExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ComparerExtensions Extension methods for .Net Comparer's Inheritance Object ComparerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class ComparerExtensions Methods GetReversed<TElement>(IComparer<TElement>) Gets a comparer that sorts elements in the opposite order of the original comparer. Declaration public static IComparer<TElement> GetReversed<TElement>(this IComparer<TElement> originalComparer) Parameters Type Name Description IComparer <TElement> originalComparer The comparer whose order should be reversed. Returns Type Description IComparer <TElement> A comparer that sorts elements in the opposite order of originalComparer . Type Parameters Name Description TElement The type of element the comparer compares."
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.IMixedRealityDiagnosticsHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.IMixedRealityDiagnosticsHandler.html",
    "title": "Interface IMixedRealityDiagnosticsHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDiagnosticsHandler Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDiagnosticsHandler : IEventSystemHandler Methods OnDiagnosticSettingsChanged(DiagnosticsEventData) Declaration void OnDiagnosticSettingsChanged(DiagnosticsEventData eventData) Parameters Type Name Description DiagnosticsEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Diagnostics.IMixedRealityDiagnosticsSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Diagnostics.IMixedRealityDiagnosticsSystem.html",
    "title": "Interface IMixedRealityDiagnosticsSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityDiagnosticsSystem The interface contract that defines the Diagnostics system in the Mixed Reality Toolkit Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName Namespace : Microsoft.MixedReality.Toolkit.Diagnostics Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityDiagnosticsSystem : IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Properties DiagnosticsSystemProfile Typed representation of the ConfigurationProfile property. Declaration MixedRealityDiagnosticsProfile DiagnosticsSystemProfile { get; } Property Value Type Description MixedRealityDiagnosticsProfile FrameSampleRate The amount of time, in seconds, to collect frames for frame rate calculation. Declaration float FrameSampleRate { get; } Property Value Type Description Single ShowDiagnostics Enable / disable diagnostic display. Declaration bool ShowDiagnostics { get; set; } Property Value Type Description Boolean Remarks When set to true, visibility settings for individual diagnostics are honored. When set to false, all visualizations are hidden. ShowFrameInfo Show or hide the frame info (per frame stats). Declaration bool ShowFrameInfo { get; set; } Property Value Type Description Boolean ShowMemoryStats Show or hide the memory stats (used, peak, and limit). Declaration bool ShowMemoryStats { get; set; } Property Value Type Description Boolean ShowProfiler Enable / disable the profiler display. Declaration bool ShowProfiler { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.BoundingBoxInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.BoundingBoxInspector.html",
    "title": "Class BoundingBoxInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundingBoxInspector Inheritance Object BoundingBoxInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class BoundingBoxInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ClippingBoxEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ClippingBoxEditor.html",
    "title": "Class ClippingBoxEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClippingBoxEditor A custom editor for the ClippingBox to allow for specification of the framing bounds. Inheritance Object ClippingPrimitiveEditor ClippingBoxEditor Inherited Members ClippingPrimitiveEditor.OnInspectorGUI() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ClippingBoxEditor : ClippingPrimitiveEditor Methods HasFrameBounds() Notifies the Unity editor if this object has custom frame bounds. Declaration protected override bool HasFrameBounds() Returns Type Description Boolean True if custom frame bounds can be used from OnGetFrameBounds. Overrides ClippingPrimitiveEditor.HasFrameBounds() OnGetFrameBounds() Returns the bounds the editor should focus on. Declaration protected override Bounds OnGetFrameBounds() Returns Type Description Bounds The bounds of the clipping primitive. Overrides ClippingPrimitiveEditor.OnGetFrameBounds()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ExperimentalDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ExperimentalDrawer.html",
    "title": "Class ExperimentalDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class ExperimentalDrawer Draws a customer decorator drawer that displays a help box with rich text tagging implementation as experimental. Inheritance Object ExperimentalDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ExperimentalDrawer : DecoratorDrawer Methods GetHeight() Returns the height required to display UI elements drawn by OnGUI. Declaration public override float GetHeight() Returns Type Description Single The height required by OnGUI. OnGUI(Rect) Unity calls this function to draw the GUI. Declaration public override void OnGUI(Rect position) Parameters Type Name Description Rect position Rectangle to display the GUI in"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ExtensionServiceCreator.CreateResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ExtensionServiceCreator.CreateResult.html",
    "title": "Enum ExtensionServiceCreator.CreateResult | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ExtensionServiceCreator.CreateResult Result of extension service file(s) create operation Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public enum CreateResult Fields Name Description Error None Successful"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.IMixedRealityServiceInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.IMixedRealityServiceInspector.html",
    "title": "Interface IMixedRealityServiceInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityServiceInspector Used to populate service facades with content. To use, create a class that implements this interface and mark it with the MixedRealityServiceInspector attribute. Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityServiceInspector Properties AlwaysDrawSceneGUI If true, DrawSceneGUI will be called even when facade object is not selected. Declaration bool AlwaysDrawSceneGUI { get; } Property Value Type Description Boolean DrawProfileField If true, inspector will include a field for the service's profile at the top (if applicable) Declaration bool DrawProfileField { get; } Property Value Type Description Boolean Methods DrawGizmos(Object) Used to draw gizmos in the scene Declaration void DrawGizmos(object target) Parameters Type Name Description Object target DrawInspectorGUI(Object) Used to draw an inspector for a service facade. Declaration void DrawInspectorGUI(object target) Parameters Type Name Description Object target DrawSceneGUI(Object, SceneView) Used to draw handles and visualizations in scene view. Declaration void DrawSceneGUI(object target, SceneView sceneView) Parameters Type Name Description Object target SceneView sceneView"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ManipulationHandlerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ManipulationHandlerInspector.html",
    "title": "Class ManipulationHandlerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ManipulationHandlerInspector Inheritance Object ManipulationHandlerInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ManipulationHandlerInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.CustomRenderingMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.CustomRenderingMode.html",
    "title": "Enum MixedRealityShaderGUI.CustomRenderingMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityShaderGUI.CustomRenderingMode Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected enum CustomRenderingMode Fields Name Description Cutout Fade Opaque"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.DepthWrite.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.DepthWrite.html",
    "title": "Enum MixedRealityShaderGUI.DepthWrite | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityShaderGUI.DepthWrite Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected enum DepthWrite Fields Name Description Off On"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.RenderingMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.RenderingMode.html",
    "title": "Enum MixedRealityShaderGUI.RenderingMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityShaderGUI.RenderingMode Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected enum RenderingMode Fields Name Description Additive Custom Cutout Fade Opaque Transparent"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityShaderGUI.html",
    "title": "Class MixedRealityShaderGUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityShaderGUI A custom base shader inspector for Mixed Reality Toolkit shaders. Inheritance Object MixedRealityShaderGUI MixedRealityStandardShaderGUI MixedRealityWireframeShaderGUI Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public abstract class MixedRealityShaderGUI : ShaderGUI Fields blendOperation Declaration protected MaterialProperty blendOperation Field Value Type Description MaterialProperty colorWriteMask Declaration protected MaterialProperty colorWriteMask Field Value Type Description MaterialProperty cullMode Declaration protected MaterialProperty cullMode Field Value Type Description MaterialProperty customRenderingMode Declaration protected MaterialProperty customRenderingMode Field Value Type Description MaterialProperty depthOffsetFactor Declaration protected MaterialProperty depthOffsetFactor Field Value Type Description MaterialProperty depthOffsetUnits Declaration protected MaterialProperty depthOffsetUnits Field Value Type Description MaterialProperty depthTest Declaration protected MaterialProperty depthTest Field Value Type Description MaterialProperty depthWrite Declaration protected MaterialProperty depthWrite Field Value Type Description MaterialProperty destinationBlend Declaration protected MaterialProperty destinationBlend Field Value Type Description MaterialProperty initialized Declaration protected bool initialized Field Value Type Description Boolean LegacyShadersPath Declaration protected const string LegacyShadersPath = \"Legacy Shaders/\" Field Value Type Description String renderingMode Declaration protected MaterialProperty renderingMode Field Value Type Description MaterialProperty renderQueueOverride Declaration protected MaterialProperty renderQueueOverride Field Value Type Description MaterialProperty sourceBlend Declaration protected MaterialProperty sourceBlend Field Value Type Description MaterialProperty TransparentCutoutShadersPath Declaration protected const string TransparentCutoutShadersPath = \"/Transparent/Cutout/\" Field Value Type Description String TransparentShadersPath Declaration protected const string TransparentShadersPath = \"/Transparent/\" Field Value Type Description String Methods FindProperties(MaterialProperty[]) Declaration protected virtual void FindProperties(MaterialProperty[] props) Parameters Type Name Description MaterialProperty [] props GetColorProperty(Material, String) Get the value of a given color property for a material Declaration protected static Color? GetColorProperty(Material material, string propertyName) Parameters Type Name Description Material material material to check String propertyName name of property against material Returns Type Description Nullable < Color > if has property, then value of that property for current material, null otherwise GetFloatProperty(Material, String) Get the value of a given float property for a material Declaration protected static float? GetFloatProperty(Material material, string propertyName) Parameters Type Name Description Material material material to check String propertyName name of property against material Returns Type Description Nullable < Single > if has property, then value of that property for current material, null otherwise GetVectorProperty(Material, String) Get the value of a given vector property for a material Declaration protected static Vector4? GetVectorProperty(Material material, string propertyName) Parameters Type Name Description Material material material to check String propertyName name of property against material Returns Type Description Nullable < Vector4 > if has property, then value of that property for current material, null otherwise Initialize(Material) Declaration protected void Initialize(Material material) Parameters Type Name Description Material material MaterialChanged(Material) Declaration protected virtual void MaterialChanged(Material material) Parameters Type Name Description Material material OnGUI(MaterialEditor, MaterialProperty[]) Declaration public override void OnGUI(MaterialEditor materialEditor, MaterialProperty[] props) Parameters Type Name Description MaterialEditor materialEditor MaterialProperty [] props PropertyEnabled(MaterialProperty) Check whether shader feature is enabled Declaration protected static bool PropertyEnabled(MaterialProperty property) Parameters Type Name Description MaterialProperty property float property to check against Returns Type Description Boolean false if 0.0f, true otherwise RenderingModeOptions(MaterialEditor) Declaration protected void RenderingModeOptions(MaterialEditor materialEditor) Parameters Type Name Description MaterialEditor materialEditor SetColorProperty(Material, String, Nullable<Color>) Set color property against associated material Declaration protected static void SetColorProperty(Material material, string propertyName, Color? propertyValue) Parameters Type Name Description Material material material to control String propertyName name of property to set Nullable < Color > propertyValue value of property to set SetShaderFeatureActive(Material, String, String, Nullable<Single>) Sets the shader feature controlled by keyword and property name parameters active or inactive Declaration protected static void SetShaderFeatureActive(Material material, string keywordName, string propertyName, float? propertyValue) Parameters Type Name Description Material material Material to modify String keywordName Keyword of shader feature String propertyName Associated property name for shader feature Nullable < Single > propertyValue float to be treated as a boolean flag for setting shader feature active or inactive SetupMaterialWithRenderingMode(Material, MixedRealityShaderGUI.RenderingMode, MixedRealityShaderGUI.CustomRenderingMode, Int32) Declaration protected static void SetupMaterialWithRenderingMode(Material material, MixedRealityShaderGUI.RenderingMode mode, MixedRealityShaderGUI.CustomRenderingMode customMode, int renderQueueOverride) Parameters Type Name Description Material material MixedRealityShaderGUI.RenderingMode mode MixedRealityShaderGUI.CustomRenderingMode customMode Int32 renderQueueOverride SetVectorProperty(Material, String, Nullable<Vector4>) Sets vector property against associated material Declaration protected static void SetVectorProperty(Material material, string propertyName, Vector4? propertyValue) Parameters Type Name Description Material material material to control String propertyName name of property to set Nullable < Vector4 > propertyValue value of property to set"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.PrefabPropertyDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.PrefabPropertyDrawer.html",
    "title": "Class PrefabPropertyDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class PrefabPropertyDrawer Custom property drawer for PrefabAttribute decorated GameObject values rendered in the inspector. Inheritance Object PrefabPropertyDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class PrefabPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.PressableButtonInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.PressableButtonInspector.html",
    "title": "Class PressableButtonInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class PressableButtonInspector Inheritance Object PressableButtonInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class PressableButtonInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.ProximityLightInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.ProximityLightInspector.html",
    "title": "Class ProximityLightInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProximityLightInspector Inheritance Object ProximityLightInspector Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class ProximityLightInspector : UnityEditor.Editor"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.SceneInfoDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.SceneInfoDrawer.html",
    "title": "Class SceneInfoDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class SceneInfoDrawer Draws the scene info struct and populates its hidden fields. Inheritance Object SceneInfoDrawer Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public class SceneInfoDrawer : PropertyDrawer Properties DrawTagProperty Used to control whether to draw the tag property. All scenes can have tags, but they're not always relevant based on how the scene is being used. Not sure how much I like this method of controlling property drawing since it could result in unpredictable behavior in inspectors. We could add an enum or bool to the SceneInfo struct to control this, but that seemed like unnecessary clutter. Declaration public static bool DrawTagProperty { get; set; } Property Value Type Description Boolean Methods DrawProperty(Rect, SerializedProperty, GUIContent, Boolean, Boolean) Declaration public static void DrawProperty(Rect position, SerializedProperty property, GUIContent label, bool isActive = false, bool isSelected = false) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Boolean isActive Boolean isSelected GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single GetPropertyHeight(Boolean) Declaration public static float GetPropertyHeight(bool drawTagProperty) Parameters Type Name Description Boolean drawTagProperty Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Editor Classes BaseMixedRealityProfileInspector Base class for all BaseMixedRealityProfile Inspectors to inherit from. BaseMixedRealityServiceInspector BaseMixedRealityToolkitConfigurationProfileInspector Base class for all Mixed Reality Toolkit specific BaseMixedRealityProfile inspectors to inherit from. BoundingBoxInspector ClippingBoxEditor A custom editor for the ClippingBox to allow for specification of the framing bounds. ClippingPlaneEditor A custom editor for the ClippingPlaneEditor to allow for specification of the framing bounds. ClippingPrimitiveEditor An abstract editor component to improve the editor experience with ClippingPrimitives. ClippingSphereEditor A custom editor for the ClippingSphere to allow for specification of the framing bounds. ControllerPopupWindow EditorLayerExtensions EnumFlagsAttributeDrawer Renders enum flags on fields with the attribute. From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html ExperimentalDrawer Draws a customer decorator drawer that displays a help box with rich text tagging implementation as experimental. ExtensionServiceCreator Class used to generate service scripts and profile instances. Primarily designed for in-editor use FocusProviderInspector HandJointServiceInspector HelpDrawer Custom property drawer to show an optionally collapsible foldout help section in the Inspector HoverLightInspector ManipulationHandlerInspector MixedRealityCameraProfileInspector MixedRealityOptimizeWindow Build window - Utility for developers to automate optimization of their Unity scene/project MixedRealityPosePropertyDrawer MixedRealityProfileCloneWindow MixedRealityProjectPreferences MRTK project preferences access and inspector rendering logic MixedRealityRegisteredServiceProviderProfileInspector MixedRealitySceneSystemProfileInspector MixedRealityShaderGUI A custom base shader inspector for Mixed Reality Toolkit shaders. MixedRealityShaderGUI.BaseStyles MixedRealitySpeechCommandsProfileInspector MixedRealityStandardShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/Standard\" shader. MixedRealityStandardShaderGUI.Styles MixedRealityTextMeshProShaderGUI A custom TMP_SDFShaderGUI inspector for the \"Mixed Reality Toolkit/TextMeshPro\" shader. Adds the ability to change the depth write mode, and a warning about depth write when depth buffer sharing is enabled. MixedRealityToolkitConfigurationProfileInspector MixedRealityToolkitInspector MixedRealityToolkitShaderGUIUtilities A collection of shared functionality for MRTK shader GUIs. MixedRealityToolkitShaderGUIUtilities.Styles GUI content styles which are common among shader GUIs. MixedRealityWireframeShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/Wireframe\" shader. MixedRealityWireframeShaderGUI.Styles PinchSliderInspector PrefabPropertyDrawer Custom property drawer for PrefabAttribute decorated GameObject values rendered in the inspector. PressableButtonInspector ProximityLightInspector SceneInfoDrawer Draws the scene info struct and populates its hidden fields. SceneInfoUtils Class responsible for updating scene info structs to reflect changes made to scene assets. Extends AssetPostprocessor so it can respond to asset changes. ScenePickPropertyDrawer Creates a custom picker based on the list of scene in the build settings. SceneSystemInspector ScriptableObjectExtensions Extensions for ScriptableObject s ScriptedImporterAssetReimporter Unity has a strange bug when it tries to import a DLL with a ScriptedImporter and an asset that importer is targeting. The first time, it will not invoke the ScriptedImporter as it's just being imported itself; the second time the ScriptedImporter will be constructed but Unity thinks it fails. The third time, the import will succeed. This class will invoke the third time import for .gltf, .glb and .room extensions. SelectRepairedTypeWindow SpatialAwarenessSystemInspector SystemTypeReferencePropertyDrawer Custom property drawer for SystemType properties. TagPropertyDrawer Draws a Unity Tag selector in the Inspector. TeleportSystemInspector Text3DShaderGUI A custom shader inspector for the \"Mixed Reality Toolkit/TextShader3D\". Text3DShaderGUI.Styles TextureCombinerWindow Vector3RangePropertyDrawer Custom property drawer for Vector3RangeAttribute decorated Vector3 values rendered in the inspector. Interfaces IMixedRealityServiceInspector Used to populate service facades with content. To use, create a class that implements this interface and mark it with the MixedRealityServiceInspector attribute. Enums BaseMixedRealityToolkitConfigurationProfileInspector.BackProfileType Internal enum used for back navigation along profile hierarchy. Indicates what type of parent profile the current profile will return to for going back ExtensionServiceCreator.CreateResult Result of extension service file(s) create operation ExtensionServiceCreator.CreationStage The current stage of the creation process MixedRealityOptimizeWindow.PerformanceTarget MixedRealityProfileCloneWindow.ProfileCloneBehavior MixedRealityShaderGUI.CustomRenderingMode MixedRealityShaderGUI.DepthWrite MixedRealityShaderGUI.RenderingMode MixedRealityStandardShaderGUI.AlbedoAlphaMode"
  },
  "api/Microsoft.MixedReality.Toolkit.EndReadOnlyGroupAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.EndReadOnlyGroupAttribute.html",
    "title": "Class EndReadOnlyGroupAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class EndReadOnlyGroupAttribute Inheritance Object EndReadOnlyGroupAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class EndReadOnlyGroupAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.EnumerableExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class EnumerableExtensions Extension methods for the .Net IEnumerable class Inheritance Object EnumerableExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class EnumerableExtensions Methods MaxOrDefault<T>(IEnumerable<T>, IComparer<T>) Returns the max element based on the provided comparer or the default value when the list is empty Declaration public static T MaxOrDefault<T>(this IEnumerable<T> items, IComparer<T> comparer = null) Parameters Type Name Description IEnumerable <T> items IComparer <T> comparer Returns Type Description T Max or default value of T Type Parameters Name Description T"
  },
  "api/Microsoft.MixedReality.Toolkit.EnumFlagsAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.EnumFlagsAttribute.html",
    "title": "Class EnumFlagsAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class EnumFlagsAttribute An attribute that allows a particular field to be rendered as multi-selectable set of flags. Inheritance Object EnumFlagsAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public sealed class EnumFlagsAttribute : PropertyAttribute Remarks From https://answers.unity.com/questions/486694/default-editor-enum-as-flags-.html Constructors EnumFlagsAttribute() Declaration public EnumFlagsAttribute()"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.LightingSceneTransitionType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.LightingSceneTransitionType.html",
    "title": "Enum LightingSceneTransitionType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LightingSceneTransitionType Used by scene service to control how to transition from one lighting scene to another. Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public enum LightingSceneTransitionType Fields Name Description CrossFade FadeToBlack None"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.MixedRealitySceneSystem.html",
    "title": "Class MixedRealitySceneSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySceneSystem The default implementation of the IMixedRealitySceneSystem Because so much of this service's functionality is editor-only, it has been split into a partial class. This part handles the runtime parts of the service. Inheritance Object BaseService BaseEventSystem BaseCoreSystem MixedRealitySceneSystem Implements IMixedRealitySceneSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer IMixedRealitySceneSystemEditor Inherited Members BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.LateUpdate() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SceneSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealitySceneSystem : BaseCoreSystem, IMixedRealitySceneSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer, IMixedRealitySceneSystemEditor Constructors MixedRealitySceneSystem(IMixedRealityServiceRegistrar, MixedRealitySceneSystemProfile) Constructor. Declaration public MixedRealitySceneSystem(IMixedRealityServiceRegistrar registrar, MixedRealitySceneSystemProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealitySceneSystemProfile profile The configuration profile for the service. MixedRealitySceneSystem(MixedRealitySceneSystemProfile) Constructor. Declaration public MixedRealitySceneSystem(MixedRealitySceneSystemProfile profile) Parameters Type Name Description MixedRealitySceneSystemProfile profile The configuration profile for the service. Properties ActiveLightingScene Name of the currently loaded lighting scene. If a transition is in progress, this reports the target lighting scene we're transitioning to. Declaration public string ActiveLightingScene { get; } Property Value Type Description String ContentSceneNames An array of content scenes available to load / unload. Order in array matches build order. Useful if you want to present an ordered list of options, or if you want to track which scenes are loaded via IsContentLoaded. Declaration public string[] ContentSceneNames { get; } Property Value Type Description String [] LightingOperationInProgress True if the scene system is transitioning from one lighting scene to another. Lighting operations will not impede other operations. Declaration public bool LightingOperationInProgress { get; } Property Value Type Description Boolean LightingOperationProgress Progress of current lighting operation, from 0-1 Declaration public float LightingOperationProgress { get; } Property Value Type Description Single Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name NextContentExists Returns true if a content scene appears in build settings AFTER the latest loaded build index. Use to verify that LoadNextContent can be performed without wrapping. Declaration public bool NextContentExists { get; } Property Value Type Description Boolean OnContentLoaded Declaration public BaseEventSystem.Action<IEnumerable<string>> OnContentLoaded { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < IEnumerable < String >> OnContentUnloaded Declaration public BaseEventSystem.Action<IEnumerable<string>> OnContentUnloaded { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < IEnumerable < String >> OnLightingLoaded Declaration public BaseEventSystem.Action<string> OnLightingLoaded { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnLightingUnloaded Declaration public BaseEventSystem.Action<string> OnLightingUnloaded { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnSceneLoaded Declaration public BaseEventSystem.Action<string> OnSceneLoaded { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnSceneUnloaded Declaration public BaseEventSystem.Action<string> OnSceneUnloaded { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnWillLoadContent Declaration public BaseEventSystem.Action<IEnumerable<string>> OnWillLoadContent { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < IEnumerable < String >> OnWillLoadLighting Declaration public BaseEventSystem.Action<string> OnWillLoadLighting { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnWillLoadScene Declaration public BaseEventSystem.Action<string> OnWillLoadScene { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnWillUnloadContent Declaration public BaseEventSystem.Action<IEnumerable<string>> OnWillUnloadContent { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < IEnumerable < String >> OnWillUnloadLighting Declaration public BaseEventSystem.Action<string> OnWillUnloadLighting { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > OnWillUnloadScene Declaration public BaseEventSystem.Action<string> OnWillUnloadScene { get; set; } Property Value Type Description Microsoft.MixedReality.Toolkit.BaseEventSystem.Action < String > PrevContentExists Returns true if a content scene appears in build settings PRIOR to the latest loaded build index. Use to verify that LoadPrevContent can be performed without wrapping. Declaration public bool PrevContentExists { get; } Property Value Type Description Boolean SceneOperationInProgress True if the scene system is loading or unloading content scenes. Manager and lighting scenes are ignored. Declaration public bool SceneOperationInProgress { get; } Property Value Type Description Boolean SceneOperationProgress Progress of the current scene operation, from 0-1. A scene operation may include multiple concurrently loaded scenes. Declaration public float SceneOperationProgress { get; } Property Value Type Description Single SourceId The Unique Source Id of this Event Source. Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration public string SourceName { get; } Property Value Type Description String WaitingToProceed True when content has been loaded with an activation token and AllowSceneActivation has not been set to true. Useful for existing entities that shouldn't act until a newly loaded scene is actually activated. Declaration public bool WaitingToProceed { get; } Property Value Type Description Boolean Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseService.Enable() GetScene(String) Returns a scene by name. Useful for processing events. Declaration public Scene GetScene(string sceneName) Parameters Type Name Description String sceneName Returns Type Description Scene GetScenes(IEnumerable<String>) Returns a set of scenes by name. Useful for processing events. Declaration public IEnumerable<Scene> GetScenes(IEnumerable<string> sceneNames) Parameters Type Name Description IEnumerable < String > sceneNames Returns Type Description IEnumerable < Scene > Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() IsContentLoaded(String) Returns true if a content scene is fully loaded. Declaration public bool IsContentLoaded(string sceneName) Parameters Type Name Description String sceneName Returns Type Description Boolean LoadContent(IEnumerable<String>, LoadSceneMode, SceneActivationToken) Async method to load the scenes by name. If a scene operation is in progress, no action will be taken. Declaration public Task LoadContent(IEnumerable<string> scenesToLoad, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description IEnumerable < String > scenesToLoad Names of content scenes to load. Invalid scenes will be ignored. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadContent(String, LoadSceneMode, SceneActivationToken) Async method to load a single scene by name. If a scene operation is in progress, no action will be taken. Declaration public Task LoadContent(string sceneToLoad, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description String sceneToLoad Name of content scene to load. Invalid scenes will be ignored. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadContentByTag(String, LoadSceneMode, SceneActivationToken) Async method to load content scenes by tag. All scenes with the supplied tag will be loaded. If no scenes with this tag are found, no action will be taken. If a scene operation is in progress, no action will be taken. Declaration public Task LoadContentByTag(string tag, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description String tag Scene tag. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadNextContent(Boolean, LoadSceneMode, SceneActivationToken) Loads the next content scene according to build index. Uses the last-loaded content scene as previous build index. If no next content exists, and wrap is false, no action is taken. Use NextContentExists to verify that this operation is possible (if not using wrap). Declaration public Task LoadNextContent(bool wrap = false, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description Boolean wrap If true, if the current scene is the LAST content scene, the FIRST content scene will be loaded. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task LoadPrevContent(Boolean, LoadSceneMode, SceneActivationToken) Loads the previous content scene according to build index. Uses the loaded content scene with the smallest build index as previous build index. If no previous content exists, and wrap is false, no action is taken. Use PrevContentExists to verify that this operation is possible (if not using wrap). Declaration public Task LoadPrevContent(bool wrap = false, LoadSceneMode mode = null, SceneActivationToken activationToken = null) Parameters Type Name Description Boolean wrap If true, if the current scene is the FIRST content scene, the LAST content scene will be loaded. LoadSceneMode mode Additive mode will load the content additively. Single mode will first unload all loaded content scenes first. SceneActivationToken activationToken Optional token for manual scene activation. Useful for loading screens and multiplayer. If not null, operation will wait until activationToken's AllowSceneActivation value is true before activating scene objects. Returns Type Description Task Task SetLightingScene(String, LightingSceneTransitionType, Single) Sets the current lighting scene. The lighting scene determines ambient light and skybox settings. It can optionally contain light objects. If the lighting scene is already loaded, no action will be taken. If a lighting scene transition is in progress, request will be queued and executed when the transition is complete. Declaration public void SetLightingScene(string newLightingSceneName, LightingSceneTransitionType transitionType = LightingSceneTransitionType.None, float transitionDuration = 1F) Parameters Type Name Description String newLightingSceneName LightingSceneTransitionType transitionType The transition type to use. See LightingSceneTransitionType for information about each transition type. Single transitionDuration The duration of the transition (if not None). UnloadContent(IEnumerable<String>) Async method to unload scenes by name. If a scene is not loaded, it will be ignored. If a scene operation is in progress, no action will be taken. Declaration public Task UnloadContent(IEnumerable<string> scenesToUnload) Parameters Type Name Description IEnumerable < String > scenesToUnload Returns Type Description Task Task UnloadContent(String) Async method to unload a single scene by name. If the scene is not loaded, no action will be taken. If a scene operation is in progress, no action will be taken. Declaration public Task UnloadContent(string sceneToUnload) Parameters Type Name Description String sceneToUnload Returns Type Description Task Task UnloadContentByTag(String) Async method to unload scenes by name. If a scene is not loaded, it will be ignored. If a scene operation is in progress, no action will be taken. Declaration public Task UnloadContentByTag(string tag) Parameters Type Name Description String tag Scene tag Returns Type Description Task Task Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Implements IMixedRealitySceneSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer IMixedRealitySceneSystemEditor"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSystem.html",
    "title": "Interface IMixedRealityInputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputSystem Manager interface for a Input system in the Mixed Reality Toolkit All replacement systems for providing Input System functionality should derive from this interface Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputSystem : IMixedRealityEventSystem, IMixedRealityService, IDisposable Properties DetectedControllers List of IMixedRealityController s currently detected by the input manager. Declaration HashSet<IMixedRealityController> DetectedControllers { get; } Property Value Type Description HashSet < IMixedRealityController > Remarks This property is similar to DetectedInputSources , as this is a subset of those IMixedRealityInputSource s in that list. DetectedInputSources List of the Interaction Input Sources as detected by the input manager like hands or motion controllers. Declaration HashSet<IMixedRealityInputSource> DetectedInputSources { get; } Property Value Type Description HashSet < IMixedRealityInputSource > EyeGazeProvider The current Eye Gaze Provider that's been implemented by this Input System. Declaration IMixedRealityEyeGazeProvider EyeGazeProvider { get; } Property Value Type Description IMixedRealityEyeGazeProvider FocusProvider The current Focus Provider that's been implemented by this Input System. Declaration IMixedRealityFocusProvider FocusProvider { get; } Property Value Type Description IMixedRealityFocusProvider GazeProvider The current Gaze Provider that's been implemented by this Input System. Declaration IMixedRealityGazeProvider GazeProvider { get; } Property Value Type Description IMixedRealityGazeProvider InputSystemProfile Typed representation of the ConfigurationProfile property. Declaration MixedRealityInputSystemProfile InputSystemProfile { get; } Property Value Type Description MixedRealityInputSystemProfile IsInputEnabled Indicates if input is currently enabled or not. Declaration bool IsInputEnabled { get; } Property Value Type Description Boolean RaycastProvider The current Raycast Provider that's been implemented by this Input System. Declaration IMixedRealityRaycastProvider RaycastProvider { get; } Property Value Type Description IMixedRealityRaycastProvider Methods ClearFallbackInputStack() Clear all fallback input handlers off the stack. Declaration void ClearFallbackInputStack() ClearInputDisableStack() Clear the input disable stack, which will immediately re-enable input. Declaration void ClearInputDisableStack() ClearModalInputStack() Clear all modal input handlers off the stack. Declaration void ClearModalInputStack() GenerateNewSourceId() Generates a new unique input source id. Declaration uint GenerateNewSourceId() Returns Type Description UInt32 a new unique Id for the input source. Remarks All Input Sources are required to call this method in their constructor or initialization. PopFallbackInputHandler() Remove the last game object from the fallback input stack. Declaration void PopFallbackInputHandler() PopInputDisable() Pop disabled input state. When the last disabled state is popped off the stack input will be re-enabled. Declaration void PopInputDisable() PopModalInputHandler() Remove the last game object from the modal input stack. Declaration void PopModalInputHandler() PushFallbackInputHandler(GameObject) Push a game object into the fallback input stack. Any input handlers on the game object are given input events when no modal or focused objects consume the event. Declaration void PushFallbackInputHandler(GameObject inputHandler) Parameters Type Name Description GameObject inputHandler The input handler to push PushInputDisable() Push a disabled input state onto the Input System. While input is disabled no events will be sent out and the cursor displays a waiting animation. Declaration void PushInputDisable() PushModalInputHandler(GameObject) Push a game object into the modal input stack. Any input handlers on the game object are given priority to input events before any focused objects. Declaration void PushModalInputHandler(GameObject inputHandler) Parameters Type Name Description GameObject inputHandler The input handler to push RaiseDictationComplete(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationComplete(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseDictationError(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationError(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseDictationHypothesis(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationHypothesis(IMixedRealityInputSource source, string dictationHypothesis, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationHypothesis AudioClip dictationAudioClip RaiseDictationResult(IMixedRealityInputSource, String, AudioClip) Declaration void RaiseDictationResult(IMixedRealityInputSource source, string dictationResult, AudioClip dictationAudioClip = null) Parameters Type Name Description IMixedRealityInputSource source String dictationResult AudioClip dictationAudioClip RaiseFloatInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Single) Raise Float Input Changed. Declaration void RaiseFloatInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, float inputValue) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Single inputValue RaiseFocusChanged(IMixedRealityPointer, GameObject, GameObject) Raise the focus changed event. Declaration void RaiseFocusChanged(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that the focus change event is raised on. GameObject oldFocusedObject The old focused object. GameObject newFocusedObject The new focused object. RaiseFocusEnter(IMixedRealityPointer, GameObject) Raise the focus enter event. Declaration void RaiseFocusEnter(IMixedRealityPointer pointer, GameObject focusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that has focus. GameObject focusedObject The GameObject that the pointer has entered focus on. RaiseFocusExit(IMixedRealityPointer, GameObject) Raise the focus exit event. Declaration void RaiseFocusExit(IMixedRealityPointer pointer, GameObject unfocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that has lost focus. GameObject unfocusedObject The GameObject that the pointer has exited focus on. RaiseGestureCanceled(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Canceled Event. Declaration void RaiseGestureCanceled(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, MixedRealityPose) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action MixedRealityPose inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Quaternion) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Quaternion inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Quaternion inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Vector2) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Vector2 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector2 inputData RaiseGestureCompleted(IMixedRealityController, MixedRealityInputAction, Vector3) Raise the Gesture Completed Event. Declaration void RaiseGestureCompleted(IMixedRealityController controller, MixedRealityInputAction action, Vector3 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector3 inputData RaiseGestureStarted(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Started Event. Declaration void RaiseGestureStarted(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, MixedRealityPose) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action MixedRealityPose inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Quaternion) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Quaternion inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Quaternion inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Vector2) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Vector2 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector2 inputData RaiseGestureUpdated(IMixedRealityController, MixedRealityInputAction, Vector3) Raise the Gesture Updated Event. Declaration void RaiseGestureUpdated(IMixedRealityController controller, MixedRealityInputAction action, Vector3 inputData) Parameters Type Name Description IMixedRealityController controller MixedRealityInputAction action Vector3 inputData RaiseHandJointsUpdated(IMixedRealityInputSource, Handedness, IDictionary<TrackedHandJoint, MixedRealityPose>) Notify system that articulated hand joint info has been updated Declaration void RaiseHandJointsUpdated(IMixedRealityInputSource source, Handedness handedness, IDictionary<TrackedHandJoint, MixedRealityPose> jointPoses) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness IDictionary < TrackedHandJoint , MixedRealityPose > jointPoses RaiseHandMeshUpdated(IMixedRealityInputSource, Handedness, HandMeshInfo) Notify system that articulated hand mesh has been updated Declaration void RaiseHandMeshUpdated(IMixedRealityInputSource source, Handedness handedness, HandMeshInfo handMeshInfo) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness HandMeshInfo handMeshInfo RaiseOnInputDown(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise the input down event. Declaration void RaiseOnInputDown(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnInputUp(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Raise the input up event. Declaration void RaiseOnInputUp(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction RaiseOnTouchCompleted(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) Declaration void RaiseOnTouchCompleted(IMixedRealityInputSource source, IMixedRealityController controller, Handedness handedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Handedness handedness Vector3 touchPoint RaiseOnTouchStarted(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) Declaration void RaiseOnTouchStarted(IMixedRealityInputSource source, IMixedRealityController controller, Handedness handedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Handedness handedness Vector3 touchPoint RaiseOnTouchUpdated(IMixedRealityInputSource, IMixedRealityController, Handedness, Vector3) Declaration void RaiseOnTouchUpdated(IMixedRealityInputSource source, IMixedRealityController controller, Handedness handedness, Vector3 touchPoint) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Handedness handedness Vector3 touchPoint RaisePointerClicked(IMixedRealityPointer, MixedRealityInputAction, Int32, Handedness, IMixedRealityInputSource) Raise the pointer clicked event. Declaration void RaisePointerClicked(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, int count, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Int32 count Handedness handedness IMixedRealityInputSource inputSource RaisePointerDown(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer down event. Declaration void RaisePointerDown(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer The pointer where the event originates. MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePointerDragged(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer dragged event. Declaration void RaisePointerDragged(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer The pointer where the event originates. MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePointerUp(IMixedRealityPointer, MixedRealityInputAction, Handedness, IMixedRealityInputSource) Raise the pointer up event. Declaration void RaisePointerUp(IMixedRealityPointer pointer, MixedRealityInputAction inputAction, Handedness handedness = null, IMixedRealityInputSource inputSource = null) Parameters Type Name Description IMixedRealityPointer pointer MixedRealityInputAction inputAction Handedness handedness IMixedRealityInputSource inputSource RaisePoseInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, MixedRealityPose) Raise the 6 degrees of freedom input event. Declaration void RaisePoseInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, MixedRealityPose inputData) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction MixedRealityPose inputData RaisePositionInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector2) Raise the 2 degrees of freedom input event. Declaration void RaisePositionInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Vector2 position) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Vector2 position RaisePositionInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Vector3) Raise the 3 degrees of freedom input event. Declaration void RaisePositionInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Vector3 position RaisePreFocusChanged(IMixedRealityPointer, GameObject, GameObject) Raise the pre-focus changed event. Declaration void RaisePreFocusChanged(IMixedRealityPointer pointer, GameObject oldFocusedObject, GameObject newFocusedObject) Parameters Type Name Description IMixedRealityPointer pointer The pointer that the focus change event is raised on. GameObject oldFocusedObject The old focused object. GameObject newFocusedObject The new focused object. Remarks This event is useful for doing logic before the focus changed event. RaiseRotationInputChanged(IMixedRealityInputSource, Handedness, MixedRealityInputAction, Quaternion) Raise the 3 degrees of freedom input event. Declaration void RaiseRotationInputChanged(IMixedRealityInputSource source, Handedness handedness, MixedRealityInputAction inputAction, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source Handedness handedness MixedRealityInputAction inputAction Quaternion rotation RaiseSourceDetected(IMixedRealityInputSource, IMixedRealityController) Raise the event that the Input Source was detected. Declaration void RaiseSourceDetected(IMixedRealityInputSource source, IMixedRealityController controller = null) Parameters Type Name Description IMixedRealityInputSource source The detected Input Source. IMixedRealityController controller RaiseSourceLost(IMixedRealityInputSource, IMixedRealityController) Raise the event that the Input Source was lost. Declaration void RaiseSourceLost(IMixedRealityInputSource source, IMixedRealityController controller = null) Parameters Type Name Description IMixedRealityInputSource source The lost Input Source. IMixedRealityController controller RaiseSourcePoseChanged(IMixedRealityInputSource, IMixedRealityController, MixedRealityPose) Raise the event that the Input Source position was changed. Declaration void RaiseSourcePoseChanged(IMixedRealityInputSource source, IMixedRealityController controller, MixedRealityPose position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller MixedRealityPose position RaiseSourcePositionChanged(IMixedRealityInputSource, IMixedRealityController, Vector2) Raise the event that the Input Source position was changed. Declaration void RaiseSourcePositionChanged(IMixedRealityInputSource source, IMixedRealityController controller, Vector2 position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Vector2 position RaiseSourcePositionChanged(IMixedRealityInputSource, IMixedRealityController, Vector3) Raise the event that the Input Source position was changed. Declaration void RaiseSourcePositionChanged(IMixedRealityInputSource source, IMixedRealityController controller, Vector3 position) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Vector3 position RaiseSourceRotationChanged(IMixedRealityInputSource, IMixedRealityController, Quaternion) Raise the event that the Input Source position was changed. Declaration void RaiseSourceRotationChanged(IMixedRealityInputSource source, IMixedRealityController controller, Quaternion rotation) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller Quaternion rotation RaiseSourceTrackingStateChanged(IMixedRealityInputSource, IMixedRealityController, TrackingState) Raise the event that the Input Source's tracking state has changed. Declaration void RaiseSourceTrackingStateChanged(IMixedRealityInputSource source, IMixedRealityController controller, TrackingState state) Parameters Type Name Description IMixedRealityInputSource source IMixedRealityController controller TrackingState state RaiseSpeechCommandRecognized(IMixedRealityInputSource, RecognitionConfidenceLevel, TimeSpan, DateTime, SpeechCommands) Declaration void RaiseSpeechCommandRecognized(IMixedRealityInputSource source, RecognitionConfidenceLevel confidence, TimeSpan phraseDuration, DateTime phraseStartTime, SpeechCommands command) Parameters Type Name Description IMixedRealityInputSource source RecognitionConfidenceLevel confidence TimeSpan phraseDuration DateTime phraseStartTime SpeechCommands command RequestNewGenericInputSource(String, IMixedRealityPointer[], InputSourceType) Declaration IMixedRealityInputSource RequestNewGenericInputSource(string name, IMixedRealityPointer[] pointers = null, InputSourceType sourceType = InputSourceType.Other) Parameters Type Name Description String name IMixedRealityPointer [] pointers InputSourceType sourceType Returns Type Description IMixedRealityInputSource Events InputDisabled Event that's raised when the Input is disabled. Declaration event Action InputDisabled Event Type Type Description Action InputEnabled Event that's raised when the Input is enabled. Declaration event Action InputEnabled Event Type Type Description Action"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityMousePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityMousePointer.html",
    "title": "Interface IMixedRealityMousePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityMousePointer Interface for handling mouse pointers. Inherited Members IMixedRealityPointer.Controller IMixedRealityPointer.PointerId IMixedRealityPointer.PointerName IMixedRealityPointer.InputSourceParent IMixedRealityPointer.BaseCursor IMixedRealityPointer.CursorModifier IMixedRealityPointer.IsInteractionEnabled IMixedRealityPointer.IsActive IMixedRealityPointer.IsFocusLocked IMixedRealityPointer.IsTargetPositionLockedOnFocusLock IMixedRealityPointer.Rays IMixedRealityPointer.PrioritizedLayerMasksOverride IMixedRealityPointer.FocusTarget IMixedRealityPointer.Result IMixedRealityPointer.SceneQueryType IMixedRealityPointer.SphereCastRadius IMixedRealityPointer.Position IMixedRealityPointer.Rotation IMixedRealityPointer.OnPreSceneQuery() IMixedRealityPointer.OnPostSceneQuery() IMixedRealityPointer.OnPreCurrentPointerTargetChange() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityMousePointer : IMixedRealityPointer, IEqualityComparer Properties HideCursorWhenInactive Should the mouse cursor be hidden when no active input is received? Declaration bool HideCursorWhenInactive { get; } Property Value Type Description Boolean HideTimeout How long should it take before the mouse cursor is hidden? Declaration float HideTimeout { get; } Property Value Type Description Single MovementThresholdToUnHide What is the movement threshold to reach before un-hiding mouse cursor? Declaration float MovementThresholdToUnHide { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityNearPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityNearPointer.html",
    "title": "Interface IMixedRealityNearPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityNearPointer Inherited Members IMixedRealityPointer.Controller IMixedRealityPointer.PointerId IMixedRealityPointer.PointerName IMixedRealityPointer.InputSourceParent IMixedRealityPointer.BaseCursor IMixedRealityPointer.CursorModifier IMixedRealityPointer.IsInteractionEnabled IMixedRealityPointer.IsActive IMixedRealityPointer.IsFocusLocked IMixedRealityPointer.IsTargetPositionLockedOnFocusLock IMixedRealityPointer.Rays IMixedRealityPointer.PrioritizedLayerMasksOverride IMixedRealityPointer.FocusTarget IMixedRealityPointer.Result IMixedRealityPointer.SceneQueryType IMixedRealityPointer.SphereCastRadius IMixedRealityPointer.Position IMixedRealityPointer.Rotation IMixedRealityPointer.OnPreSceneQuery() IMixedRealityPointer.OnPostSceneQuery() IMixedRealityPointer.OnPreCurrentPointerTargetChange() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityNearPointer : IMixedRealityPointer, IEqualityComparer Properties IsNearObject Returns true if the hand is near anything that's grabbable Currently performs a sphere cast in the direction of the hand ray. Currently anything that has a collider is considered \"Grabbable\" Eventually we need to filter based on things that can respond to grab events. Declaration bool IsNearObject { get; } Property Value Type Description Boolean Methods TryGetDistanceToNearestSurface(out Single) Near pointers often interact with surfaces. This method provides a mechanism to get the distance to the closest surface the near pointer is interacting with. Declaration bool TryGetDistanceToNearestSurface(out float distance) Parameters Type Name Description Single distance Out parameter filled with the distance along the surface normal from the surface to the pointer if available, otherwise 0.0f. Returns Type Description Boolean True if a distance was retrieved, false if not. TryGetNearGraspPoint(out Vector3) For near pointer we may want to draw a tether between the pointer and the object. The visual grasp point (average of index and thumb) may actually be different from the pointer position (the palm). This method provides a mechanism to get the visual grasp point. NOTE: Not all near pointers have a grasp point (for example a poke pointer). Declaration bool TryGetNearGraspPoint(out Vector3 position) Parameters Type Name Description Vector3 position Returns Type Description Boolean True if a grasp point was retrieved, false if not. TryGetNormalToNearestSurface(out Vector3) Near pointers often interact with surfaces. This method provides a mechanism to get the normal of the closest surface the near pointer is interacting with. Declaration bool TryGetNormalToNearestSurface(out Vector3 normal) Parameters Type Name Description Vector3 normal Out parameter filled with the surface normal if available, otherwise Vector3.zero . Returns Type Description Boolean True if a normal was retrieved, false if not."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointer.html",
    "title": "Interface IMixedRealityPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPointer Interface for handling pointers. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPointer : IEqualityComparer Properties BaseCursor The pointer's cursor. Declaration IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller The pointer's current controller reference. Declaration IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController CursorModifier The currently active cursor modifier. Declaration ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier FocusTarget The currently focused target. Declaration IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent This pointer's input source parent. Declaration IMixedRealityInputSource InputSourceParent { get; } Property Value Type Description IMixedRealityInputSource IsActive Controls whether the pointer dispatches input.. Declaration bool IsActive { get; set; } Property Value Type Description Boolean IsFocusLocked Is the focus for this pointer currently locked? Declaration bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration bool IsInteractionEnabled { get; } Property Value Type Description Boolean IsTargetPositionLockedOnFocusLock Specifies whether the pointer's target position (cursor) is locked to the target object when focus is locked. Declaration bool IsTargetPositionLockedOnFocusLock { get; set; } Property Value Type Description Boolean PointerId This pointer's id. Declaration uint PointerId { get; } Property Value Type Description UInt32 PointerName This pointer's name. Declaration string PointerName { get; set; } Property Value Type Description String Position Pointer position. Declaration Vector3 Position { get; } Property Value Type Description Vector3 PrioritizedLayerMasksOverride The physics layers to use when performing scene queries. Declaration LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] Remarks If set, will override the IMixedRealityInputSystem 's default scene query layer mask array. Examples Allow the pointer to hit SR, but first prioritize any DefaultRaycastLayers (potentially behind SR) int sr = LayerMask.GetMask(\"SR\"); int nonSR = Physics.DefaultRaycastLayers &amp; ~sr; IMixedRealityPointer.PrioritizedLayerMasksOverride = new LayerMask[] { nonSR, sr }; Rays The scene query rays. Declaration RayStep[] Rays { get; } Property Value Type Description RayStep [] Result The scene query pointer result. Declaration IPointerResult Result { get; set; } Property Value Type Description IPointerResult Rotation Pointer rotation. Declaration Quaternion Rotation { get; } Property Value Type Description Quaternion SceneQueryType The type of physics scene query to use. Declaration SceneQueryType SceneQueryType { get; set; } Property Value Type Description SceneQueryType SphereCastRadius The radius to use when SceneQueryType is set to Sphere or SphereColliders. Declaration float SphereCastRadius { get; set; } Property Value Type Description Single Methods OnPostSceneQuery() Called after performing the scene query. Declaration void OnPostSceneQuery() OnPreCurrentPointerTargetChange() Called during the scene query just before the current pointer target changes. Declaration void OnPreCurrentPointerTargetChange() OnPreSceneQuery() Called before performing the scene query. Declaration void OnPreSceneQuery()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointerHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityPointerHandler.html",
    "title": "Interface IMixedRealityPointerHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityPointerHandler Interface to implement to react to simple pointer input. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityPointerHandler : IEventSystemHandler Methods OnPointerClicked(MixedRealityPointerEventData) When a pointer clicked event is raised, this method is used to pass along the event data to the input handler. Declaration void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) When a pointer down event is raised, this method is used to pass along the event data to the input handler. Declaration void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Called every frame a pointer is down. Can be used to implement drag-like behaviors. Declaration void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) When a pointer up event is raised, this method is used to pass along the event data to the input handler. Declaration void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationWindow.html",
    "title": "Class InputSimulationWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSimulationWindow Tools for simulating and recording input as well as playing back input animation in the Unity editor. Inheritance Object InputSimulationWindow Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputSimulationWindow : EditorWindow Properties Mode Declaration public InputSimulationWindow.ToolMode Mode { get; } Property Value Type Description InputSimulationWindow.ToolMode"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSourceType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSourceType.html",
    "title": "Enum InputSourceType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InputSourceType The InputSourceType defines the types of input sources. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum InputSourceType Fields Name Description Controller Eyes Hand Head Other Voice"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSystemGlobalHandlerListener.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSystemGlobalHandlerListener.html",
    "title": "Class InputSystemGlobalHandlerListener | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSystemGlobalHandlerListener This component ensures that input events are forwarded to this component when focus or gaze is not required. Inheritance Object InputSystemGlobalHandlerListener BaseInputHandler ControllerPoseSynchronizer EyeTrackingTarget GazeProvider GGVPointer Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class InputSystemGlobalHandlerListener : MonoBehaviour Methods EnsureInputSystemValid() A task that will only complete when the input system has in a valid state. Declaration protected Task EnsureInputSystemValid() Returns Type Description Task Remarks It's possible for this object to have been destroyed after the await, which implies that callers should check that this != null after awaiting this task. OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() RegisterHandlers() Overload this method to specify, which global events component wants to listen to. Use RegisterHandler API of InputSystem Declaration protected abstract void RegisterHandlers() Start() Declaration protected virtual void Start() UnregisterHandlers() Overload this method to specify, which global events component should stop listening to. Use UnregisterHandler API of InputSystem Declaration protected abstract void UnregisterHandlers()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSystemGlobalListener.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSystemGlobalListener.html",
    "title": "Class InputSystemGlobalListener | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSystemGlobalListener This component ensures that all input events are forwarded to this GameObject when focus or gaze is not required. Inheritance Object InputSystemGlobalListener Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputSystemGlobalListener : MonoBehaviour Methods EnsureInputSystemValid() A task that will only complete when the input system has in a valid state. Declaration protected Task EnsureInputSystemValid() Returns Type Description Task Remarks It's possible for this object to have been destroyed after the await, which implies that callers should check that this != null after awaiting this task. OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() Start() Declaration protected virtual void Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InteractiveMeshCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InteractiveMeshCursor.html",
    "title": "Class InteractiveMeshCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractiveMeshCursor A cursor that looks and acts more like the shell cursor. A two part cursor with visual feedback for all cursor states Inheritance Object BaseCursor InteractiveMeshCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseCursor.CursorState BaseCursor.CursorContext BaseCursor.SurfaceCursorDistance BaseCursor.UseUnscaledTime BaseCursor.PositionLerpTime BaseCursor.ScaleLerpTime BaseCursor.RotationLerpTime BaseCursor.LookRotationBlend BaseCursor.ResizeCursorWithDistance BaseCursor.CursorAngularScale BaseCursor.CursorAngularSize BaseCursor.PrimaryCursorVisual BaseCursor.IsSourceDetected BaseCursor.SourceDownIds BaseCursor.IsPointerDown BaseCursor.TargetedObject BaseCursor.VisibleSourcesCount BaseCursor.targetPosition BaseCursor.targetScale BaseCursor.targetRotation BaseCursor.Pointer BaseCursor.IsPointerValid BaseCursor.DefaultCursorDistance BaseCursor.Position BaseCursor.Rotation BaseCursor.LocalScale BaseCursor.Destroy() BaseCursor.IsVisible BaseCursor.SetVisibilityOnSourceDetected BaseCursor.GameObjectReference BaseCursor.OnSourceDetected(SourceStateEventData) BaseCursor.OnSourceLost(SourceStateEventData) BaseCursor.OnBeforeFocusChange(FocusEventData) BaseCursor.OnFocusChanged(FocusEventData) BaseCursor.OnPointerDown(MixedRealityPointerEventData) BaseCursor.OnPointerDragged(MixedRealityPointerEventData) BaseCursor.OnPointerClicked(MixedRealityPointerEventData) BaseCursor.OnPointerUp(MixedRealityPointerEventData) BaseCursor.Start() BaseCursor.OnEnable() BaseCursor.OnDisable() BaseCursor.RegisterManagers() BaseCursor.UnregisterManagers() BaseCursor.LerpToTargetTransform() BaseCursor.SnapToTargetTransform() BaseCursor.OnInputDisabled() BaseCursor.OnInputEnabled() BaseCursor.CheckCursorState() BaseCursor.CheckCursorContext() BaseCursor.OnCursorContextChange(CursorContextEnum) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InteractiveMeshCursor : BaseCursor, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Methods OnCursorStateChange(CursorStateEnum) Decide which element (ring or dot) should be visible and at what scale Declaration public override void OnCursorStateChange(CursorStateEnum state) Parameters Type Name Description CursorStateEnum state Overrides BaseCursor.OnCursorStateChange(CursorStateEnum) SetVisibility(Boolean) override the base class for custom visibility Declaration public override void SetVisibility(bool visible) Parameters Type Name Description Boolean visible Overrides BaseCursor.SetVisibility(Boolean) UpdateCursorTransform() scale the cursor elements Declaration protected override void UpdateCursorTransform() Overrides BaseCursor.UpdateCursorTransform() Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IPointerPreferences.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IPointerPreferences.html",
    "title": "Interface IPointerPreferences | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IPointerPreferences Provides interface for getting and setting behaviors and possible other settings for pointers in the input system. Behaviors are described based on pointer type and input type, not per pointer. This is to ensure that new pointers that appear maintain consistent behavior. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IPointerPreferences Properties GazePointerBehavior Pointer behavior for the gaze pointer. We make gaze pointer unique because the internal gaze pointer actually cannot be referenced from here since it's an internal class. Declaration PointerBehavior GazePointerBehavior { get; set; } Property Value Type Description PointerBehavior Methods GetPointerBehavior(IMixedRealityPointer) Gets the PointerBehavior for a given pointer Declaration PointerBehavior GetPointerBehavior(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Returns Type Description PointerBehavior GetPointerBehavior<T>(Handedness, InputSourceType) Gets the PointerBehavior for a given pointer type, handedness, and input type Declaration PointerBehavior GetPointerBehavior<T>(Handedness handedness, InputSourceType sourceType) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Specify Handedness.Any to apply to all handedness, or specify a specific handedness to just disable, right, left. InputSourceType sourceType Allows specification of pointer behavior per input source, so that pointers can be disabled for hands but not controllers, and vice versa. Returns Type Description PointerBehavior Type Parameters Name Description T All pointers that are of this type, or a subclass of this type, will have the given behavior SetPointerBehavior<T>(Handedness, InputSourceType, PointerBehavior) Sets the PointerBehavior for a given pointer type, handedness, and input type Declaration void SetPointerBehavior<T>(Handedness handedness, InputSourceType inputType, PointerBehavior pointerBehavior) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Specify Handedness.Any to apply to all handedness, or specify a specific handedness to just disable, right, left. InputSourceType inputType PointerBehavior pointerBehavior Type Parameters Name Description T All pointers that are of this type, or a subclass of this type, will have the given behavior"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IPointerResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IPointerResult.html",
    "title": "Interface IPointerResult | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IPointerResult Interface defining a pointer result. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IPointerResult Properties CurrentPointerTarget The current pointer's target GameObject Declaration GameObject CurrentPointerTarget { get; } Property Value Type Description GameObject Details Details about the currently focused GameObject . Declaration FocusDetails Details { get; } Property Value Type Description FocusDetails PreviousPointerTarget The previous pointer target. Declaration GameObject PreviousPointerTarget { get; } Property Value Type Description GameObject RayStepIndex The index of the step that produced the last raycast hit, 0 when no raycast hit. Declaration int RayStepIndex { get; } Property Value Type Description Int32 StartPoint The starting point of the Pointer RaySteps. Declaration Vector3 StartPoint { get; } Property Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeyBinding.KeyType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeyBinding.KeyType.html",
    "title": "Enum KeyBinding.KeyType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum KeyBinding.KeyType The type of value encoded in the Microsoft.MixedReality.Toolkit.Input.KeyBinding.code property. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum KeyType Fields Name Description Key Mouse None"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeyBinding.MouseButton.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeyBinding.MouseButton.html",
    "title": "Enum KeyBinding.MouseButton | Mixed Reality Toolkit Documentation",
    "keywords": "Enum KeyBinding.MouseButton Enum for interpreting the mouse button integer index. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum MouseButton Fields Name Description Button3 Button4 Button5 Button6 Button7 Left Middle Right"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeyBinding.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeyBinding.html",
    "title": "Struct KeyBinding | Mixed Reality Toolkit Documentation",
    "keywords": "Struct KeyBinding Identifier of a key combination or mouse button for generic input binding. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Serializable] public struct KeyBinding Remarks This encodes either a KeyCode with optional modifiers or a mouse button index. Properties BindingType Type of input this binding maps to. Declaration public KeyBinding.KeyType BindingType { get; } Property Value Type Description KeyBinding.KeyType Methods FromKey(KeyCode) Create a binding for a keyboard key. Declaration public static KeyBinding FromKey(KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description KeyBinding FromMouseButton(KeyBinding.MouseButton) Create a binding for a mouse button. Declaration public static KeyBinding FromMouseButton(KeyBinding.MouseButton mouseButton) Parameters Type Name Description KeyBinding.MouseButton mouseButton Returns Type Description KeyBinding FromMouseButton(Int32) Create a binding for a mouse button. Declaration public static KeyBinding FromMouseButton(int mouseButton) Parameters Type Name Description Int32 mouseButton Returns Type Description KeyBinding ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString() TryGetKeyCode(out KeyCode) Try to convert the binding to a KeyCode. Declaration public bool TryGetKeyCode(out KeyCode keyCode) Parameters Type Name Description KeyCode keyCode Returns Type Description Boolean True if the binding is a keyboard key TryGetMouseButton(out KeyBinding.MouseButton) Try to convert the binding to a mouse button. Declaration public bool TryGetMouseButton(out KeyBinding.MouseButton mouseButton) Parameters Type Name Description KeyBinding.MouseButton mouseButton Returns Type Description Boolean True if the binding is a mouse button TryGetMouseButton(out Int32) Try to convert the binding to a mouse button. Declaration public bool TryGetMouseButton(out int mouseButton) Parameters Type Name Description Int32 mouseButton Returns Type Description Boolean True if the binding is a mouse button Unbound() Create a default empty binding. Declaration public static KeyBinding Unbound() Returns Type Description KeyBinding"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeyBindingInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeyBindingInspector.html",
    "title": "Class KeyBindingInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeyBindingInspector Inspector for KeyBindings. This shows a simple dropdown list for selecting a binding, as well as a button for binding keys by pressing them. Inheritance Object KeyBindingInspector Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class KeyBindingInspector : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeyBindingPopupWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeyBindingPopupWindow.html",
    "title": "Class KeyBindingPopupWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeyBindingPopupWindow Utility window that listens to input events to set a key binding. Pressing a key or mouse button will define the binding and then immediately close the popup. Inheritance Object KeyBindingPopupWindow Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class KeyBindingPopupWindow : EditorWindow Remarks The shift keys don't raise input events on their own, so this popup does not work for shift keys. These have to be bound by selecting from the traditional dropdown list. Methods Show(SerializedProperty) Create a new popup. Declaration public static void Show(SerializedProperty keyBinding) Parameters Type Name Description SerializedProperty keyBinding"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeyInputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeyInputSystem.html",
    "title": "Class KeyInputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class KeyInputSystem Utility class to poll input for key bindings. Inheritance Object KeyInputSystem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public static class KeyInputSystem Methods GetKey(KeyBinding) Test if the key is currently pressed. Declaration public static bool GetKey(KeyBinding kb) Parameters Type Name Description KeyBinding kb Returns Type Description Boolean True if the bound key is currently pressed GetKeyDown(KeyBinding) Test if the key has been pressed since the last frame. Declaration public static bool GetKeyDown(KeyBinding kb) Parameters Type Name Description KeyBinding kb Returns Type Description Boolean True if the bound key was pressed since the last frame GetKeyUp(KeyBinding) Test if the key has been released since the last frame. Declaration public static bool GetKeyUp(KeyBinding kb) Parameters Type Name Description KeyBinding kb Returns Type Description Boolean True if the bound key was released since the last frame"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.KeywordAndResponse.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.KeywordAndResponse.html",
    "title": "Struct KeywordAndResponse | Mixed Reality Toolkit Documentation",
    "keywords": "Struct KeywordAndResponse Keyword/UnityEvent pair that ties voice input to UnityEvents wired up in the inspector. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct KeywordAndResponse Constructors KeywordAndResponse(String, UnityEvent) Constructor. Declaration public KeywordAndResponse(string keyword, UnityEvent response) Parameters Type Name Description String keyword The keyword to listen for. UnityEvent response The handler to be invoked when the keyword is recognized. Properties Keyword The keyword to listen for. Declaration public string Keyword { get; } Property Value Type Description String Response The handler to be invoked when the keyword is recognized. Declaration public UnityEvent Response { get; } Property Value Type Description UnityEvent"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.LinePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.LinePointer.html",
    "title": "Class LinePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class LinePointer A simple line pointer for drawing lines from the input source origin to the current pointer position. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer LinePointer ShellHandRayPointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityPointer IEqualityComparer Inherited Members BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.Start() BaseControllerPointer.Controller BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.Position BaseControllerPointer.Rotation BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() BaseControllerPointer.OnSourceLost(SourceStateEventData) BaseControllerPointer.OnInputUp(InputEventData) BaseControllerPointer.OnInputDown(InputEventData) ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class LinePointer : BaseControllerPointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityPointer, IEqualityComparer Fields LineCastResolution Declaration protected int LineCastResolution Field Value Type Description Int32 LineColorInvalid Declaration protected Gradient LineColorInvalid Field Value Type Description Gradient LineColorLockFocus Declaration protected Gradient LineColorLockFocus Field Value Type Description Gradient LineColorNoTarget Declaration protected Gradient LineColorNoTarget Field Value Type Description Gradient LineColorSelected Declaration protected Gradient LineColorSelected Field Value Type Description Gradient LineColorValid Declaration protected Gradient LineColorValid Field Value Type Description Gradient Properties IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration public override bool IsInteractionEnabled { get; } Property Value Type Description Boolean Overrides BaseControllerPointer.IsInteractionEnabled LineBase The Line Data Provider driving this pointer. Declaration public BaseMixedRealityLineDataProvider LineBase { get; } Property Value Type Description BaseMixedRealityLineDataProvider LineRenderers The current line renderers that this pointer is utilizing. Declaration public BaseMixedRealityLineRenderer[] LineRenderers { get; set; } Property Value Type Description BaseMixedRealityLineRenderer [] Remarks If no line renderers are specified, this array will be auto-populated on startup. Methods OnDisable() Declaration protected override void OnDisable() Overrides BaseControllerPointer.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides BaseControllerPointer.OnEnable() OnPostSceneQuery() Called after performing the scene query. Declaration public override void OnPostSceneQuery() Overrides BaseControllerPointer.OnPostSceneQuery() OnPreSceneQuery() Called before performing the scene query. Declaration public override void OnPreSceneQuery() Overrides BaseControllerPointer.OnPreSceneQuery() SetLinePoints(Vector3, Vector3, Single) Declaration protected virtual void SetLinePoints(Vector3 startPoint, Vector3 endPoint, float distance) Parameters Type Name Description Vector3 startPoint Vector3 endPoint Single distance Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ManualCameraControl.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ManualCameraControl.html",
    "title": "Class ManualCameraControl | Mixed Reality Toolkit Documentation",
    "keywords": "Class ManualCameraControl Class for manually controlling the camera in the Unity editor. Attach to the MainCamera object. Inheritance Object ManualCameraControl Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class ManualCameraControl Constructors ManualCameraControl(MixedRealityInputSimulationProfile) Declaration public ManualCameraControl(MixedRealityInputSimulationProfile _profile) Parameters Type Name Description MixedRealityInputSimulationProfile _profile Methods UpdateTransform(Transform, MouseDelta) Translate and rotate the camera transform based on keyboard and mouse input. Declaration public void UpdateTransform(Transform transform, MouseDelta mouseDelta) Parameters Type Name Description Transform transform MouseDelta mouseDelta"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityPointerProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityPointerProfile.html",
    "title": "Class MixedRealityPointerProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPointerProfile Configuration profile settings for setting up controller pointers. Inheritance Object BaseMixedRealityProfile MixedRealityPointerProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityPointerProfile : BaseMixedRealityProfile Properties DebugDrawPointingRayColors The colors to use when debugging pointer rays. Declaration public Color[] DebugDrawPointingRayColors { get; } Property Value Type Description Color [] DebugDrawPointingRays Toggle to enable or disable debug pointing rays. Declaration public bool DebugDrawPointingRays { get; } Property Value Type Description Boolean GazeCursorPrefab The gaze cursor prefab to use on the Gaze pointer. Declaration public GameObject GazeCursorPrefab { get; } Property Value Type Description GameObject GazeProviderType The concrete type of IMixedRealityGazeProvider to use. Declaration public SystemType GazeProviderType { get; } Property Value Type Description SystemType PointerMediator The concrete Pointer Mediator component to use. This is a component that mediates all pointers in system, disabling / enabling them based on the state of other pointers. Declaration public SystemType PointerMediator { get; } Property Value Type Description SystemType PointerOptions The Pointer options for this profile. Declaration public PointerOption[] PointerOptions { get; } Property Value Type Description PointerOption [] PointingExtent Maximum distance at which all pointers can collide with a GameObject, unless it has an override extent. Declaration public float PointingExtent { get; } Property Value Type Description Single PointingRaycastLayerMasks The LayerMasks, in prioritized order, that are used to determine the GazeTarget when raycasting. Declaration public LayerMask[] PointingRaycastLayerMasks { get; } Property Value Type Description LayerMask [] PrimaryPointerSelector Primary pointer selector implementation to use. This is used by the focus provider to choose the primary pointer. Declaration public SystemType PrimaryPointerSelector { get; } Property Value Type Description SystemType"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityRaycastHit.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityRaycastHit.html",
    "title": "Struct MixedRealityRaycastHit | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityRaycastHit The resulting hit information from an IMixedRealityRaycastProvider. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MixedRealityRaycastHit Constructors MixedRealityRaycastHit(Boolean, RaycastHit) Declaration public MixedRealityRaycastHit(bool raycastValid, RaycastHit hitInfo) Parameters Type Name Description Boolean raycastValid RaycastHit hitInfo Fields barycentricCoordinate Declaration public Vector3 barycentricCoordinate Field Value Type Description Vector3 collider Declaration public Collider collider Field Value Type Description Collider distance Declaration public float distance Field Value Type Description Single lightmapCoord Declaration public Vector2 lightmapCoord Field Value Type Description Vector2 normal Declaration public Vector3 normal Field Value Type Description Vector3 point Declaration public Vector3 point Field Value Type Description Vector3 raycastValid Declaration public bool raycastValid Field Value Type Description Boolean textureCoord Declaration public Vector2 textureCoord Field Value Type Description Vector2 textureCoord2 Declaration public Vector2 textureCoord2 Field Value Type Description Vector2 transform Declaration public Transform transform Field Value Type Description Transform triangleIndex Declaration public int triangleIndex Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealitySpeechCommandsProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealitySpeechCommandsProfile.html",
    "title": "Class MixedRealitySpeechCommandsProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpeechCommandsProfile Configuration profile settings for setting up and consuming Speech Commands. Inheritance Object BaseMixedRealityProfile MixedRealitySpeechCommandsProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpeechCommandsProfile : BaseMixedRealityProfile Properties SpeechCommands The list of Speech Commands users use in your application. Declaration public SpeechCommands[] SpeechCommands { get; } Property Value Type Description SpeechCommands [] SpeechRecognitionConfidenceLevel The speech recognizer's minimum confidence level setting that will raise the action. Declaration public RecognitionConfidenceLevel SpeechRecognitionConfidenceLevel { get; } Property Value Type Description RecognitionConfidenceLevel SpeechRecognizerStartBehavior The list of Speech Commands users use in your application. Declaration public AutoStartBehavior SpeechRecognizerStartBehavior { get; } Property Value Type Description AutoStartBehavior"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MouseDelta.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MouseDelta.html",
    "title": "Class MouseDelta | Mixed Reality Toolkit Documentation",
    "keywords": "Class MouseDelta Utility struct that provides mouse delta in pixels (screen space), normalized viewport coordinates, and world units. Inheritance Object MouseDelta Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MouseDelta Fields screenDelta Declaration public Vector3 screenDelta Field Value Type Description Vector3 viewportDelta Declaration public Vector3 viewportDelta Field Value Type Description Vector3 worldDelta Declaration public Vector3 worldDelta Field Value Type Description Vector3 Methods Reset() Resets all vector contents to zero vector values Declaration public void Reset()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MousePointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MousePointer.html",
    "title": "Class MousePointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MousePointer The MousePointer represents a mouse cursor in world space. It uses spherical movement around the camera. Its movement is bound to screenspace, but based in the delta movement of the computer mouse. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer BaseMousePointer MousePointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityMousePointer IMixedRealityPointer IEqualityComparer Inherited Members BaseMousePointer.timeoutTimer BaseMousePointer.isDisabled BaseMousePointer.HideCursorWhenInactive BaseMousePointer.MovementThresholdToUnHide BaseMousePointer.HideTimeout BaseMousePointer.IsInteractionEnabled BaseMousePointer.Controller BaseMousePointer.Position BaseMousePointer.OnSourceDetected(SourceStateEventData) BaseMousePointer.OnSourceLost(SourceStateEventData) BaseMousePointer.OnInputDown(InputEventData) BaseMousePointer.OnInputUp(InputEventData) BaseControllerPointer.DisableCursorOnStart BaseControllerPointer.raycastOrigin BaseControllerPointer.pointerAction BaseControllerPointer.IsSelectPressed BaseControllerPointer.HasSelectPressedOnce BaseControllerPointer.IsHoldPressed BaseControllerPointer.SetCursor(GameObject) BaseControllerPointer.OnEnable() BaseControllerPointer.OnDisable() BaseControllerPointer.PointerId BaseControllerPointer.PointerName BaseControllerPointer.InputSourceParent BaseControllerPointer.BaseCursor BaseControllerPointer.CursorModifier BaseControllerPointer.IsActive BaseControllerPointer.IsFocusLocked BaseControllerPointer.IsTargetPositionLockedOnFocusLock BaseControllerPointer.PointerExtent BaseControllerPointer.DefaultPointerExtent BaseControllerPointer.Rays BaseControllerPointer.PrioritizedLayerMasksOverride BaseControllerPointer.FocusTarget BaseControllerPointer.Result BaseControllerPointer.RayStabilizer BaseControllerPointer.SceneQueryType BaseControllerPointer.SphereCastRadius BaseControllerPointer.Rotation BaseControllerPointer.OnPostSceneQuery() BaseControllerPointer.OnPreCurrentPointerTargetChange() BaseControllerPointer.Equals(Object) BaseControllerPointer.GetHashCode() ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MousePointer : BaseMousePointer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityMousePointer, IMixedRealityPointer, IEqualityComparer Properties ControllerName Declaration protected override string ControllerName { get; } Property Value Type Description String Overrides BaseMousePointer.ControllerName Methods OnInputChanged(InputEventData<MixedRealityPose>) Declaration public override void OnInputChanged(InputEventData<MixedRealityPose> eventData) Parameters Type Name Description InputEventData < MixedRealityPose > eventData Overrides ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) OnInputChanged(InputEventData<Vector2>) Declaration public override void OnInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData Overrides ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) OnPreSceneQuery() Called before performing the scene query. Declaration public override void OnPreSceneQuery() Overrides BaseControllerPointer.OnPreSceneQuery() SetVisibility(Boolean) Declaration protected override void SetVisibility(bool visible) Parameters Type Name Description Boolean visible Overrides BaseMousePointer.SetVisibility(Boolean) Start() Declaration protected override void Start() Overrides BaseMousePointer.Start() Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityMousePointer IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MouseRotationProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MouseRotationProvider.html",
    "title": "Class MouseRotationProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class MouseRotationProvider Utility class to manage toggling of mouse rotation and associated features, such as cursor visibility/locking Inheritance Object MouseRotationProvider Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MouseRotationProvider Properties IsRotating True when rotation is currently active. Declaration public bool IsRotating { get; } Property Value Type Description Boolean Methods Update(KeyBinding, KeyBinding, Boolean) Start or stop rotation based on the key binding. Declaration public void Update(KeyBinding rotationKey, KeyBinding cancelRotationKey, bool toggle) Parameters Type Name Description KeyBinding rotationKey KeyBinding cancelRotationKey Boolean toggle Remarks Also manages shared features such as cursor visibility that can be activated by different rotation providers."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionGrabbable.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionGrabbable.html",
    "title": "Class NearInteractionGrabbable | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionGrabbable Add a NearInteractionGrabbable component to any GameObject that has a collidable on it in order to make that collidable near grabbable. Any IMixedRealityNearPointer will then dispatch pointer events to the closest near grabbable objects. Additionally, the near pointer will send focus enter and exit events when the decorated object is the closest object to the near pointer Inheritance Object NearInteractionGrabbable Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class NearInteractionGrabbable : MonoBehaviour Fields ShowTetherWhenManipulating Declaration public bool ShowTetherWhenManipulating Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchable.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchable.html",
    "title": "Class NearInteractionTouchable | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchable Add a NearInteractionTouchable to your scene and configure a touchable surface in order to get PointerDown and PointerUp events whenever a PokePointer touches this surface. Inheritance Object BaseNearInteractionTouchable NearInteractionTouchableSurface NearInteractionTouchable Inherited Members BaseNearInteractionTouchable.eventsToReceive BaseNearInteractionTouchable.EventsToReceive BaseNearInteractionTouchable.debounceThreshold BaseNearInteractionTouchable.DebounceThreshold Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class NearInteractionTouchable : NearInteractionTouchableSurface Fields bounds Declaration protected Vector2 bounds Field Value Type Description Vector2 localCenter Declaration protected Vector3 localCenter Field Value Type Description Vector3 localForward Declaration protected Vector3 localForward Field Value Type Description Vector3 localUp Declaration protected Vector3 localUp Field Value Type Description Vector3 Properties AreLocalVectorsOrthogonal Returns true if the LocalForward and LocalUp vectors are orthogonal. Declaration public bool AreLocalVectorsOrthogonal { get; } Property Value Type Description Boolean Remarks LocalRight is computed using the cross product and is always orthogonal to LocalForward and LocalUp. Bounds Bounds or size of the 2D NearInteractionTouchablePlane Declaration public override Vector2 Bounds { get; } Property Value Type Description Vector2 Overrides NearInteractionTouchableSurface.Bounds ColliderEnabled Check if the touchableCollider is enabled and in the gameObject hierarchy Declaration public bool ColliderEnabled { get; } Property Value Type Description Boolean Forward Forward direction of the gameObject Declaration public Vector3 Forward { get; } Property Value Type Description Vector3 LocalCenter Local space object center Declaration public override Vector3 LocalCenter { get; } Property Value Type Description Vector3 Overrides NearInteractionTouchableSurface.LocalCenter LocalForward Local space forward direction Declaration public Vector3 LocalForward { get; } Property Value Type Description Vector3 LocalPressDirection Forward direction of the NearInteractionTouchable plane, the press direction needs to face the camera. Declaration public override Vector3 LocalPressDirection { get; } Property Value Type Description Vector3 Overrides NearInteractionTouchableSurface.LocalPressDirection LocalRight Local space and gameObject right Declaration public Vector3 LocalRight { get; } Property Value Type Description Vector3 LocalUp Local space up direction Declaration public Vector3 LocalUp { get; } Property Value Type Description Vector3 TouchableCollider BoxCollider used to calculate bounds and local center, if not set before runtime the gameObjects's BoxCollider will be used by default Declaration public Collider TouchableCollider { get; } Property Value Type Description Collider Methods DistanceToTouchable(Vector3, out Vector3) Declaration public override float DistanceToTouchable(Vector3 samplePoint, out Vector3 normal) Parameters Type Name Description Vector3 samplePoint Vector3 normal Returns Type Description Single Overrides BaseNearInteractionTouchable.DistanceToTouchable(Vector3, out Vector3) OnValidate() Declaration protected override void OnValidate() Overrides BaseNearInteractionTouchable.OnValidate() SetBounds(Vector2) Set the size (bounds) of the 2D NearInteractionTouchable plane. Declaration public void SetBounds(Vector2 newBounds) Parameters Type Name Description Vector2 newBounds SetLocalCenter(Vector3) Set the position (center) of the NearInteractionTouchable plane relative to the gameObject. The position of the plane should be in front of the gameObject. Declaration public void SetLocalCenter(Vector3 newLocalCenter) Parameters Type Name Description Vector3 newLocalCenter SetLocalForward(Vector3) Set local forward direction and ensure that local up is perpendicular to the new local forward and local right direction. The forward position should be facing the camera. The direction is indicated in scene view by a white arrow in the center of the plane. Declaration public void SetLocalForward(Vector3 newLocalForward) Parameters Type Name Description Vector3 newLocalForward SetLocalUp(Vector3) Set new local up direction and ensure that local forward is perpendicular to the new local up and local right direction. Declaration public void SetLocalUp(Vector3 newLocalUp) Parameters Type Name Description Vector3 newLocalUp SetTouchableCollider(BoxCollider) Adjust the bounds, local center and local forward to match a given box collider. This method also changes the size of the box collider attached to the gameObject. Default Behavior: if touchableCollider is null at runtime, the object's box collider will be used to size and place the NearInteractionTouchable plane in front of the gameObject Declaration public void SetTouchableCollider(BoxCollider newCollider) Parameters Type Name Description BoxCollider newCollider"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableInspector.html",
    "title": "Class NearInteractionTouchableInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchableInspector Inheritance Object NearInteractionTouchableInspectorBase NearInteractionTouchableInspector Inherited Members NearInteractionTouchableInspectorBase.OnSceneGUI() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class NearInteractionTouchableInspector : NearInteractionTouchableInspectorBase Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableInspectorBase.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableInspectorBase.html",
    "title": "Class NearInteractionTouchableInspectorBase | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchableInspectorBase Inheritance Object NearInteractionTouchableInspectorBase NearInteractionTouchableInspector Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class NearInteractionTouchableInspectorBase : Editor Methods OnSceneGUI() Declaration protected virtual void OnSceneGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableSurface.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableSurface.html",
    "title": "Class NearInteractionTouchableSurface | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchableSurface A near interaction object which is a flat surface and can be pressed in one direction. Inheritance Object BaseNearInteractionTouchable NearInteractionTouchableSurface NearInteractionTouchable NearInteractionTouchableUnityUI Inherited Members BaseNearInteractionTouchable.eventsToReceive BaseNearInteractionTouchable.EventsToReceive BaseNearInteractionTouchable.debounceThreshold BaseNearInteractionTouchable.DebounceThreshold BaseNearInteractionTouchable.OnValidate() BaseNearInteractionTouchable.DistanceToTouchable(Vector3, Vector3) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class NearInteractionTouchableSurface : BaseNearInteractionTouchable Properties Bounds Bounds specify where touchable interactions can occur. They are local bounds on the plane specified by the LocalCenter and LocalPressDirection (as a normal). Declaration public abstract Vector2 Bounds { get; } Property Value Type Description Vector2 LocalCenter The local center point of interaction. This may be based on a collider position or Unity UI RectTransform. Declaration public abstract Vector3 LocalCenter { get; } Property Value Type Description Vector3 LocalPressDirection This is the direction that a user will press on this element. Declaration public abstract Vector3 LocalPressDirection { get; } Property Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableUnityUI.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableUnityUI.html",
    "title": "Class NearInteractionTouchableUnityUI | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchableUnityUI Use a Unity UI RectTransform as touchable surface. Inheritance Object BaseNearInteractionTouchable NearInteractionTouchableSurface NearInteractionTouchableUnityUI Inherited Members BaseNearInteractionTouchable.eventsToReceive BaseNearInteractionTouchable.EventsToReceive BaseNearInteractionTouchable.debounceThreshold BaseNearInteractionTouchable.DebounceThreshold BaseNearInteractionTouchable.OnValidate() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class NearInteractionTouchableUnityUI : NearInteractionTouchableSurface Constructors NearInteractionTouchableUnityUI() Declaration public NearInteractionTouchableUnityUI() Properties Bounds Declaration public override Vector2 Bounds { get; } Property Value Type Description Vector2 Overrides NearInteractionTouchableSurface.Bounds Instances Declaration public static IReadOnlyList<NearInteractionTouchableUnityUI> Instances { get; } Property Value Type Description IReadOnlyList < NearInteractionTouchableUnityUI > LocalCenter Declaration public override Vector3 LocalCenter { get; } Property Value Type Description Vector3 Overrides NearInteractionTouchableSurface.LocalCenter LocalPressDirection Declaration public override Vector3 LocalPressDirection { get; } Property Value Type Description Vector3 Overrides NearInteractionTouchableSurface.LocalPressDirection Methods DistanceToTouchable(Vector3, out Vector3) Declaration public override float DistanceToTouchable(Vector3 samplePoint, out Vector3 normal) Parameters Type Name Description Vector3 samplePoint Vector3 normal Returns Type Description Single Overrides BaseNearInteractionTouchable.DistanceToTouchable(Vector3, out Vector3) OnDisable() Declaration protected void OnDisable() OnEnable() Declaration protected void OnEnable()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableVolume.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.NearInteractionTouchableVolume.html",
    "title": "Class NearInteractionTouchableVolume | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchableVolume Add a NearInteractionTouchableVolume to your scene and configure a touchable volume in order to get PointerDown and PointerUp events whenever a PokePointer collides with this volume. Inheritance Object BaseNearInteractionTouchable NearInteractionTouchableVolume Inherited Members BaseNearInteractionTouchable.eventsToReceive BaseNearInteractionTouchable.EventsToReceive BaseNearInteractionTouchable.debounceThreshold BaseNearInteractionTouchable.DebounceThreshold Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class NearInteractionTouchableVolume : BaseNearInteractionTouchable Properties ColliderEnabled Declaration public bool ColliderEnabled { get; } Property Value Type Description Boolean TouchableCollider Declaration public Collider TouchableCollider { get; } Property Value Type Description Collider Methods DistanceToTouchable(Vector3, out Vector3) Declaration public override float DistanceToTouchable(Vector3 samplePoint, out Vector3 normal) Parameters Type Name Description Vector3 samplePoint Vector3 normal Returns Type Description Single Overrides BaseNearInteractionTouchable.DistanceToTouchable(Vector3, out Vector3) OnValidate() Declaration protected override void OnValidate() Overrides BaseNearInteractionTouchable.OnValidate()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ObjectCursor.ObjectCursorDatum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ObjectCursor.ObjectCursorDatum.html",
    "title": "Struct ObjectCursor.ObjectCursorDatum | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ObjectCursor.ObjectCursorDatum Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct ObjectCursorDatum Fields CursorObject Declaration public GameObject CursorObject Field Value Type Description GameObject CursorState Declaration public CursorStateEnum CursorState Field Value Type Description CursorStateEnum Name Declaration public string Name Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ObjectCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ObjectCursor.html",
    "title": "Class ObjectCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class ObjectCursor The object cursor can switch between different game objects based on its state. It simply links the game object to set to active with its associated cursor state. Inheritance Object BaseCursor ObjectCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Inherited Members BaseCursor.CursorState BaseCursor.CursorContext BaseCursor.SurfaceCursorDistance BaseCursor.UseUnscaledTime BaseCursor.PositionLerpTime BaseCursor.ScaleLerpTime BaseCursor.RotationLerpTime BaseCursor.LookRotationBlend BaseCursor.ResizeCursorWithDistance BaseCursor.CursorAngularScale BaseCursor.CursorAngularSize BaseCursor.PrimaryCursorVisual BaseCursor.IsSourceDetected BaseCursor.SourceDownIds BaseCursor.IsPointerDown BaseCursor.TargetedObject BaseCursor.VisibleSourcesCount BaseCursor.targetPosition BaseCursor.targetScale BaseCursor.targetRotation BaseCursor.Pointer BaseCursor.IsPointerValid BaseCursor.DefaultCursorDistance BaseCursor.Position BaseCursor.Rotation BaseCursor.LocalScale BaseCursor.SetVisibility(Boolean) BaseCursor.Destroy() BaseCursor.IsVisible BaseCursor.SetVisibilityOnSourceDetected BaseCursor.GameObjectReference BaseCursor.OnSourceDetected(SourceStateEventData) BaseCursor.OnSourceLost(SourceStateEventData) BaseCursor.OnBeforeFocusChange(FocusEventData) BaseCursor.OnFocusChanged(FocusEventData) BaseCursor.OnPointerDown(MixedRealityPointerEventData) BaseCursor.OnPointerDragged(MixedRealityPointerEventData) BaseCursor.OnPointerClicked(MixedRealityPointerEventData) BaseCursor.OnPointerUp(MixedRealityPointerEventData) BaseCursor.Start() BaseCursor.OnDisable() BaseCursor.RegisterManagers() BaseCursor.UnregisterManagers() BaseCursor.UpdateCursorTransform() BaseCursor.LerpToTargetTransform() BaseCursor.SnapToTargetTransform() BaseCursor.OnInputDisabled() BaseCursor.OnInputEnabled() BaseCursor.CheckCursorState() BaseCursor.CheckCursorContext() BaseCursor.OnCursorContextChange(CursorContextEnum) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class ObjectCursor : BaseCursor, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Fields CursorStateData Declaration public ObjectCursor.ObjectCursorDatum[] CursorStateData Field Value Type Description ObjectCursor.ObjectCursorDatum [] ParentTransform Sprite renderer to change. If null find one in children Declaration public Transform ParentTransform Field Value Type Description Transform Methods OnCursorStateChange(CursorStateEnum) Override OnCursorState change to set the correct animation state for the cursor Declaration public override void OnCursorStateChange(CursorStateEnum state) Parameters Type Name Description CursorStateEnum state Overrides BaseCursor.OnCursorStateChange(CursorStateEnum) OnEnable() On enable look for a sprite renderer on children Declaration protected override void OnEnable() Overrides BaseCursor.OnEnable() Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.PointerBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.PointerBehavior.html",
    "title": "Enum PointerBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PointerBehavior Specifies how a pointer in MRTK's default input system behaves. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum PointerBehavior Fields Name Description AlwaysOff Pointer is always off, regardless of what other pointers are active. AlwaysOn Pointer is always on, regardless of what other pointers are active. Default Pointer active state is managed by MRTK input system. If it is a near pointer (grab, poke), it will be always enabled. If it is not a near pointer, it will get disabled if any near pointer on the same hand is active. This is what allows rays to turn off when a hand is near a grabbable."
  },
  "api/Microsoft.MixedReality.Toolkit.InterpolationMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.InterpolationMode.html",
    "title": "Enum InterpolationMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InterpolationMode Default options for how to distribute interpolated points in a line renderer Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum InterpolationMode Fields Name Description FromCurve Create steps based on total length of line + animation curve FromLength Create steps based on total length of line + manually specified length FromSteps Specify the number of interpolation steps manually"
  },
  "api/Microsoft.MixedReality.Toolkit.InterpolationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.InterpolationType.html",
    "title": "Enum InterpolationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InterpolationType Defines the type of interpolation to use when calculating a spline. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum InterpolationType Fields Name Description Bezier CatmullRom Hermite"
  },
  "api/Microsoft.MixedReality.Toolkit.LayerExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.LayerExtensions.html",
    "title": "Class LayerExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class LayerExtensions Extension methods for Unity's LayerMask struct Inheritance Object LayerExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class LayerExtensions Fields InvalidLayerId The Invalid Layer Id. Declaration public const int InvalidLayerId = -1 Field Value Type Description Int32 Methods Combine(LayerMask[]) Combines provided layers into a single layer mask. Declaration public static int Combine(this LayerMask[] layerMaskList) Parameters Type Name Description LayerMask [] layerMaskList Returns Type Description Int32 The combined layer mask FindLayerListIndex(Int32, LayerMask[]) Look through the layerMaskList and find the index in that list for which the supplied layer is part of Declaration public static int FindLayerListIndex(this int layer, LayerMask[] layerMasks) Parameters Type Name Description Int32 layer Layer to search for LayerMask [] layerMasks List of LayerMasks to search Returns Type Description Int32 LayerMaskList index, or -1 for not found GetLayerId(ref Int32, String) Gets a valid layer id using the layer name. Declaration public static int GetLayerId(ref int cache, string layerName) Parameters Type Name Description Int32 cache The cached layer id. String layerName The name of the layer to look for if the cache is unset. Returns Type Description Int32 The layer id. IsInLayerMask(Int32, Int32) Checks whether a layer is in a layer mask Declaration public static bool IsInLayerMask(this int layer, int layerMask) Parameters Type Name Description Int32 layer Int32 layerMask Returns Type Description Boolean True if the layer mask contains the layer ToMask(Int32) Transform layer id to LayerMask Declaration public static LayerMask ToMask(int layerId) Parameters Type Name Description Int32 layerId Returns Type Description LayerMask"
  },
  "api/Microsoft.MixedReality.Toolkit.LinePointTransformMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.LinePointTransformMode.html",
    "title": "Enum LinePointTransformMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LinePointTransformMode Defines how a base line data provider will transform its points Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum LinePointTransformMode Fields Name Description UseMatrix Use a matrix. Lines that are not active and enabled will not update point positions. UseTransform Use the local line transform. More reliable but with a performance cost."
  },
  "api/Microsoft.MixedReality.Toolkit.LineRotationMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.LineRotationMode.html",
    "title": "Enum LineRotationMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum LineRotationMode Defines how to calculate the line's rotation at any given point. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum LineRotationMode Fields Name Description None Don't rotate RelativeToOrigin Rotate relative to direction from origin point Velocity Use velocity to calculate the line's rotation"
  },
  "api/Microsoft.MixedReality.Toolkit.MathExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MathExtensions.html",
    "title": "Class MathExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class MathExtensions Extension methods and helper functions for various math data Inheritance Object MathExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class MathExtensions Methods ClampComponentWise(Vector3, Vector3, Vector3) Declaration public static Vector3 ClampComponentWise(Vector3 value, Vector3 min, Vector3 max) Parameters Type Name Description Vector3 value Vector3 min Vector3 max Returns Type Description Vector3 CubicToLinearIndex(Vector3Int, Vector3Int) Declaration public static int CubicToLinearIndex(Vector3Int ndx, Vector3Int size) Parameters Type Name Description Vector3Int ndx Vector3Int size Returns Type Description Int32 LinearToCubicIndex(Int32, Vector3Int) Declaration public static Vector3Int LinearToCubicIndex(int linearIndex, Vector3Int size) Parameters Type Name Description Int32 linearIndex Vector3Int size Returns Type Description Vector3Int MostSignificantBit(Int32) Declaration public static int MostSignificantBit(this int x) Parameters Type Name Description Int32 x Returns Type Description Int32 PowerOfTwoGreaterThanOrEqualTo(Int32) Declaration public static int PowerOfTwoGreaterThanOrEqualTo(this int v) Parameters Type Name Description Int32 v Returns Type Description Int32 PowerOfTwoGreaterThanOrEqualTo(Vector3Int) Declaration public static Vector3Int PowerOfTwoGreaterThanOrEqualTo(this Vector3Int v) Parameters Type Name Description Vector3Int v Returns Type Description Vector3Int ResetIfGreaterThan(Int32, Int32) Sets the value to zero if greater than the specified amount. Declaration public static int ResetIfGreaterThan(this int value, int amount) Parameters Type Name Description Int32 value Int32 amount Returns Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityCameraProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityCameraProfile.html",
    "title": "Class MixedRealityCameraProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCameraProfile This Scriptable Object tells you if your head mounted display (HMD) is a transparent device or an occluded device. Based on those values, you can customize your camera and quality settings. Inheritance Object BaseMixedRealityProfile MixedRealityCameraProfile Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityCameraProfile : BaseMixedRealityProfile Properties BackgroundColorOpaqueDisplay Background color for an opaque display. Declaration public Color BackgroundColorOpaqueDisplay { get; } Property Value Type Description Color BackgroundColorTransparentDisplay Background color for a transparent display. Declaration public Color BackgroundColorTransparentDisplay { get; } Property Value Type Description Color CameraClearFlagsOpaqueDisplay Flags describing how to clear the camera for an opaque display. Declaration public CameraClearFlags CameraClearFlagsOpaqueDisplay { get; } Property Value Type Description CameraClearFlags CameraClearFlagsTransparentDisplay Flags describing how to clear the camera for a transparent display. Declaration public CameraClearFlags CameraClearFlagsTransparentDisplay { get; } Property Value Type Description CameraClearFlags FarClipPlaneOpaqueDisplay Far clipping plane distance for an opaque display. Declaration public float FarClipPlaneOpaqueDisplay { get; } Property Value Type Description Single FarClipPlaneTransparentDisplay Far clipping plane distance for a transparent display. Declaration public float FarClipPlaneTransparentDisplay { get; } Property Value Type Description Single HoloLensQualityLevel Quality level for a HoloLens device. Declaration public int HoloLensQualityLevel { get; } Property Value Type Description Int32 Remarks HoloLensQualityLevel is obsolete and will be removed in a future Mixed Reality Toolkit release. Please use TransparentQualityLevel. NearClipPlaneOpaqueDisplay Near clipping plane distance for an opaque display. Declaration public float NearClipPlaneOpaqueDisplay { get; } Property Value Type Description Single NearClipPlaneTransparentDisplay Near clipping plane distance for a transparent display. Declaration public float NearClipPlaneTransparentDisplay { get; } Property Value Type Description Single OpaqueQualityLevel Quality level for an opaque display. Declaration public int OpaqueQualityLevel { get; } Property Value Type Description Int32 SettingsConfigurations Configuration objects describing the registered settings providers. Declaration public MixedRealityCameraSettingsConfiguration[] SettingsConfigurations { get; } Property Value Type Description MixedRealityCameraSettingsConfiguration [] TransparentQualityLevel Quality level for a transparent display. Declaration public int TransparentQualityLevel { get; } Property Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityCapability.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityCapability.html",
    "title": "Enum MixedRealityCapability | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityCapability Mixed reality platform capabilities. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum MixedRealityCapability Fields Name Description ArticulatedHand Articulated hand input EyeTracking Eye gaze targeting GGVHand Gaze-Gesture-Voice hand input MotionController Motion controller input SpatialAwarenessMesh Spatial meshes SpatialAwarenessPlane Spatial planes SpatialAwarenessPoint Spatial points VoiceCommand Voice commands using app defined keywords VoiceDictation Voice to text dictation"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityDataProviderAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityDataProviderAttribute.html",
    "title": "Class MixedRealityDataProviderAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityDataProviderAttribute Attribute that defines the properties of a Mixed Reality Toolkit data provider. Inheritance Object MixedRealityExtensionServiceAttribute MixedRealityDataProviderAttribute Inherited Members MixedRealityExtensionServiceAttribute.Name MixedRealityExtensionServiceAttribute.RuntimePlatforms MixedRealityExtensionServiceAttribute.DefaultProfilePath MixedRealityExtensionServiceAttribute.PackageFolder MixedRealityExtensionServiceAttribute.DefaultProfile Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityDataProviderAttribute : MixedRealityExtensionServiceAttribute Constructors MixedRealityDataProviderAttribute(Type, SupportedPlatforms, String, String, String) Declaration public MixedRealityDataProviderAttribute(Type serviceInterfaceType, SupportedPlatforms runtimePlatforms, string name = \"\", string profilePath = \"\", string packageFolder = \"MixedRealityToolkit\") Parameters Type Name Description Type serviceInterfaceType SupportedPlatforms runtimePlatforms String name String profilePath String packageFolder Properties ServiceInterfaceType The interface type of the IMixedRealityService for which the data provider is supported. Declaration public Type ServiceInterfaceType { get; } Property Value Type Description Type"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityExtensionServiceAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityExtensionServiceAttribute.html",
    "title": "Class MixedRealityExtensionServiceAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityExtensionServiceAttribute Attribute that defines the properties of a Mixed Reality Toolkit extension service. Inheritance Object MixedRealityExtensionServiceAttribute MixedRealityDataProviderAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityExtensionServiceAttribute : Attribute Constructors MixedRealityExtensionServiceAttribute(SupportedPlatforms, String, String, String) Constructor Declaration public MixedRealityExtensionServiceAttribute(SupportedPlatforms runtimePlatforms, string name = \"\", string defaultProfilePath = \"\", string packageFolder = \"MixedRealityToolkit\") Parameters Type Name Description SupportedPlatforms runtimePlatforms The platforms on which the extension service is supported. String name String defaultProfilePath The relative path to the default profile asset. String packageFolder The package folder to which the path is relative. Properties DefaultProfile The default profile. Declaration public virtual BaseMixedRealityProfile DefaultProfile { get; } Property Value Type Description BaseMixedRealityProfile DefaultProfilePath The file path to the default profile asset relative to the package folder. Declaration public virtual string DefaultProfilePath { get; } Property Value Type Description String Name The friendly name for this service. Declaration public virtual string Name { get; } Property Value Type Description String PackageFolder The package where the default profile asset resides. Declaration public virtual string PackageFolder { get; } Property Value Type Description String RuntimePlatforms The runtime platform(s) to run this service. Declaration public virtual SupportedPlatforms RuntimePlatforms { get; } Property Value Type Description SupportedPlatforms"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityPlayspace.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityPlayspace.html",
    "title": "Class MixedRealityPlayspace | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityPlayspace A static class encapsulating the Mixed Reality playspace. Inheritance Object MixedRealityPlayspace Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class MixedRealityPlayspace Properties Position The location of the playspace. Declaration public static Vector3 Position { get; set; } Property Value Type Description Vector3 Rotation The playspace's rotation. Declaration public static Quaternion Rotation { get; set; } Property Value Type Description Quaternion Transform The transform of the playspace. Declaration public static Transform Transform { get; } Property Value Type Description Transform Methods AddChild(Transform) Adds a child object to the playspace's hierarchy. Declaration public static void AddChild(Transform transform) Parameters Type Name Description Transform transform The child object's transform. Destroy() Declaration public static void Destroy() InverseTransformPoint(Vector3) Transforms a position from world to local space. Declaration public static Vector3 InverseTransformPoint(Vector3 worldPosition) Parameters Type Name Description Vector3 worldPosition The position to be transformed. Returns Type Description Vector3 The position, in local space. PerformTransformation(Action<Transform>) Performs a playspace transformation. Declaration public static void PerformTransformation(Action<Transform> transformation) Parameters Type Name Description Action < Transform > transformation The transformation to be applied to the playspace. Remarks This method takes a lambda function and may contribute to garbage collector pressure. For best performance, avoid calling this method from an inner loop function. RotateAround(Vector3, Vector3, Single) Rotates the playspace around the specified axis. Declaration public static void RotateAround(Vector3 point, Vector3 axis, float angle) Parameters Type Name Description Vector3 point The point to pass through during rotation. Vector3 axis The axis about which to rotate. Single angle The angle, in degrees, to rotate. RuntimeInitializeOnLoadMethod() Declaration public static void RuntimeInitializeOnLoadMethod() TransformDirection(Vector3) Transforms a direction from local to world space. Declaration public static Vector3 TransformDirection(Vector3 localDirection) Parameters Type Name Description Vector3 localDirection The direction to be transformed. Returns Type Description Vector3 The direction, in world space. TransformPoint(Vector3) Transforms a position from local to world space. Declaration public static Vector3 TransformPoint(Vector3 localPosition) Parameters Type Name Description Vector3 localPosition The position to be transformed. Returns Type Description Vector3 The position, in world space."
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityRegisteredServiceProvidersProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityRegisteredServiceProvidersProfile.html",
    "title": "Class MixedRealityRegisteredServiceProvidersProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityRegisteredServiceProvidersProfile Inheritance Object BaseMixedRealityProfile MixedRealityRegisteredServiceProvidersProfile Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityRegisteredServiceProvidersProfile : BaseMixedRealityProfile Properties Configurations Currently registered system and manager configurations. Declaration public MixedRealityServiceConfiguration[] Configurations { get; } Property Value Type Description MixedRealityServiceConfiguration []"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceConfiguration.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceConfiguration.html",
    "title": "Struct MixedRealityServiceConfiguration | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityServiceConfiguration Defines a system, feature, or manager to be registered with as a IMixedRealityExtensionService on startup. Implements IMixedRealityServiceConfiguration Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public struct MixedRealityServiceConfiguration : IMixedRealityServiceConfiguration Constructors MixedRealityServiceConfiguration(SystemType, String, UInt32, SupportedPlatforms, BaseMixedRealityProfile) Constructor. Declaration public MixedRealityServiceConfiguration(SystemType componentType, string componentName, uint priority, SupportedPlatforms runtimePlatform, BaseMixedRealityProfile configurationProfile) Parameters Type Name Description SystemType componentType The concrete type for the system, feature or manager. String componentName The simple, human readable name for the system, feature, or manager. UInt32 priority The priority this system, feature, or manager will be initialized in. SupportedPlatforms runtimePlatform The runtime platform(s) to run this system, feature, or manager on. BaseMixedRealityProfile configurationProfile The configuration profile for the service. Properties ComponentName The name of the system, feature or manager. Declaration public string ComponentName { get; } Property Value Type Description String ComponentType The concrete type for the system, feature or manager. Declaration public SystemType ComponentType { get; } Property Value Type Description SystemType ConfigurationProfile The configuration profile for the service. Declaration public BaseMixedRealityProfile ConfigurationProfile { get; } Property Value Type Description BaseMixedRealityProfile Priority The priority this system, feature or manager will be initialized in. Declaration public uint Priority { get; } Property Value Type Description UInt32 RuntimePlatform The runtime platform(s) to run this service. Declaration public SupportedPlatforms RuntimePlatform { get; } Property Value Type Description SupportedPlatforms Implements IMixedRealityServiceConfiguration"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceInspectorAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceInspectorAttribute.html",
    "title": "Class MixedRealityServiceInspectorAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityServiceInspectorAttribute Attach to a class implementing IMixedRealityServiceInspector to generate a facade inspector. Inheritance Object MixedRealityServiceInspectorAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityServiceInspectorAttribute : Attribute Constructors MixedRealityServiceInspectorAttribute(Type) Declaration public MixedRealityServiceInspectorAttribute(Type serviceType) Parameters Type Name Description Type serviceType Properties ServiceType Declaration public Type ServiceType { get; } Property Value Type Description Type"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceProfileAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceProfileAttribute.html",
    "title": "Class MixedRealityServiceProfileAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityServiceProfileAttribute Attribute that defines which service a profile is meant to be consumed by. Only applies to profiles that are consumed by types implementing IMixedRealityService. A service must implement all required types and no excluded types to be considered compatible with the profile. Inheritance Object MixedRealityServiceProfileAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class MixedRealityServiceProfileAttribute : Attribute Constructors MixedRealityServiceProfileAttribute(Type, Type) Declaration public MixedRealityServiceProfileAttribute(Type requiredType, Type excludedType = null) Parameters Type Name Description Type requiredType Type excludedType MixedRealityServiceProfileAttribute(Type[], Type[]) Declaration public MixedRealityServiceProfileAttribute(Type[] requiredTypes, Type[] excludedTypes = null) Parameters Type Name Description Type [] requiredTypes Type [] excludedTypes Properties ExcludedTypes Declaration public Type[] ExcludedTypes { get; } Property Value Type Description Type [] RequiredTypes Declaration public Type[] RequiredTypes { get; } Property Value Type Description Type []"
  },
  "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceRegistry.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.MixedRealityServiceRegistry.html",
    "title": "Class MixedRealityServiceRegistry | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityServiceRegistry Static class that represents the Mixed Reality Toolkit service registry. Inheritance Object MixedRealityServiceRegistry Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class MixedRealityServiceRegistry Remarks The service registry is used to enable discovery of and access to active Mixed Reality Toolkit services at runtime without requiring direct code reference to a singleton style component. Methods AddService<T>(T, IMixedRealityServiceRegistrar) Adds an IMixedRealityService instance to the registry. Declaration public static bool AddService<T>(T serviceInstance, IMixedRealityServiceRegistrar registrar) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Instance of the service to add. IMixedRealityServiceRegistrar registrar Instance of the registrar manages the service. Returns Type Description Boolean True if the service was successfully added, false otherwise. Type Parameters Name Description T The interface type of the service being added. ClearAllServices() Clears the registry cache of all services Declaration public static void ClearAllServices() GetAllServices() Returns readonly list of all services registered Declaration public static IReadOnlyList<IMixedRealityService> GetAllServices() Returns Type Description IReadOnlyList < IMixedRealityService > Remarks The list is sorted in ascending priority order. GetAllServices(IMixedRealityServiceRegistrar) Returns readonly list of all services registered for given registrar Declaration public static IReadOnlyCollection<IMixedRealityService> GetAllServices(IMixedRealityServiceRegistrar registrar) Parameters Type Name Description IMixedRealityServiceRegistrar registrar Registrar object to filter services by Returns Type Description IReadOnlyCollection < IMixedRealityService > Readonly list of all services registered for given registrar, all services if parameter null. If given a registrar that the registry is not aware of, returns null. Remarks The list is sorted in ascending priority order. RemoveService<T>(T) Removes an IMixedRealityService instance from the registry. Declaration public static bool RemoveService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Instance of the service to remove. Returns Type Description Boolean True if the service was successfully removed, false otherwise. Type Parameters Name Description T The interface type of the service being removed. RemoveService<T>(T, IMixedRealityServiceRegistrar) Removes an IMixedRealityService instance from the registry. Declaration public static bool RemoveService<T>(T serviceInstance, IMixedRealityServiceRegistrar registrar) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Instance of the service to remove. IMixedRealityServiceRegistrar registrar Instance of the registrar manages the service. Returns Type Description Boolean True if the service was successfully removed, false otherwise. Type Parameters Name Description T The interface type of the service being removed. RemoveService<T>(String) Removes an IMixedRealityService instance from the registry. Declaration public static bool RemoveService<T>(string name) where T : IMixedRealityService Parameters Type Name Description String name The friendly name of the service to remove. Returns Type Description Boolean True if the service was successfully removed, false otherwise. Type Parameters Name Description T The interface type of the service being removed. TryGetService(Type, out IMixedRealityService, out IMixedRealityServiceRegistrar, String) Gets the first instance of the requested service from the registry that matches the given query. Declaration public static bool TryGetService(Type interfaceType, out IMixedRealityService serviceInstance, out IMixedRealityServiceRegistrar registrar, string name = null) Parameters Type Name Description Type interfaceType The interface type of the service being requested. IMixedRealityService serviceInstance Output parameter to receive the requested service instance. IMixedRealityServiceRegistrar registrar Output parameter to receive the registrar that loaded the service instance. String name Optional name of the service. Returns Type Description Boolean True if the requested service is being returned, false otherwise. TryGetService<T>(out T, out IMixedRealityServiceRegistrar, String) Gets the first instance of the requested service from the registry that matches the given query. Declaration public static bool TryGetService<T>(out T serviceInstance, out IMixedRealityServiceRegistrar registrar, string name = null) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Output parameter to receive the requested service instance. IMixedRealityServiceRegistrar registrar Output parameter to receive the registrar that loaded the service instance. String name Optional name of the service. Returns Type Description Boolean True if the requested service is being returned, false otherwise. Type Parameters Name Description T The interface type of the service being requested. TryGetService<T>(out T, String) Gets the first instance of the requested service from the registry that matches the given query. Declaration public static bool TryGetService<T>(out T serviceInstance, string name = null) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Output parameter to receive the requested service instance. String name Optional name of the service. Returns Type Description Boolean True if the requested service is being returned, false otherwise. Type Parameters Name Description T The interface type of the service being requested."
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdColor_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdColor_t.html",
    "title": "Struct HmdColor_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdColor_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdColor_t Fields a Declaration public float a Field Value Type Description Single b Declaration public float b Field Value Type Description Single g Declaration public float g Field Value Type Description Single r Declaration public float r Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdMatrix33_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdMatrix33_t.html",
    "title": "Struct HmdMatrix33_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdMatrix33_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdMatrix33_t Fields m0 Declaration public float m0 Field Value Type Description Single m1 Declaration public float m1 Field Value Type Description Single m2 Declaration public float m2 Field Value Type Description Single m3 Declaration public float m3 Field Value Type Description Single m4 Declaration public float m4 Field Value Type Description Single m5 Declaration public float m5 Field Value Type Description Single m6 Declaration public float m6 Field Value Type Description Single m7 Declaration public float m7 Field Value Type Description Single m8 Declaration public float m8 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdMatrix34_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdMatrix34_t.html",
    "title": "Struct HmdMatrix34_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdMatrix34_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdMatrix34_t Fields m0 Declaration public float m0 Field Value Type Description Single m1 Declaration public float m1 Field Value Type Description Single m10 Declaration public float m10 Field Value Type Description Single m11 Declaration public float m11 Field Value Type Description Single m2 Declaration public float m2 Field Value Type Description Single m3 Declaration public float m3 Field Value Type Description Single m4 Declaration public float m4 Field Value Type Description Single m5 Declaration public float m5 Field Value Type Description Single m6 Declaration public float m6 Field Value Type Description Single m7 Declaration public float m7 Field Value Type Description Single m8 Declaration public float m8 Field Value Type Description Single m9 Declaration public float m9 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdMatrix44_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HmdMatrix44_t.html",
    "title": "Struct HmdMatrix44_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HmdMatrix44_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HmdMatrix44_t Fields m0 Declaration public float m0 Field Value Type Description Single m1 Declaration public float m1 Field Value Type Description Single m10 Declaration public float m10 Field Value Type Description Single m11 Declaration public float m11 Field Value Type Description Single m12 Declaration public float m12 Field Value Type Description Single m13 Declaration public float m13 Field Value Type Description Single m14 Declaration public float m14 Field Value Type Description Single m15 Declaration public float m15 Field Value Type Description Single m2 Declaration public float m2 Field Value Type Description Single m3 Declaration public float m3 Field Value Type Description Single m4 Declaration public float m4 Field Value Type Description Single m5 Declaration public float m5 Field Value Type Description Single m6 Declaration public float m6 Field Value Type Description Single m7 Declaration public float m7 Field Value Type Description Single m8 Declaration public float m8 Field Value Type Description Single m9 Declaration public float m9 Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ClearSpatialObservations.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.ClearSpatialObservations.html",
    "title": "Class ClearSpatialObservations | Mixed Reality Toolkit Documentation",
    "keywords": "Class ClearSpatialObservations This class demonstrates clearing spatial observations. Inheritance Object ClearSpatialObservations Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class ClearSpatialObservations : MonoBehaviour Methods ToggleObservers() Toggles the state of the observers. Declaration public void ToggleObservers()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.LogStructureEyeGaze.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.LogStructureEyeGaze.html",
    "title": "Class LogStructureEyeGaze | Mixed Reality Toolkit Documentation",
    "keywords": "Class LogStructureEyeGaze Inheritance Object LogStructure LogStructureEyeGaze Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class LogStructureEyeGaze : LogStructure Methods GetData(String, String, EyeTrackingTarget) Declaration public override object[] GetData(string inputType, string inputStatus, EyeTrackingTarget intTarget) Parameters Type Name Description String inputType String inputStatus EyeTrackingTarget intTarget Returns Type Description Object [] Overrides LogStructure.GetData(String, String, EyeTrackingTarget) GetHeaderColumns() Declaration public override string[] GetHeaderColumns() Returns Type Description String [] Overrides LogStructure.GetHeaderColumns()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputRecorder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging.UserInputRecorder.html",
    "title": "Class UserInputRecorder | Mixed Reality Toolkit Documentation",
    "keywords": "Class UserInputRecorder Inheritance Object BasicInputLogger CustomInputLogger UserInputRecorder Inherited Members CustomInputLogger.filename CustomInputLogger.TimerStart CustomInputLogger.printedHeader CustomInputLogger.CreateNewLog() CustomInputLogger.StartLogging() CustomInputLogger.StopLoggingAndSave() CustomInputLogger.CancelLogging() BasicInputLogger.addTimestampToLogfileName BasicInputLogger.SetUserName(String) BasicInputLogger.SetSessionDescr(String) BasicInputLogger.UserName BasicInputLogger.sessionDescr BasicInputLogger.LogDirectory BasicInputLogger.ResetLog() BasicInputLogger.Append(String) BasicInputLogger.SaveLogs() BasicInputLogger.FilenameWithTimestamp BasicInputLogger.FilenameNoTimestamp Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.Logging Assembly : cs.temp.dll.dll Syntax public class UserInputRecorder : CustomInputLogger Fields FilenameToUse Declaration public string FilenameToUse Field Value Type Description String Properties Instance Declaration public static UserInputRecorder Instance { get; } Property Value Type Description UserInputRecorder Methods CustomAppend(String) Declaration protected override void CustomAppend(string msg) Parameters Type Name Description String msg Overrides CustomInputLogger.CustomAppend(String) GetData_Part1() Declaration protected object[] GetData_Part1() Returns Type Description Object [] GetFileName() Declaration protected override string GetFileName() Returns Type Description String Overrides BasicInputLogger.GetFileName() GetHeader() Declaration public override string GetHeader() Returns Type Description String Overrides BasicInputLogger.GetHeader() GetStringFormat(Object[]) Declaration public static string GetStringFormat(object[] data) Parameters Type Name Description Object [] data Returns Type Description String MergeObjArrays(Object[], Object[]) Declaration public object[] MergeObjArrays(object[] part1, object[] part2) Parameters Type Name Description Object [] part1 Object [] part2 Returns Type Description Object [] OnDestroy() Declaration public override void OnDestroy() Overrides BasicInputLogger.OnDestroy() UpdateLog() Declaration public void UpdateLog() UpdateLog(String, String, EyeTrackingTarget) Declaration public void UpdateLog(string inputType, string inputStatus, EyeTrackingTarget intendedTarget) Parameters Type Name Description String inputType String inputStatus EyeTrackingTarget intendedTarget"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TransportToRespawnLocation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TransportToRespawnLocation.html",
    "title": "Class TransportToRespawnLocation | Mixed Reality Toolkit Documentation",
    "keywords": "Class TransportToRespawnLocation The associated GameObject acts as a teleporter to a referenced respawn location. Inheritance Object TransportToRespawnLocation Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TransportToRespawnLocation : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TriggerOnStartup.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking.TriggerOnStartup.html",
    "title": "Class TriggerOnStartup | Mixed Reality Toolkit Documentation",
    "keywords": "Class TriggerOnStartup Allows for adding custom behaviors that can be assigned in the Editor and triggered when the scene is loaded. Inheritance Object TriggerOnStartup Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking Assembly : cs.temp.dll.dll Syntax public class TriggerOnStartup : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor.DwellHandlerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor.DwellHandlerInspector.html",
    "title": "Class DwellHandlerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellHandlerInspector Inheritance Object DwellHandlerInspector Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor Assembly : cs.temp.dll.dll Syntax public class DwellHandlerInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor.DwellProfileWithDecayInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor.DwellProfileWithDecayInspector.html",
    "title": "Class DwellProfileWithDecayInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class DwellProfileWithDecayInspector Custom profile inspector for the extended dwell profile sample Inheritance Object DwellProfileWithDecayInspector Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor Assembly : cs.temp.dll.dll Syntax public class DwellProfileWithDecayInspector : UnityEditor.Editor Methods DrawConditionalParameter(String, String) Declaration public void DrawConditionalParameter(string propertyToDraw, string conditionalProperty) Parameters Type Name Description String propertyToDraw String conditionalProperty OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Dwell.Editor Classes DwellHandlerInspector DwellProfileWithDecayInspector Custom profile inspector for the extended dwell profile sample"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.InstantDwellSample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.InstantDwellSample.html",
    "title": "Class InstantDwellSample | Mixed Reality Toolkit Documentation",
    "keywords": "Class InstantDwellSample Dwell sample with no DwellIntended delay Inheritance Object BaseDwellSample InstantDwellSample Inherited Members BaseDwellSample.dwellVisualImage BaseDwellSample.targetButton BaseDwellSample.dwellHandler BaseDwellSample.isDwelling BaseDwellSample.Awake() BaseDwellSample.DwellStarted(IMixedRealityPointer) BaseDwellSample.DwellIntended(IMixedRealityPointer) BaseDwellSample.DwellCanceled(IMixedRealityPointer) Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class InstantDwellSample : BaseDwellSample Methods ButtonExecute() Declaration public override void ButtonExecute() Overrides BaseDwellSample.ButtonExecute() DwellCompleted(IMixedRealityPointer) Declaration public override void DwellCompleted(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer Overrides BaseDwellSample.DwellCompleted(IMixedRealityPointer) Update() Declaration public void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.NonNativeKeyboard.LayoutType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.NonNativeKeyboard.LayoutType.html",
    "title": "Enum NonNativeKeyboard.LayoutType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum NonNativeKeyboard.LayoutType Layout type enum for the type of keyboard layout to use. This is used when spawning to enable the correct keys based on layout type. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public enum LayoutType Fields Name Description Alpha Email Symbol URL"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.NonNativeKeyboard.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.NonNativeKeyboard.html",
    "title": "Class NonNativeKeyboard | Mixed Reality Toolkit Documentation",
    "keywords": "Class NonNativeKeyboard A simple general use keyboard that is ideal for AR/VR applications that do not provide a native keyboard. Inheritance Object NonNativeKeyboard Implements IMixedRealityDictationHandler Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class NonNativeKeyboard : InputSystemGlobalHandlerListener, IMixedRealityDictationHandler Fields AlphaKeyboard The panel that contains the alpha keys. Declaration public Image AlphaKeyboard Field Value Type Description Image AlphaMailKeys References @ bottom panel. Declaration public Image AlphaMailKeys Field Value Type Description Image AlphaSubKeys References abc bottom panel. Declaration public Image AlphaSubKeys Field Value Type Description Image AlphaWebKeys References .com bottom panel. Declaration public Image AlphaWebKeys Field Value Type Description Image CloseOnInactivity Make the keyboard disappear automatically after a timeout Declaration public bool CloseOnInactivity Field Value Type Description Boolean CloseOnInactivityTime Inactivity time that makes the keyboard disappear automatically. Declaration public float CloseOnInactivityTime Field Value Type Description Single InputField The InputField that the keyboard uses to show the currently edited text. If you are using the Keyboard prefab you can ignore this field as it will be already assigned. Declaration public TMP_InputField InputField Field Value Type Description TMP_InputField InputFieldSlide Move the axis slider based on the camera forward and the keyboard plane projection. Declaration public AxisSlider InputFieldSlide Field Value Type Description AxisSlider SliderEnabled Bool for toggling the slider being enabled. Declaration public bool SliderEnabled Field Value Type Description Boolean SubmitOnEnter Bool to flag submitting on enter Declaration public bool SubmitOnEnter Field Value Type Description Boolean SymbolKeyboard The panel that contains the number and symbol keys. Declaration public Image SymbolKeyboard Field Value Type Description Image Properties Instance Declaration public static NonNativeKeyboard Instance { get; } Property Value Type Description NonNativeKeyboard IsCapsLocked Accessor reporting caps lock state of keyboard. Declaration public bool IsCapsLocked { get; } Property Value Type Description Boolean IsShifted Accessor reporting shift state of keyboard. Declaration public bool IsShifted { get; } Property Value Type Description Boolean Methods AppendValue(KeyboardValueKey) Primary method for typing individual characters to a text field. Declaration public void AppendValue(KeyboardValueKey valueKey) Parameters Type Name Description KeyboardValueKey valueKey The valueKey of the pressed key. Backspace() Delete the character before the caret. Declaration public void Backspace() CapsLock(Boolean) Set the keyboard to a permanent shift state. Declaration public void CapsLock(bool newCapsLockState) Parameters Type Name Description Boolean newCapsLockState Caps lock state the method is switching to Clear() Clear the text input field. Declaration public void Clear() Close() Close the keyboard. (Clears all event subscriptions.) Declaration public void Close() EndDictation() Terminate dictation mode. Declaration public void EndDictation() Enter() Fire the text entered event for objects listening to keyboard. Immediately closes keyboard. Declaration public void Enter() FunctionKey(KeyboardKeyFunc) Trigger specific keyboard functionality. Declaration public void FunctionKey(KeyboardKeyFunc functionKey) Parameters Type Name Description KeyboardKeyFunc functionKey The functionKey of the pressed key. MoveCaretLeft() Move caret to the left. Declaration public void MoveCaretLeft() MoveCaretRight() Move caret to the right. Declaration public void MoveCaretRight() Next() Send the \"next\" event. Declaration public void Next() OnDictationComplete(DictationEventData) Called when dictation is completed Declaration public void OnDictationComplete(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData Dictation event data OnDictationError(DictationEventData) Called on dictation error. Not used here. Declaration public void OnDictationError(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData Dictation event data OnDictationHypothesis(DictationEventData) Called when dictation hypothesis is found. Not used here Declaration public void OnDictationHypothesis(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData Dictation event data OnDictationResult(DictationEventData) Called when dictation result is obtained Declaration public void OnDictationResult(DictationEventData eventData) Parameters Type Name Description DictationEventData eventData Dictation event data OnDisable() Called whenever the keyboard is disabled or deactivated. Declaration protected override void OnDisable() PresentKeyboard() Present the default keyboard to the camera. Declaration public void PresentKeyboard() PresentKeyboard(NonNativeKeyboard.LayoutType) Presents a specific keyboard to the camera. Declaration public void PresentKeyboard(NonNativeKeyboard.LayoutType keyboardType) Parameters Type Name Description NonNativeKeyboard.LayoutType keyboardType Specify the keyboard type. PresentKeyboard(String) Presents the default keyboard to the camera, with start text. Declaration public void PresentKeyboard(string startText) Parameters Type Name Description String startText The initial text to show in the keyboard's input field. PresentKeyboard(String, NonNativeKeyboard.LayoutType) Presents a specific keyboard to the camera, with start text. Declaration public void PresentKeyboard(string startText, NonNativeKeyboard.LayoutType keyboardType) Parameters Type Name Description String startText The initial text to show in the keyboard's input field. NonNativeKeyboard.LayoutType keyboardType Specify the keyboard type. Previous() Send the \"previous\" event. Declaration public void Previous() RegisterHandlers() Declaration protected override void RegisterHandlers() RepositionKeyboard(Transform, BoxCollider, Single) Function to reposition the keyboard based on target transform and collider information Declaration public void RepositionKeyboard(Transform objectTransform, BoxCollider aCollider = null, float verticalOffset = 0F) Parameters Type Name Description Transform objectTransform Transform of target object to remain relative to BoxCollider aCollider Optional collider information for offset placement Single verticalOffset Optional vertical offset from the target RepositionKeyboard(Vector3, Single) Function to reposition the Keyboard based on target position and vertical offset Declaration public void RepositionKeyboard(Vector3 kbPos, float verticalOffset = 0F) Parameters Type Name Description Vector3 kbPos World position for keyboard Single verticalOffset Optional vertical offset of keyboard SetScaleSizeValues(Single, Single, Single, Single) Method to set the sizes by code, as the properties are private. Useful for scaling 'from the outside', for instance taking care of differences between immersive headsets and HoloLens Declaration public void SetScaleSizeValues(float minScale, float maxScale, float minDistance, float maxDistance) Parameters Type Name Description Single minScale Min scale factor Single maxScale Max scale factor Single minDistance Min distance from camera Single maxDistance Max distance from camera Shift(Boolean) Set the keyboard to a single action shift state. Declaration public void Shift(bool newShiftState) Parameters Type Name Description Boolean newShiftState value the shift key should have after calling the method ShowAlphaKeyboard() Enable the alpha keyboard. Declaration public void ShowAlphaKeyboard() ShowSymbolKeyboard() Enable the symbol keyboard. Declaration public void ShowSymbolKeyboard() Space() Insert a space character. Declaration public void Space() Start() Set up Dictation, CanvasEX, and automatically select the TextInput object. Declaration protected override void Start() Tab() Insert a tab character. Declaration public void Tab() UnregisterHandlers() Declaration protected override void UnregisterHandlers() Events OnClosed Fired every time the close button is pressed. (Cleared when keyboard is closed.) Declaration public event EventHandler OnClosed Event Type Type Description EventHandler OnKeyboardShifted Event fired when shift key on keyboard is pressed. Declaration public event Action<bool> OnKeyboardShifted Event Type Type Description Action < Boolean > OnNext Sent when the 'Next' button is pressed. Ideally you would use this event to set your targeted text input to the next text field in your document. (Cleared when keyboard is closed.) Declaration public event EventHandler OnNext Event Type Type Description EventHandler OnPlacement Sent when the keyboard is placed. This allows listener to know when someone else is co-opting the keyboard. Declaration public event EventHandler OnPlacement Event Type Type Description EventHandler OnPrevious Sent when the 'Previous' button is pressed. Ideally you would use this event to set your targeted text input to the previous text field in your document. (Cleared when keyboard is closed.) Declaration public event EventHandler OnPrevious Event Type Type Description EventHandler OnTextSubmitted Sent when the 'Enter' button is pressed. To retrieve the text from the event, cast the sender to 'Keyboard' and get the text from the TextInput field. (Cleared when keyboard is closed.) Declaration public event EventHandler OnTextSubmitted Event Type Type Description EventHandler OnTextUpdated Fired every time the text in the InputField changes. (Cleared when keyboard is closed.) Declaration public event Action<string> OnTextUpdated Event Type Type Description Action < String > Implements IMixedRealityDictationHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.ScrollDirectionType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.ScrollDirectionType.html",
    "title": "Enum ScrollingObjectCollection.ScrollDirectionType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ScrollingObjectCollection.ScrollDirectionType The direction in which a ScrollingObjectCollection can scroll. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public enum ScrollDirectionType Fields Name Description LeftAndRight UpAndDown"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.ScrollEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.ScrollEvent.html",
    "title": "Class ScrollingObjectCollection.ScrollEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollingObjectCollection.ScrollEvent The UnityEvent type the ScrollingObjectCollection sends. GameObject is the object the fired the scroll. Inheritance Object ScrollingObjectCollection.ScrollEvent Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class ScrollEvent : UnityEvent<GameObject>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.BaseControllerPointerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.BaseControllerPointerInspector.html",
    "title": "Class BaseControllerPointerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseControllerPointerInspector Inheritance Object ControllerPoseSynchronizerInspector BaseControllerPointerInspector Inherited Members ControllerPoseSynchronizerInspector.DrawHandednessProperty Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class BaseControllerPointerInspector : ControllerPoseSynchronizerInspector Fields DrawBasePointerActions Declaration protected bool DrawBasePointerActions Field Value Type Description Boolean Methods OnEnable() Declaration protected override void OnEnable() Overrides ControllerPoseSynchronizerInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides ControllerPoseSynchronizerInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.BaseInputHandlerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.BaseInputHandlerInspector.html",
    "title": "Class BaseInputHandlerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseInputHandlerInspector Inheritance Object BaseInputHandlerInspector SpeechInputHandlerInspector Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class BaseInputHandlerInspector : UnityEditor.Editor Methods CheckMixedRealityToolkit() If MRTK is not initialized in scene, then show an error message and button to add MRTK to the scene If MRTK does not has an active profile, show an error message Declaration protected bool CheckMixedRealityToolkit() Returns Type Description Boolean true if MRTK is initialized and has active profile, false otherwise OnEnable() Declaration protected virtual void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.ControllerInputActionOption.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.ControllerInputActionOption.html",
    "title": "Class ControllerInputActionOption | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerInputActionOption Used to aid in layout of Controller Input Actions. Inheritance Object ControllerInputActionOption Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class ControllerInputActionOption Fields Controller Declaration public SupportedControllerType Controller Field Value Type Description SupportedControllerType Handedness Declaration public Handedness Handedness Field Value Type Description Handedness InputLabelPositions Declaration public Vector2[] InputLabelPositions Field Value Type Description Vector2 [] IsLabelFlipped Declaration public bool[] IsLabelFlipped Field Value Type Description Boolean []"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Editor.ControllerInputActionOptions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Editor.ControllerInputActionOptions.html",
    "title": "Class ControllerInputActionOptions | Mixed Reality Toolkit Documentation",
    "keywords": "Class ControllerInputActionOptions Used to aid in layout of Controller Input Actions. Inheritance Object ControllerInputActionOptions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.Editor Assembly : cs.temp.dll.dll Syntax public class ControllerInputActionOptions Fields Controllers Declaration public List<ControllerInputActionOption> Controllers Field Value Type Description List < ControllerInputActionOption >"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityController.html",
    "title": "Interface IMixedRealityController | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityController Mixed Reality Toolkit controller definition, used to manage a specific controller type Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityController Properties AngularVelocity Declaration Vector3 AngularVelocity { get; } Property Value Type Description Vector3 ControllerHandedness The designated hand that the Input Source is managing, as defined by the SDK / Unity. Declaration Handedness ControllerHandedness { get; } Property Value Type Description Handedness Enabled Is the controller enabled? Declaration bool Enabled { get; set; } Property Value Type Description Boolean InputSource The registered Input Source for this controller Declaration IMixedRealityInputSource InputSource { get; } Property Value Type Description IMixedRealityInputSource Interactions Mapping definition for this controller, linking the Physical inputs to logical Input System Actions Declaration MixedRealityInteractionMapping[] Interactions { get; } Property Value Type Description MixedRealityInteractionMapping [] IsInPointingPose Some controllers such as articulated should only be able to invoke pointing/distant interactions in certain poses. Declaration bool IsInPointingPose { get; } Property Value Type Description Boolean IsPositionApproximate Indicates the accuracy of the position data being reported. Declaration bool IsPositionApproximate { get; } Property Value Type Description Boolean IsPositionAvailable Indicates that this controller is currently providing position data. Declaration bool IsPositionAvailable { get; } Property Value Type Description Boolean Remarks This value may change during usage for some controllers. As a best practice, be sure to check this value before using position data. IsRotationAvailable Indicates that this controller is currently providing rotation data. Declaration bool IsRotationAvailable { get; } Property Value Type Description Boolean Remarks This value may change during usage for some controllers. As a best practice, be sure to check this value before using rotation data. TrackingState Outputs the current state of the Input Source, whether it is tracked or not. As defined by the SDK / Unity. Declaration TrackingState TrackingState { get; } Property Value Type Description TrackingState Velocity Declaration Vector3 Velocity { get; } Property Value Type Description Vector3 Visualizer The controller's \"Visual\" Component in the scene. Declaration IMixedRealityControllerVisualizer Visualizer { get; } Property Value Type Description IMixedRealityControllerVisualizer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerPoseSynchronizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerPoseSynchronizer.html",
    "title": "Interface IMixedRealityControllerPoseSynchronizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityControllerPoseSynchronizer Basic interface for synchronizing to a controller pose. Inherited Members IMixedRealitySourcePoseHandler.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) IMixedRealitySourcePoseHandler.OnSourcePoseChanged(SourcePoseEventData<Vector2>) IMixedRealitySourcePoseHandler.OnSourcePoseChanged(SourcePoseEventData<Vector3>) IMixedRealitySourcePoseHandler.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) IMixedRealitySourcePoseHandler.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) IMixedRealityInputHandler.OnInputUp(InputEventData) IMixedRealityInputHandler.OnInputDown(InputEventData) IMixedRealityInputHandler<Single>.OnInputChanged(InputEventData<Single>) IMixedRealityInputHandler<Vector2>.OnInputChanged(InputEventData<Vector2>) IMixedRealityInputHandler<Vector3>.OnInputChanged(InputEventData<Vector3>) IMixedRealityInputHandler<Quaternion>.OnInputChanged(InputEventData<Quaternion>) IMixedRealityInputHandler<MixedRealityPose>.OnInputChanged(InputEventData<MixedRealityPose>) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityControllerPoseSynchronizer : IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler Properties Controller The current controller reference. Declaration IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController DestroyOnSourceLost Should this GameObject clean itself up when its controller is lost? Declaration bool DestroyOnSourceLost { get; set; } Property Value Type Description Boolean Remarks It's up to the implementation to properly destroy the GameObject 's this interface will implement. Handedness The controller handedness to synchronize with. Declaration Handedness Handedness { get; } Property Value Type Description Handedness PoseAction The input action that will drive the Transform's pose, position, or rotation. Declaration MixedRealityInputAction PoseAction { get; set; } Property Value Type Description MixedRealityInputAction UseSourcePoseData Should the Transform's position be driven from the source pose or from input handler? Declaration bool UseSourcePoseData { get; set; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityControllerVisualizer.html",
    "title": "Interface IMixedRealityControllerVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityControllerVisualizer Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityControllerVisualizer Properties Controller The current controller reference. Declaration IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController GameObjectProxy The GameObject reference for this controller. Declaration GameObject GameObjectProxy { get; } Property Value Type Description GameObject Remarks This reference may not always be available when called."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityCursor.html",
    "title": "Interface IMixedRealityCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityCursor Cursor Interface for handling input events and setting visibility. Inherited Members IMixedRealityFocusChangedHandler.OnBeforeFocusChange(FocusEventData) IMixedRealityFocusChangedHandler.OnFocusChanged(FocusEventData) IMixedRealitySourceStateHandler.OnSourceDetected(SourceStateEventData) IMixedRealitySourceStateHandler.OnSourceLost(SourceStateEventData) IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData) IMixedRealityPointerHandler.OnPointerDragged(MixedRealityPointerEventData) IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData) IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityCursor : IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Properties DefaultCursorDistance The maximum distance the cursor can be with nothing hit Declaration float DefaultCursorDistance { get; set; } Property Value Type Description Single GameObjectReference Returns the IMixedRealityCursor 's GameObject reference. Declaration GameObject GameObjectReference { get; } Property Value Type Description GameObject The GameObject this IMixedRealityCursor component is attached to. IsVisible Is the cursor currently visible? Declaration bool IsVisible { get; } Property Value Type Description Boolean LocalScale Local scale of the IMixedRealityCursor . Declaration Vector3 LocalScale { get; } Property Value Type Description Vector3 Pointer The IMixedRealityPointer this IMixedRealityCursor is associated with. Declaration IMixedRealityPointer Pointer { get; set; } Property Value Type Description IMixedRealityPointer Position Position of the IMixedRealityCursor . Declaration Vector3 Position { get; } Property Value Type Description Vector3 Rotation Rotation of the IMixedRealityCursor . Declaration Quaternion Rotation { get; } Property Value Type Description Quaternion SetVisibilityOnSourceDetected Sets the visibility of the IMixedRealityCursor when the source is detected. Declaration bool SetVisibilityOnSourceDetected { get; set; } Property Value Type Description Boolean SurfaceCursorDistance Surface distance to place the cursor off of the surface at Declaration float SurfaceCursorDistance { get; } Property Value Type Description Single Methods Destroy() Utility method to destroy cursor dependencies (e.g. event subscriptions) in the system explicitly in the middle update loop. This is a \"replacement\" of Unity OnDestroy. Relying on Unity OnDestroy may cause event handler subscription to become invalid at the point of destroying. Declaration void Destroy() SetVisibility(Boolean) Sets the visibility of the IMixedRealityCursor . Declaration void SetVisibility(bool visible) Parameters Type Name Description Boolean visible True if cursor should be visible, false if not."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerConfigurationFlags.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerConfigurationFlags.html",
    "title": "Enum MixedRealityControllerConfigurationFlags | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityControllerConfigurationFlags Flags used by MixedRealityControllerAttribute. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Flags] public enum MixedRealityControllerConfigurationFlags : byte Fields Name Description UseCustomInteractionMappings Controllers with custom interaction mappings can have their mappings be added / removed to the controller mapping profile in the property inspector."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerInfo.ControllerElementEnum.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerInfo.ControllerElementEnum.html",
    "title": "Enum MixedRealityControllerInfo.ControllerElementEnum | Mixed Reality Toolkit Documentation",
    "keywords": "Enum MixedRealityControllerInfo.ControllerElementEnum Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum ControllerElementEnum Fields Name Description Grasp Home Menu PointingPose Select Thumbstick Touchpad"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerInfo.html",
    "title": "Class MixedRealityControllerInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerInfo This script keeps track of the GameObjects representations for each button on the Mixed Reality Controllers. It also keeps track of the animation Transforms in order to properly animate according to user input. Inheritance Object MixedRealityControllerInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerInfo Constructors MixedRealityControllerInfo(GameObject, Handedness) Declaration public MixedRealityControllerInfo(GameObject controllerParent, Handedness handedness) Parameters Type Name Description GameObject controllerParent Handedness handedness Fields ControllerParent Declaration public readonly GameObject ControllerParent Field Value Type Description GameObject Handedness Declaration public readonly Handedness Handedness Field Value Type Description Handedness Methods AnimateGrasp(Boolean) Declaration public void AnimateGrasp(bool isGrasped) Parameters Type Name Description Boolean isGrasped AnimateHome(Boolean) Declaration public void AnimateHome(bool isHomePressed) Parameters Type Name Description Boolean isHomePressed AnimateMenu(Boolean) Declaration public void AnimateMenu(bool isMenuPressed) Parameters Type Name Description Boolean isMenuPressed AnimateSelect(Single) Declaration public void AnimateSelect(float newSelectPressedAmount) Parameters Type Name Description Single newSelectPressedAmount AnimateThumbstick(Boolean, Vector2) Declaration public void AnimateThumbstick(bool isThumbstickPressed, Vector2 newThumbstickPosition) Parameters Type Name Description Boolean isThumbstickPressed Vector2 newThumbstickPosition AnimateTouchpad(Boolean, Boolean, Vector2) Declaration public void AnimateTouchpad(bool isTouchpadPressed, bool isTouchpadTouched, Vector2 newTouchpadPosition) Parameters Type Name Description Boolean isTouchpadPressed Boolean isTouchpadTouched Vector2 newTouchpadPosition LoadInfo(Transform[], MixedRealityControllerVisualizer) Iterates through the Transform array to find specifically named GameObjects. These GameObjects specify the animation bounds and the GameObject to modify for button, thumbstick, and touchpad animation. Declaration public void LoadInfo(Transform[] childTransforms, MixedRealityControllerVisualizer motionControllerVisualizer) Parameters Type Name Description Transform [] childTransforms The transforms of the glTF model. MixedRealityControllerVisualizer motionControllerVisualizer SetRenderersVisible(Boolean) Declaration public void SetRenderersVisible(bool visible) Parameters Type Name Description Boolean visible TryGetElement(MixedRealityControllerInfo.ControllerElementEnum, out Transform) Declaration public bool TryGetElement(MixedRealityControllerInfo.ControllerElementEnum element, out Transform elementTransform) Parameters Type Name Description MixedRealityControllerInfo.ControllerElementEnum element Transform elementTransform Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerMapping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerMapping.html",
    "title": "Struct MixedRealityControllerMapping | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityControllerMapping Used to define a controller or other input device's physical buttons, and other attributes. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MixedRealityControllerMapping Constructors MixedRealityControllerMapping(Type, Handedness) Constructor. Declaration public MixedRealityControllerMapping(Type controllerType, Handedness handedness = null) Parameters Type Name Description Type controllerType Controller Type to instantiate at runtime. Handedness handedness The designated hand that the device is managing. Properties ControllerType Controller Type to instantiate at runtime. Declaration public SystemType ControllerType { get; } Property Value Type Description SystemType Description Description of the Device. Declaration public string Description { get; } Property Value Type Description String Handedness The designated hand that the device is managing. Declaration public Handedness Handedness { get; } Property Value Type Description Handedness HasCustomInteractionMappings Is this controller mapping using custom interactions? Declaration public bool HasCustomInteractionMappings { get; } Property Value Type Description Boolean Interactions Details the list of available buttons / interactions available from the device. Declaration public MixedRealityInteractionMapping[] Interactions { get; } Property Value Type Description MixedRealityInteractionMapping [] SupportedControllerType Declaration public SupportedControllerType SupportedControllerType { get; } Property Value Type Description SupportedControllerType"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerMappingProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerMappingProfile.html",
    "title": "Class MixedRealityControllerMappingProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerMappingProfile New controller types can be registered by adding the MixedRealityControllerAttribute to the controller class. Inheritance Object BaseMixedRealityProfile MixedRealityControllerMappingProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerMappingProfile : BaseMixedRealityProfile Properties MixedRealityControllerMappingProfiles Declaration public MixedRealityControllerMapping[] MixedRealityControllerMappingProfiles { get; } Property Value Type Description MixedRealityControllerMapping [] MixedRealityControllerMappings The list of controller mappings your application can use. Declaration public MixedRealityControllerMapping[] MixedRealityControllerMappings { get; } Property Value Type Description MixedRealityControllerMapping []"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerVisualizationProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerVisualizationProfile.html",
    "title": "Class MixedRealityControllerVisualizationProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerVisualizationProfile Inheritance Object BaseMixedRealityProfile MixedRealityControllerVisualizationProfile Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerVisualizationProfile : BaseMixedRealityProfile Properties ControllerVisualizationSettings The current list of controller visualization settings. Declaration public MixedRealityControllerVisualizationSetting[] ControllerVisualizationSettings { get; } Property Value Type Description MixedRealityControllerVisualizationSetting [] DefaultControllerModelMaterial The default controller model material when loading platform SDK controller models. This value is used as a fallback if no controller definition exists with a custom material type. Declaration public Material DefaultControllerModelMaterial { get; } Property Value Type Description Material DefaultControllerVisualizationType The default controller visualization type. This value is used as a fallback if no controller definition exists with a custom visualization type. Declaration public SystemType DefaultControllerVisualizationType { get; } Property Value Type Description SystemType GlobalLeftHandModel The Default controller model when there is no specific controller model for the Left hand or when no hand is specified (Handedness = none) Declaration public GameObject GlobalLeftHandModel { get; } Property Value Type Description GameObject Remarks If the default model for the left hand controller can not be found, the controller will fall back and use this for visualization. GlobalLeftHandVisualizer The Default controller model when there is no specific controller model for the Left hand or when no hand is specified (Handedness = none) Declaration public GameObject GlobalLeftHandVisualizer { get; } Property Value Type Description GameObject Remarks If the default model for the left hand controller can not be found, the controller will fall back and use this for visualization. GlobalRightHandModel The Default controller model when there is no specific controller model for the Right hand. Declaration public GameObject GlobalRightHandModel { get; } Property Value Type Description GameObject Remarks If the default model for the right hand controller can not be found, the controller will fall back and use this for visualization. GlobalRightHandVisualizer The Default hand model when there is no specific hand model for the Right hand. Declaration public GameObject GlobalRightHandVisualizer { get; } Property Value Type Description GameObject Remarks If the default model for the right hand can not be found, the hand will fall back and use this for visualization. RenderMotionControllers Enable and configure the controller rendering of the Motion Controllers on Startup. Declaration public bool RenderMotionControllers { get; } Property Value Type Description Boolean UseDefaultModels Check to obtain controller models from the platform SDK. If left unchecked, the global models will be used. Note: this value is overridden by controller definitions. Declaration public bool UseDefaultModels { get; } Property Value Type Description Boolean Methods GetControllerModelOverride(Type, Handedness) Gets the override model for a specific controller type and hand Declaration public GameObject GetControllerModelOverride(Type controllerType, Handedness hand) Parameters Type Name Description Type controllerType The type of controller to query for Handedness hand The specific hand assigned to the controller Returns Type Description GameObject GetControllerVisualizationTypeOverride(Type, Handedness) Gets the override IMixedRealityControllerVisualizer type for a specific controller type and hand. If the requested controller type is not defined, DefaultControllerVisualizationType is returned. Declaration public SystemType GetControllerVisualizationTypeOverride(Type controllerType, Handedness hand) Parameters Type Name Description Type controllerType The type of controller to query for Handedness hand The specific hand assigned to the controller Returns Type Description SystemType GetDefaultControllerModelMaterialOverride(Type, Handedness) Gets the DefaultModelMaterial value defined for the specified controller definition. If the requested controller type is not defined, the global DefaultControllerModelMaterial is returned. Declaration public Material GetDefaultControllerModelMaterialOverride(Type controllerType, Handedness hand) Parameters Type Name Description Type controllerType The type of controller to query for Handedness hand The specific hand assigned to the controller Returns Type Description Material GetUseDefaultModelsOverride(Type, Handedness) Gets the UseDefaultModels value defined for the specified controller definition. If the requested controller type is not defined, the default UseDefaultModels is returned. Declaration public bool GetUseDefaultModelsOverride(Type controllerType, Handedness hand) Parameters Type Name Description Type controllerType The type of controller to query for Handedness hand The specific hand assigned to the controller Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerVisualizationSetting.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerVisualizationSetting.html",
    "title": "Struct MixedRealityControllerVisualizationSetting | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealityControllerVisualizationSetting Used to define a controller's visualization settings. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct MixedRealityControllerVisualizationSetting Constructors MixedRealityControllerVisualizationSetting(String, Type, Handedness, GameObject) Constructor. Declaration public MixedRealityControllerVisualizationSetting(string description, Type controllerType, Handedness handedness = null, GameObject overrideModel = null) Parameters Type Name Description String description Description of the Device. Type controllerType Controller Type to instantiate at runtime. Handedness handedness The designated hand that the device is managing. GameObject overrideModel The controller model prefab to be rendered. Properties ControllerType Controller Type to instantiate at runtime. Declaration public SystemType ControllerType { get; } Property Value Type Description SystemType ControllerVisualizationType The concrete Controller Visualizer component to use on the rendered controller model Declaration public SystemType ControllerVisualizationType { get; } Property Value Type Description SystemType DefaultModelMaterial The default controller model material when loading platform SDK controller models. This value is used as a fallback if no controller definition exists with a custom material type. Declaration public Material DefaultModelMaterial { get; } Property Value Type Description Material Description Description of the Device. Declaration public string Description { get; } Property Value Type Description String Handedness The designated hand that the device is managing. Declaration public Handedness Handedness { get; } Property Value Type Description Handedness OverrideControllerModel The controller model prefab to be rendered. Declaration public GameObject OverrideControllerModel { get; } Property Value Type Description GameObject UseDefaultModel Check to obtain controller models from the platform SDK. If left unchecked, the global models will be used. Declaration public bool UseDefaultModel { get; } Property Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.MixedRealityControllerVisualizer.html",
    "title": "Class MixedRealityControllerVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityControllerVisualizer The Mixed Reality Visualization component is primarily responsible for synchronizing the user's current input with controller models. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer MixedRealityControllerVisualizer WindowsMixedRealityControllerVisualizer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityControllerVisualizer Inherited Members ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.Controller ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) ControllerPoseSynchronizer.OnSourceLost(SourceStateEventData) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.OnEnable() InputSystemGlobalHandlerListener.Start() InputSystemGlobalHandlerListener.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class MixedRealityControllerVisualizer : ControllerPoseSynchronizer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityControllerVisualizer Properties GameObjectProxy The GameObject reference for this controller. Declaration public GameObject GameObjectProxy { get; } Property Value Type Description GameObject Remarks This reference may not always be available when called. Methods OnInputChanged(InputEventData<Single>) Visualize single axis controls on the controller model, if supported Declaration public override void OnInputChanged(InputEventData<float> eventData) Parameters Type Name Description InputEventData < Single > eventData Overrides ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) Remarks Reserved for future implementation OnInputChanged(InputEventData<Vector2>) Visualize the movement of a dual axis input on the controller model, if supported Declaration public override void OnInputChanged(InputEventData<Vector2> eventData) Parameters Type Name Description InputEventData < Vector2 > eventData Overrides ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) Remarks Reserved for future implementation OnInputDown(InputEventData) Visualize digital and single axis controls down state on the controller model, if supported Declaration public override void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides ControllerPoseSynchronizer.OnInputDown(InputEventData) Remarks Reserved for future implementation OnInputUp(InputEventData) Visualize digital and single axis controls up state on the controller model, if supported Declaration public override void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides ControllerPoseSynchronizer.OnInputUp(InputEventData) Remarks Reserved for future implementation Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityControllerVisualizer See Also MixedRealityControllerMappingProfile"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EDeviceActivityLevel.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EDeviceActivityLevel.html",
    "title": "Enum EDeviceActivityLevel | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EDeviceActivityLevel Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EDeviceActivityLevel Fields Name Description k_EDeviceActivityLevel_Idle k_EDeviceActivityLevel_Standby k_EDeviceActivityLevel_Unknown k_EDeviceActivityLevel_UserInteraction k_EDeviceActivityLevel_UserInteraction_Timeout"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EDualAnalogWhich.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EDualAnalogWhich.html",
    "title": "Enum EDualAnalogWhich | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EDualAnalogWhich Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EDualAnalogWhich Fields Name Description k_EDualAnalog_Left k_EDualAnalog_Right"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EGamepadTextInputLineMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EGamepadTextInputLineMode.html",
    "title": "Enum EGamepadTextInputLineMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EGamepadTextInputLineMode Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EGamepadTextInputLineMode Fields Name Description k_EGamepadTextInputLineModeMultipleLines k_EGamepadTextInputLineModeSingleLine"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EGamepadTextInputMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EGamepadTextInputMode.html",
    "title": "Enum EGamepadTextInputMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EGamepadTextInputMode Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EGamepadTextInputMode Fields Name Description k_EGamepadTextInputModeNormal k_EGamepadTextInputModePassword k_EGamepadTextInputModeSubmit"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EHiddenAreaMeshType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EHiddenAreaMeshType.html",
    "title": "Enum EHiddenAreaMeshType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EHiddenAreaMeshType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EHiddenAreaMeshType Fields Name Description k_eHiddenAreaMesh_Inverse k_eHiddenAreaMesh_LineLoop k_eHiddenAreaMesh_Max k_eHiddenAreaMesh_Standard"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EIOBufferError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EIOBufferError.html",
    "title": "Enum EIOBufferError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EIOBufferError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EIOBufferError Fields Name Description IOBuffer_InvalidArgument IOBuffer_InvalidHandle IOBuffer_OperationFailed IOBuffer_PathDoesNotExist IOBuffer_PathExists IOBuffer_Permission IOBuffer_Success"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EIOBufferMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EIOBufferMode.html",
    "title": "Enum EIOBufferMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EIOBufferMode Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EIOBufferMode Fields Name Description Create Read Write"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EOverlayDirection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EOverlayDirection.html",
    "title": "Enum EOverlayDirection | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EOverlayDirection Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EOverlayDirection Fields Name Description Count Down Left Right Up"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EShowUIType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EShowUIType.html",
    "title": "Enum EShowUIType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EShowUIType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EShowUIType Fields Name Description ShowUI_ControllerBinding ShowUI_ManageTrackers ShowUI_QuickStart"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETextureType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETextureType.html",
    "title": "Enum ETextureType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETextureType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETextureType Fields Name Description DirectX DirectX12 DXGISharedHandle Invalid IOSurface Metal OpenGL Vulkan"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedControllerRole.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedControllerRole.html",
    "title": "Enum ETrackedControllerRole | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETrackedControllerRole Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETrackedControllerRole Fields Name Description Invalid LeftHand Max OptOut RightHand Treadmill"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedDeviceClass.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.ETrackedDeviceClass.html",
    "title": "Enum ETrackedDeviceClass | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ETrackedDeviceClass Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum ETrackedDeviceClass Fields Name Description Controller DisplayRedirect GenericTracker HMD Invalid Max TrackingReference"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRScreenshotError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRScreenshotError.html",
    "title": "Enum EVRScreenshotError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRScreenshotError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRScreenshotError Fields Name Description BufferTooSmall IncompatibleVersion None NotFound RequestFailed ScreenshotAlreadyInProgress"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRScreenshotPropertyFilenames.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRScreenshotPropertyFilenames.html",
    "title": "Enum EVRScreenshotPropertyFilenames | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRScreenshotPropertyFilenames Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRScreenshotPropertyFilenames Fields Name Description Preview VR"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRScreenshotType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRScreenshotType.html",
    "title": "Enum EVRScreenshotType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRScreenshotType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRScreenshotType Fields Name Description Cubemap Mono MonoPanorama None Stereo StereoPanorama"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSettingsError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRSettingsError.html",
    "title": "Enum EVRSettingsError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRSettingsError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRSettingsError Fields Name Description IPCFailed JsonParseFailed None ReadFailed UnsetSettingHasNoDefault WriteFailed"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRTrackedCameraFrameLayout.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRTrackedCameraFrameLayout.html",
    "title": "Enum EVRTrackedCameraFrameLayout | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRTrackedCameraFrameLayout Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRTrackedCameraFrameLayout Fields Name Description HorizontalLayout Mono Stereo VerticalLayout"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRTrackedCameraFrameType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRTrackedCameraFrameType.html",
    "title": "Enum EVRTrackedCameraFrameType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRTrackedCameraFrameType Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRTrackedCameraFrameType Fields Name Description Distorted MAX_CAMERA_FRAME_TYPES MaximumUndistorted Undistorted"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVSync.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVSync.html",
    "title": "Enum EVSync | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVSync Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVSync Fields Name Description None NoWaitRender WaitRender"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HiddenAreaMesh_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.HiddenAreaMesh_t.html",
    "title": "Struct HiddenAreaMesh_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct HiddenAreaMesh_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct HiddenAreaMesh_t Fields pVertexData Declaration public IntPtr pVertexData Field Value Type Description IntPtr unTriangleCount Declaration public uint unTriangleCount Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_InputBindingLoad_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_InputBindingLoad_t.html",
    "title": "Struct VREvent_InputBindingLoad_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_InputBindingLoad_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_InputBindingLoad_t Fields pathControllerType Declaration public ulong pathControllerType Field Value Type Description UInt64 pathMessage Declaration public ulong pathMessage Field Value Type Description UInt64 pathUrl Declaration public ulong pathUrl Field Value Type Description UInt64 ulAppContainer Declaration public ulong ulAppContainer Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Ipd_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Ipd_t.html",
    "title": "Struct VREvent_Ipd_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Ipd_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Ipd_t Fields ipdMeters Declaration public float ipdMeters Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Keyboard_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Keyboard_t.html",
    "title": "Struct VREvent_Keyboard_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Keyboard_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Keyboard_t Fields cNewInput0 Declaration public byte cNewInput0 Field Value Type Description Byte cNewInput1 Declaration public byte cNewInput1 Field Value Type Description Byte cNewInput2 Declaration public byte cNewInput2 Field Value Type Description Byte cNewInput3 Declaration public byte cNewInput3 Field Value Type Description Byte cNewInput4 Declaration public byte cNewInput4 Field Value Type Description Byte cNewInput5 Declaration public byte cNewInput5 Field Value Type Description Byte cNewInput6 Declaration public byte cNewInput6 Field Value Type Description Byte cNewInput7 Declaration public byte cNewInput7 Field Value Type Description Byte uUserValue Declaration public ulong uUserValue Field Value Type Description UInt64 Properties cNewInput Declaration public string cNewInput { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_MessageOverlay_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_MessageOverlay_t.html",
    "title": "Struct VREvent_MessageOverlay_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_MessageOverlay_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_MessageOverlay_t Fields unVRMessageOverlayResponse Declaration public uint unVRMessageOverlayResponse Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Mouse_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Mouse_t.html",
    "title": "Struct VREvent_Mouse_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Mouse_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Mouse_t Fields button Declaration public uint button Field Value Type Description UInt32 x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Notification_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Notification_t.html",
    "title": "Struct VREvent_Notification_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Notification_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Notification_t Fields notificationId Declaration public uint notificationId Field Value Type Description UInt32 ulUserValue Declaration public ulong ulUserValue Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Overlay_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Overlay_t.html",
    "title": "Struct VREvent_Overlay_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Overlay_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Overlay_t Fields devicePath Declaration public ulong devicePath Field Value Type Description UInt64 overlayHandle Declaration public ulong overlayHandle Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_PerformanceTest_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_PerformanceTest_t.html",
    "title": "Struct VREvent_PerformanceTest_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_PerformanceTest_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_PerformanceTest_t Fields m_nFidelityLevel Declaration public uint m_nFidelityLevel Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Process_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Process_t.html",
    "title": "Struct VREvent_Process_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Process_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Process_t Fields bForced Declaration public bool bForced Field Value Type Description Boolean oldPid Declaration public uint oldPid Field Value Type Description UInt32 pid Declaration public uint pid Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ProgressUpdate_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ProgressUpdate_t.html",
    "title": "Struct VREvent_ProgressUpdate_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_ProgressUpdate_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_ProgressUpdate_t Fields fProgress Declaration public float fProgress Field Value Type Description Single pathDevice Declaration public ulong pathDevice Field Value Type Description UInt64 pathIcon Declaration public ulong pathIcon Field Value Type Description UInt64 pathInputSource Declaration public ulong pathInputSource Field Value Type Description UInt64 pathProgressAction Declaration public ulong pathProgressAction Field Value Type Description UInt64 ulApplicationPropertyContainer Declaration public ulong ulApplicationPropertyContainer Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Property_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Property_t.html",
    "title": "Struct VREvent_Property_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Property_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Property_t Fields container Declaration public ulong container Field Value Type Description UInt64 prop Declaration public ETrackedDeviceProperty prop Field Value Type Description ETrackedDeviceProperty"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Reserved_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Reserved_t.html",
    "title": "Struct VREvent_Reserved_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Reserved_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Reserved_t Fields reserved0 Declaration public ulong reserved0 Field Value Type Description UInt64 reserved1 Declaration public ulong reserved1 Field Value Type Description UInt64 reserved2 Declaration public ulong reserved2 Field Value Type Description UInt64 reserved3 Declaration public ulong reserved3 Field Value Type Description UInt64 reserved4 Declaration public ulong reserved4 Field Value Type Description UInt64 reserved5 Declaration public ulong reserved5 Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.SpatialAwareness.Utilities Classes SpatialMeshExporter Utility to export current Spatial Mesh Data to OBJ file"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.SpatialAwareness | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.SpatialAwareness Classes BaseSpatialAwarenessObject BaseSpatialAwarenessObserverProfile BaseSpatialObserver Class providing a base implementation of the IMixedRealitySpatialAwarenessObserver interface. MixedRealitySpatialAwarenessEventData Data for spatial awareness events. MixedRealitySpatialAwarenessEventData<T> Data for spatial awareness events. MixedRealitySpatialAwarenessMeshObserverProfile Configuration profile settings for spatial awareness mesh observers. MixedRealitySpatialAwarenessSystem Class providing the default implementation of the IMixedRealitySpatialAwarenessSystem interface. MixedRealitySpatialAwarenessSystemProfile Configuration profile settings for spatial awareness mesh observers. SpatialAwarenessMeshObject Object encapsulating the components of a spatial awareness mesh object. SpatialAwarenessPlanarObject Structs MixedRealitySpatialObserverConfiguration Interfaces IMixedRealitySpatialAwarenessMeshObserver The interface for defining an IMixedRealitySpatialAwarenessObserver which provides mesh data. IMixedRealitySpatialAwarenessObject IMixedRealitySpatialAwarenessObservationHandler<T> IMixedRealitySpatialAwarenessObserver IMixedRealitySpatialAwarenessSystem Enums SpatialAwarenessMeshDisplayOptions Options for how the spatial mesh is to be displayed by the spatial awareness system. SpatialAwarenessMeshLevelOfDetail Enumeration defining levels of detail for the spatial awareness mesh subsystem. SpatialAwarenessSurfaceTypes Enumeration defining the types of planar surfaces that are supported by the spatial awareness surface finding subsystem."
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile.RoomFileImporter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile.RoomFileImporter.html",
    "title": "Class RoomFileImporter | Mixed Reality Toolkit Documentation",
    "keywords": "Class RoomFileImporter Inheritance Object RoomFileImporter Namespace : Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile Assembly : cs.temp.dll.dll Syntax public class RoomFileImporter : ScriptedImporter Methods OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext context) Parameters Type Name Description AssetImportContext context"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile.RoomFileSerializer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile.RoomFileSerializer.html",
    "title": "Class RoomFileSerializer | Mixed Reality Toolkit Documentation",
    "keywords": "Class RoomFileSerializer Converts a UnityEngine.Mesh object to and from an array of bytes that conform to the .room file format. File header: vertex count (32 bit integer), triangle count (32 bit integer) Vertex list: vertex.x, vertex.y, vertex.z (all 32 bit float) Triangle index list: 32 bit integers Inheritance Object RoomFileSerializer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile Assembly : cs.temp.dll.dll Syntax public static class RoomFileSerializer Methods Deserialize(BinaryReader) Deserializes a list of Mesh objects from the provided byte array. Declaration public static IList<Mesh> Deserialize(BinaryReader reader) Parameters Type Name Description BinaryReader reader The reader from which to deserialize the meshes. Returns Type Description IList < Mesh > Collection of Mesh objects."
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.TestPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.TestPointer.html",
    "title": "Class TestPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestPointer Inheritance Object TestPointer Namespace : Microsoft.MixedReality.Toolkit.Tests.InputSystem Assembly : cs.temp.dll.dll Syntax public class TestPointer : IMixedRealityPointer Constructors TestPointer() Declaration public TestPointer() Properties BaseCursor Declaration public IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller Declaration public IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController CursorModifier Declaration public ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier FocusTarget Declaration public IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent Declaration public IMixedRealityInputSource InputSourceParent { get; } Property Value Type Description IMixedRealityInputSource IsActive Declaration public bool IsActive { get; set; } Property Value Type Description Boolean IsFocusLocked Declaration public bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Declaration public bool IsInteractionEnabled { get; set; } Property Value Type Description Boolean IsTargetPositionLockedOnFocusLock Declaration public bool IsTargetPositionLockedOnFocusLock { get; set; } Property Value Type Description Boolean PointerId Declaration public uint PointerId { get; set; } Property Value Type Description UInt32 PointerName Declaration public string PointerName { get; set; } Property Value Type Description String Position Declaration public Vector3 Position { get; } Property Value Type Description Vector3 PrioritizedLayerMasksOverride Declaration public LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] Rays Declaration public RayStep[] Rays { get; } Property Value Type Description RayStep [] Result Declaration public IPointerResult Result { get; set; } Property Value Type Description IPointerResult Rotation Declaration public Quaternion Rotation { get; } Property Value Type Description Quaternion SceneQueryType Declaration public SceneQueryType SceneQueryType { get; set; } Property Value Type Description SceneQueryType SphereCastRadius Declaration public float SphereCastRadius { get; set; } Property Value Type Description Single Methods Equals(Object, Object) Declaration public bool Equals(object x, object y) Parameters Type Name Description Object x Object y Returns Type Description Boolean GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 OnPostSceneQuery() Declaration public void OnPostSceneQuery() OnPreCurrentPointerTargetChange() Declaration public void OnPreCurrentPointerTargetChange() OnPreSceneQuery() Declaration public void OnPreSceneQuery()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.UnityInputManagerHelperTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.UnityInputManagerHelperTests.html",
    "title": "Class UnityInputManagerHelperTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityInputManagerHelperTests Inheritance Object UnityInputManagerHelperTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.InputSystem Assembly : cs.temp.dll.dll Syntax public class UnityInputManagerHelperTests Methods TearDown() Declaration public void TearDown() TestAddCustomMappings() Declaration public void TestAddCustomMappings() TestRemoveCustomMappings() Declaration public void TestRemoveCustomMappings()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InputSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.InputSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.InputSystem Classes ControllerMappingTests DefaultPrimaryPointerSelectorTests InputSystemTests InteractionDefinitionTests TestPointer UnityInputManagerHelperTests"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.InteractableTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.InteractableTests.html",
    "title": "Class InteractableTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class InteractableTests Inheritance Object BasePlayModeTests InteractableTests Inherited Members BasePlayModeTests.TearDown() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class InteractableTests : BasePlayModeTests Methods Setup() Declaration public override void Setup() Overrides BasePlayModeTests.Setup() TestDestroy() Instantiates a runtime assembled Interactable and destroy the Interactable component Declaration public IEnumerator TestDestroy() Returns Type Description IEnumerator TestDimensions() Assemble an Interactable GameObject and test various SelectionModes Declaration public IEnumerator TestDimensions() Returns Type Description IEnumerator TestDisabledOnStart() Tests that Interactable configured not Enabled on start works as expected. Enabled on start is an editor level setting only that is applied on Awake/Start Declaration public IEnumerator TestDisabledOnStart() Returns Type Description IEnumerator TestDisabledStateThemes() Instantiates a runtime assembled Interactable and set Interactable state to disabled (not disabling the GameObject/component) Declaration public IEnumerator TestDisabledStateThemes() Returns Type Description IEnumerator TestDisableOnClick() Tests button depth and focus state after enabling, disabling and re-enabling Interactable internally via IsEnabled. The focus state after re-enabling should be false and button depth should be in its default position. This test is specifically addressing behavior described in issue 4967. Declaration public IEnumerator TestDisableOnClick() Returns Type Description IEnumerator TestHandInputOnPrefab() Instantiates a push button prefab and uses simulated hand input to press it. Declaration public IEnumerator TestHandInputOnPrefab() Returns Type Description IEnumerator TestHandInputOnRuntimeAssembled() Assembles a push button from primitives and uses simulated hand input to press it. Declaration public IEnumerator TestHandInputOnRuntimeAssembled() Returns Type Description IEnumerator TestInputActions() Assembles a push button from primitives and uses simulated input events to press it. Declaration public IEnumerator TestInputActions() Returns Type Description IEnumerator TestInteractableToggleCollectionIndexUpdate() Test InteractableToggleCollection CurrentIndex updates Declaration public IEnumerator TestInteractableToggleCollectionIndexUpdate() Returns Type Description IEnumerator TestPressableToggleHoloLens2() Tests that the toggle button states consistently return to original state after subsequent clicks (front plate does not move back after every click). Declaration public IEnumerator TestPressableToggleHoloLens2() Returns Type Description IEnumerator TestRadialSetPrefab() Tests that radial buttons can be selected and deselected, and that a radial button set allows just one button to be selected at a time Declaration public IEnumerator TestRadialSetPrefab() Returns Type Description IEnumerator TestSelectGlobalInput() Instantiates a push button prefab and uses simulated global input events to press it. Test that global input behaves correctly when Interactable IsEnabled and not Declaration public IEnumerator TestSelectGlobalInput() Returns Type Description IEnumerator TestTouchInput() Test touch input on Interactable by looking at state changes, both for when IsEnabled and not Declaration public IEnumerator TestTouchInput() Returns Type Description IEnumerator TestTriggerOnClick() Test the TriggerOnClick API for Interactable both when IsEnabled and not. Button should fire OnClick and move UI Declaration public IEnumerator TestTriggerOnClick() Returns Type Description IEnumerator TestVoiceInputOnPrefab() Instantiates a push button prefab and uses simulated voice input events to press it, both when IsEnabled and not Declaration public IEnumerator TestVoiceInputOnPrefab() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.ManipulationHandlerTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.ManipulationHandlerTests.html",
    "title": "Class ManipulationHandlerTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class ManipulationHandlerTests Inheritance Object ManipulationHandlerTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class ManipulationHandlerTests Methods ManipulationHandlerDisableObject() Ensure that while manipulating an object, if that object gets deactivated, that manipulation no longer moves that object. Declaration public IEnumerator ManipulationHandlerDisableObject() Returns Type Description IEnumerator ManipulationHandlerForceRelease() Test creates an object with manipulationhandler verifies translation with articulated hand as well as forcefully ending of the manipulation from gaze provider. Declaration public IEnumerator ManipulationHandlerForceRelease() Returns Type Description IEnumerator ManipulationHandlerGazeHover() Test creating ManipulationHandler and receiving hover enter/exit events from gaze provider. Declaration public IEnumerator ManipulationHandlerGazeHover() Returns Type Description IEnumerator ManipulationHandlerInstantiate() Test creating adding a ManipulationHandler to GameObject programmatically. Should be able to run scene without getting any exceptions. Declaration public IEnumerator ManipulationHandlerInstantiate() Returns Type Description IEnumerator ManipulationHandlerMinMaxScale() This tests the minimum and maximum scaling for manipulation. This test will scale a cube with two hand manipulation and ensure that maximum and minimum scales are not exceeded. Declaration public IEnumerator ManipulationHandlerMinMaxScale() Returns Type Description IEnumerator ManipulationHandlerMoveYAxisGGV() This test first moves the hand a set amount along the x-axis, records its x distance from the hand, then moves it the same amount along the y-axis and records its y distance from the hand. Given no constraints on manipulation, we expect these values to be the same. This test was added as a change to pointer behaviour made GGV manipulation along the y-axis sluggish. Declaration public IEnumerator ManipulationHandlerMoveYAxisGGV() Returns Type Description IEnumerator ManipulationHandlerOneHandMoveFar() This tests the one hand far movement while camera (character) is moving around. The test will check the offset between object pivot and grab point and make sure we're not drifting out of the object on pointer rotation - this test is the same for all objects that won't change their orientation to camera while camera / pointer rotates as this will modify the far interaction grab point Declaration public IEnumerator ManipulationHandlerOneHandMoveFar() Returns Type Description IEnumerator ManipulationHandlerOneHandMoveNear() This tests the one hand near movement while camera (character) is moving around. The test will check the offset between object pivot and grab point and make sure we're not drifting out of the object on pointer rotation - this test should be the same in all rotation setups Declaration public IEnumerator ManipulationHandlerOneHandMoveNear() Returns Type Description IEnumerator ManipulationHandlerOneHandRotateWithConstraint() This tests the one hand near rotation and applying different rotation constraints to the object. NOTE: This tests both LOCAL and WORLD SPACE rotation. Declaration public IEnumerator ManipulationHandlerOneHandRotateWithConstraint() Returns Type Description IEnumerator ManipulationHandlerOriginOffset() This test records the poses and scales of an object after various forms of manipulation, once when the object origin is at the mesh centre and again when the origin is offset from the mesh. The test then compares these poses and scales in order to ensure that they are about equal. Declaration public IEnumerator ManipulationHandlerOriginOffset() Returns Type Description IEnumerator ManipulationHandlerPositionlessController() For positionless input sources that use gaze, such as xbox controller, pointer position will be coincident with the head position. This was causing issues with manipulation handler, as the distance between the pointer and the head is taken as part of the move logic. This test simulates a positionless input source by using GGV hands and setting the hand position to be the head position. It then ensures that there is no weird behaviour as a result of this. Declaration public IEnumerator ManipulationHandlerPositionlessController() Returns Type Description IEnumerator ManipulationHandlerRotateAboutObjectCenter() Ensure that a manipulated object has the same rotation as the hand when RotateAboutObjectCenter is used Declaration public IEnumerator ManipulationHandlerRotateAboutObjectCenter() Returns Type Description IEnumerator ManipulationHandlerRotateHeadGGV() This test rotates the head without moving the hand. This test is set up to test using the Gestures input simulation mode as this is where we observed issues with this. If the head rotates, without moving the hand, the grabbed object should not move. Declaration public IEnumerator ManipulationHandlerRotateHeadGGV() Returns Type Description IEnumerator ManipulationHandlerRotateWithUser() Tests MaintainRotationToUser mode of ManipulationHandler (OneHandedOnly) MaintainRotationToUser should only align with user / camera on x / y and not apply rotations in z Declaration public IEnumerator ManipulationHandlerRotateWithUser() Returns Type Description IEnumerator ManipulationHandlerThrow() Test validates throw behavior on manipulation handler. Box with disabled gravity should travel a certain distance when being released from grab during hand movement Declaration public IEnumerator ManipulationHandlerThrow() Returns Type Description IEnumerator Setup() Declaration public void Setup() TearDown() Declaration public void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.NearInteractionTouchableTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.NearInteractionTouchableTests.html",
    "title": "Class NearInteractionTouchableTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class NearInteractionTouchableTests Inheritance Object NearInteractionTouchableTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class NearInteractionTouchableTests Methods NearInteractionTouchableDistance() Test minimum touch distance. Declaration public IEnumerator NearInteractionTouchableDistance() Returns Type Description IEnumerator Remarks Near interaction uses two separate distance calculations: The PokePointer uses the DistanceToTouchable to determine the closest touchable. This distance value is also used compared to PokePointer.TouchableDistance to determine the set of eligible touchables in the first place. There is no explicit spec which space this distance is computed in, although it should be in world space. Due to the way touchables convert pointer position into local space first and then do a scale-only inverse transform there may be errors. After the PokePointer has selected the closest touchable, it then performs a raycast against either the collider or the UnityUI canvas, depending on type. The (world space) length of that ray is then used as the actual distance for triggering touch events. When the ray length is negative the TouchDown event is raised and the touchable is \"down\". When the touchable is \"down\" and the ray length is greater than DebounceThreshold the TouchUp event is raised and the touchable is released. The normal vector for performing the ray cast, however, is still the one returned by the first distance calculation. NearInteractionTouchable also calculates distance from the object center, but the raycast ignores this and uses distance from the collider. UnityUI OTOH does a raycast against a flat canvas, so the two distance values should match (but it's not guaranteed). NearInteractionTouchableInstantiate() Test creating adding a NearInteractionTouchable to GameObject programmatically. Should be able to run scene without getting any exceptions. Declaration public IEnumerator NearInteractionTouchableInstantiate() Returns Type Description IEnumerator NearInteractionTouchableOverlapQuerySaturation() Test buffer saturation for the overlap query Declaration public IEnumerator NearInteractionTouchableOverlapQuerySaturation() Returns Type Description IEnumerator NearInteractionTouchableSetTouchableCollider() Test the SetTouchableCollider(BoxCollider collider) method by checking if the touch event is raised when NearInteractionTouchable is added to a gameObject and if the bounds and box collider size is changed. Declaration public IEnumerator NearInteractionTouchableSetTouchableCollider() Returns Type Description IEnumerator NearInteractionTouchableUnityUiButton() Test Unity UI button Declaration public IEnumerator NearInteractionTouchableUnityUiButton() Returns Type Description IEnumerator NearInteractionTouchableUnityUiToggle() Test Unity UI toggle button Declaration public IEnumerator NearInteractionTouchableUnityUiToggle() Returns Type Description IEnumerator NearInteractionTouchableVariant() Test creates an object with NearInteractionTouchable Declaration public IEnumerator NearInteractionTouchableVariant() Returns Type Description IEnumerator NearInteractionTouchableVolumeVariant() Test creates an object with NearInteractionTouchableVolume Declaration public IEnumerator NearInteractionTouchableVolumeVariant() Returns Type Description IEnumerator Setup() Declaration public void Setup() TearDown() Declaration public void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.PlayModeTestUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.PlayModeTestUtilities.html",
    "title": "Class PlayModeTestUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class PlayModeTestUtilities Inheritance Object PlayModeTestUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class PlayModeTestUtilities Methods EnsureInputModule() Make sure there is a MixedRealityInputModule on the main camera, which is needed for using Unity UI with MRTK. Declaration public static void EnsureInputModule() Remarks Workaround for #5061 GenerateHandPose(ArticulatedHandPose.GestureId, Handedness, Vector3, Quaternion) Declaration public static SimulatedHandData.HandJointDataGenerator GenerateHandPose(ArticulatedHandPose.GestureId gesture, Handedness handedness, Vector3 worldPosition, Quaternion rotation) Parameters Type Name Description ArticulatedHandPose.GestureId gesture Handedness handedness Vector3 worldPosition Quaternion rotation Returns Type Description SimulatedHandData.HandJointDataGenerator GetInputSimulationService() Utility function to simplify code for getting access to the running InputSimulationService Declaration public static InputSimulationService GetInputSimulationService() Returns Type Description InputSimulationService Returns InputSimulationService registered for playmode test scene GetInputSystem() Declaration public static IMixedRealityInputSystem GetInputSystem() Returns Type Description IMixedRealityInputSystem GetPointer<T>(Handedness) Declaration public static T GetPointer<T>(Handedness handedness) where T : class, IMixedRealityPointer Parameters Type Name Description Handedness handedness Returns Type Description T Type Parameters Name Description T PopHandSimulationProfile() Declaration public static void PopHandSimulationProfile() PushHandSimulationProfile() Declaration public static void PushHandSimulationProfile() Setup() Creates a play mode test scene, creates an MRTK instance, initializes playspace. Declaration public static void Setup() TearDown() Destroys all objects in the play mode test scene, if it has been loaded, and shuts down MRTK instance. Declaration public static void TearDown() TeardownInputModule() Destroy the input module to ensure it gets initialized cleanly for the next test. Declaration public static void TeardownInputModule() Remarks Workaround for #5116"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.PointerBehaviorTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.PointerBehaviorTests.html",
    "title": "Class PointerBehaviorTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerBehaviorTests Verify that pointers can be turned on and off via FocusProvider.SetPointerBehavior Inheritance Object BasePlayModeTests PointerBehaviorTests Inherited Members BasePlayModeTests.Setup() BasePlayModeTests.TearDown() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class PointerBehaviorTests : BasePlayModeTests Methods TestGaze() Tests that the gaze pointer can be turned on and off Declaration public IEnumerator TestGaze() Returns Type Description IEnumerator TestGrab() Tests the grab pointer can be turned on/off Declaration public IEnumerator TestGrab() Returns Type Description IEnumerator TestPoke() Tests that poke pointer can be turned on/off Declaration public IEnumerator TestPoke() Returns Type Description IEnumerator TestRays() Tests that rays can be turned on and off Declaration public IEnumerator TestRays() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.PointerEventsTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.PointerEventsTests.html",
    "title": "Class PointerEventsTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class PointerEventsTests Inheritance Object PointerEventsTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class PointerEventsTests Methods SetUp() Declaration public void SetUp() TearDown() Declaration public void TearDown() Test() Declaration public IEnumerator Test() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.PressableButtonTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.PressableButtonTests.html",
    "title": "Class PressableButtonTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class PressableButtonTests Inheritance Object BasePlayModeTests PressableButtonTests Implements IPrebuildSetup Inherited Members BasePlayModeTests.Setup() BasePlayModeTests.TearDown() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class PressableButtonTests : BasePlayModeTests, IPrebuildSetup Properties PressableButtonsTestPrefabFilenames Declaration public static IEnumerable<string> PressableButtonsTestPrefabFilenames { get; } Property Value Type Description IEnumerable < String > Methods ButtonInstantiate(String) Declaration public IEnumerator ButtonInstantiate(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator ButtonInstantiateDisableThenEnableBeforeStart(String) Some apps will instantiate a button, disable it while they do other setup, then enable it. This caused a bug where the button front plate would be flattened against the button. This tests to confirm that this has not regressed. https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6024 Declaration public IEnumerator ButtonInstantiateDisableThenEnableBeforeStart(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator CheckPhysicalPressableRouterEventsOnDisableInteractable() Tests if Interactable is internally disabled, then the PhysicalPressEventRouter should not invoke events in Interactable. Addresses issue 5833. Declaration public IEnumerator CheckPhysicalPressableRouterEventsOnDisableInteractable() Returns Type Description IEnumerator DisablePressableButton(String) Test disabling the PressableButton GameObject and re-enabling Declaration public IEnumerator DisablePressableButton(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator PressButtonFast(String) This test reproduces P0 issue 4566 which didn't trigger a button with enabled backpressprotection if hands were moving too fast in low framerate Declaration public IEnumerator PressButtonFast(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator PressButtonWithHand(String) This test reproduces P0 issue 4263 which caused null pointers when pressing buttons See https://github.com/microsoft/MixedRealityToolkit-Unity/issues/4683 Declaration public IEnumerator PressButtonWithHand(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator ReleaseButton(String) This tests the release behavior of a button Declaration public IEnumerator ReleaseButton(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator RotateButton(String) There was an issue where rotating a button after Start() had executed resulted in the front plate going in the wrong direction. This tests that it has not regressed. https://github.com/microsoft/MixedRealityToolkit-Unity/issues/6025 Declaration public IEnumerator RotateButton(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator ScaleLocalDistances(String) Declaration public IEnumerator ScaleLocalDistances(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator ScaleWorldDistances(String) Declaration public IEnumerator ScaleWorldDistances(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator SwitchWorldToLocalDistanceMode(String) Declaration public IEnumerator SwitchWorldToLocalDistanceMode(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator TriggerButtonFarInteraction(String) This test verifies that buttons will trigger with far interaction Declaration public IEnumerator TriggerButtonFarInteraction(string prefabFilename) Parameters Type Name Description String prefabFilename Returns Type Description IEnumerator Implements IPrebuildSetup"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.ProfileTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.ProfileTests.html",
    "title": "Class ProfileTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class ProfileTests Inheritance Object ProfileTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class ProfileTests Methods TearDown() Declaration public void TearDown() TestDefaultProfile() Test that the default HoloLens 2 profile acts as expected (when hands are up, we see a hand ray). Declaration public IEnumerator TestDefaultProfile() Returns Type Description IEnumerator TestHL1Profile() Test that HoloLens 1 profile acts as expected (e.g. when hands are up there are no hand rays) Declaration public IEnumerator TestHL1Profile() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.RenderingTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.RenderingTests.html",
    "title": "Class RenderingTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class RenderingTests Unit tests to check the functionality of a handful of rendering systems. Inheritance Object BasePlayModeTests RenderingTests Inherited Members BasePlayModeTests.Setup() BasePlayModeTests.TearDown() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class RenderingTests : BasePlayModeTests Methods TestMaterialInstance() Tests if MaterialInstance can be instantiated and manipulated at runtime. Declaration public IEnumerator TestMaterialInstance() Returns Type Description IEnumerator Enumerator for Unity"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemeDefinition.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemeDefinition.html",
    "title": "Struct ThemeDefinition | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ThemeDefinition Defines configuration properties and settings to use when initializing a class extending InteractableThemeBase Implements ISerializationCallbackReceiver Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ThemeDefinition : ISerializationCallbackReceiver Properties CustomProperties List of single-value properties defined for the entire Theme engine regardless of the current state Declaration public List<ThemeProperty> CustomProperties { get; set; } Property Value Type Description List < ThemeProperty > Easing Object to configure easing between values. Type of Theme Engine, as defined by the ThemeType property, must have IsEasingSupported set to true Declaration public Easing Easing { get; set; } Property Value Type Description Easing StateProperties List of properties with values defined per state index (Example list of colors for different states) Declaration public List<ThemeStateProperty> StateProperties { get; set; } Property Value Type Description List < ThemeStateProperty > ThemeType Defines the type of Theme to associate with this definition. Type must be a class that extends InteractableThemeBase Declaration public Type ThemeType { get; set; } Property Value Type Description Type Methods GetDefaultThemeDefinition(Type) Utility function to generate the default ThemeDefinition configuration for the provided type of Theme engine Declaration public static ThemeDefinition? GetDefaultThemeDefinition(Type themeType) Parameters Type Name Description Type themeType type of Theme Engine to build default configuration for Returns Type Description Nullable < ThemeDefinition > Default ThemeDefinition configuration for the provided them type GetDefaultThemeDefinition<T>() Utility function to generate the default ThemeDefinition configuration for the provided type of Theme engine Declaration public static ThemeDefinition? GetDefaultThemeDefinition<T>() where T : InteractableThemeBase Returns Type Description Nullable < ThemeDefinition > Default ThemeDefinition configuration for the provided them type Type Parameters Name Description T type of Theme Engine to build default configuration for Implements ISerializationCallbackReceiver"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemeEaseSettings.BasicEaseCurves.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemeEaseSettings.BasicEaseCurves.html",
    "title": "Enum ThemeEaseSettings.BasicEaseCurves | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ThemeEaseSettings.BasicEaseCurves Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum BasicEaseCurves Fields Name Description EaseIn EaseInOut EaseOut Linear"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemeEaseSettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemeEaseSettings.html",
    "title": "Class ThemeEaseSettings | Mixed Reality Toolkit Documentation",
    "keywords": "Class ThemeEaseSettings Ease settings and functionality for themes Inheritance Object ThemeEaseSettings Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class ThemeEaseSettings Constructors ThemeEaseSettings() Declaration public ThemeEaseSettings() Fields Curve Declaration public AnimationCurve Curve Field Value Type Description AnimationCurve EaseValues Declaration public bool EaseValues Field Value Type Description Boolean LerpTime Declaration public float LerpTime Field Value Type Description Single Methods GetCurved() Declaration public float GetCurved() Returns Type Description Single GetLinear() Declaration public float GetLinear() Returns Type Description Single IsLinear() Declaration protected bool IsLinear() Returns Type Description Boolean IsPlaying() Declaration public bool IsPlaying() Returns Type Description Boolean OnUpdate() Declaration public void OnUpdate() SetCurve(ThemeEaseSettings.BasicEaseCurves) Declaration public void SetCurve(ThemeEaseSettings.BasicEaseCurves curve) Parameters Type Name Description ThemeEaseSettings.BasicEaseCurves curve Start() Declaration public void Start() Stop() Declaration public void Stop()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemeProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemeProperty.html",
    "title": "Class ThemeProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Class ThemeProperty A simple property with name, tooltip, value and type, used for serialization The custom settings are used in themes to expose properties needed to enhance theme functionality Inheritance Object ThemeProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class ThemeProperty Fields Name Dispalyed as Label in Inspector Declaration public string Name Field Value Type Description String Tooltip Tooltip associated with Name Declaration public string Tooltip Field Value Type Description String Type inner type for that property Declaration public ThemePropertyTypes Type Field Value Type Description ThemePropertyTypes Value inner value, filled for corresponding Type Declaration public ThemePropertyValue Value Field Value Type Description ThemePropertyValue"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemePropertyTypes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemePropertyTypes.html",
    "title": "Enum ThemePropertyTypes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ThemePropertyTypes Theme property value types used for converting theme values back and forth from serialized objects Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ThemePropertyTypes Fields Name Description Animaiton AnimatorTrigger AudioClip Bool Color Float GameObject Int Material Quaternion Shader ShaderFloat ShaderRange String Texture Vector2 Vector3 Vector4"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemePropertyValue.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemePropertyValue.html",
    "title": "Class ThemePropertyValue | Mixed Reality Toolkit Documentation",
    "keywords": "Class ThemePropertyValue Base values of a theme property, used for serialization Inheritance Object ThemePropertyValue Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class ThemePropertyValue Fields Animation Declaration public Animation Animation Field Value Type Description Animation AudioClip Declaration public AudioClip AudioClip Field Value Type Description AudioClip Bool Declaration public bool Bool Field Value Type Description Boolean Color Declaration public Color Color Field Value Type Description Color Float Declaration public float Float Field Value Type Description Single GameObject Declaration public GameObject GameObject Field Value Type Description GameObject Int Declaration public int Int Field Value Type Description Int32 Material Declaration public Material Material Field Value Type Description Material Name Declaration public string Name Field Value Type Description String Quaternion Declaration public Quaternion Quaternion Field Value Type Description Quaternion Shader Declaration public Shader Shader Field Value Type Description Shader String Declaration public string String Field Value Type Description String Texture Declaration public Texture Texture Field Value Type Description Texture Vector2 Declaration public Vector2 Vector2 Field Value Type Description Vector2 Vector3 Declaration public Vector3 Vector3 Field Value Type Description Vector3 Vector4 Declaration public Vector4 Vector4 Field Value Type Description Vector4 Methods Copy() Create new ThemePropertyValue and copy over internal data Declaration public ThemePropertyValue Copy() Returns Type Description ThemePropertyValue New ThemePropertyValue with identical primitive and reference values as this ThemePropertyValue Reset() Reset all fields to default type values Declaration public void Reset()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ThemeStateProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ThemeStateProperty.html",
    "title": "Class ThemeStateProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Class ThemeStateProperty Class to store information about a Theme property that contains values per available state Inheritance Object ThemeStateProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ThemeStateProperty Fields ShaderPropertyID Declaration [NonSerialized] protected int ShaderPropertyID Field Value Type Description Int32 Properties Default Default value to use for this property Declaration public ThemePropertyValue Default { get; set; } Property Value Type Description ThemePropertyValue Name Name of property, useful for comparisons and editor displaying Declaration public string Name { get; set; } Property Value Type Description String ShaderPropertyName Name of the shader property, defined in the TargetShader, to utilize for getting/setting values with this property, if applicable Supported by Themes which have AreShadersSupported set to true Declaration public string ShaderPropertyName { get; set; } Property Value Type Description String StartValue The starting value of this property Declaration public ThemePropertyValue StartValue { get; set; } Property Value Type Description ThemePropertyValue TargetShader Shader to target for getting/setting values with this property, if applicable Supported by Themes which have AreShadersSupported set to true Declaration public Shader TargetShader { get; set; } Property Value Type Description Shader Type Type of value stored in this property Declaration public ThemePropertyTypes Type { get; set; } Property Value Type Description ThemePropertyTypes Values List of values corresponding to every available state Declaration public List<ThemePropertyValue> Values { get; set; } Property Value Type Description List < ThemePropertyValue > Methods GetShaderPropertyId() Lazy loads shader property ID from Unity for the ShaderPropertyName Declaration public int GetShaderPropertyId() Returns Type Description Int32 integer key for current shader property to get/set shader values IsShaderPropertyType(ThemePropertyTypes) Utility function that determines if the passed property type is supported for shader targeting Declaration public static bool IsShaderPropertyType(ThemePropertyTypes type) Parameters Type Name Description ThemePropertyTypes type type of property value Returns Type Description Boolean true if property type supports shader targeting, false otherwise MigrateShaderData() This temporary function will migrate over the previously set shader data (via the now deprecated properties) to the new TargetShader and ShaderPropertyName properties Declaration public void MigrateShaderData()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToggleHandVisualisation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToggleHandVisualisation.html",
    "title": "Class ToggleHandVisualisation | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToggleHandVisualisation Inheritance Object ToggleHandVisualisation Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToggleHandVisualisation : MonoBehaviour Fields isHandJointVisible Declaration public bool isHandJointVisible Field Value Type Description Boolean isHandMeshVisible Declaration public bool isHandMeshVisible Field Value Type Description Boolean Methods OnToggleHandJoint() Toggles hand joint visualization Declaration public void OnToggleHandJoint() OnToggleHandMesh() Toggles hand mesh visualization Declaration public void OnToggleHandMesh()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTip.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTip.html",
    "title": "Class ToolTip | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTip Class for Tooltip object Creates a floating tooltip that is attached to an object and moves to stay in view as object rotates with respect to the view. Inheritance Object ToolTip SpeechConfirmationTooltip Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTip : MonoBehaviour Properties Anchor getter/setter for ameObject that the line and text are attached to Declaration public GameObject Anchor { get; set; } Property Value Type Description GameObject AnchorPosition point where ToolTip connector is attached Declaration public Vector3 AnchorPosition { get; set; } Property Value Type Description Vector3 AttachPointPosition point where ToolTip is attached Declaration public Vector3 AttachPointPosition { get; set; } Property Value Type Description Vector3 ContentParentTransform Transform of object to which ToolTip is attached Declaration public Transform ContentParentTransform { get; } Property Value Type Description Transform ContentScale The scale of all the content (label, backgrounds, etc.) Declaration public float ContentScale { get; set; } Property Value Type Description Single FontSize The font size of the tooltip. Declaration public int FontSize { get; set; } Property Value Type Description Int32 GroupTipState Display the state of a group of tooltips. Declaration public DisplayMode GroupTipState { get; set; } Property Value Type Description DisplayMode HasFocus does the ToolTip have focus. Declaration public virtual bool HasFocus { get; } Property Value Type Description Boolean IsOn is ToolTip active and displaying Declaration public bool IsOn { get; } Property Value Type Description Boolean LocalContentOffset The offset of the background (x / y / z) Declaration public Vector3 LocalContentOffset { get; } Property Value Type Description Vector3 LocalContentSize getter/setter for size of tooltip. Declaration public Vector2 LocalContentSize { get; } Property Value Type Description Vector2 MasterTipState Display the state of the master tooltip. Declaration public DisplayMode MasterTipState { get; set; } Property Value Type Description DisplayMode Pivot Pivot point that text will rotate around as well as the point where the Line will be rendered to. Declaration public GameObject Pivot { get; } Property Value Type Description GameObject PivotPosition point about which ToolTip pivots to face camera Declaration public Vector3 PivotPosition { get; set; } Property Value Type Description Vector3 PivotType Declaration public ToolTipAttachPoint PivotType { get; set; } Property Value Type Description ToolTipAttachPoint ShowBackground Show the opaque background of tooltip. Declaration public bool ShowBackground { get; set; } Property Value Type Description Boolean ShowConnector Show the connecting stem between the tooltip and its parent GameObject. Declaration public bool ShowConnector { get; set; } Property Value Type Description Boolean ShowHighlight Shows white trim around edge of tooltip. Declaration public bool ShowHighlight { get; set; } Property Value Type Description Boolean TipState The display the state of the tooltip. Declaration public DisplayMode TipState { get; set; } Property Value Type Description DisplayMode ToolTipText Text for the ToolTip to display Declaration public string ToolTipText { get; set; } Property Value Type Description String Methods EnforceHierarchy() Declaration protected virtual bool EnforceHierarchy() Returns Type Description Boolean GetTextMeshLocalScale(TextMesh) Declaration public static Vector3 GetTextMeshLocalScale(TextMesh textMesh) Parameters Type Name Description TextMesh textMesh Returns Type Description Vector3 OnEnable() virtual functions Declaration protected virtual void OnEnable() RefreshLocalContent() Declaration protected virtual void RefreshLocalContent() ResolveTipState(DisplayMode, DisplayMode, DisplayMode, Boolean) Declaration public static bool ResolveTipState(DisplayMode masterTipState, DisplayMode groupTipState, DisplayMode tipState, bool hasFocus) Parameters Type Name Description DisplayMode masterTipState DisplayMode groupTipState DisplayMode tipState Boolean hasFocus Returns Type Description Boolean Update() Declaration protected virtual void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipAttachPoint.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipAttachPoint.html",
    "title": "Enum ToolTipAttachPoint | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ToolTipAttachPoint Used to find a pivot point that is closest to the anchor. This ensures a natural-looking attachment where the connector line meets the label. Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum ToolTipAttachPoint Remarks These double as array positions. Fields Name Description BottomLeftCorner BottomMiddle BottomRightCorner Center Closest ClosestCorner ClosestMiddle LeftMiddle RightMiddle TopLeftCorner TopMiddle TopRightCorner"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipBackgroundBlob.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipBackgroundBlob.html",
    "title": "Class ToolTipBackgroundBlob | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipBackgroundBlob A background with 'fake' inertia Useful for soft or liquid objects Inheritance Object ToolTipBackgroundBlob Implements IToolTipBackground Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTipBackgroundBlob : MonoBehaviour, IToolTipBackground Fields BackgroundRenderer Mesh renderer for mesh background. Declaration public MeshRenderer BackgroundRenderer Field Value Type Description MeshRenderer Properties BlobDistortion Declaration public float BlobDistortion { get; set; } Property Value Type Description Single BlobInertia Declaration public float BlobInertia { get; set; } Property Value Type Description Single BlobOffset Declaration public Vector3 BlobOffset { get; set; } Property Value Type Description Vector3 BlobRotation Declaration public float BlobRotation { get; set; } Property Value Type Description Single DistortionCorrectionStrength Declaration public float DistortionCorrectionStrength { get; set; } Property Value Type Description Single IsVisible Determines whether background of Tooltip is visible. Declaration public bool IsVisible { set; } Property Value Type Description Boolean PositionCorrectionStrength Declaration public float PositionCorrectionStrength { get; set; } Property Value Type Description Single RotationCorrectionStrength Declaration public float RotationCorrectionStrength { get; set; } Property Value Type Description Single Methods OnContentChange(Vector3, Vector3, Transform) Declaration public void OnContentChange(Vector3 localContentSize, Vector3 localContentOffset, Transform contentParentTransform) Parameters Type Name Description Vector3 localContentSize Vector3 localContentOffset Transform contentParentTransform Implements IToolTipBackground"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipBackgroundCorners.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipBackgroundCorners.html",
    "title": "Class ToolTipBackgroundCorners | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipBackgroundCorners Renders meshes at the corners of a tool tip Inheritance Object ToolTipBackgroundCorners Implements IToolTipBackground Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTipBackgroundCorners : MonoBehaviour, IToolTipBackground Properties IsVisible Declaration public bool IsVisible { set; } Property Value Type Description Boolean Methods OnContentChange(Vector3, Vector3, Transform) Declaration public void OnContentChange(Vector3 localContentSize, Vector3 localContentOffset, Transform contentParentTransform) Parameters Type Name Description Vector3 localContentSize Vector3 localContentOffset Transform contentParentTransform Implements IToolTipBackground"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipBackgroundMesh.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipBackgroundMesh.html",
    "title": "Class ToolTipBackgroundMesh | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipBackgroundMesh Renders a background mesh for a tool tip using a mesh renderer If the mesh has an offset anchor point you will get odd results Inheritance Object ToolTipBackgroundMesh Implements IToolTipBackground Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTipBackgroundMesh : MonoBehaviour, IToolTipBackground Fields BackgroundRenderer Mesh renderer button for mesh background. Declaration public MeshRenderer BackgroundRenderer Field Value Type Description MeshRenderer Properties BackgroundTransform The Transform for the background of the Tooltip. Declaration public Transform BackgroundTransform { get; set; } Property Value Type Description Transform IsVisible Determines whether background of Tooltip is visible. Declaration public bool IsVisible { set; } Property Value Type Description Boolean Methods OnContentChange(Vector3, Vector3, Transform) Declaration public void OnContentChange(Vector3 localContentSize, Vector3 localContentOffset, Transform contentParentTransform) Parameters Type Name Description Vector3 localContentSize Vector3 localContentOffset Transform contentParentTransform Implements IToolTipBackground"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipConnector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipConnector.html",
    "title": "Class ToolTipConnector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipConnector Connects a ToolTip to a target Maintains that connection even if the target moves Inheritance Object ToolTipConnector Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTipConnector : MonoBehaviour Properties ConnectorFollowingType The follow style of the tooltip connector Declaration public ConnectorFollowType ConnectorFollowingType { get; set; } Property Value Type Description ConnectorFollowType ManualPivotDirection The direction of the manual pivot. Declaration public Vector3 ManualPivotDirection { get; set; } Property Value Type Description Vector3 ManualPivotLocalPosition getter/setter for local pivot position Declaration public Vector3 ManualPivotLocalPosition { get; set; } Property Value Type Description Vector3 PivotDirection The direction of the connector Declaration public ConnectorPivotDirection PivotDirection { get; set; } Property Value Type Description ConnectorPivotDirection PivotDirectionOrient Orientation style for connector Declaration public ConnectorOrientType PivotDirectionOrient { get; set; } Property Value Type Description ConnectorOrientType PivotDistance Set Distance from object that Tooltip pivots around. Declaration public float PivotDistance { get; set; } Property Value Type Description Single PivotMode Is the connector pivot set manually or automatically? Declaration public ConnectorPivotMode PivotMode { get; set; } Property Value Type Description ConnectorPivotMode Target The GameObject to which the tooltip is connected Declaration public GameObject Target { get; set; } Property Value Type Description GameObject Methods GetDirectionFromPivotDirection(ConnectorPivotDirection, Vector3, Transform) Computes the director of the connector Declaration public static Vector3 GetDirectionFromPivotDirection(ConnectorPivotDirection pivotDirection, Vector3 manualPivotDirection, Transform relativeTo) Parameters Type Name Description ConnectorPivotDirection pivotDirection enum describing director of connector pivot Vector3 manualPivotDirection is the pivot set manually Transform relativeTo Transform that describes the frame of reference of the pivot Returns Type Description Vector3 a vector describing the pivot direction in world space"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipLineHighlight.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipLineHighlight.html",
    "title": "Class ToolTipLineHighlight | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipLineHighlight Renders an outline around tooltip background Inheritance Object ToolTipLineHighlight Implements IToolTipHighlight Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ToolTipLineHighlight : MonoBehaviour, IToolTipHighlight Properties ShowHighlight Declaration public bool ShowHighlight { set; } Property Value Type Description Boolean Implements IToolTipHighlight"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipSpawner.RemainType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipSpawner.RemainType.html",
    "title": "Enum ToolTipSpawner.RemainType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ToolTipSpawner.RemainType Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum RemainType Fields Name Description Indefinite Timeout"
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitShaderGUIUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityToolkitShaderGUIUtilities.html",
    "title": "Class MixedRealityToolkitShaderGUIUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityToolkitShaderGUIUtilities A collection of shared functionality for MRTK shader GUIs. Inheritance Object MixedRealityToolkitShaderGUIUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax public static class MixedRealityToolkitShaderGUIUtilities Methods DisplayDepthWriteWarning(MaterialEditor, String, String) Displays a depth write warning and fix button if depth buffer sharing is enabled. Declaration public static bool DisplayDepthWriteWarning(MaterialEditor materialEditor, string dialogTitle = \"Depth Write\", string dialogMessage = \"Change this material to write to the depth buffer?\") Parameters Type Name Description MaterialEditor materialEditor The material editor to display the warning in. String dialogTitle The title of the dialog window to display when the user selects the fix button. String dialogMessage The message in the dialog window when the user selects the fix button. Returns Type Description Boolean True if the user opted to fix the warning, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityWireframeShaderGUI.Styles.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Editor.MixedRealityWireframeShaderGUI.Styles.html",
    "title": "Class MixedRealityWireframeShaderGUI.Styles | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityWireframeShaderGUI.Styles Inheritance Object MixedRealityWireframeShaderGUI.Styles Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Editor Assembly : cs.temp.dll.dll Syntax protected static class Styles Fields advancedOptionsTitle Declaration public static string advancedOptionsTitle Field Value Type Description String baseColor Declaration public static GUIContent baseColor Field Value Type Description GUIContent mainPropertiesTitle Declaration public static string mainPropertiesTitle Field Value Type Description String wireColor Declaration public static GUIContent wireColor Field Value Type Description GUIContent wireThickness Declaration public static GUIContent wireThickness Field Value Type Description GUIContent"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityServiceConfiguration.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityServiceConfiguration.html",
    "title": "Interface IMixedRealityServiceConfiguration | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityServiceConfiguration Defines a system, feature, or manager to be registered with as a IMixedRealityExtensionService on startup. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityServiceConfiguration Properties ComponentName The name of the system, feature or manager. Declaration string ComponentName { get; } Property Value Type Description String ComponentType The concrete type for the system, feature or manager. Declaration SystemType ComponentType { get; } Property Value Type Description SystemType Priority The priority this system, feature or manager will be initialized in. Declaration uint Priority { get; } Property Value Type Description UInt32 RuntimePlatform The runtime platform(s) to run this service. Declaration SupportedPlatforms RuntimePlatform { get; } Property Value Type Description SupportedPlatforms"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityServiceRegistrar.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityServiceRegistrar.html",
    "title": "Interface IMixedRealityServiceRegistrar | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityServiceRegistrar Interface for Mixed Reality Toolkit service registration. Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityServiceRegistrar Methods GetService<T>(String, Boolean) Gets the instance of the registered service. Declaration T GetService<T>(string name = null, bool showLogs = true) where T : IMixedRealityService Parameters Type Name Description String name The name of the service. Boolean showLogs Indicates whether or not diagnostic logging should be performed in case of an error Returns Type Description T The registered service instance as the requested type. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). GetServices<T>(String) Gets the collection of the registered service instances matching the requested type. Declaration IReadOnlyList<T> GetServices<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name Friendly name of the service. Returns Type Description IReadOnlyList <T> Read-only collection of the service instances, as the requested type. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). IsServiceRegistered<T>(String) Checks to see if a service of the specified type has been registered. Declaration bool IsServiceRegistered<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name The name of the service. Returns Type Description Boolean True if the service is registered, false otherwise. Type Parameters Name Description T The interface type of the service (ex: IMixedRealityBoundarySystem). RegisterService<T>(T) Registers a service of the specified type. Declaration bool RegisterService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance An instance of the service to be registered. Returns Type Description Boolean Type Parameters Name Description T The interface type of the service to be registered (ex: IMixedRealityBoundarySystem). RegisterService<T>(Type, SupportedPlatforms, Object[]) Registers a service of the specified type. Declaration bool RegisterService<T>(Type concreteType, SupportedPlatforms supportedPlatforms = null, params object[] args) where T : IMixedRealityService Parameters Type Name Description Type concreteType The concrete type to instantiate. SupportedPlatforms supportedPlatforms The platform(s) on which the service is supported. Object [] args Optional arguments used when instantiating the concrete type. Returns Type Description Boolean True if the service was successfully registered, false otherwise. Type Parameters Name Description T The interface type of the service to be registered (ex: IMixedRealityBoundarySystem). UnregisterService<T>(T) Unregisters a service. Declaration bool UnregisterService<T>(T serviceInstance) where T : IMixedRealityService Parameters Type Name Description T serviceInstance Returns Type Description Boolean True if the service was successfully unregistered, false otherwise. Type Parameters Name Description T The interface type of the service to be unregistered (ex: IMixedRealityBoundarySystem). UnregisterService<T>(String) Unregisters a service of the specified type. Declaration bool UnregisterService<T>(string name = null) where T : IMixedRealityService Parameters Type Name Description String name The name of the service to unregister. Returns Type Description Boolean True if the service was successfully unregistered, false otherwise. Type Parameters Name Description T The interface type of the service to be unregistered (ex: IMixedRealityBoundarySystem). Remarks If the name argument is not specified, the first instance will be unregistered"
  },
  "api/Microsoft.MixedReality.Toolkit.ImplementsAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.ImplementsAttribute.html",
    "title": "Class ImplementsAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class ImplementsAttribute Constraint that allows selection of classes that implement a specific interface when selecting a SystemType with the Unity inspector. Inheritance Object SystemTypeAttribute ImplementsAttribute Inherited Members SystemTypeAttribute.Grouping SystemTypeAttribute.AllowAbstract Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public sealed class ImplementsAttribute : SystemTypeAttribute Constructors ImplementsAttribute(Type, TypeGrouping) Initializes a new instance of the ImplementsAttribute class. Declaration public ImplementsAttribute(Type interfaceType, TypeGrouping grouping) Parameters Type Name Description Type interfaceType Type of interface that selectable classes must implement. TypeGrouping grouping Gets or sets grouping of selectable classes. Defaults to ByNamespaceFlat unless explicitly specified. Properties InterfaceType Gets the type of interface that selectable classes must implement. Declaration public Type InterfaceType { get; } Property Value Type Description Type Methods IsConstraintSatisfied(Type) Determines whether the specified Type satisfies filter constraint. Declaration public override bool IsConstraintSatisfied(Type type) Parameters Type Name Description Type type Type to test. Returns Type Description Boolean A Boolean value indicating if the type specified by type satisfies this constraint and should thus be selectable. Overrides SystemTypeAttribute.IsConstraintSatisfied(Type)"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputHandler-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputHandler-1.html",
    "title": "Interface IMixedRealityInputHandler<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputHandler<T> Interface to implement for more complex generic input. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputHandler<T> : IEventSystemHandler Type Parameters Name Description T The type of input to listen for. Remarks Valid input types: Methods OnInputChanged(InputEventData<T>) Raised input event updates from the type of input specified in the interface handler implementation. Declaration void OnInputChanged(InputEventData<T> eventData) Parameters Type Name Description InputEventData <T> eventData Remarks The InputData is the current input data."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputHandler.html",
    "title": "Interface IMixedRealityInputHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputHandler Interface to implement for simple generic input. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputHandler : IMixedRealityBaseInputHandler, IEventSystemHandler Methods OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleSingleAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleSingleAxis.html",
    "title": "Struct InputActionRuleSingleAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleSingleAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Single > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionRuleSingleAxis : IInputActionRule<float> Constructors InputActionRuleSingleAxis(MixedRealityInputAction, MixedRealityInputAction, Single) Constructor. Declaration public InputActionRuleSingleAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, float criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Single criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public float Criteria { get; } Property Value Type Description Single RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleVectorAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionRuleVectorAxis.html",
    "title": "Struct InputActionRuleVectorAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Struct InputActionRuleVectorAxis Generic Input Action Rule for raising actions based on specific criteria. Implements IInputActionRule < Vector3 > Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public struct InputActionRuleVectorAxis : IInputActionRule<Vector3> Constructors InputActionRuleVectorAxis(MixedRealityInputAction, MixedRealityInputAction, Vector3) Constructor. Declaration public InputActionRuleVectorAxis(MixedRealityInputAction baseAction, MixedRealityInputAction ruleAction, Vector3 criteria) Parameters Type Name Description MixedRealityInputAction baseAction The Base Action that the rule will listen to. MixedRealityInputAction ruleAction The Action to raise if the criteria is met. Vector3 criteria The criteria to check against for determining if the action should be raised. Properties BaseAction Declaration public MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria Declaration public Vector3 Criteria { get; } Property Value Type Description Vector3 RuleAction Declaration public MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction Implements IInputActionRule<T>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputActionUnityEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputActionUnityEvent.html",
    "title": "Class InputActionUnityEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputActionUnityEvent Unity event for input action events. Contains the data of the input event that triggered the action. Inheritance Object InputActionUnityEvent Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Serializable] public class InputActionUnityEvent : UnityEvent<BaseInputEventData>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputAnimation.PoseCurves.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputAnimation.PoseCurves.html",
    "title": "Class InputAnimation.PoseCurves | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputAnimation.PoseCurves Inheritance Object InputAnimation.PoseCurves Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class PoseCurves Fields PositionX Declaration public readonly AnimationCurve PositionX Field Value Type Description AnimationCurve PositionY Declaration public readonly AnimationCurve PositionY Field Value Type Description AnimationCurve PositionZ Declaration public readonly AnimationCurve PositionZ Field Value Type Description AnimationCurve RotationW Declaration public readonly AnimationCurve RotationW Field Value Type Description AnimationCurve RotationX Declaration public readonly AnimationCurve RotationX Field Value Type Description AnimationCurve RotationY Declaration public readonly AnimationCurve RotationY Field Value Type Description AnimationCurve RotationZ Declaration public readonly AnimationCurve RotationZ Field Value Type Description AnimationCurve"
  },
  "api/Microsoft.MixedReality.Toolkit.SceneSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SceneSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.SceneSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.SceneSystem Classes MixedRealitySceneSystem The default implementation of the IMixedRealitySceneSystem Because so much of this service's functionality is editor-only, it has been split into a partial class. This part handles the runtime parts of the service. MixedRealitySceneSystemProfile Configuration profile settings for setting up scene system. SceneActivationToken Used by scene system to control when newly loaded scenes are activated. Structs RuntimeLightingSettings A struct that mimics the lighting settings stored in a scene. Used to store, retrieve and interpolate lighting settings. Omits any editor-only settings. RuntimeRenderSettings A struct that mimics the render settings stored in a scene. Used to store, retrieve and interpolate render settings. Omits any editor-only settings, as well as some settings that are seldom used. RuntimeSunlightSettings Struct for storing directional sunlight settings stored in a scene. SceneInfo Interfaces IMixedRealitySceneSystem Interface for managing scenes in Unity. Scenes are divided into three categories: Manager, Lighting and Content. The Manager scene is loaded first and remains loaded for the duration of the app. Only one Manager scene is ever loaded, and no scene operation will ever unload it. The Lighting scene is a largely empty scene which controls lighting settings. Ambient lighting, skybox, sun direction, etc. A default lighting scene is loaded on initialization. After that the active lighting scene may be changed at any time via SetLightingScene. Only one lighting scene can ever be loaded at a time. Content scenes are everything else. These can be loaded and unloaded at will in any combination. The scene actions provided improve on unity's SceneManagement events by ensuring that scenes are considered valid before the action is invoked. IMixedRealitySceneSystemEditor Optional editor-only interface for use with facade inspectors. If a scene system service does not implement this interface, the facade will not be rendered. Enums LightingSceneTransitionType Used by scene service to control how to transition from one lighting scene to another."
  },
  "api/Microsoft.MixedReality.Toolkit.SDKType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SDKType.html",
    "title": "Enum SDKType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SDKType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum SDKType Fields Name Description None No specified type or Standalone / non-XR type OpenVR The OpenVR platform provided by Unity (does not support the downloadable SteamVR SDK). OpenXR The OpenXR platform. SDK to be determined once released. Other Undefined SDK. WindowsMR The Windows 10 Mixed reality SDK provided by the Universal Windows Platform (UWP), for Immersive MR headsets and HoloLens."
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.BaseSpatialAwarenessObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.BaseSpatialAwarenessObject.html",
    "title": "Class BaseSpatialAwarenessObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseSpatialAwarenessObject Inheritance Object BaseSpatialAwarenessObject SpatialAwarenessMeshObject SpatialAwarenessPlanarObject Implements IMixedRealitySpatialAwarenessObject Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class BaseSpatialAwarenessObject : IMixedRealitySpatialAwarenessObject Constructors BaseSpatialAwarenessObject() constructor Declaration protected BaseSpatialAwarenessObject() Properties Filter Declaration public MeshFilter Filter { get; set; } Property Value Type Description MeshFilter GameObject Declaration public GameObject GameObject { get; set; } Property Value Type Description GameObject Id Declaration public int Id { get; set; } Property Value Type Description Int32 Renderer Declaration public MeshRenderer Renderer { get; set; } Property Value Type Description MeshRenderer Methods CleanObject() Declaration public virtual void CleanObject() Implements IMixedRealitySpatialAwarenessObject"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.BaseSpatialAwarenessObserverProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.BaseSpatialAwarenessObserverProfile.html",
    "title": "Class BaseSpatialAwarenessObserverProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseSpatialAwarenessObserverProfile Inheritance Object BaseMixedRealityProfile BaseSpatialAwarenessObserverProfile MixedRealitySpatialAwarenessMeshObserverProfile Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public abstract class BaseSpatialAwarenessObserverProfile : BaseMixedRealityProfile Properties IsStationaryObserver Indicates whether or not the spatial observer is to remain in a fixed location. Declaration public bool IsStationaryObserver { get; } Property Value Type Description Boolean ObservationExtents The size of the volume, in meters per axis, from which individual observations will be made. Declaration public Vector3 ObservationExtents { get; } Property Value Type Description Vector3 ObserverVolumeType The shape (ex: axis aligned cube) of the observation volume. Declaration public VolumeType ObserverVolumeType { get; } Property Value Type Description VolumeType StartupBehavior Indicates if the observer is to start immediately or wait for manual startup. Declaration public AutoStartBehavior StartupBehavior { get; } Property Value Type Description AutoStartBehavior UpdateInterval The frequency, in seconds, at which the spatial observer updates. Declaration public float UpdateInterval { get; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.BaseSpatialObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.BaseSpatialObserver.html",
    "title": "Class BaseSpatialObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseSpatialObserver Class providing a base implementation of the IMixedRealitySpatialAwarenessObserver interface. Inheritance Object BaseService BaseDataProvider < IMixedRealitySpatialAwarenessSystem > BaseSpatialObserver Implements IMixedRealitySpatialAwarenessObserver IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer Inherited Members BaseDataProvider<IMixedRealitySpatialAwarenessSystem>.Registrar BaseDataProvider<IMixedRealitySpatialAwarenessSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public abstract class BaseSpatialObserver : BaseDataProvider<IMixedRealitySpatialAwarenessSystem>, IMixedRealitySpatialAwarenessObserver, IMixedRealityDataProvider, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Constructors BaseSpatialObserver(IMixedRealityServiceRegistrar, IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] protected BaseSpatialObserver(IMixedRealityServiceRegistrar registrar, IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the observer. IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem The IMixedRealitySpatialAwarenessSystem to which the observer is providing data. String name The friendly name of the data provider. UInt32 priority The registration priority of the data provider. BaseMixedRealityProfile profile The configuration profile for the data provider. BaseSpatialObserver(IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration protected BaseSpatialObserver(IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem The IMixedRealitySpatialAwarenessSystem to which the observer is providing data. String name The friendly name of the data provider. UInt32 priority The registration priority of the data provider. BaseMixedRealityProfile profile The configuration profile for the data provider. Properties DefaultPhysicsLayer Get or sets the default Unity Physics Layer on which to set the spatial object. Declaration public int DefaultPhysicsLayer { get; } Property Value Type Description Int32 IsRunning Is the observer running (actively accumulating spatial data)? Declaration public bool IsRunning { get; protected set; } Property Value Type Description Boolean IsStationaryObserver Should the observer remain stationary in the scene? Declaration public bool IsStationaryObserver { get; set; } Property Value Type Description Boolean Remarks Set IsStationaryObserver to false to move the volume with the user. If set to true, the origin will be 0,0,0 or the last known location. ObservationExtents Gets or sets the extents( 1/2 size) of the volume, in meters per axis, from which individual observations will be made. Declaration public Vector3 ObservationExtents { get; set; } Property Value Type Description Vector3 Remarks When used when ObserverVolumeType is set to Sphere the X value of the extents will be used as the radius. ObserverOrigin Declaration public Vector3 ObserverOrigin { get; set; } Property Value Type Description Vector3 ObserverRotation Gets or sets the orientation of the volume in World Space. Declaration public Quaternion ObserverRotation { get; set; } Property Value Type Description Quaternion Remarks This is only used when ObserverVolumeType is set to UserAlignedCube ObserverVolumeType Gets or sets the type of volume the observer should operate in. Declaration public VolumeType ObserverVolumeType { get; set; } Property Value Type Description VolumeType SourceId The Unique Source Id of this Event Source. Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration public string SourceName { get; } Property Value Type Description String SpatialAwarenessSystem The spatial awareness system that is associated with this observer. Declaration protected IMixedRealitySpatialAwarenessSystem SpatialAwarenessSystem { get; } Property Value Type Description IMixedRealitySpatialAwarenessSystem StartupBehavior Indicates the developer's intended startup behavior. Declaration public AutoStartBehavior StartupBehavior { get; set; } Property Value Type Description AutoStartBehavior UpdateInterval Gets or sets the frequency, in seconds, at which the spatial observer should update. Declaration public float UpdateInterval { get; set; } Property Value Type Description Single Methods ClearObservations() Clears the observer's collection of observations. Declaration public virtual void ClearObservations() Remarks If the observer is currently running, calling ClearObservations will suspend it. Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Resume() Start | resume the observer. Declaration public virtual void Resume() Suspend() Stop | pause the observer Declaration public virtual void Suspend() Implements IMixedRealitySpatialAwarenessObserver IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityEventSource IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor.MixedRealitySpatialAwarenessSystemProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor.MixedRealitySpatialAwarenessSystemProfileInspector.html",
    "title": "Class MixedRealitySpatialAwarenessSystemProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessSystemProfileInspector Inheritance Object MixedRealitySpatialAwarenessSystemProfileInspector Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessSystemProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.SpatialAwareness.Editor Classes MixedRealitySpatialAwarenessSystemProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessMeshObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessMeshObserver.html",
    "title": "Interface IMixedRealitySpatialAwarenessMeshObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessMeshObserver The interface for defining an IMixedRealitySpatialAwarenessObserver which provides mesh data. Inherited Members IMixedRealitySpatialAwarenessObserver.StartupBehavior IMixedRealitySpatialAwarenessObserver.DefaultPhysicsLayer IMixedRealitySpatialAwarenessObserver.IsRunning IMixedRealitySpatialAwarenessObserver.IsStationaryObserver IMixedRealitySpatialAwarenessObserver.ObserverVolumeType IMixedRealitySpatialAwarenessObserver.ObservationExtents IMixedRealitySpatialAwarenessObserver.ObserverRotation IMixedRealitySpatialAwarenessObserver.ObserverOrigin IMixedRealitySpatialAwarenessObserver.UpdateInterval IMixedRealitySpatialAwarenessObserver.Resume() IMixedRealitySpatialAwarenessObserver.Suspend() IMixedRealitySpatialAwarenessObserver.ClearObservations() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessMeshObserver : IMixedRealitySpatialAwarenessObserver, IMixedRealityDataProvider, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Properties DisplayOption Gets or sets a value indicating how the mesh subsystem is to display surface meshes within the application. Declaration SpatialAwarenessMeshDisplayOptions DisplayOption { get; set; } Property Value Type Description SpatialAwarenessMeshDisplayOptions Remarks Applications that wish to process the Mesh es should set this value to None. LevelOfDetail Gets or sets the level of detail, as a MixedRealitySpatialAwarenessMeshLevelOfDetail value, for the returned spatial mesh. Setting this value to Custom, implies that the developer is specifying a custom value for MeshTrianglesPerCubicMeter. Declaration SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; set; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail Remarks Specifying any other value will cause TrianglesPerCubicMeter to be overwritten. Meshes Gets the collection of SpatialAwarenessMeshObject s being managed by the observer. Declaration IReadOnlyDictionary<int, SpatialAwarenessMeshObject> Meshes { get; } Property Value Type Description IReadOnlyDictionary < Int32 , SpatialAwarenessMeshObject > MeshPhysicsLayer Get or sets the desired Unity Physics Layer on which to set the spatial mesh. Declaration int MeshPhysicsLayer { get; set; } Property Value Type Description Int32 Remarks If not explicitly set, it is recommended that implementations return DefaultPhysicsLayer . MeshPhysicsLayerMask Gets the bit mask that corresponds to the value specified in MeshPhysicsLayer . Declaration int MeshPhysicsLayerMask { get; } Property Value Type Description Int32 OcclusionMaterial Gets or sets the Material to be used when spatial Mesh es should occlude other objects. Declaration Material OcclusionMaterial { get; set; } Property Value Type Description Material RecalculateNormals Indicates whether or not mesh normals should be recalculated by the observer. Declaration bool RecalculateNormals { get; set; } Property Value Type Description Boolean TrianglesPerCubicMeter Gets or sets the level of detail, in triangles per cubic meter, for the returned spatial mesh. Declaration int TrianglesPerCubicMeter { get; set; } Property Value Type Description Int32 Remarks When specifying a LevelOfDetail other than Custom, this value will be automatically overwritten with system default values. VisibleMaterial Gets or sets the Material to be used when displaying Mesh es. Declaration Material VisibleMaterial { get; set; } Property Value Type Description Material"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessObject.html",
    "title": "Interface IMixedRealitySpatialAwarenessObject | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessObject Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessObject Properties GameObject Declaration GameObject GameObject { get; set; } Property Value Type Description GameObject Id Declaration int Id { get; set; } Property Value Type Description Int32 Renderer Declaration MeshRenderer Renderer { get; set; } Property Value Type Description MeshRenderer Methods CleanObject() Declaration void CleanObject()"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessObservationHandler-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.IMixedRealitySpatialAwarenessObservationHandler-1.html",
    "title": "Interface IMixedRealitySpatialAwarenessObservationHandler<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealitySpatialAwarenessObservationHandler<T> Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public interface IMixedRealitySpatialAwarenessObservationHandler<T> : IEventSystemHandler Type Parameters Name Description T Methods OnObservationAdded(MixedRealitySpatialAwarenessEventData<T>) Called when a spatial observer adds a new observation. Declaration void OnObservationAdded(MixedRealitySpatialAwarenessEventData<T> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData <T> eventData Data describing the event. OnObservationRemoved(MixedRealitySpatialAwarenessEventData<T>) Called when a spatial observer removes a previous observation. Declaration void OnObservationRemoved(MixedRealitySpatialAwarenessEventData<T> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData <T> eventData Data describing the event. OnObservationUpdated(MixedRealitySpatialAwarenessEventData<T>) Called when a spatial observer updates a previous observation. Declaration void OnObservationUpdated(MixedRealitySpatialAwarenessEventData<T> eventData) Parameters Type Name Description MixedRealitySpatialAwarenessEventData <T> eventData Data describing the event."
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Compositor_FrameTiming.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Compositor_FrameTiming.html",
    "title": "Struct Compositor_FrameTiming | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Compositor_FrameTiming Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct Compositor_FrameTiming Fields m_flClientFrameIntervalMs Declaration public float m_flClientFrameIntervalMs Field Value Type Description Single m_flCompositorIdleCpuMs Declaration public float m_flCompositorIdleCpuMs Field Value Type Description Single m_flCompositorRenderCpuMs Declaration public float m_flCompositorRenderCpuMs Field Value Type Description Single m_flCompositorRenderGpuMs Declaration public float m_flCompositorRenderGpuMs Field Value Type Description Single m_flCompositorRenderStartMs Declaration public float m_flCompositorRenderStartMs Field Value Type Description Single m_flCompositorUpdateEndMs Declaration public float m_flCompositorUpdateEndMs Field Value Type Description Single m_flCompositorUpdateStartMs Declaration public float m_flCompositorUpdateStartMs Field Value Type Description Single m_flNewFrameReadyMs Declaration public float m_flNewFrameReadyMs Field Value Type Description Single m_flNewPosesReadyMs Declaration public float m_flNewPosesReadyMs Field Value Type Description Single m_flPostSubmitGpuMs Declaration public float m_flPostSubmitGpuMs Field Value Type Description Single m_flPresentCallCpuMs Declaration public float m_flPresentCallCpuMs Field Value Type Description Single m_flPreSubmitGpuMs Declaration public float m_flPreSubmitGpuMs Field Value Type Description Single m_flSubmitFrameMs Declaration public float m_flSubmitFrameMs Field Value Type Description Single m_flSystemTimeInSeconds Declaration public double m_flSystemTimeInSeconds Field Value Type Description Double m_flTotalRenderGpuMs Declaration public float m_flTotalRenderGpuMs Field Value Type Description Single m_flWaitForPresentCpuMs Declaration public float m_flWaitForPresentCpuMs Field Value Type Description Single m_flWaitGetPosesCalledMs Declaration public float m_flWaitGetPosesCalledMs Field Value Type Description Single m_HmdPose Declaration public TrackedDevicePose_t m_HmdPose Field Value Type Description TrackedDevicePose_t m_nFrameIndex Declaration public uint m_nFrameIndex Field Value Type Description UInt32 m_nNumDroppedFrames Declaration public uint m_nNumDroppedFrames Field Value Type Description UInt32 m_nNumFramePresents Declaration public uint m_nNumFramePresents Field Value Type Description UInt32 m_nNumMisPresented Declaration public uint m_nNumMisPresented Field Value Type Description UInt32 m_nNumVSyncsReadyForUse Declaration public uint m_nNumVSyncsReadyForUse Field Value Type Description UInt32 m_nNumVSyncsToFirstView Declaration public uint m_nNumVSyncsToFirstView Field Value Type Description UInt32 m_nReprojectionFlags Declaration public uint m_nReprojectionFlags Field Value Type Description UInt32 m_nSize Declaration public uint m_nSize Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Compositor_OverlaySettings.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Compositor_OverlaySettings.html",
    "title": "Struct Compositor_OverlaySettings | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Compositor_OverlaySettings Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct Compositor_OverlaySettings Fields alpha Declaration public float alpha Field Value Type Description Single antialias Declaration public bool antialias Field Value Type Description Boolean curved Declaration public bool curved Field Value Type Description Boolean distance Declaration public float distance Field Value Type Description Single gridDivs Declaration public float gridDivs Field Value Type Description Single gridScale Declaration public float gridScale Field Value Type Description Single gridWidth Declaration public float gridWidth Field Value Type Description Single scale Declaration public float scale Field Value Type Description Single size Declaration public uint size Field Value Type Description UInt32 transform Declaration public HmdMatrix44_t transform Field Value Type Description HmdMatrix44_t uOffset Declaration public float uOffset Field Value Type Description Single uScale Declaration public float uScale Field Value Type Description Single vOffset Declaration public float vOffset Field Value Type Description Single vScale Declaration public float vScale Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.COpenVRContext.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.COpenVRContext.html",
    "title": "Struct COpenVRContext | Mixed Reality Toolkit Documentation",
    "keywords": "Struct COpenVRContext Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct COpenVRContext Fields m_pVRApplications Declaration public IntPtr m_pVRApplications Field Value Type Description IntPtr m_pVRChaperone Declaration public IntPtr m_pVRChaperone Field Value Type Description IntPtr m_pVRChaperoneSetup Declaration public IntPtr m_pVRChaperoneSetup Field Value Type Description IntPtr m_pVRCompositor Declaration public IntPtr m_pVRCompositor Field Value Type Description IntPtr m_pVRDriverManager Declaration public IntPtr m_pVRDriverManager Field Value Type Description IntPtr m_pVRExtendedDisplay Declaration public IntPtr m_pVRExtendedDisplay Field Value Type Description IntPtr m_pVRInput Declaration public IntPtr m_pVRInput Field Value Type Description IntPtr m_pVRIOBuffer Declaration public IntPtr m_pVRIOBuffer Field Value Type Description IntPtr m_pVROverlay Declaration public IntPtr m_pVROverlay Field Value Type Description IntPtr m_pVRRenderModels Declaration public IntPtr m_pVRRenderModels Field Value Type Description IntPtr m_pVRResources Declaration public IntPtr m_pVRResources Field Value Type Description IntPtr m_pVRScreenshots Declaration public IntPtr m_pVRScreenshots Field Value Type Description IntPtr m_pVRSettings Declaration public IntPtr m_pVRSettings Field Value Type Description IntPtr m_pVRSpatialAnchors Declaration public IntPtr m_pVRSpatialAnchors Field Value Type Description IntPtr m_pVRSystem Declaration public IntPtr m_pVRSystem Field Value Type Description IntPtr m_pVRTrackedCamera Declaration public IntPtr m_pVRTrackedCamera Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRApplications.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRApplications.html",
    "title": "Class CVRApplications | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRApplications Inheritance Object CVRApplications Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRApplications Methods AddApplicationManifest(String, Boolean) Declaration public EVRApplicationError AddApplicationManifest(string pchApplicationManifestFullPath, bool bTemporary) Parameters Type Name Description String pchApplicationManifestFullPath Boolean bTemporary Returns Type Description EVRApplicationError CancelApplicationLaunch(String) Declaration public bool CancelApplicationLaunch(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description Boolean GetApplicationAutoLaunch(String) Declaration public bool GetApplicationAutoLaunch(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description Boolean GetApplicationCount() Declaration public uint GetApplicationCount() Returns Type Description UInt32 GetApplicationKeyByIndex(UInt32, StringBuilder, UInt32) Declaration public EVRApplicationError GetApplicationKeyByIndex(uint unApplicationIndex, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen) Parameters Type Name Description UInt32 unApplicationIndex StringBuilder pchAppKeyBuffer UInt32 unAppKeyBufferLen Returns Type Description EVRApplicationError GetApplicationKeyByProcessId(UInt32, StringBuilder, UInt32) Declaration public EVRApplicationError GetApplicationKeyByProcessId(uint unProcessId, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen) Parameters Type Name Description UInt32 unProcessId StringBuilder pchAppKeyBuffer UInt32 unAppKeyBufferLen Returns Type Description EVRApplicationError GetApplicationLaunchArguments(UInt32, StringBuilder, UInt32) Declaration public uint GetApplicationLaunchArguments(uint unHandle, StringBuilder pchArgs, uint unArgs) Parameters Type Name Description UInt32 unHandle StringBuilder pchArgs UInt32 unArgs Returns Type Description UInt32 GetApplicationProcessId(String) Declaration public uint GetApplicationProcessId(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description UInt32 GetApplicationPropertyBool(String, EVRApplicationProperty, ref EVRApplicationError) Declaration public bool GetApplicationPropertyBool(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError) Parameters Type Name Description String pchAppKey EVRApplicationProperty eProperty EVRApplicationError peError Returns Type Description Boolean GetApplicationPropertyString(String, EVRApplicationProperty, StringBuilder, UInt32, ref EVRApplicationError) Declaration public uint GetApplicationPropertyString(string pchAppKey, EVRApplicationProperty eProperty, StringBuilder pchPropertyValueBuffer, uint unPropertyValueBufferLen, ref EVRApplicationError peError) Parameters Type Name Description String pchAppKey EVRApplicationProperty eProperty StringBuilder pchPropertyValueBuffer UInt32 unPropertyValueBufferLen EVRApplicationError peError Returns Type Description UInt32 GetApplicationPropertyUint64(String, EVRApplicationProperty, ref EVRApplicationError) Declaration public ulong GetApplicationPropertyUint64(string pchAppKey, EVRApplicationProperty eProperty, ref EVRApplicationError peError) Parameters Type Name Description String pchAppKey EVRApplicationProperty eProperty EVRApplicationError peError Returns Type Description UInt64 GetApplicationsErrorNameFromEnum(EVRApplicationError) Declaration public string GetApplicationsErrorNameFromEnum(EVRApplicationError error) Parameters Type Name Description EVRApplicationError error Returns Type Description String GetApplicationsThatSupportMimeType(String, StringBuilder, UInt32) Declaration public uint GetApplicationsThatSupportMimeType(string pchMimeType, StringBuilder pchAppKeysThatSupportBuffer, uint unAppKeysThatSupportBuffer) Parameters Type Name Description String pchMimeType StringBuilder pchAppKeysThatSupportBuffer UInt32 unAppKeysThatSupportBuffer Returns Type Description UInt32 GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState) Declaration public string GetApplicationsTransitionStateNameFromEnum(EVRApplicationTransitionState state) Parameters Type Name Description EVRApplicationTransitionState state Returns Type Description String GetApplicationSupportedMimeTypes(String, StringBuilder, UInt32) Declaration public bool GetApplicationSupportedMimeTypes(string pchAppKey, StringBuilder pchMimeTypesBuffer, uint unMimeTypesBuffer) Parameters Type Name Description String pchAppKey StringBuilder pchMimeTypesBuffer UInt32 unMimeTypesBuffer Returns Type Description Boolean GetCurrentSceneProcessId() Declaration public uint GetCurrentSceneProcessId() Returns Type Description UInt32 GetDefaultApplicationForMimeType(String, StringBuilder, UInt32) Declaration public bool GetDefaultApplicationForMimeType(string pchMimeType, StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen) Parameters Type Name Description String pchMimeType StringBuilder pchAppKeyBuffer UInt32 unAppKeyBufferLen Returns Type Description Boolean GetStartingApplication(StringBuilder, UInt32) Declaration public EVRApplicationError GetStartingApplication(StringBuilder pchAppKeyBuffer, uint unAppKeyBufferLen) Parameters Type Name Description StringBuilder pchAppKeyBuffer UInt32 unAppKeyBufferLen Returns Type Description EVRApplicationError GetTransitionState() Declaration public EVRApplicationTransitionState GetTransitionState() Returns Type Description EVRApplicationTransitionState IdentifyApplication(UInt32, String) Declaration public EVRApplicationError IdentifyApplication(uint unProcessId, string pchAppKey) Parameters Type Name Description UInt32 unProcessId String pchAppKey Returns Type Description EVRApplicationError IsApplicationInstalled(String) Declaration public bool IsApplicationInstalled(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description Boolean IsQuitUserPromptRequested() Declaration public bool IsQuitUserPromptRequested() Returns Type Description Boolean LaunchApplication(String) Declaration public EVRApplicationError LaunchApplication(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description EVRApplicationError LaunchApplicationFromMimeType(String, String) Declaration public EVRApplicationError LaunchApplicationFromMimeType(string pchMimeType, string pchArgs) Parameters Type Name Description String pchMimeType String pchArgs Returns Type Description EVRApplicationError LaunchDashboardOverlay(String) Declaration public EVRApplicationError LaunchDashboardOverlay(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description EVRApplicationError LaunchInternalProcess(String, String, String) Declaration public EVRApplicationError LaunchInternalProcess(string pchBinaryPath, string pchArguments, string pchWorkingDirectory) Parameters Type Name Description String pchBinaryPath String pchArguments String pchWorkingDirectory Returns Type Description EVRApplicationError LaunchTemplateApplication(String, String, AppOverrideKeys_t[]) Declaration public EVRApplicationError LaunchTemplateApplication(string pchTemplateAppKey, string pchNewAppKey, AppOverrideKeys_t[] pKeys) Parameters Type Name Description String pchTemplateAppKey String pchNewAppKey AppOverrideKeys_t [] pKeys Returns Type Description EVRApplicationError PerformApplicationPrelaunchCheck(String) Declaration public EVRApplicationError PerformApplicationPrelaunchCheck(string pchAppKey) Parameters Type Name Description String pchAppKey Returns Type Description EVRApplicationError RemoveApplicationManifest(String) Declaration public EVRApplicationError RemoveApplicationManifest(string pchApplicationManifestFullPath) Parameters Type Name Description String pchApplicationManifestFullPath Returns Type Description EVRApplicationError SetApplicationAutoLaunch(String, Boolean) Declaration public EVRApplicationError SetApplicationAutoLaunch(string pchAppKey, bool bAutoLaunch) Parameters Type Name Description String pchAppKey Boolean bAutoLaunch Returns Type Description EVRApplicationError SetDefaultApplicationForMimeType(String, String) Declaration public EVRApplicationError SetDefaultApplicationForMimeType(string pchAppKey, string pchMimeType) Parameters Type Name Description String pchAppKey String pchMimeType Returns Type Description EVRApplicationError"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.ICursorModifier.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.ICursorModifier.html",
    "title": "Interface ICursorModifier | Mixed Reality Toolkit Documentation",
    "keywords": "Interface ICursorModifier Interface for cursor modifiers that can modify a GameObject 's properties. Inherited Members IMixedRealityFocusChangedHandler.OnBeforeFocusChange(FocusEventData) IMixedRealityFocusChangedHandler.OnFocusChanged(FocusEventData) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface ICursorModifier : IMixedRealityFocusChangedHandler, IEventSystemHandler Properties CursorNormalOffset Direction of the IMixedRealityCursor offset. Declaration Vector3 CursorNormalOffset { get; set; } Property Value Type Description Vector3 CursorParameters IMixedRealityCursor animation parameters to set when this GameObject is focused. Leave empty for none. Declaration AnimatorParameter[] CursorParameters { get; } Property Value Type Description AnimatorParameter [] CursorPositionOffset How much a IMixedRealityCursor 's position should be offset from the surface of the GameObject when overlapping. Declaration Vector3 CursorPositionOffset { get; set; } Property Value Type Description Vector3 CursorScaleOffset Scale of the IMixedRealityCursor when looking at this GameObject . Declaration Vector3 CursorScaleOffset { get; set; } Property Value Type Description Vector3 HideCursorOnFocus Should the IMixedRealityCursor be hidden when this GameObject is focused? Declaration bool HideCursorOnFocus { get; set; } Property Value Type Description Boolean HostTransform Transform for which this IMixedRealityCursor modifies applies its various properties. Declaration Transform HostTransform { get; set; } Property Value Type Description Transform SnapCursorPosition Should the IMixedRealityCursor snap to the GameObject 's position? Declaration bool SnapCursorPosition { get; set; } Property Value Type Description Boolean UseGazeBasedNormal If true, the normal from the pointing vector will be used to orient the IMixedRealityCursor instead of the targeted GameObject 's normal at point of contact. Declaration bool UseGazeBasedNormal { get; set; } Property Value Type Description Boolean Methods GetCursorVisibility() Indicates whether the IMixedRealityCursor should be visible or not. Declaration bool GetCursorVisibility() Returns Type Description Boolean True if IMixedRealityCursor should be visible, false if not. GetModifiedPosition(IMixedRealityCursor) Returns the IMixedRealityCursor position after considering this modifier. Declaration Vector3 GetModifiedPosition(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Vector3 New position for the IMixedRealityCursor GetModifiedRotation(IMixedRealityCursor) Returns the IMixedRealityCursor rotation after considering this modifier. Declaration Quaternion GetModifiedRotation(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Quaternion New rotation for the IMixedRealityCursor GetModifiedScale(IMixedRealityCursor) Returns the IMixedRealityCursor 's local scale after considering this modifier. Declaration Vector3 GetModifiedScale(IMixedRealityCursor cursor) Parameters Type Name Description IMixedRealityCursor cursor IMixedRealityCursor that is being modified. Returns Type Description Vector3 New local scale for the IMixedRealityCursor GetModifiedTransform(IMixedRealityCursor, out Vector3, out Quaternion, out Vector3) Returns the modified Transform for the IMixedRealityCursor after considering this modifier. Declaration void GetModifiedTransform(IMixedRealityCursor cursor, out Vector3 position, out Quaternion rotation, out Vector3 scale) Parameters Type Name Description IMixedRealityCursor cursor Cursor that is being modified. Vector3 position Modified position. Quaternion rotation Modified rotation. Vector3 scale Modified scale."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IInputActionRule-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IInputActionRule-1.html",
    "title": "Interface IInputActionRule<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IInputActionRule<T> Interface for defining Input Action Rules Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IInputActionRule<T> Type Parameters Name Description T Properties BaseAction The Base Action that the rule will listen to. Declaration MixedRealityInputAction BaseAction { get; } Property Value Type Description MixedRealityInputAction Criteria The criteria to check against for determining if the action should be raised. Declaration T Criteria { get; } Property Value Type Description T RuleAction The Action to raise if the criteria is met. Declaration MixedRealityInputAction RuleAction { get; } Property Value Type Description MixedRealityInputAction"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IInputSimulationService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IInputSimulationService.html",
    "title": "Interface IInputSimulationService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IInputSimulationService Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IInputSimulationService : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties HandDataLeft Pose data for the left hand. Declaration SimulatedHandData HandDataLeft { get; } Property Value Type Description SimulatedHandData HandDataRight Pose data for the right hand. Declaration SimulatedHandData HandDataRight { get; } Property Value Type Description SimulatedHandData HandPositionLeft Position of the left hand in view space. Declaration Vector3 HandPositionLeft { get; set; } Property Value Type Description Vector3 HandPositionRight Position of the right hand in view space. Declaration Vector3 HandPositionRight { get; set; } Property Value Type Description Vector3 HandRotationLeft Rotation euler angles of the left hand in view space. Declaration Vector3 HandRotationLeft { get; set; } Property Value Type Description Vector3 HandRotationRight Rotation euler angles of the right hand in view space. Declaration Vector3 HandRotationRight { get; set; } Property Value Type Description Vector3 HandSimulationMode Simulated hand behavior. Declaration HandSimulationMode HandSimulationMode { get; set; } Property Value Type Description HandSimulationMode InputSimulationProfile Typed representation of the ConfigurationProfile property. Declaration MixedRealityInputSimulationProfile InputSimulationProfile { get; } Property Value Type Description MixedRealityInputSimulationProfile IsAlwaysVisibleHandLeft The left hand is always tracking. Declaration bool IsAlwaysVisibleHandLeft { get; set; } Property Value Type Description Boolean IsAlwaysVisibleHandRight The right hand is always tracking. Declaration bool IsAlwaysVisibleHandRight { get; set; } Property Value Type Description Boolean IsSimulatingHandLeft The left hand is controlled by user input. Declaration bool IsSimulatingHandLeft { get; } Property Value Type Description Boolean IsSimulatingHandRight The right hand is controlled by user input. Declaration bool IsSimulatingHandRight { get; } Property Value Type Description Boolean UserInputEnabled If true then keyboard and mouse input are used to simulate hands. Declaration bool UserInputEnabled { get; set; } Property Value Type Description Boolean Methods ResetHandLeft() Reset the left hand. Declaration void ResetHandLeft() ResetHandRight() Reset the right hand. Declaration void ResetHandRight()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityBaseInputHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityBaseInputHandler.html",
    "title": "Interface IMixedRealityBaseInputHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityBaseInputHandler Base interface for all input handlers. This allows us to use ExecuteEvents.ExecuteHierarchy<IMixedRealityBaseInputHandler> to send an event to all input handling interfaces. Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityBaseInputHandler : IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputPlaybackService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputPlaybackService.html",
    "title": "Interface IMixedRealityInputPlaybackService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputPlaybackService Plays back input animation via the input simulation system. Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputPlaybackService : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties Animation The animation currently being played. Declaration InputAnimation Animation { get; set; } Property Value Type Description InputAnimation IsPlaying True if the animation is currently playing. Declaration bool IsPlaying { get; } Property Value Type Description Boolean LocalTime The local time in seconds relative to the start of the animation. Declaration float LocalTime { get; set; } Property Value Type Description Single Methods LoadInputAnimation(String) Try to load input animation data from the given file. Declaration bool LoadInputAnimation(string filepath) Parameters Type Name Description String filepath Returns Type Description Boolean True if loading input animation from the file succeeded. Pause() Pause playback and keep the current local time. Declaration void Pause() Play() Start playing the animation. Declaration void Play() Stop() Stop playing the animation and jump to the start. Declaration void Stop()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputRecordingService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputRecordingService.html",
    "title": "Interface IMixedRealityInputRecordingService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputRecordingService Provides input recording into an internal buffer and exporting to files. Inherited Members IMixedRealityInputDeviceManager.GetActiveControllers() IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputRecordingService : IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Properties IsRecording True if input is being recorded. Declaration bool IsRecording { get; } Property Value Type Description Boolean RecordingBufferTimeLimit Maximum duration in seconds of the input recording if UseBufferTimeLimit is enabled. Declaration float RecordingBufferTimeLimit { get; set; } Property Value Type Description Single Remarks If UseBufferTimeLimit is enabled then keyframes older than this limit will be discarded. UseBufferTimeLimit Limit the size of the recording buffer. Declaration bool UseBufferTimeLimit { get; set; } Property Value Type Description Boolean Remarks If recording is limited any input older than the RecordingBufferTimeLimit will be discarded. Methods DiscardRecordedInput() Discard all recorded input Declaration void DiscardRecordedInput() SaveInputAnimation(String) Save recorded input animation to a file. Declaration string SaveInputAnimation(string directory = null) Parameters Type Name Description String directory Directory in which to create the file. If null the persistent data path of the app is used. Returns Type Description String File path where input has been recorded. Remarks Filename is determined automatically. SaveInputAnimation(String, String) Save recorded input animation to a file. Declaration string SaveInputAnimation(string filename, string directory = null) Parameters Type Name Description String filename Name of the file to create. String directory Directory in which to create the file. If null the persistent data path of the app is used. Returns Type Description String File path where input has been recorded. StartRecording() Start unlimited input recording. Declaration void StartRecording() StopRecording() Stop recording input. Declaration void StopRecording()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.IMixedRealityInputSource.html",
    "title": "Interface IMixedRealityInputSource | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityInputSource Interface for an input source. An input source is the origin of user input and generally comes from a physical controller, sensor, or other hardware device. Inherited Members IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityInputSource : IMixedRealityEventSource, IEqualityComparer Properties Pointers Array of pointers associated with this input source. Declaration IMixedRealityPointer[] Pointers { get; } Property Value Type Description IMixedRealityPointer [] SourceType The type of input source this object represents. Declaration InputSourceType SourceType { get; } Property Value Type Description InputSourceType"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationEvent.html",
    "title": "Class ManipulationEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class ManipulationEvent A UnityEvent callback containing a ManipulationEventData payload. Inheritance Object ManipulationEvent Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class ManipulationEvent : UnityEvent<ManipulationEventData>"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationEventData.html",
    "title": "Class ManipulationEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class ManipulationEventData Information associated with a particular manipulation event. Inheritance Object ManipulationEventData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class ManipulationEventData Properties IsNearInteraction Whether the Manipulation is a NearInteration or not. Declaration public bool IsNearInteraction { get; set; } Property Value Type Description Boolean ManipulationSource The object being manipulated Declaration public ManipulationHandler ManipulationSource { get; set; } Property Value Type Description ManipulationHandler Pointer The pointer manipulating the object or hovering over the object. Will be null for OnManipulationEnded. Declaration public IMixedRealityPointer Pointer { get; set; } Property Value Type Description IMixedRealityPointer PointerAngularVelocity Pointer's Angular Velocity in Eulers. Declaration public Vector3 PointerAngularVelocity { get; set; } Property Value Type Description Vector3 PointerCentroid Center of the ManipulationHandler 's Pointer in world space Declaration public Vector3 PointerCentroid { get; set; } Property Value Type Description Vector3 PointerVelocity Pointer's Velocity. Declaration public Vector3 PointerVelocity { get; set; } Property Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.HandMovementType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.HandMovementType.html",
    "title": "Enum ManipulationHandler.HandMovementType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ManipulationHandler.HandMovementType Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum HandMovementType Fields Name Description OneAndTwoHanded OneHandedOnly TwoHandedOnly"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.ReleaseBehaviorType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.ReleaseBehaviorType.html",
    "title": "Enum ManipulationHandler.ReleaseBehaviorType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ManipulationHandler.ReleaseBehaviorType Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Flags] public enum ReleaseBehaviorType Fields Name Description KeepAngularVelocity KeepVelocity"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.RotateInOneHandType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ManipulationHandler.RotateInOneHandType.html",
    "title": "Enum ManipulationHandler.RotateInOneHandType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ManipulationHandler.RotateInOneHandType Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public enum RotateInOneHandType Fields Name Description FaceAwayFromUser FaceUser GravityAlignedMaintainRotationToUser MaintainOriginalRotation MaintainRotationToUser RotateAboutGrabPoint RotateAboutObjectCenter"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHand.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHand.html",
    "title": "Class SimulatedHand | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimulatedHand Inheritance Object BaseController BaseHand SimulatedHand SimulatedArticulatedHand SimulatedGestureHand Implements IMixedRealityHand IMixedRealityController Inherited Members BaseHand.HandRay BaseHand.IsInPointingPose BaseHand.DefaultLeftHandedInteractions BaseHand.DefaultRightHandedInteractions BaseHand.SetupDefaultInteractions(Handedness) BaseHand.UpdateVelocity() BaseHand.GetPalmNormal() BaseController.DefaultInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class SimulatedHand : BaseHand, IMixedRealityHand, IMixedRealityController Constructors SimulatedHand(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration protected SimulatedHand(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Fields jointCount Declaration protected static readonly int jointCount Field Value Type Description Int32 jointPoses Declaration protected readonly Dictionary<TrackedHandJoint, MixedRealityPose> jointPoses Field Value Type Description Dictionary < TrackedHandJoint , MixedRealityPose > Properties SimulationMode Declaration public abstract HandSimulationMode SimulationMode { get; } Property Value Type Description HandSimulationMode Methods TryGetJoint(TrackedHandJoint, out MixedRealityPose) Declaration public override bool TryGetJoint(TrackedHandJoint joint, out MixedRealityPose pose) Parameters Type Name Description TrackedHandJoint joint MixedRealityPose pose Returns Type Description Boolean Overrides BaseHand.TryGetJoint(TrackedHandJoint, out MixedRealityPose) UpdateInteractions(SimulatedHandData) Declaration protected abstract void UpdateInteractions(SimulatedHandData handData) Parameters Type Name Description SimulatedHandData handData UpdateState(SimulatedHandData) Declaration public void UpdateState(SimulatedHandData handData) Parameters Type Name Description SimulatedHandData handData Implements IMixedRealityHand IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.FocusDetails.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.FocusDetails.html",
    "title": "Struct FocusDetails | Mixed Reality Toolkit Documentation",
    "keywords": "Struct FocusDetails Contains information about which game object has the focus currently. Also contains information about the normal of that point. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public struct FocusDetails Properties LastGraphicsRaycastResult The last raycast hit info for graphic raycast Declaration public RaycastResult LastGraphicsRaycastResult { get; set; } Property Value Type Description RaycastResult LastRaycastHit The last raycast hit info. Declaration public MixedRealityRaycastHit LastRaycastHit { get; set; } Property Value Type Description MixedRealityRaycastHit Normal The normal of the raycast. Declaration public Vector3 Normal { get; set; } Property Value Type Description Vector3 NormalLocalSpace Declaration public Vector3 NormalLocalSpace { get; set; } Property Value Type Description Vector3 Object The object hit by the last raycast. Declaration public GameObject Object { get; set; } Property Value Type Description GameObject Point The hit point of the raycast. Declaration public Vector3 Point { get; set; } Property Value Type Description Vector3 PointLocalSpace Declaration public Vector3 PointLocalSpace { get; set; } Property Value Type Description Vector3 RayDistance Distance along the ray until a hit, or until the end of the ray if no hit Declaration public float RayDistance { get; set; } Property Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.GazeStabilizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.GazeStabilizer.html",
    "title": "Class GazeStabilizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class GazeStabilizer GazeStabilizer iterates over samples of Raycast data and helps stabilize the user's gaze for precision targeting. Inheritance Object BaseRayStabilizer GazeStabilizer Implements IBaseRayStabilizer Inherited Members BaseRayStabilizer.UpdateStability(Vector3, Quaternion) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class GazeStabilizer : BaseRayStabilizer, IBaseRayStabilizer Constructors GazeStabilizer() Declaration public GazeStabilizer() Properties StablePosition The stabilized position. Declaration public override Vector3 StablePosition { get; } Property Value Type Description Vector3 Overrides BaseRayStabilizer.StablePosition StableRay The stabilized position. Declaration public override Ray StableRay { get; } Property Value Type Description Ray Overrides BaseRayStabilizer.StableRay StableRotation The stabilized rotation. Declaration public override Quaternion StableRotation { get; } Property Value Type Description Quaternion Overrides BaseRayStabilizer.StableRotation StoredStabilitySamples Number of samples that you want to iterate on. Declaration public int StoredStabilitySamples { get; } Property Value Type Description Int32 Methods UpdateStability(Vector3, Vector3) Updates the StablePosition and StableRotation based on GazeSample values. Call this method with RaycastHit parameters to get stable values. Declaration public override void UpdateStability(Vector3 gazePosition, Vector3 gazeDirection) Parameters Type Name Description Vector3 gazePosition Position value from a RaycastHit point. Vector3 gazeDirection Direction value from a RaycastHit rotation. Overrides BaseRayStabilizer.UpdateStability(Vector3, Vector3) Implements IBaseRayStabilizer"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.IBaseRayStabilizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.IBaseRayStabilizer.html",
    "title": "Interface IBaseRayStabilizer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IBaseRayStabilizer Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public interface IBaseRayStabilizer Properties StablePosition Declaration Vector3 StablePosition { get; } Property Value Type Description Vector3 StableRay Declaration Ray StableRay { get; } Property Value Type Description Ray StableRotation Declaration Quaternion StableRotation { get; } Property Value Type Description Quaternion Methods UpdateStability(Vector3, Quaternion) Declaration void UpdateStability(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation UpdateStability(Vector3, Vector3) Declaration void UpdateStability(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position Vector3 direction"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.InterpolationUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.InterpolationUtilities.html",
    "title": "Class InterpolationUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class InterpolationUtilities Static class containing interpolation-related utility functions. Inheritance Object InterpolationUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public static class InterpolationUtilities Methods ExpCoefficient(Single, Single) Computes an exponential coefficient following the given formula: 1 - .5^(dTime/hLife) Declaration public static float ExpCoefficient(float hLife, float dTime) Parameters Type Name Description Single hLife Single dTime Returns Type Description Single ExpDecay(Color, Color, Single, Single) Declaration public static Color ExpDecay(Color from, Color to, float hLife, float dTime) Parameters Type Name Description Color from Color to Single hLife Single dTime Returns Type Description Color ExpDecay(Quaternion, Quaternion, Single, Single) Declaration public static Quaternion ExpDecay(Quaternion from, Quaternion to, float hLife, float dTime) Parameters Type Name Description Quaternion from Quaternion to Single hLife Single dTime Returns Type Description Quaternion ExpDecay(Single, Single, Single, Single) Declaration public static float ExpDecay(float from, float to, float hLife, float dTime) Parameters Type Name Description Single from Single to Single hLife Single dTime Returns Type Description Single ExpDecay(Vector2, Vector2, Single, Single) Declaration public static Vector2 ExpDecay(Vector2 from, Vector2 to, float hLife, float dTime) Parameters Type Name Description Vector2 from Vector2 to Single hLife Single dTime Returns Type Description Vector2 ExpDecay(Vector3, Vector3, Single, Single) Declaration public static Vector3 ExpDecay(Vector3 from, Vector3 to, float hLife, float dTime) Parameters Type Name Description Vector3 from Vector3 to Single hLife Single dTime Returns Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessEventData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessEventData-1.html",
    "title": "Class MixedRealitySpatialAwarenessEventData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessEventData<T> Data for spatial awareness events. Inheritance Object GenericBaseEventData MixedRealitySpatialAwarenessEventData MixedRealitySpatialAwarenessEventData<T> Inherited Members MixedRealitySpatialAwarenessEventData.Id MixedRealitySpatialAwarenessEventData.Initialize(IMixedRealitySpatialAwarenessObserver, Int32) GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessEventData<T> : MixedRealitySpatialAwarenessEventData Type Parameters Name Description T The spatial object data type. Constructors MixedRealitySpatialAwarenessEventData(EventSystem) Constructor. Declaration public MixedRealitySpatialAwarenessEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties SpatialObject The spatial object to which this event pertains. Declaration public T SpatialObject { get; } Property Value Type Description T Methods Initialize(IMixedRealitySpatialAwarenessObserver, Int32, T) Initialize the event data. Declaration public void Initialize(IMixedRealitySpatialAwarenessObserver observer, int id, T spatialObject) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The IMixedRealitySpatialAwarenessObserver that raised the event. Int32 id The identifier of the observed spatial object. T spatialObject The observed spatial object."
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessEventData.html",
    "title": "Class MixedRealitySpatialAwarenessEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessEventData Data for spatial awareness events. Inheritance Object GenericBaseEventData MixedRealitySpatialAwarenessEventData MixedRealitySpatialAwarenessEventData<T> Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessEventData : GenericBaseEventData Constructors MixedRealitySpatialAwarenessEventData(EventSystem) Constructor. Declaration public MixedRealitySpatialAwarenessEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties Id Identifier of the object associated with this event. Declaration public int Id { get; } Property Value Type Description Int32 Methods Initialize(IMixedRealitySpatialAwarenessObserver, Int32) Initialize the event data. Declaration public void Initialize(IMixedRealitySpatialAwarenessObserver observer, int id) Parameters Type Name Description IMixedRealitySpatialAwarenessObserver observer The IMixedRealitySpatialAwarenessObserver that raised the event. Int32 id The identifier of the observed spatial object."
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessMeshObserverProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessMeshObserverProfile.html",
    "title": "Class MixedRealitySpatialAwarenessMeshObserverProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessMeshObserverProfile Configuration profile settings for spatial awareness mesh observers. Inheritance Object BaseMixedRealityProfile BaseSpatialAwarenessObserverProfile MixedRealitySpatialAwarenessMeshObserverProfile Inherited Members BaseSpatialAwarenessObserverProfile.StartupBehavior BaseSpatialAwarenessObserverProfile.IsStationaryObserver BaseSpatialAwarenessObserverProfile.ObservationExtents BaseSpatialAwarenessObserverProfile.ObserverVolumeType BaseSpatialAwarenessObserverProfile.UpdateInterval Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessMeshObserverProfile : BaseSpatialAwarenessObserverProfile Properties DisplayOption Indicates how the mesh subsystem is to display surface meshes within the application. Declaration public SpatialAwarenessMeshDisplayOptions DisplayOption { get; } Property Value Type Description SpatialAwarenessMeshDisplayOptions LevelOfDetail The level of detail used when creating the mesh. Declaration public SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail MeshPhysicsLayer The Unity Physics Layer on which to set observed meshes. Declaration public int MeshPhysicsLayer { get; } Property Value Type Description Int32 OcclusionMaterial The material to be used when observed meshes should occlude other objects. Declaration public Material OcclusionMaterial { get; } Property Value Type Description Material RecalculateNormals Indicates if the spatial awareness system to generate normal for the returned meshes as some platforms may not support returning normal along with the spatial mesh. Declaration public bool RecalculateNormals { get; } Property Value Type Description Boolean TrianglesPerCubicMeter The level of detail, in triangles per cubic meter, for the returned spatial mesh. Declaration public int TrianglesPerCubicMeter { get; } Property Value Type Description Int32 Remarks This value is ignored, unless LevelOfDetail is set to Custom. VisibleMaterial The material to be used when displaying observed meshes. Declaration public Material VisibleMaterial { get; } Property Value Type Description Material"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessSystem.html",
    "title": "Class MixedRealitySpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessSystem Class providing the default implementation of the IMixedRealitySpatialAwarenessSystem interface. Inheritance Object BaseService BaseEventSystem BaseCoreSystem BaseDataProviderAccessCoreSystem MixedRealitySpatialAwarenessSystem Implements IMixedRealityDataProviderAccess IMixedRealitySpatialAwarenessSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityCapabilityCheck Inherited Members BaseDataProviderAccessCoreSystem.Update() BaseDataProviderAccessCoreSystem.LateUpdate() BaseDataProviderAccessCoreSystem.GetDataProviders() BaseDataProviderAccessCoreSystem.GetDataProvider(String) BaseDataProviderAccessCoreSystem.RegisterDataProvider<T>(Type, SupportedPlatforms, Object[]) BaseDataProviderAccessCoreSystem.RegisterDataProvider<T>(T) BaseDataProviderAccessCoreSystem.UnregisterDataProvider<T>(String) BaseDataProviderAccessCoreSystem.UnregisterDataProvider<T>(T) BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessSystem : BaseDataProviderAccessCoreSystem, IMixedRealityDataProviderAccess, IMixedRealitySpatialAwarenessSystem, IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityCapabilityCheck Constructors MixedRealitySpatialAwarenessSystem(IMixedRealityServiceRegistrar, MixedRealitySpatialAwarenessSystemProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public MixedRealitySpatialAwarenessSystem(IMixedRealityServiceRegistrar registrar, MixedRealitySpatialAwarenessSystemProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. MixedRealitySpatialAwarenessSystemProfile profile The configuration profile for the service. MixedRealitySpatialAwarenessSystem(MixedRealitySpatialAwarenessSystemProfile) Constructor. Declaration public MixedRealitySpatialAwarenessSystem(MixedRealitySpatialAwarenessSystemProfile profile) Parameters Type Name Description MixedRealitySpatialAwarenessSystemProfile profile The configuration profile for the service. Properties Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name SpatialAwarenessObjectParent Gets the parent object to which all spatial awareness GameObject s are to be parented. Declaration public GameObject SpatialAwarenessObjectParent { get; } Property Value Type Description GameObject SpatialAwarenessSystemProfile Typed representation of the ConfigurationProfile property. Declaration public MixedRealitySpatialAwarenessSystemProfile SpatialAwarenessSystemProfile { get; } Property Value Type Description MixedRealitySpatialAwarenessSystemProfile Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. ClearObservations() Clears all registered observers' observations. Declaration public void ClearObservations() ClearObservations<T>(String) Clears the observations of the specified observer. Declaration public void ClearObservations<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The name of the observer. Type Parameters Name Description T The observer type. CreateSpatialAwarenessObservationParent(String) Creates the a parent, that is a child of the Spatial Awareness System parent so that the scene hierarchy does not get overly cluttered. Declaration public GameObject CreateSpatialAwarenessObservationParent(string name) Parameters Type Name Description String name Returns Type Description GameObject The GameObject to which spatial awareness objects will be parented. Remarks This method is to be called by implementations of the IMixedRealitySpatialAwarenessObserver interface, not by application code. It is used to enable observations to be grouped by observer. Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseDataProviderAccessCoreSystem.Enable() GenerateNewSourceId() Generates a new source identifier for an IMixedRealitySpatialAwarenessObserver implementation. Declaration public uint GenerateNewSourceId() Returns Type Description UInt32 The source identifier to be used by the IMixedRealitySpatialAwarenessObserver implementation. Remarks This method is to be called by implementations of the IMixedRealitySpatialAwarenessObserver interface, not by application code. GetDataProvider<T>(String) Get the data provider that is registered under the specified name (optional) and matching the specified type. Declaration public override T GetDataProvider<T>(string name = null) where T : IMixedRealityDataProvider Parameters Type Name Description String name The friendly name of the data provider. Returns Type Description T The requested data provider, or null if one cannot be found. Type Parameters Name Description T The desired data provider type. Overrides BaseDataProviderAccessCoreSystem.GetDataProvider<T>(String) Remarks If more than one data provider is registered under the specified name, the first will be returned. GetDataProviders<T>() Get the collection of registered observers of the specified type. Declaration public override IReadOnlyList<T> GetDataProviders<T>() where T : IMixedRealityDataProvider Returns Type Description IReadOnlyList <T> Read-only copy of the list of registered data providers that implement the specified type. Type Parameters Name Description T The desired data provider type Overrides BaseDataProviderAccessCoreSystem.GetDataProviders<T>() GetObserver(String) Get the IMixedRealitySpatialAwarenessObserver that is registered under the specified name. Declaration public IMixedRealitySpatialAwarenessObserver GetObserver(string name) Parameters Type Name Description String name The friendly name of the observer. Returns Type Description IMixedRealitySpatialAwarenessObserver The requested observer, or null if one cannot be found. Remarks If more than one observer is registered under the specified name, the first will be returned. GetObserver<T>(String) Get the observer that is registered under the specified name matching the specified type. Declaration public T GetObserver<T>(string name = null) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Returns Type Description T The requested observer, or null if one cannot be found. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) Remarks If more than one observer is registered under the specified name, the first will be returned. GetObservers() Gets the collection of registered IMixedRealitySpatialAwarenessObserver data providers. Declaration public IReadOnlyList<IMixedRealitySpatialAwarenessObserver> GetObservers() Returns Type Description IReadOnlyList < IMixedRealitySpatialAwarenessObserver > Read only copy of the list of registered observers. GetObservers<T>() Get the collection of registered observers of the specified type. Declaration public IReadOnlyList<T> GetObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Returns Type Description IReadOnlyList <T> Readonly copy of the list of registered observers that implement the specified type. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() Reset() Optional Reset function to perform that will Reset the service, for example, whenever there is a profile change. Declaration public override void Reset() Overrides BaseDataProviderAccessCoreSystem.Reset() ResumeObserver<T>(String) Starts / restarts the spatial observer registered under the specified name matching the specified type. Declaration public void ResumeObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) ResumeObservers() Starts / restarts all spatial observers of the specified type. Declaration public void ResumeObservers() ResumeObservers<T>() Starts / restarts all spatial observers of the specified type. Declaration public void ResumeObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) SuspendObserver<T>(String) Stops / pauses the spatial observer registered under the specified name matching the specified type. Declaration public void SuspendObserver<T>(string name) where T : IMixedRealitySpatialAwarenessObserver Parameters Type Name Description String name The friendly name of the observer. Type Parameters Name Description T The desired spatial awareness observer type (ex: IMixedRealitySpatialAwarenessMeshObserver ) SuspendObservers() Stops / pauses all spatial observers. Declaration public void SuspendObservers() SuspendObservers<T>() Stops / pauses all spatial observers of the specified type. Declaration public void SuspendObservers<T>() where T : IMixedRealitySpatialAwarenessObserver Type Parameters Name Description T Implements IMixedRealityDataProviderAccess IMixedRealitySpatialAwarenessSystem IMixedRealityEventSystem IMixedRealityService IDisposable IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessSystemProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialAwarenessSystemProfile.html",
    "title": "Class MixedRealitySpatialAwarenessSystemProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealitySpatialAwarenessSystemProfile Configuration profile settings for spatial awareness mesh observers. Inheritance Object BaseMixedRealityProfile MixedRealitySpatialAwarenessSystemProfile Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class MixedRealitySpatialAwarenessSystemProfile : BaseMixedRealityProfile Properties ObserverConfigurations Declaration public MixedRealitySpatialObserverConfiguration[] ObserverConfigurations { get; } Property Value Type Description MixedRealitySpatialObserverConfiguration []"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialObserverConfiguration.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.MixedRealitySpatialObserverConfiguration.html",
    "title": "Struct MixedRealitySpatialObserverConfiguration | Mixed Reality Toolkit Documentation",
    "keywords": "Struct MixedRealitySpatialObserverConfiguration Implements IMixedRealityServiceConfiguration Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public struct MixedRealitySpatialObserverConfiguration : IMixedRealityServiceConfiguration Constructors MixedRealitySpatialObserverConfiguration(SystemType, String, UInt32, SupportedPlatforms, BaseSpatialAwarenessObserverProfile) Constructor. Declaration public MixedRealitySpatialObserverConfiguration(SystemType componentType, string componentName, uint priority, SupportedPlatforms runtimePlatform, BaseSpatialAwarenessObserverProfile configurationProfile) Parameters Type Name Description SystemType componentType The SystemType of the observer. String componentName The friendly name of the observer. UInt32 priority The load priority of the observer. SupportedPlatforms runtimePlatform The runtime platform(s) supported by the observer. BaseSpatialAwarenessObserverProfile configurationProfile The configuration profile for the observer. Properties ComponentName The name of the system, feature or manager. Declaration public string ComponentName { get; } Property Value Type Description String ComponentType The concrete type for the system, feature or manager. Declaration public SystemType ComponentType { get; } Property Value Type Description SystemType ObserverProfile Spatial Observer specific configuration profile. Declaration public BaseSpatialAwarenessObserverProfile ObserverProfile { get; } Property Value Type Description BaseSpatialAwarenessObserverProfile Priority The priority this system, feature or manager will be initialized in. Declaration public uint Priority { get; } Property Value Type Description UInt32 RuntimePlatform The runtime platform(s) to run this service. Declaration public SupportedPlatforms RuntimePlatform { get; } Property Value Type Description SupportedPlatforms Implements IMixedRealityServiceConfiguration"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessMeshDisplayOptions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessMeshDisplayOptions.html",
    "title": "Enum SpatialAwarenessMeshDisplayOptions | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SpatialAwarenessMeshDisplayOptions Options for how the spatial mesh is to be displayed by the spatial awareness system. Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public enum SpatialAwarenessMeshDisplayOptions Fields Name Description None Do not display the spatial mesh Occlusion Display the spatial mesh using the configured occlusion material Visible Display the spatial mesh using the configured material"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessMeshLevelOfDetail.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessMeshLevelOfDetail.html",
    "title": "Enum SpatialAwarenessMeshLevelOfDetail | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SpatialAwarenessMeshLevelOfDetail Enumeration defining levels of detail for the spatial awareness mesh subsystem. Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public enum SpatialAwarenessMeshLevelOfDetail Fields Name Description Coarse The coarse level of detail is well suited for identifying large environmental features, such as floors and walls. Custom The custom level of detail allows specifying a custom value for TrianglesPerCubicMeter. Fine The fine level of detail is well suited for using as an occlusion mesh. Medium The medium level of detail is often useful for experiences that continually scan the environment (ex: a virtual pet)."
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessMeshObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessMeshObject.html",
    "title": "Class SpatialAwarenessMeshObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessMeshObject Object encapsulating the components of a spatial awareness mesh object. Inheritance Object BaseSpatialAwarenessObject SpatialAwarenessMeshObject Implements IMixedRealitySpatialAwarenessObject Inherited Members BaseSpatialAwarenessObject.Id BaseSpatialAwarenessObject.GameObject BaseSpatialAwarenessObject.Renderer BaseSpatialAwarenessObject.Filter BaseSpatialAwarenessObject.CleanObject() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessMeshObject : BaseSpatialAwarenessObject, IMixedRealitySpatialAwarenessObject Properties Collider The collider for the mesh object. Declaration public MeshCollider Collider { get; set; } Property Value Type Description MeshCollider Methods Cleanup(SpatialAwarenessMeshObject, Boolean, Boolean) Clean up the resources associated with the surface. Declaration public static void Cleanup(SpatialAwarenessMeshObject meshObject, bool destroyGameObject = true, bool destroyMeshes = true) Parameters Type Name Description SpatialAwarenessMeshObject meshObject The SpatialAwarenessMeshObject whose resources will be cleaned up. Boolean destroyGameObject Boolean destroyMeshes Create(Mesh, Int32, String, Int32, GameObject) Creates a SpatialAwarenessMeshObject . Declaration public static SpatialAwarenessMeshObject Create(Mesh mesh, int layer, string name, int meshId, GameObject meshParent = null) Parameters Type Name Description Mesh mesh Int32 layer String name Int32 meshId GameObject meshParent Returns Type Description SpatialAwarenessMeshObject SpatialMeshObject containing the fields that describe the mesh. Implements IMixedRealitySpatialAwarenessObject"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessPlanarObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessPlanarObject.html",
    "title": "Class SpatialAwarenessPlanarObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessPlanarObject Inheritance Object BaseSpatialAwarenessObject SpatialAwarenessPlanarObject Implements IMixedRealitySpatialAwarenessObject Inherited Members BaseSpatialAwarenessObject.Id BaseSpatialAwarenessObject.GameObject BaseSpatialAwarenessObject.Renderer BaseSpatialAwarenessObject.Filter BaseSpatialAwarenessObject.CleanObject() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessPlanarObject : BaseSpatialAwarenessObject, IMixedRealitySpatialAwarenessObject Constructors SpatialAwarenessPlanarObject() constructor Declaration public SpatialAwarenessPlanarObject() Properties Collider Declaration public BoxCollider Collider { get; set; } Property Value Type Description BoxCollider Methods CreateSpatialObject(Vector3, Int32, String, Int32) Creates a SpatialAwarenessPlanarObject . Declaration public static SpatialAwarenessPlanarObject CreateSpatialObject(Vector3 size, int layer, string name, int planeId) Parameters Type Name Description Vector3 size Int32 layer String name Int32 planeId Returns Type Description SpatialAwarenessPlanarObject SpatialAwarenessPlanarObject containing the fields that describe the plane. Implements IMixedRealitySpatialAwarenessObject"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessSurfaceTypes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialAwareness.SpatialAwarenessSurfaceTypes.html",
    "title": "Enum SpatialAwarenessSurfaceTypes | Mixed Reality Toolkit Documentation",
    "keywords": "Enum SpatialAwarenessSurfaceTypes Enumeration defining the types of planar surfaces that are supported by the spatial awareness surface finding subsystem. Namespace : Microsoft.MixedReality.Toolkit.SpatialAwareness Assembly : cs.temp.dll.dll Syntax [Flags] public enum SpatialAwarenessSurfaceTypes Fields Name Description Ceiling The environment’s ceiling. Floor The environment’s floor. Platform A raised, horizontal surface such as a shelf. Unknown An unknown / unsupported type of surface. Wall A wall within the user’s space."
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfBuffer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfBuffer.html",
    "title": "Class GltfBuffer | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfBuffer A buffer points to binary geometry, animation, or skins. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/buffer.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfBuffer Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfBuffer : GltfChildOfRootProperty Fields byteLength The length of the buffer in bytes. 0 Declaration public int byteLength Field Value Type Description Int32 uri The uri of the buffer. Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri. Declaration public string uri Field Value Type Description String Properties BufferData Declaration public byte[] BufferData { get; } Property Value Type Description Byte []"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfBufferView.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfBufferView.html",
    "title": "Class GltfBufferView | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfBufferView A view into a buffer generally representing a subset of the buffer. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/bufferView.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfBufferView Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfBufferView : GltfChildOfRootProperty Fields buffer The index of the buffer. Declaration public int buffer Field Value Type Description Int32 byteLength The length of the bufferView in bytes. 0 Declaration public int byteLength Field Value Type Description Int32 byteOffset The offset into the buffer in bytes. 0 Declaration public int byteOffset Field Value Type Description Int32 byteStride The stride, in bytes, between vertex attributes or other interleavable data. When this is zero, data is tightly packed. 0 255 Declaration public int byteStride Field Value Type Description Int32 target The target that the WebGL buffer should be bound to. All valid values correspond to WebGL enums. When this is not provided, the bufferView contains animation or skin data. Declaration public GltfBufferViewTarget target Field Value Type Description GltfBufferViewTarget Properties Buffer https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/buffer.schema.json Declaration public GltfBuffer Buffer { get; } Property Value Type Description GltfBuffer"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfBufferViewTarget.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfBufferViewTarget.html",
    "title": "Enum GltfBufferViewTarget | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfBufferViewTarget The target that the GPU buffer should be bound to. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/bufferView.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfBufferViewTarget Fields Name Description ArrayBuffer ElementArrayBuffer None"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCamera.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCamera.html",
    "title": "Class GltfCamera | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfCamera A camera's projection. A node can reference a camera to apply a transform to place the camera in the scene https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfCamera Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfCamera : GltfChildOfRootProperty Fields orthographic An orthographic camera containing properties to create an orthographic projection matrix. Declaration public GltfCameraOrthographic orthographic Field Value Type Description GltfCameraOrthographic perspective A perspective camera containing properties to create a perspective projection matrix. Declaration public GltfCameraPerspective perspective Field Value Type Description GltfCameraPerspective type Specifies if the camera uses a perspective or orthographic projection. Based on this, either the camera's perspective or orthographic property will be defined. Declaration public GltfCameraType type Field Value Type Description GltfCameraType"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCameraOrthographic.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCameraOrthographic.html",
    "title": "Class GltfCameraOrthographic | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfCameraOrthographic An orthographic camera containing properties to create an orthographic projection matrix. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.orthographic.schema.json Inheritance Object GltfProperty GltfCameraOrthographic Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfCameraOrthographic : GltfProperty Fields xMag The floating-point horizontal magnification of the view. Declaration public double xMag Field Value Type Description Double yMag The floating-point vertical magnification of the view. Declaration public double yMag Field Value Type Description Double zFar The floating-point distance to the far clipping plane. Declaration public double zFar Field Value Type Description Double zNear The floating-point distance to the near clipping plane. Declaration public double zNear Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCameraPerspective.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCameraPerspective.html",
    "title": "Class GltfCameraPerspective | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfCameraPerspective A perspective camera containing properties to create a perspective projection matrix. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.perspective.schema.json Inheritance Object GltfProperty GltfCameraPerspective Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfCameraPerspective : GltfProperty Fields aspectRatio The floating-point aspect ratio of the field of view. When this is undefined, the aspect ratio of the canvas is used. 0.0 Declaration public double aspectRatio Field Value Type Description Double yFov The floating-point vertical field of view in radians. 0.0 Declaration public double yFov Field Value Type Description Double zFar The floating-point distance to the far clipping plane. When defined, zfar must be greater than znear . If zfar is undefined, runtime must use infinite projection matrix. 0.0 Declaration public double zFar Field Value Type Description Double zNear The floating-point distance to the near clipping plane. 0.0 Declaration public double zNear Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCameraType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfCameraType.html",
    "title": "Enum GltfCameraType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfCameraType Specifies if the camera uses a perspective or orthographic projection. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfCameraType Fields Name Description orthographic perspective"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfChildOfRootProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfChildOfRootProperty.html",
    "title": "Class GltfChildOfRootProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfChildOfRootProperty https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/glTFChildOfRootProperty.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfAccessor GltfAnimation GltfBuffer GltfBufferView GltfCamera GltfImage GltfMaterial GltfMesh GltfNode GltfSampler GltfScene GltfSkin GltfTexture Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfChildOfRootProperty : GltfProperty Fields name The user-defined name of this object. This is not necessarily unique, e.g., an accessor and a buffer could have the same name, or two accessors could even have the same name. Declaration public string name Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DeviceOsInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DeviceOsInfo.html",
    "title": "Class DeviceOsInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class DeviceOsInfo Inheritance Object DeviceOsInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class DeviceOsInfo Fields ComputerName Declaration public string ComputerName Field Value Type Description String OsEdition Declaration public string OsEdition Field Value Type Description String OsEditionId Declaration public int OsEditionId Field Value Type Description Int32 OsVersion Declaration public string OsVersion Field Value Type Description String Platform Declaration public string Platform Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DevicePortal.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DevicePortal.html",
    "title": "Class DevicePortal | Mixed Reality Toolkit Documentation",
    "keywords": "Class DevicePortal Function used to communicate with Windows 10 devices through the device portal REST APIs. Inheritance Object DevicePortal Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public static class DevicePortal Methods ConnectToWiFiNetworkAsync(DeviceInfo, InterfaceInfo, WirelessNetworkInfo, String) Connects to the specified WiFi Network. Declaration public static Task<Response> ConnectToWiFiNetworkAsync(DeviceInfo targetDevice, InterfaceInfo interfaceInfo, WirelessNetworkInfo wifiNetwork, string password) Parameters Type Name Description DeviceInfo targetDevice InterfaceInfo interfaceInfo The interface to use to connect. WirelessNetworkInfo wifiNetwork The network to connect to. String password Password for network access. Returns Type Description Task < Response > True, if connection successful. DownloadLogFileAsync(String, DeviceInfo, ApplicationInfo) Downloads and launches the Log file for the target application on the target device. Declaration public static Task<string> DownloadLogFileAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached ApplicationInfo . Returns Type Description Task < String > The path of the downloaded log file. EnsureAuthenticationAsync(DeviceInfo) Makes sure the Authentication Headers and CSRF Tokens are set. Declaration public static Task<bool> EnsureAuthenticationAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True if Authentication is successful, otherwise false. FinalizeUrl(String) This Utility method finalizes the URL and formats the HTTPS string if needed. Declaration public static string FinalizeUrl(string targetUrl) Parameters Type Name Description String targetUrl The target URL i.e. 128.128.128.128 Returns Type Description String The finalized URL with http/https prefix. Remarks Local Machine will be changed to 127.0.0.1:10080 for HoloLens connections. GetAllInstalledAppsAsync(DeviceInfo) Declaration public static Task<InstalledApps> GetAllInstalledAppsAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < InstalledApps > GetAvailableWiFiNetworksAsync(DeviceInfo, InterfaceInfo) Gets the AvailableWiFiNetworks of the target device. Declaration public static Task<AvailableWiFiNetworks> GetAvailableWiFiNetworksAsync(DeviceInfo targetDevice, InterfaceInfo interfaceInfo) Parameters Type Name Description DeviceInfo targetDevice InterfaceInfo interfaceInfo The GUID for the network interface to use to search for wireless networks, without brackets. Returns Type Description Task < AvailableWiFiNetworks > AvailableWiFiNetworks GetBatteryStateAsync(DeviceInfo) Gets the BatteryInfo of the target device. Declaration public static Task<BatteryInfo> GetBatteryStateAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < BatteryInfo > BatteryInfo GetDeviceOsInfoAsync(DeviceInfo) Gets the DeviceOsInfo of the target device. Declaration public static Task<DeviceOsInfo> GetDeviceOsInfoAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < DeviceOsInfo > DeviceOsInfo GetIpConfigInfoAsync(DeviceInfo) Gets the IpConfigInfo of the target device. Declaration public static Task<IpConfigInfo> GetIpConfigInfoAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < IpConfigInfo > IpConfigInfo GetMachineNameAsync(DeviceInfo) Gets the MachineName of the target device. Declaration public static Task<MachineName> GetMachineNameAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < MachineName > MachineName GetPowerStateAsync(DeviceInfo) Gets the PowerStateInfo of the target device. Declaration public static Task<PowerStateInfo> GetPowerStateAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < PowerStateInfo > PowerStateInfo GetWiFiNetworkInterfacesAsync(DeviceInfo) Gets the NetworkInterfaces of the target device. Declaration public static Task<NetworkInterfaces> GetWiFiNetworkInterfacesAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < NetworkInterfaces > NetworkInterfaces InstallAppAsync(String, DeviceInfo, Boolean) Installs the target application on the target device. Declaration public static Task<bool> InstallAppAsync(string appFullPath, DeviceInfo targetDevice, bool waitForDone = true) Parameters Type Name Description String appFullPath DeviceInfo targetDevice Boolean waitForDone Should the thread wait until installation is complete? Returns Type Description Task < Boolean > True, if Installation was a success. IsAppInstalledAsync(String, DeviceInfo) Determines if the target application is currently running on the target device. Declaration public static Task<bool> IsAppInstalledAsync(string packageName, DeviceInfo targetDevice) Parameters Type Name Description String packageName DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if application is currently installed on device. IsAppRunningAsync(String, DeviceInfo, ApplicationInfo) Determines if the target application is running on the target device. Declaration public static Task<bool> IsAppRunningAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached ApplicationInfo . Returns Type Description Task < Boolean > True, if the application is running. LaunchAppAsync(String, DeviceInfo, ApplicationInfo) Launches the target application on the target device. Declaration public static Task<bool> LaunchAppAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached ApplicationInfo . Returns Type Description Task < Boolean > True, if application was successfully launched and is currently running on the target device. OpenWebPortal(DeviceInfo) Opens the Device Portal for the target device. Declaration public static void OpenWebPortal(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice RefreshCsrfTokenAsync(DeviceInfo) Refreshes the CSRF Token in case the device or its portal was restarted. Declaration public static Task<bool> RefreshCsrfTokenAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if refresh was successful. RestartAsync(DeviceInfo) Restart the target device. Declaration public static Task<bool> RestartAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if the device has successfully restarted. ShutdownAsync(DeviceInfo) Shuts down the target device. Declaration public static Task<bool> ShutdownAsync(DeviceInfo targetDevice) Parameters Type Name Description DeviceInfo targetDevice Returns Type Description Task < Boolean > True, if the device is shitting down. StopAppAsync(String, DeviceInfo, ApplicationInfo) Stops the target application on the target device. Declaration public static Task<bool> StopAppAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached ApplicationInfo . Returns Type Description Task < Boolean > true, if application was successfully stopped. UninstallAppAsync(String, DeviceInfo, ApplicationInfo) Uninstalls the target application on the target device Declaration public static Task<bool> UninstallAppAsync(string packageName, DeviceInfo targetDevice, ApplicationInfo appInfo = null) Parameters Type Name Description String packageName DeviceInfo targetDevice ApplicationInfo appInfo Optional cached ApplicationInfo . Returns Type Description Task < Boolean > True, if uninstall was a success."
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DevicePortalConnections.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DevicePortalConnections.html",
    "title": "Class DevicePortalConnections | Mixed Reality Toolkit Documentation",
    "keywords": "Class DevicePortalConnections Inheritance Object DevicePortalConnections Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class DevicePortalConnections Constructors DevicePortalConnections() Declaration public DevicePortalConnections() DevicePortalConnections(DeviceInfo) Declaration public DevicePortalConnections(DeviceInfo deviceInfo) Parameters Type Name Description DeviceInfo deviceInfo Fields Connections Declaration public List<DeviceInfo> Connections Field Value Type Description List < DeviceInfo >"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DHCPInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.DHCPInfo.html",
    "title": "Class DHCPInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class DHCPInfo Inheritance Object DHCPInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class DHCPInfo Fields Address Declaration public IpAddressInfo Address Field Value Type Description IpAddressInfo LeaseExpires Declaration public int LeaseExpires Field Value Type Description Int32 LeaseObtained Declaration public int LeaseObtained Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.FileInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.FileInfo.html",
    "title": "Struct FileInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Struct FileInfo Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public struct FileInfo Fields CurrentDir Folder under the requested known folder. Declaration public string CurrentDir Field Value Type Description String DateCreated Declaration public int DateCreated Field Value Type Description Int32 FileSize In bytes. Declaration public int FileSize Field Value Type Description Int32 Id Declaration public string Id Field Value Type Description String Name Declaration public string Name Field Value Type Description String SubPath Present if this item is a folder, this is the name of the folder. Declaration public string SubPath Field Value Type Description String Type Folder==16 File==32 Declaration public int Type Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.FileList.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.FileList.html",
    "title": "Class FileList | Mixed Reality Toolkit Documentation",
    "keywords": "Class FileList Inheritance Object FileList Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class FileList Fields Items Declaration public FileInfo[] Items Field Value Type Description FileInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.InstalledApps.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.InstalledApps.html",
    "title": "Class InstalledApps | Mixed Reality Toolkit Documentation",
    "keywords": "Class InstalledApps Inheritance Object InstalledApps Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class InstalledApps Fields InstalledPackages Declaration public ApplicationInfo[] InstalledPackages Field Value Type Description ApplicationInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.InstallStatus.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.InstallStatus.html",
    "title": "Class InstallStatus | Mixed Reality Toolkit Documentation",
    "keywords": "Class InstallStatus Inheritance Object InstallStatus Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class InstallStatus Fields Code Declaration public int Code Field Value Type Description Int32 CodeText Declaration public string CodeText Field Value Type Description String Reason Declaration public string Reason Field Value Type Description String Success Declaration public bool Success Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.SpatialAnchorPose_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.SpatialAnchorPose_t.html",
    "title": "Struct SpatialAnchorPose_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct SpatialAnchorPose_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct SpatialAnchorPose_t Fields mAnchorToAbsoluteTracking Declaration public HmdMatrix34_t mAnchorToAbsoluteTracking Field Value Type Description HmdMatrix34_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Texture_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.Texture_t.html",
    "title": "Struct Texture_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct Texture_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct Texture_t Fields eColorSpace Declaration public EColorSpace eColorSpace Field Value Type Description EColorSpace eType Declaration public ETextureType eType Field Value Type Description ETextureType handle Declaration public IntPtr handle Field Value Type Description IntPtr"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.TrackedDevicePose_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.TrackedDevicePose_t.html",
    "title": "Struct TrackedDevicePose_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct TrackedDevicePose_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct TrackedDevicePose_t Fields bDeviceIsConnected Declaration public bool bDeviceIsConnected Field Value Type Description Boolean bPoseIsValid Declaration public bool bPoseIsValid Field Value Type Description Boolean eTrackingResult Declaration public ETrackingResult eTrackingResult Field Value Type Description ETrackingResult mDeviceToAbsoluteTracking Declaration public HmdMatrix34_t mDeviceToAbsoluteTracking Field Value Type Description HmdMatrix34_t vAngularVelocity Declaration public HmdVector3_t vAngularVelocity Field Value Type Description HmdVector3_t vVelocity Declaration public HmdVector3_t vVelocity Field Value Type Description HmdVector3_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRActiveActionSet_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRActiveActionSet_t.html",
    "title": "Struct VRActiveActionSet_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRActiveActionSet_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRActiveActionSet_t Fields nPriority Declaration public int nPriority Field Value Type Description Int32 ulActionSet Declaration public ulong ulActionSet Field Value Type Description UInt64 ulRestrictedToDevice Declaration public ulong ulRestrictedToDevice Field Value Type Description UInt64 ulSecondaryActionSet Declaration public ulong ulSecondaryActionSet Field Value Type Description UInt64 unPadding Declaration public uint unPadding Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRBoneTransform_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRBoneTransform_t.html",
    "title": "Struct VRBoneTransform_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRBoneTransform_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRBoneTransform_t Fields orientation Declaration public HmdQuaternionf_t orientation Field Value Type Description HmdQuaternionf_t position Declaration public HmdVector4_t position Field Value Type Description HmdVector4_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRControllerAxis_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRControllerAxis_t.html",
    "title": "Struct VRControllerAxis_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRControllerAxis_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRControllerAxis_t Fields x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRControllerState_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRControllerState_t.html",
    "title": "Struct VRControllerState_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRControllerState_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRControllerState_t Fields rAxis0 Declaration public VRControllerAxis_t rAxis0 Field Value Type Description VRControllerAxis_t rAxis1 Declaration public VRControllerAxis_t rAxis1 Field Value Type Description VRControllerAxis_t rAxis2 Declaration public VRControllerAxis_t rAxis2 Field Value Type Description VRControllerAxis_t rAxis3 Declaration public VRControllerAxis_t rAxis3 Field Value Type Description VRControllerAxis_t rAxis4 Declaration public VRControllerAxis_t rAxis4 Field Value Type Description VRControllerAxis_t ulButtonPressed Declaration public ulong ulButtonPressed Field Value Type Description UInt64 ulButtonTouched Declaration public ulong ulButtonTouched Field Value Type Description UInt64 unPacketNum Declaration public uint unPacketNum Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRControllerState_t_Packed.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VRControllerState_t_Packed.html",
    "title": "Struct VRControllerState_t_Packed | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VRControllerState_t_Packed Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VRControllerState_t_Packed Constructors VRControllerState_t_Packed(VRControllerState_t) Declaration public VRControllerState_t_Packed(VRControllerState_t unpacked) Parameters Type Name Description VRControllerState_t unpacked Fields rAxis0 Declaration public VRControllerAxis_t rAxis0 Field Value Type Description VRControllerAxis_t rAxis1 Declaration public VRControllerAxis_t rAxis1 Field Value Type Description VRControllerAxis_t rAxis2 Declaration public VRControllerAxis_t rAxis2 Field Value Type Description VRControllerAxis_t rAxis3 Declaration public VRControllerAxis_t rAxis3 Field Value Type Description VRControllerAxis_t rAxis4 Declaration public VRControllerAxis_t rAxis4 Field Value Type Description VRControllerAxis_t ulButtonPressed Declaration public ulong ulButtonPressed Field Value Type Description UInt64 ulButtonTouched Declaration public ulong ulButtonTouched Field Value Type Description UInt64 unPacketNum Declaration public uint unPacketNum Field Value Type Description UInt32 Methods Unpack(ref VRControllerState_t) Declaration public void Unpack(ref VRControllerState_t unpacked) Parameters Type Name Description VRControllerState_t unpacked"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ApplicationLaunch_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ApplicationLaunch_t.html",
    "title": "Struct VREvent_ApplicationLaunch_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_ApplicationLaunch_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_ApplicationLaunch_t Fields pid Declaration public uint pid Field Value Type Description UInt32 unArgsHandle Declaration public uint unArgsHandle Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Chaperone_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Chaperone_t.html",
    "title": "Struct VREvent_Chaperone_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Chaperone_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Chaperone_t Fields m_nCurrentUniverse Declaration public ulong m_nCurrentUniverse Field Value Type Description UInt64 m_nPreviousUniverse Declaration public ulong m_nPreviousUniverse Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Controller_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Controller_t.html",
    "title": "Struct VREvent_Controller_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Controller_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Controller_t Fields button Declaration public uint button Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Data_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Data_t.html",
    "title": "Struct VREvent_Data_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Data_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Data_t Fields actionManifest Declaration public VREvent_InputActionManifestLoad_t actionManifest Field Value Type Description VREvent_InputActionManifestLoad_t applicationLaunch Declaration public VREvent_ApplicationLaunch_t applicationLaunch Field Value Type Description VREvent_ApplicationLaunch_t cameraSurface Declaration public VREvent_EditingCameraSurface_t cameraSurface Field Value Type Description VREvent_EditingCameraSurface_t chaperone Declaration public VREvent_Chaperone_t chaperone Field Value Type Description VREvent_Chaperone_t controller Declaration public VREvent_Controller_t controller Field Value Type Description VREvent_Controller_t dualAnalog Declaration public VREvent_DualAnalog_t dualAnalog Field Value Type Description VREvent_DualAnalog_t hapticVibration Declaration public VREvent_HapticVibration_t hapticVibration Field Value Type Description VREvent_HapticVibration_t inputBinding Declaration public VREvent_InputBindingLoad_t inputBinding Field Value Type Description VREvent_InputBindingLoad_t ipd Declaration public VREvent_Ipd_t ipd Field Value Type Description VREvent_Ipd_t keyboard Declaration public VREvent_Keyboard_t keyboard Field Value Type Description VREvent_Keyboard_t messageOverlay Declaration public VREvent_MessageOverlay_t messageOverlay Field Value Type Description VREvent_MessageOverlay_t mouse Declaration public VREvent_Mouse_t mouse Field Value Type Description VREvent_Mouse_t notification Declaration public VREvent_Notification_t notification Field Value Type Description VREvent_Notification_t overlay Declaration public VREvent_Overlay_t overlay Field Value Type Description VREvent_Overlay_t performanceTest Declaration public VREvent_PerformanceTest_t performanceTest Field Value Type Description VREvent_PerformanceTest_t process Declaration public VREvent_Process_t process Field Value Type Description VREvent_Process_t progressUpdate Declaration public VREvent_ProgressUpdate_t progressUpdate Field Value Type Description VREvent_ProgressUpdate_t property Declaration public VREvent_Property_t property Field Value Type Description VREvent_Property_t reserved Declaration public VREvent_Reserved_t reserved Field Value Type Description VREvent_Reserved_t screenshot Declaration public VREvent_Screenshot_t screenshot Field Value Type Description VREvent_Screenshot_t screenshotProgress Declaration public VREvent_ScreenshotProgress_t screenshotProgress Field Value Type Description VREvent_ScreenshotProgress_t scroll Declaration public VREvent_Scroll_t scroll Field Value Type Description VREvent_Scroll_t seatedZeroPoseReset Declaration public VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset Field Value Type Description VREvent_SeatedZeroPoseReset_t showUi Declaration public VREvent_ShowUI_t showUi Field Value Type Description VREvent_ShowUI_t spatialAnchor Declaration public VREvent_SpatialAnchor_t spatialAnchor Field Value Type Description VREvent_SpatialAnchor_t status Declaration public VREvent_Status_t status Field Value Type Description VREvent_Status_t touchPadMove Declaration public VREvent_TouchPadMove_t touchPadMove Field Value Type Description VREvent_TouchPadMove_t webConsole Declaration public VREvent_WebConsole_t webConsole Field Value Type Description VREvent_WebConsole_t"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_DualAnalog_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_DualAnalog_t.html",
    "title": "Struct VREvent_DualAnalog_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_DualAnalog_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_DualAnalog_t Fields transformedX Declaration public float transformedX Field Value Type Description Single transformedY Declaration public float transformedY Field Value Type Description Single which Declaration public EDualAnalogWhich which Field Value Type Description EDualAnalogWhich x Declaration public float x Field Value Type Description Single y Declaration public float y Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_EditingCameraSurface_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_EditingCameraSurface_t.html",
    "title": "Struct VREvent_EditingCameraSurface_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_EditingCameraSurface_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_EditingCameraSurface_t Fields nVisualMode Declaration public uint nVisualMode Field Value Type Description UInt32 overlayHandle Declaration public ulong overlayHandle Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_HapticVibration_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_HapticVibration_t.html",
    "title": "Struct VREvent_HapticVibration_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_HapticVibration_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_HapticVibration_t Fields componentHandle Declaration public ulong componentHandle Field Value Type Description UInt64 containerHandle Declaration public ulong containerHandle Field Value Type Description UInt64 fAmplitude Declaration public float fAmplitude Field Value Type Description Single fDurationSeconds Declaration public float fDurationSeconds Field Value Type Description Single fFrequency Declaration public float fFrequency Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_InputActionManifestLoad_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_InputActionManifestLoad_t.html",
    "title": "Struct VREvent_InputActionManifestLoad_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_InputActionManifestLoad_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_InputActionManifestLoad_t Fields pathAppKey Declaration public ulong pathAppKey Field Value Type Description UInt64 pathManifestPath Declaration public ulong pathManifestPath Field Value Type Description UInt64 pathMessage Declaration public ulong pathMessage Field Value Type Description UInt64 pathMessageParam Declaration public ulong pathMessageParam Field Value Type Description UInt64"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.RoomFile Classes RoomFileImporter RoomFileSerializer Converts a UnityEngine.Mesh object to and from an array of bytes that conform to the .room file format. File header: vertex count (32 bit integer), triangle count (32 bit integer) Vertex list: vertex.x, vertex.y, vertex.z (all 32 bit float) Triangle index list: 32 bit integers"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.SpatialObjectMeshObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.SpatialObjectMeshObserver.html",
    "title": "Class SpatialObjectMeshObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialObjectMeshObserver Spatial awareness mesh observer that provides mesh data from a 3D model imported as a Unity asset. Inheritance Object SpatialObjectMeshObserver Implements IMixedRealitySpatialAwarenessMeshObserver IMixedRealityCapabilityCheck Namespace : Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver Assembly : cs.temp.dll.dll Syntax public class SpatialObjectMeshObserver : BaseSpatialObserver, IMixedRealitySpatialAwarenessMeshObserver, IMixedRealityCapabilityCheck Constructors SpatialObjectMeshObserver(IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public SpatialObjectMeshObserver(IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. SpatialObjectMeshObserver(IMixedRealityServiceRegistrar, IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public SpatialObjectMeshObserver(IMixedRealityServiceRegistrar registrar, IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name = null, uint priority = default(uint), BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties DisplayOption Declaration public SpatialAwarenessMeshDisplayOptions DisplayOption { get; set; } Property Value Type Description SpatialAwarenessMeshDisplayOptions LevelOfDetail Declaration public SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; set; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail Meshes Declaration public IReadOnlyDictionary<int, SpatialAwarenessMeshObject> Meshes { get; } Property Value Type Description IReadOnlyDictionary < Int32 , SpatialAwarenessMeshObject > MeshPhysicsLayer Declaration public int MeshPhysicsLayer { get; set; } Property Value Type Description Int32 MeshPhysicsLayerMask Declaration public int MeshPhysicsLayerMask { get; } Property Value Type Description Int32 ObservedObjectParent Declaration protected virtual GameObject ObservedObjectParent { get; } Property Value Type Description GameObject OcclusionMaterial Declaration public Material OcclusionMaterial { get; set; } Property Value Type Description Material RecalculateNormals Declaration public bool RecalculateNormals { get; set; } Property Value Type Description Boolean TrianglesPerCubicMeter Declaration public int TrianglesPerCubicMeter { get; set; } Property Value Type Description Int32 VisibleMaterial Declaration public Material VisibleMaterial { get; set; } Property Value Type Description Material Methods ClearObservations() Declaration public override void ClearObservations() Destroy() Declaration public override void Destroy() Disable() Declaration public override void Disable() Enable() Declaration public override void Enable() Initialize() Declaration public override void Initialize() Reset() Declaration public override void Reset() Resume() Declaration public override void Resume() Suspend() Declaration public override void Suspend() Update() Declaration public override void Update() Explicit Interface Implementations IMixedRealityCapabilityCheck.CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration bool IMixedRealityCapabilityCheck.CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. Implements IMixedRealitySpatialAwarenessMeshObserver IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.SpatialObjectMeshObserverProfile.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.SpatialObjectMeshObserverProfile.html",
    "title": "Class SpatialObjectMeshObserverProfile | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialObjectMeshObserverProfile Configuration profile for the spatial object mesh observer. Inheritance Object SpatialObjectMeshObserverProfile Namespace : Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver Assembly : cs.temp.dll.dll Syntax public class SpatialObjectMeshObserverProfile : MixedRealitySpatialAwarenessMeshObserverProfile Properties SpatialMeshObject The model containing the desired mesh data. Declaration public GameObject SpatialMeshObject { get; } Property Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.SpatialObjectMeshObserverProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.SpatialObjectMeshObserverProfileInspector.html",
    "title": "Class SpatialObjectMeshObserverProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialObjectMeshObserverProfileInspector Inheritance Object SpatialObjectMeshObserverProfileInspector Namespace : Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver Assembly : cs.temp.dll.dll Syntax public class SpatialObjectMeshObserverProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver Classes SpatialObjectMeshObserver Spatial awareness mesh observer that provides mesh data from a 3D model imported as a Unity asset. SpatialObjectMeshObserverProfile Configuration profile for the spatial object mesh observer. SpatialObjectMeshObserverProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.StepMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.StepMode.html",
    "title": "Enum StepMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum StepMode Defines how to generate points in a line renderer Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum StepMode Fields Name Description FromSource Draw only the points available in the source - use this for hard edges Interpolated Draw points based on LineStepCount"
  },
  "api/Microsoft.MixedReality.Toolkit.StringBuilderExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.StringBuilderExtensions.html",
    "title": "Class StringBuilderExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class StringBuilderExtensions StringBuilder Extensions. Inheritance Object StringBuilderExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class StringBuilderExtensions Methods AppendNewLine(StringBuilder) Append new line for current Environment to this StringBuilder buffer Declaration public static StringBuilder AppendNewLine(this StringBuilder sb) Parameters Type Name Description StringBuilder sb Returns Type Description StringBuilder"
  },
  "api/Microsoft.MixedReality.Toolkit.StringExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.StringExtensions.html",
    "title": "Class StringExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class StringExtensions String Extensions. Inheritance Object StringExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class StringExtensions Methods DecodeFrom64(String) Decodes string from base 64 ASCII. Declaration public static string DecodeFrom64(this string encodedData) Parameters Type Name Description String encodedData String to decode. Returns Type Description String Decoded string. EncodeTo64(String) Encodes the string to base 64 ASCII. Declaration public static string EncodeTo64(this string toEncode) Parameters Type Name Description String toEncode String to encode. Returns Type Description String Encoded string. ToProperCase(String) Capitalize the first character and add a space before each capitalized letter (except the first character). Declaration public static string ToProperCase(this string value) Parameters Type Name Description String value Returns Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.SubmitEventRouter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SubmitEventRouter.html",
    "title": "Class SubmitEventRouter | Mixed Reality Toolkit Documentation",
    "keywords": "Class SubmitEventRouter This is a helper class to allow you to call OnSubmit() on a UnityEngine.UI.Button or other control derived from UnityEngine.EventSystems.ISubmitHandler on this gameObject. It exposes a public function that can be bound in the Editor to a Unity Event. Inheritance Object SubmitEventRouter Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class SubmitEventRouter : MonoBehaviour Methods Submit() Declaration public void Submit()"
  },
  "api/Microsoft.MixedReality.Toolkit.SystemNumericsExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SystemNumericsExtensions.html",
    "title": "Class SystemNumericsExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemNumericsExtensions Inheritance Object SystemNumericsExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class SystemNumericsExtensions Methods ToUnityQuaternion(Quaternion) Converts this System.Numerics Quaternion to a UnityEngine Quaternion. Declaration public static UnityEngine.Quaternion ToUnityQuaternion(this Quaternion quaternion) Parameters Type Name Description Quaternion quaternion The quaternion to convert. Returns Type Description UnityEngine.Quaternion The converted quaternion. ToUnityVector3(Vector3) Converts this System.Numerics Vector3 to a UnityEngine Vector3. Declaration public static UnityEngine.Vector3 ToUnityVector3(this Vector3 vector) Parameters Type Name Description Vector3 vector The vector to convert. Returns Type Description UnityEngine.Vector3 The converted vector."
  },
  "api/Microsoft.MixedReality.Toolkit.SystemTypeAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.SystemTypeAttribute.html",
    "title": "Class SystemTypeAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class SystemTypeAttribute Base class for class selection constraints that can be applied when selecting a SystemType with the Unity inspector. Inheritance Object SystemTypeAttribute ExtendsAttribute ImplementsAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class SystemTypeAttribute : PropertyAttribute Constructors SystemTypeAttribute(Type, TypeGrouping) Declaration protected SystemTypeAttribute(Type type, TypeGrouping grouping = null) Parameters Type Name Description Type type Initializes a new instance of the SystemTypeAttribute class. TypeGrouping grouping Gets or sets grouping of selectable classes. Defaults to ByNamespaceFlat unless explicitly specified. Properties AllowAbstract Gets or sets whether abstract classes can be selected from drop-down. Defaults to a value of false unless explicitly specified. Declaration public bool AllowAbstract { get; protected set; } Property Value Type Description Boolean Grouping Gets or sets grouping of selectable classes. Defaults to ByNamespaceFlat unless explicitly specified. Declaration public TypeGrouping Grouping { get; protected set; } Property Value Type Description TypeGrouping Methods IsConstraintSatisfied(Type) Determines whether the specified Type satisfies filter constraint. Declaration public virtual bool IsConstraintSatisfied(Type type) Parameters Type Name Description Type type Type to test. Returns Type Description Boolean A Boolean value indicating if the type specified by type satisfies this constraint and should thus be selectable."
  },
  "api/Microsoft.MixedReality.Toolkit.TagPropertyAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.TagPropertyAttribute.html",
    "title": "Class TagPropertyAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class TagPropertyAttribute A PropertyAttribute for Unity tags (a string field). Inheritance Object TagPropertyAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class TagPropertyAttribute : PropertyAttribute"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.Editor.ParabolicTeleportPointerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.Editor.ParabolicTeleportPointerInspector.html",
    "title": "Class ParabolicTeleportPointerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class ParabolicTeleportPointerInspector Inheritance Object TeleportPointerInspector ParabolicTeleportPointerInspector Namespace : Microsoft.MixedReality.Toolkit.Teleport.Editor Assembly : cs.temp.dll.dll Syntax public class ParabolicTeleportPointerInspector : TeleportPointerInspector Methods OnEnable() Declaration protected override void OnEnable() Overrides TeleportPointerInspector.OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI() Overrides TeleportPointerInspector.OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.Editor.TeleportPointerInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.Editor.TeleportPointerInspector.html",
    "title": "Class TeleportPointerInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class TeleportPointerInspector Inheritance Object TeleportPointerInspector ParabolicTeleportPointerInspector Namespace : Microsoft.MixedReality.Toolkit.Teleport.Editor Assembly : cs.temp.dll.dll Syntax public class TeleportPointerInspector : LinePointerInspector Methods OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Teleport.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Teleport.Editor Classes ParabolicTeleportPointerInspector TeleportPointerInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Teleport.IMixedRealityTeleportHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Teleport.IMixedRealityTeleportHandler.html",
    "title": "Interface IMixedRealityTeleportHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityTeleportHandler Interface to implement for teleport events. Namespace : Microsoft.MixedReality.Toolkit.Teleport Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityTeleportHandler : IEventSystemHandler Methods OnTeleportCanceled(TeleportEventData) Raised when a teleport request has been canceled. Declaration void OnTeleportCanceled(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportCompleted(TeleportEventData) Raised when a teleport has successfully completed. Declaration void OnTeleportCompleted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportRequest(TeleportEventData) Raised when a pointer requests a teleport target, but no teleport has begun. Declaration void OnTeleportRequest(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData OnTeleportStarted(TeleportEventData) Raised when a teleport has started. Declaration void OnTeleportStarted(TeleportEventData eventData) Parameters Type Name Description TeleportEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRTrackedCameraError.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.EVRTrackedCameraError.html",
    "title": "Enum EVRTrackedCameraError | Mixed Reality Toolkit Documentation",
    "keywords": "Enum EVRTrackedCameraError Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public enum EVRTrackedCameraError Fields Name Description FailedToGetGLTextureId FrameBufferingFailure InvalidArgument InvalidFrameBufferSize InvalidFrameHeaderVersion InvalidGLTextureId InvalidHandle InvalidSharedTextureHandle IPCFailure NoFrameAvailable None NotSupportedForThisDevice OperationFailed OutOfHandles SharedMemoryFailure SharedTextureFailure StreamSetupFailure"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ScreenshotProgress_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_ScreenshotProgress_t.html",
    "title": "Struct VREvent_ScreenshotProgress_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_ScreenshotProgress_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_ScreenshotProgress_t Fields progress Declaration public float progress Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Screenshot_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Screenshot_t.html",
    "title": "Struct VREvent_Screenshot_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Screenshot_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Screenshot_t Fields handle Declaration public uint handle Field Value Type Description UInt32 type Declaration public uint type Field Value Type Description UInt32"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Scroll_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_Scroll_t.html",
    "title": "Struct VREvent_Scroll_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_Scroll_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_Scroll_t Fields repeatCount Declaration public uint repeatCount Field Value Type Description UInt32 xdelta Declaration public float xdelta Field Value Type Description Single ydelta Declaration public float ydelta Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_SeatedZeroPoseReset_t.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.VREvent_SeatedZeroPoseReset_t.html",
    "title": "Struct VREvent_SeatedZeroPoseReset_t | Mixed Reality Toolkit Documentation",
    "keywords": "Struct VREvent_SeatedZeroPoseReset_t Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public struct VREvent_SeatedZeroPoseReset_t Fields bResetBySystemMenu Declaration public bool bResetBySystemMenu Field Value Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.PhysicalPressEventRouter.PhysicalPressEventBehavior.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.PhysicalPressEventRouter.PhysicalPressEventBehavior.html",
    "title": "Enum PhysicalPressEventRouter.PhysicalPressEventBehavior | Mixed Reality Toolkit Documentation",
    "keywords": "Enum PhysicalPressEventRouter.PhysicalPressEventBehavior Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public enum PhysicalPressEventBehavior Fields Name Description EventOnClickCompletion EventOnPress EventOnTouch"
  },
  "api/Microsoft.MixedReality.Toolkit.PhysicalPressEventRouter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.PhysicalPressEventRouter.html",
    "title": "Class PhysicalPressEventRouter | Mixed Reality Toolkit Documentation",
    "keywords": "Class PhysicalPressEventRouter This class exists to route PressableButton events through to Interactable . The result is being able to have physical touch call Interactable.OnPointerClicked. Inheritance Object PhysicalPressEventRouter Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class PhysicalPressEventRouter : MonoBehaviour Fields InteractableOnClick Declaration public PhysicalPressEventRouter.PhysicalPressEventBehavior InteractableOnClick Field Value Type Description PhysicalPressEventRouter.PhysicalPressEventBehavior routingTarget Declaration public Interactable routingTarget Field Value Type Description Interactable Methods OnHandPressCompleted() Gets called when the ButtonReleased event is invoked within the default PressableButton and PressableButtonHoloLens2 components. Once the physical press with a hand is completed, set the press and physical touch states within Interactable Declaration public void OnHandPressCompleted() OnHandPressTouched() Gets called when the TouchBegin event is invoked within the default PressableButton and PressableButtonHoloLens2 components. When the physical touch with a hand has begun, set physical touch state within Interactable. Declaration public void OnHandPressTouched() OnHandPressTriggered() Gets called when the ButtonPressed event is invoked within the default PressableButton and PressableButtonHoloLens2 components. When the physical press with a hand is triggered, set the physical touch and press state within Interactable. Declaration public void OnHandPressTriggered() OnHandPressUntouched() Gets called when the TouchEnd event is invoked within the default PressableButton and PressableButtonHoloLens2 components. Once the physical touch with a hand is removed, set the physical touch and possibly press state within Interactable. Declaration public void OnHandPressUntouched()"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.BaseRayStabilizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.BaseRayStabilizer.html",
    "title": "Class BaseRayStabilizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseRayStabilizer A base class for a stabilizer that takes an input position and rotation, and performs operations on them to stabilize, or smooth deltas, in the data. Inheritance Object BaseRayStabilizer GazeStabilizer Implements IBaseRayStabilizer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public abstract class BaseRayStabilizer : IBaseRayStabilizer Properties StablePosition The stabilized position. Declaration public abstract Vector3 StablePosition { get; } Property Value Type Description Vector3 StableRay A ray representing the stable position and rotation Declaration public abstract Ray StableRay { get; } Property Value Type Description Ray StableRotation The stabilized rotation. Declaration public abstract Quaternion StableRotation { get; } Property Value Type Description Quaternion Methods UpdateStability(Vector3, Quaternion) Call this each frame to smooth out changes to a position and rotation, if supported. Declaration public virtual void UpdateStability(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Input position to smooth. Quaternion rotation Input rotation to smooth. UpdateStability(Vector3, Vector3) Call this each frame to smooth out changes to a position and direction, if supported. Declaration public abstract void UpdateStability(Vector3 position, Vector3 direction) Parameters Type Name Description Vector3 position Input position to smooth. Vector3 direction Input direction to smooth. Implements IBaseRayStabilizer"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.ComparableRaycastResult.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.ComparableRaycastResult.html",
    "title": "Struct ComparableRaycastResult | Mixed Reality Toolkit Documentation",
    "keywords": "Struct ComparableRaycastResult Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public struct ComparableRaycastResult Constructors ComparableRaycastResult(RaycastResult, Int32) Declaration public ComparableRaycastResult(RaycastResult raycastResult, int layerMaskIndex = 0) Parameters Type Name Description RaycastResult raycastResult Int32 layerMaskIndex Fields LayerMaskIndex Declaration public readonly int LayerMaskIndex Field Value Type Description Int32 RaycastResult Declaration public readonly RaycastResult RaycastResult Field Value Type Description RaycastResult"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.Distorter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.Distorter.html",
    "title": "Class Distorter | Mixed Reality Toolkit Documentation",
    "keywords": "Class Distorter Inheritance Object Distorter DistorterBulge DistorterGravity DistorterSimplex DistorterSphere DistorterWiggly Implements IComparable < Distorter > Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public abstract class Distorter : MonoBehaviour, IComparable<Distorter> Properties DistortionEnabled Declaration public bool DistortionEnabled { get; } Property Value Type Description Boolean DistortOrder Declaration public int DistortOrder { get; set; } Property Value Type Description Int32 DistortStrength Declaration public float DistortStrength { get; set; } Property Value Type Description Single Methods CompareTo(Distorter) Declaration public int CompareTo(Distorter other) Parameters Type Name Description Distorter other Returns Type Description Int32 DistortPoint(Vector3, Single) Distorts a world-space point Automatically applies DistortStrength and ensures that strength never exceeds 1 Declaration public Vector3 DistortPoint(Vector3 point, float strength = 1F) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 DistortPointInternal(Vector3, Single) Internal function where position distortion is done Declaration protected abstract Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 DistortScale(Vector3, Single) Distorts a world-space scale Automatically applies DistortStrength and ensures that strength never exceeds 1 Declaration public Vector3 DistortScale(Vector3 scale, float strength = 1F) Parameters Type Name Description Vector3 scale Single strength Returns Type Description Vector3 DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected abstract Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() Implements IComparable<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.DistorterBulge.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.DistorterBulge.html",
    "title": "Class DistorterBulge | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterBulge A Distorter that distorts points based on their distance and direction from the center of the bulge point. Inheritance Object Distorter DistorterBulge Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class DistorterBulge : Distorter, IComparable<Distorter> Remarks The characteristics of the distortion are also heavily controlled by the BulgeFalloff property, which should contain key frames that cover the [0, 1] time range. Properties BulgeFalloff Declaration public AnimationCurve BulgeFalloff { get; set; } Property Value Type Description AnimationCurve BulgeLocalCenter Declaration public Vector3 BulgeLocalCenter { get; set; } Property Value Type Description Vector3 BulgeRadius Declaration public float BulgeRadius { get; set; } Property Value Type Description Single BulgeStrength Declaration public float BulgeStrength { get; set; } Property Value Type Description Single BulgeWorldCenter Declaration public Vector3 BulgeWorldCenter { get; set; } Property Value Type Description Vector3 ScaleDistort Declaration public float ScaleDistort { get; set; } Property Value Type Description Single Methods DistortPointInternal(Vector3, Single) Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements IComparable<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.DistorterGravity.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.DistorterGravity.html",
    "title": "Class DistorterGravity | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterGravity A Distorter that distorts points based on their distance and direction to the world center of gravity as defined by WorldCenterOfGravity. Inheritance Object Distorter DistorterGravity Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class DistorterGravity : Distorter, IComparable<Distorter> Properties AxisStrength Declaration public Vector3 AxisStrength { get; set; } Property Value Type Description Vector3 GravityStrength Declaration public AnimationCurve GravityStrength { get; set; } Property Value Type Description AnimationCurve LocalCenterOfGravity Declaration public Vector3 LocalCenterOfGravity { get; set; } Property Value Type Description Vector3 Radius Declaration public float Radius { get; set; } Property Value Type Description Single WorldCenterOfGravity Declaration public Vector3 WorldCenterOfGravity { get; set; } Property Value Type Description Vector3 Methods DistortPointInternal(Vector3, Single) Internal function where position distortion is done Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) OnDrawGizmos() Declaration public void OnDrawGizmos() Implements IComparable<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.DistorterSimplex.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.DistorterSimplex.html",
    "title": "Class DistorterSimplex | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterSimplex A Distorter that randomly distorts points. Inheritance Object Distorter DistorterSimplex Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class DistorterSimplex : Distorter, IComparable<Distorter> Properties AxisOffset Declaration public Vector3 AxisOffset { get; set; } Property Value Type Description Vector3 AxisSpeed Declaration public Vector3 AxisSpeed { get; set; } Property Value Type Description Vector3 AxisStrength Declaration public Vector3 AxisStrength { get; set; } Property Value Type Description Vector3 ScaleDistort Declaration public float ScaleDistort { get; set; } Property Value Type Description Single ScaleMultiplier Declaration public float ScaleMultiplier { get; set; } Property Value Type Description Single StrengthMultiplier Declaration public float StrengthMultiplier { get; set; } Property Value Type Description Single UniformScaleDistort Declaration public bool UniformScaleDistort { get; set; } Property Value Type Description Boolean Methods DistortPointInternal(Vector3, Single) Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements IComparable<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.DistorterSphere.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.DistorterSphere.html",
    "title": "Class DistorterSphere | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterSphere A Distorter that distorts points based on their distance and direction from the center of the sphere of size 2. Inheritance Object Distorter DistorterSphere Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class DistorterSphere : Distorter, IComparable<Distorter> Properties SphereCenter Declaration public Vector3 SphereCenter { get; set; } Property Value Type Description Vector3 Methods DistortPointInternal(Vector3, Single) Internal function where position distortion is done Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements IComparable<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.DistorterWiggly.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.DistorterWiggly.html",
    "title": "Class DistorterWiggly | Mixed Reality Toolkit Documentation",
    "keywords": "Class DistorterWiggly Inheritance Object Distorter DistorterWiggly Implements IComparable < Distorter > Inherited Members Distorter.DistortionEnabled Distorter.DistortStrength Distorter.DistortOrder Distorter.CompareTo(Distorter) Distorter.DistortPoint(Vector3, Single) Distorter.DistortScale(Vector3, Single) Distorter.OnEnable() Distorter.OnDisable() Namespace : Microsoft.MixedReality.Toolkit.Physics Assembly : cs.temp.dll.dll Syntax public class DistorterWiggly : Distorter, IComparable<Distorter> Properties AxisOffset Declaration public Vector3 AxisOffset { get; set; } Property Value Type Description Vector3 AxisSpeed Declaration public Vector3 AxisSpeed { get; set; } Property Value Type Description Vector3 AxisStrength Declaration public Vector3 AxisStrength { get; set; } Property Value Type Description Vector3 ScaleMultiplier Declaration public float ScaleMultiplier { get; set; } Property Value Type Description Single SpeedMultiplier Declaration public float SpeedMultiplier { get; set; } Property Value Type Description Single StrengthMultiplier Declaration public float StrengthMultiplier { get; set; } Property Value Type Description Single Methods DistortPointInternal(Vector3, Single) Internal function where position distortion is done Declaration protected override Vector3 DistortPointInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortPointInternal(Vector3, Single) DistortScaleInternal(Vector3, Single) Internal function where scale distortion is done Declaration protected override Vector3 DistortScaleInternal(Vector3 point, float strength) Parameters Type Name Description Vector3 point Single strength Returns Type Description Vector3 Overrides Distorter.DistortScaleInternal(Vector3, Single) Implements IComparable<>"
  },
  "api/Microsoft.MixedReality.Toolkit.Physics.Editor.PhysicsLayerAttributeDrawer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Physics.Editor.PhysicsLayerAttributeDrawer.html",
    "title": "Class PhysicsLayerAttributeDrawer | Mixed Reality Toolkit Documentation",
    "keywords": "Class PhysicsLayerAttributeDrawer Renders the physics layer dropdown based on the current layers set in the Tag Manager. Inheritance Object PhysicsLayerAttributeDrawer Namespace : Microsoft.MixedReality.Toolkit.Physics.Editor Assembly : cs.temp.dll.dll Syntax public sealed class PhysicsLayerAttributeDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.TypeGrouping.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.TypeGrouping.html",
    "title": "Enum TypeGrouping | Mixed Reality Toolkit Documentation",
    "keywords": "Enum TypeGrouping Indicates how selectable classes should be collated in drop-down menu. Namespace : Microsoft.MixedReality.Toolkit.Utilities Assembly : cs.temp.dll.dll Syntax public enum TypeGrouping Fields Name Description ByAddComponentMenu Group classes in the same way as Unity does for its component menu. This grouping method must only be used for MonoBehaviour types. ByNamespace Group classes by namespace and show foldout menus for nested namespaces; for instance, \"Some > Nested > Namespace > SpecialClass\". ByNamespaceFlat Group classes by namespace; for instance, \"Some.Nested.Namespace > SpecialClass\". None No grouping, just show type names in a list; for instance, \"Some.Nested.Namespace.SpecialClass\"."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.LaunchUri.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.LaunchUri.html",
    "title": "Class LaunchUri | Mixed Reality Toolkit Documentation",
    "keywords": "Class LaunchUri Inheritance Object LaunchUri Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class LaunchUri : MonoBehaviour Methods Launch(String) Launch a UWP slate app. In most cases, your experience can continue running while the launched app renders on top. Declaration public void Launch(string uri) Parameters Type Name Description String uri Url of the web page or app to launch. See https://docs.microsoft.com/windows/uwp/launch-resume/launch-default-app for more information about the protocols that can be used when launching apps."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.LoFiFilterSelection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.LoFiFilterSelection.html",
    "title": "Class LoFiFilterSelection | Mixed Reality Toolkit Documentation",
    "keywords": "Class LoFiFilterSelection Inheritance Object LoFiFilterSelection Implements IMixedRealityPointerHandler Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class LoFiFilterSelection : MonoBehaviour, IMixedRealityPointerHandler Methods OnPointerClicked(MixedRealityPointerEventData) When the user clicks the pointer (select button) or air-taps on the object, change the filter setting and the material. Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) This script does not handle pointer down events. Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) This script does not handle pointer dragged events. Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) This script does not handle pointer up events. Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData Implements IMixedRealityPointerHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.MixedRealityCapabilityDemo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.MixedRealityCapabilityDemo.html",
    "title": "Class MixedRealityCapabilityDemo | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCapabilityDemo Script that demonstrates querying the Mixed Reality Toolkit for platform capabilities. Inheritance Object MixedRealityCapabilityDemo Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class MixedRealityCapabilityDemo : MonoBehaviour"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.PrimaryPointerHandlerExample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.PrimaryPointerHandlerExample.html",
    "title": "Class PrimaryPointerHandlerExample | Mixed Reality Toolkit Documentation",
    "keywords": "Class PrimaryPointerHandlerExample Inheritance Object PrimaryPointerHandlerExample Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class PrimaryPointerHandlerExample : MonoBehaviour Fields CursorHighlight Declaration public GameObject CursorHighlight Field Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Boundary.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Boundary.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Boundary | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Boundary Classes BoundarySystemManager Service manager supporting running the boundary system, without requiring the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.CameraSystem.CameraSystemManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.CameraSystem.CameraSystemManager.html",
    "title": "Class CameraSystemManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraSystemManager Service manager supporting running the camera system, without requiring the MixedRealityToolkit object. Inheritance Object BaseServiceManager CameraSystemManager Implements IMixedRealityServiceRegistrar Inherited Members BaseServiceManager.registeredServices BaseServiceManager.Update() BaseServiceManager.OnEnable() BaseServiceManager.OnDisable() BaseServiceManager.GetService<T>(String, Boolean) BaseServiceManager.GetServices<T>(String) BaseServiceManager.IsServiceRegistered<T>(String) BaseServiceManager.RegisterService<T>(T) BaseServiceManager.RegisterService<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.UnregisterService<T>(String) BaseServiceManager.UnregisterService<T>(T) BaseServiceManager.Initialize<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.Uninitialize<T>() Namespace : Microsoft.MixedReality.Toolkit.Experimental.CameraSystem Assembly : cs.temp.dll.dll Syntax public class CameraSystemManager : BaseServiceManager, IMixedRealityServiceRegistrar Methods OnDestroy() Declaration protected override void OnDestroy() Overrides BaseServiceManager.OnDestroy() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.CameraSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.CameraSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.CameraSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.CameraSystem Classes CameraSystemManager Service manager supporting running the camera system, without requiring the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Diagnostics.DiagnosticsSystemManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Diagnostics.DiagnosticsSystemManager.html",
    "title": "Class DiagnosticsSystemManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class DiagnosticsSystemManager Service manager supporting running the diagnostics system without requiring the MixedRealityToolkit object. Inheritance Object BaseServiceManager DiagnosticsSystemManager Implements IMixedRealityServiceRegistrar Inherited Members BaseServiceManager.registeredServices BaseServiceManager.Update() BaseServiceManager.OnEnable() BaseServiceManager.OnDisable() BaseServiceManager.GetService<T>(String, Boolean) BaseServiceManager.GetServices<T>(String) BaseServiceManager.IsServiceRegistered<T>(String) BaseServiceManager.RegisterService<T>(T) BaseServiceManager.RegisterService<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.UnregisterService<T>(String) BaseServiceManager.UnregisterService<T>(T) BaseServiceManager.Initialize<T>(Type, SupportedPlatforms, Object[]) BaseServiceManager.Uninitialize<T>() Namespace : Microsoft.MixedReality.Toolkit.Experimental.Diagnostics Assembly : cs.temp.dll.dll Syntax public class DiagnosticsSystemManager : BaseServiceManager, IMixedRealityServiceRegistrar Methods OnDestroy() Declaration protected override void OnDestroy() Overrides BaseServiceManager.OnDestroy() Implements IMixedRealityServiceRegistrar"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Diagnostics.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Diagnostics.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Diagnostics | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Diagnostics Classes DiagnosticsSystemManager Service manager supporting running the diagnostics system without requiring the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.BaseDwellSample.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.BaseDwellSample.html",
    "title": "Class BaseDwellSample | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseDwellSample Example script to demonstrate dwell visuals in sample scene Inheritance Object BaseDwellSample InstantDwellSample ListItemDwell ToggleDwellSample Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public abstract class BaseDwellSample : MonoBehaviour Fields dwellHandler Declaration protected DwellHandler dwellHandler Field Value Type Description DwellHandler dwellVisualImage Declaration protected Image dwellVisualImage Field Value Type Description Image isDwelling Declaration public bool isDwelling Field Value Type Description Boolean targetButton Declaration protected Button targetButton Field Value Type Description Button Methods Awake() Declaration protected virtual void Awake() ButtonExecute() Declaration public virtual void ButtonExecute() DwellCanceled(IMixedRealityPointer) Declaration public virtual void DwellCanceled(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer DwellCompleted(IMixedRealityPointer) Declaration public virtual void DwellCompleted(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer DwellIntended(IMixedRealityPointer) Declaration public virtual void DwellIntended(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer DwellStarted(IMixedRealityPointer) Declaration public virtual void DwellStarted(IMixedRealityPointer pointer) Parameters Type Name Description IMixedRealityPointer pointer"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.CustomDwellHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.CustomDwellHandler.html",
    "title": "Class CustomDwellHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class CustomDwellHandler Example to demonstrate DwellHandler override Inheritance Object DwellHandler CustomDwellHandler Implements IMixedRealityFocusHandler Inherited Members DwellHandler.dwellProfile DwellHandler.DwellProgress DwellHandler.HasFocus DwellHandler.CurrentDwellState DwellHandler.FillTimer DwellHandler.OnFocusEnter(FocusEventData) DwellHandler.OnFocusExit(FocusEventData) DwellHandler.CancelDwell() Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax public class CustomDwellHandler : DwellHandler, IMixedRealityFocusHandler Methods UpdateFillTimer() Declaration protected override void UpdateFillTimer() Overrides DwellHandler.UpdateFillTimer() Implements IMixedRealityFocusHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellHandler.DwellStateType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Dwell.DwellHandler.DwellStateType.html",
    "title": "Enum DwellHandler.DwellStateType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum DwellHandler.DwellStateType None = 0 - Default state FocusGained - State reached when Focus enters target DwellIntended - State reached when Focus stays on target for dwellIntentDelay seconds. Signifies user's intent to interact with the target. DwellStarted - State reached when Focus stays on target for dwellIntentDelay + dwellStartDelay seconds. Typically tied to invoke feedback for dwell. DwellCompleted - State reached when Focus stays on target for dwellIntentDelay + dwellStartDelay + timeToCompleteDwell seconds. Typically invokes the button clicked event. DwellCanceled - State reached when DwellStarted state is reached but focus exits the target before timeToCompleteDwell. Namespace : Microsoft.MixedReality.Toolkit.Experimental.Dwell Assembly : cs.temp.dll.dll Syntax protected enum DwellStateType Fields Name Description DwellCanceled DwellCompleted DwellIntended DwellStarted FocusGained None"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.Teleport.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.Teleport.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Teleport | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Experimental.Teleport Classes TeleportSystemManager Service manager supporting running the teleport system, without requiring the MixedRealityToolkit object."
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.AxisSlider.EAxis.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.AxisSlider.EAxis.html",
    "title": "Enum AxisSlider.EAxis | Mixed Reality Toolkit Documentation",
    "keywords": "Enum AxisSlider.EAxis Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public enum EAxis Fields Name Description X Y Z"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.AxisSlider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.AxisSlider.html",
    "title": "Class AxisSlider | Mixed Reality Toolkit Documentation",
    "keywords": "Class AxisSlider Axis slider is a script to lock a bar across a specific axis. Inheritance Object AxisSlider Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class AxisSlider : MonoBehaviour Fields Axis Declaration public AxisSlider.EAxis Axis Field Value Type Description AxisSlider.EAxis bounce Declaration public float bounce Field Value Type Description Single clampDistance Declaration public float clampDistance Field Value Type Description Single deadZone Declaration public float deadZone Field Value Type Description Single slideAccel Declaration public float slideAccel Field Value Type Description Single slideFriction Declaration public float slideFriction Field Value Type Description Single TargetPoint Declaration public Vector3 TargetPoint Field Value Type Description Vector3"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.VelocityType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.VelocityType.html",
    "title": "Enum ScrollingObjectCollection.VelocityType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ScrollingObjectCollection.VelocityType How velocity is applied to a ScrollingObjectCollection when a scroll is released. Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public enum VelocityType Fields Name Description FalloffPerFrame FalloffPerItem None NoVelocitySnapToItem"
  },
  "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.html",
    "title": "Class ScrollingObjectCollection | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScrollingObjectCollection A set of child objects organized in a series of Rows/Columns that can scroll in either the X or Y direction. Inheritance Object ScrollingObjectCollection Implements IMixedRealityPointerHandler IMixedRealityTouchHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler Namespace : Microsoft.MixedReality.Toolkit.Experimental.UI Assembly : cs.temp.dll.dll Syntax public class ScrollingObjectCollection : BaseObjectCollection, IMixedRealityPointerHandler, IMixedRealityTouchHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler Fields ClickEvent Event that is fired on the target object when the ScrollingObjectCollection deems event as a Click. Declaration public ScrollingObjectCollection.ScrollEvent ClickEvent Field Value Type Description ScrollingObjectCollection.ScrollEvent ListMomentumEnded Event that is fired on the target object when the ScrollingObjectCollection is no longer in motion from velocity Declaration public UnityEvent ListMomentumEnded Field Value Type Description UnityEvent TouchEnded Event that is fired on the target object when the ScrollingObjectCollection is no longer touched. Declaration public ScrollingObjectCollection.ScrollEvent TouchEnded Field Value Type Description ScrollingObjectCollection.ScrollEvent TouchStarted Event that is fired on the target object when the ScrollingObjectCollection is touched. Declaration public ScrollingObjectCollection.ScrollEvent TouchStarted Field Value Type Description ScrollingObjectCollection.ScrollEvent Properties AnimationLength The amount of time (in seconds) the PaginationCurve will take to evaluate. Declaration public float AnimationLength { get; set; } Property Value Type Description Single BounceMultiplier Multiplier to add more bounce to the overscroll of a list when using FalloffPerFrame or FalloffPerItem . Declaration public float BounceMultiplier { get; set; } Property Value Type Description Single CanScroll Enables/disables scrolling with near/far interaction. Declaration public bool CanScroll { get; set; } Property Value Type Description Boolean Remarks Helpful for controls where you may want pagination or list movement without freeform scrolling. CellHeight Height of the cell per object in the collection. Declaration public float CellHeight { get; set; } Property Value Type Description Single CellWidth Width of the cell per object in the collection. Declaration public float CellWidth { get; set; } Property Value Type Description Single ClipBox The ScrollingObjectCollection's ClippingBox that is used for clipping items in and out of the list. Declaration public ClippingBox ClipBox { get; } Property Value Type Description ClippingBox ClippingObject The empty GameObject containing the ScrollingObjectCollection's ClippingBox . Declaration public GameObject ClippingObject { get; } Property Value Type Description GameObject DisableClippedItems Declaration public bool DisableClippedItems { get; set; } Property Value Type Description Boolean DragTimeThreshold Seconds the user's pointer can intersect a controller item before it is considered a drag. Declaration public float DragTimeThreshold { get; set; } Property Value Type Description Single FirstItemInViewIndex First item (visible) in the ViewableArea . Declaration public int FirstItemInViewIndex { get; } Property Value Type Description Int32 HandDeltaMagThreshold The distance the user's pointer can make before its considered a drag. Declaration public float HandDeltaMagThreshold { get; set; } Property Value Type Description Single OcclusionPositionPadding Manual offset adjust the position calculation of the ClippingBox . Declaration public Vector3 OcclusionPositionPadding { get; set; } Property Value Type Description Vector3 OcclusionScalePadding Manual offset adjust the scale calculation of the ClippingBox . Declaration public Vector3 OcclusionScalePadding { get; set; } Property Value Type Description Vector3 Remarks Setting to zero may result in z fighting.\" PaginationCurve Animation curve used to interpolate the pagination and movement methods. Declaration public AnimationCurve PaginationCurve { get; set; } Property Value Type Description AnimationCurve ScrollDirection The direction in which content should scroll. Declaration public ScrollingObjectCollection.ScrollDirectionType ScrollDirection { get; set; } Property Value Type Description ScrollingObjectCollection.ScrollDirectionType SetUpAtRuntime Automatically set up scroller at runtime. Declaration public bool SetUpAtRuntime { get; set; } Property Value Type Description Boolean Tiers Number of columns or rows in respect to ViewableArea and ScrollDirection . Declaration public int Tiers { get; set; } Property Value Type Description Int32 TypeOfVelocity The desired type of velocity for the scroller. Declaration public ScrollingObjectCollection.VelocityType TypeOfVelocity { get; set; } Property Value Type Description ScrollingObjectCollection.VelocityType UseNearScrollBoundary Determines whether a near scroll gesture is released when the engaged fingertip is dragged outside of the viewable area. Declaration public bool UseNearScrollBoundary { get; set; } Property Value Type Description Boolean UseOnPreRender Toggles whether the ScrollingObjectCollection\" will use the Camera OnPreRender event to hide items in the list. The fallback is MonoBehaviour.LateUpdate(). Declaration public bool UseOnPreRender { get; set; } Property Value Type Description Boolean Remarks This is especially helpful if you're trying to scroll dynamically created objects that may be added to the list after LateUpdate, VelocityDampen Amount of drag applied to velocity. Declaration public float VelocityDampen { get; set; } Property Value Type Description Single Remarks This can't be 0.0f since that won't allow ANY velocity - set TypeOfVelocity to None . It can't be 1.0f since that won't allow ANY drag. VelocityMultiplier Amount of (extra) velocity to be applied to scroller. Declaration public float VelocityMultiplier { get; set; } Property Value Type Description Single Remarks Helpful if you want a small movement to fling the list. ViewableArea Number of lines visible in scroller. Orthogonal to Microsoft.MixedReality.Toolkit.Experimental.UI.ScrollingObjectCollection.tiers . Declaration public int ViewableArea { get; set; } Property Value Type Description Int32 Methods IsItemVisible(Int32) Checks whether the given item is visible in the list Declaration public bool IsItemVisible(int indexOfItem) Parameters Type Name Description Int32 indexOfItem the index of the item in the list Returns Type Description Boolean true when item is visible LayoutChildren() Arranges our child objects in the scrollContainer per our set up instructions The layout method uses modulo with Columns / Rows Declaration protected override void LayoutChildren() ModuloCheck(Int32, Int32) Helper to get the remainder from an itemindex in the list in relation to rows/columns Declaration public static int ModuloCheck(int itemIndex, int divisor) Parameters Type Name Description Int32 itemIndex Index of node item in NodeList to be compared Int32 divisor Rows / Columns Returns Type Description Int32 The remainder from the divisor MoveByItems(Int32, Boolean, Action) Moves scroller a relative number of items Declaration public void MoveByItems(int numberOfItemsToMove, bool animateToPosition = true, Action callback = null) Parameters Type Name Description Int32 numberOfItemsToMove number of items to move by Boolean animateToPosition if true, scroller will animate to new position Action callback An optional action to pass in to get notified that the ScrollingObjectCollection is finished moving MoveByLines(Int32, Boolean, Action) Moves scroller a relative number of Tiers of items. Declaration public void MoveByLines(int numberOfLinesToMove, bool animateToPosition = true, Action callback = null) Parameters Type Name Description Int32 numberOfLinesToMove number of lines to move by Boolean animateToPosition if true, scroller will animate to new position Action callback An optional action to pass in to get notified that the ScrollingObjectCollection is finished moving MoveTo(Int32, Boolean, Action) Moves scroller to an absolute position where indexOfItem is in the first column of the viewable area Declaration public void MoveTo(int indexOfItem, bool animateToPosition = true, Action callback = null) Parameters Type Name Description Int32 indexOfItem Item to move to, will be first (or closest to in respect to scroll maximum) in viewable area Boolean animateToPosition if true, scroller will animate to new position Action callback An optional action to pass in to get notified that the ScrollingObjectCollection is finished moving PageBy(Int32, Boolean, Action) Moves scroller by a multiplier of ViewableArea Declaration public void PageBy(int numOfPages, bool animateToPage = true, Action callback = null) Parameters Type Name Description Int32 numOfPages number of ViewableArea to move scroller by Boolean animateToPage if true, scroller will animate to new position Action callback An optional action to pass in to get notified that the ScrollingObjectCollection is finished moving StepMultiplier(Int32, Int32) Helper to get the number of rows / columns deep the item is Declaration public static int StepMultiplier(int itemIndex, int divisor) Parameters Type Name Description Int32 itemIndex Index of node item in NodeList to be compared Int32 divisor Rows / Columns Returns Type Description Int32 The multiplier to get the row / column index the item is in TimeTest(Single, Single, Single) Simple time threshold check Declaration public static bool TimeTest(float initTime, float currTime, float pressMargin) Parameters Type Name Description Single initTime Initial time Single currTime Current time Single pressMargin Time threshold Returns Type Description Boolean true if amount of time surpasses pressMargin TryGetObjectAlignedBoundsSize(Transform, out Vector3) Finds the object-aligned size of a Transform . Declaration public static bool TryGetObjectAlignedBoundsSize(Transform obj, out Vector3 alignedSize) Parameters Type Name Description Transform obj Transform representing the object to get offset from Vector3 alignedSize the object-aligned size of obj Returns Type Description Boolean true if alignedSize is valid UpdateCollection() Declaration public override void UpdateCollection() Implements IMixedRealityPointerHandler IMixedRealityTouchHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.ToolTipUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.ToolTipUtility.html",
    "title": "Class ToolTipUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class ToolTipUtility Static class providing useful functions for finding ToolTip Attach point information. Inheritance Object ToolTipUtility Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public static class ToolTipUtility Methods FindClosestAttachPointToAnchor(Transform, Transform, Vector3[], ToolTipAttachPoint) Avoid running this query in Update function because calculating Vector3.Distance requires sqr root calculation (expensive) Instead, find strategic moments to update nearest pivot (i.e. only once when ToolTip becomes active) Declaration public static Vector3 FindClosestAttachPointToAnchor(Transform anchor, Transform contentParent, Vector3[] localPivotPositions, ToolTipAttachPoint pivotType) Parameters Type Name Description Transform anchor Transform of object serving as anchor for tooltip Transform contentParent Transform for the tooltip content Vector3 [] localPivotPositions list of positions to find the closest ToolTipAttachPoint pivotType pivot type needed for calculation of closest Returns Type Description Vector3 Vector3 the point in localPivotPositions which is closest to the anchor position GetAttachPointPositions(ref Vector3[], Vector2) gets an array of pivot positions Declaration public static void GetAttachPointPositions(ref Vector3[] pivotPositions, Vector2 localContentSize) Parameters Type Name Description Vector3 [] pivotPositions ref array that gets filled with positions Vector2 localContentSize the xy scale of the tooltip"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.TouchEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.TouchEvent.html",
    "title": "Class TouchEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class TouchEvent A UnityEvent callback containing a TouchEventData payload. Inheritance Object TouchEvent Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax [Serializable] public class TouchEvent : UnityEvent<HandTrackingInputEventData>"
  },
  "api/Microsoft.MixedReality.Toolkit.UI.TransformScaleHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.UI.TransformScaleHandler.html",
    "title": "Class TransformScaleHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class TransformScaleHandler Component for setting the min/max scale values for ManipulationHandler or BoundingBox Inheritance Object TransformScaleHandler Namespace : Microsoft.MixedReality.Toolkit.UI Assembly : cs.temp.dll.dll Syntax public class TransformScaleHandler : MonoBehaviour Properties RelativeToInitialState Declaration public bool RelativeToInitialState { get; set; } Property Value Type Description Boolean ScaleMaximum Declaration public float ScaleMaximum { get; set; } Property Value Type Description Single ScaleMinimum Declaration public float ScaleMinimum { get; set; } Property Value Type Description Single TargetTransform Declaration public Transform TargetTransform { get; set; } Property Value Type Description Transform Methods ClampScale(Vector3) Clamps the given scale to the scale limits set by Microsoft.MixedReality.Toolkit.UI.TransformScaleHandler.SetScaleLimits such that: No one component of the returned vector will be greater than the max scale. No one component of the returned vector will be less than the min scale. The returned vector's direction will be the same as the given vector Declaration public Vector3 ClampScale(Vector3 scale) Parameters Type Name Description Vector3 scale Scale value to clamp Returns Type Description Vector3 The clamped scale vector Start() Declaration public void Start()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfComponentType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfComponentType.html",
    "title": "Enum GltfComponentType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfComponentType https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json:componentType The datatype of components in the attribute. All valid values correspond to WebGL enums. The corresponding typed arrays are 'Int8Array', 'Uint8Array', 'Int16Array', 'Uint16Array', 'Uint32Array', and 'Float32Array', respectively. 5125 (UNSIGNED_INT) is only allowed when the accessor contains indices, i.e., the accessor is only referenced by 'primitive.indices'. Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfComponentType Fields Name Description Byte Float Short UnsignedByte UnsignedInt UnsignedShort"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfDrawMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfDrawMode.html",
    "title": "Enum GltfDrawMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfDrawMode The type of primitives to render. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfDrawMode Fields Name Description LineLoop Lines LineStrip Points TriangleFan Triangles TriangleStrip"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfImage.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfImage.html",
    "title": "Class GltfImage | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfImage Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/image.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfImage Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfImage : GltfChildOfRootProperty Fields bufferView The index of the bufferView that contains the image. Use this instead of the image's uri property. Declaration public int bufferView Field Value Type Description Int32 mimeType The image's MIME type. 1 Declaration public string mimeType Field Value Type Description String uri The uri of the image. Relative paths are relative to the .gltf file. Instead of referencing an external file, the uri can also be a data-uri. The image format must be jpg, png, bmp, or gif. Declaration public string uri Field Value Type Description String Properties Texture Unity Texture2D wrapper for the GltfImage Declaration public Texture2D Texture { get; } Property Value Type Description Texture2D"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfInterpolationType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfInterpolationType.html",
    "title": "Enum GltfInterpolationType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfInterpolationType Interpolation algorithm. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.sampler.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfInterpolationType Fields Name Description CATMULLROMSPLINE CUBICSPLINE LINEAR STEP"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMagnificationFilterMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMagnificationFilterMode.html",
    "title": "Enum GltfMagnificationFilterMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfMagnificationFilterMode Magnification filter mode. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfMagnificationFilterMode Fields Name Description Linear Nearest None"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMaterial.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMaterial.html",
    "title": "Class GltfMaterial | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfMaterial The material appearance of a primitive. https://github.com/KhronosGroup/glTF/tree/master/specification/2.0/schema Inheritance Object GltfProperty GltfChildOfRootProperty GltfMaterial Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfMaterial : GltfChildOfRootProperty Fields alphaCutoff Specifies the cutoff threshold when in MASK mode. If the alpha value is greater than or equal to this value then it is rendered as fully opaque, otherwise, it is rendered as fully transparent. This value is ignored for other modes. Declaration public double alphaCutoff Field Value Type Description Double alphaMode The material's alpha rendering mode enumeration specifying the interpretation of the alpha value of the main factor and texture. In OPAQUE mode, the alpha value is ignored and the rendered output is fully opaque. In MASK mode, the rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value. In BLEND mode, the alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator). Declaration public string alphaMode Field Value Type Description String commonConstant A set of parameter values used to light flat-shaded materials Declaration public GltfMaterialCommonConstant commonConstant Field Value Type Description GltfMaterialCommonConstant doubleSided Specifies whether the material is double sided. When this value is false, back-face culling is enabled. When this value is true, back-face culling is disabled and double sided lighting is enabled. The back-face must have its normals reversed before the lighting equation is evaluated. Declaration public bool doubleSided Field Value Type Description Boolean emissiveFactor The RGB components of the emissive color of the material. If an emissiveTexture is specified, this value is multiplied with the texel values. 0.0 1.0 3 3 Declaration public float[] emissiveFactor Field Value Type Description Single [] emissiveTexture The emissive map controls the color and intensity of the light being emitted by the material. This texture contains RGB components in sRGB color space. If a fourth component (A) is present, it is ignored. Declaration public GltfTextureInfo emissiveTexture Field Value Type Description GltfTextureInfo normalTexture A tangent space normal map. Each texel represents the XYZ components of a normal vector in tangent space. Declaration public GltfNormalTextureInfo normalTexture Field Value Type Description GltfNormalTextureInfo occlusionTexture The occlusion map is a greyscale texture, with white indicating areas that should receive full indirect lighting and black indicating no indirect lighting. Declaration public GltfOcclusionTextureInfo occlusionTexture Field Value Type Description GltfOcclusionTextureInfo pbrMetallicRoughness A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. Declaration public GltfPbrMetallicRoughness pbrMetallicRoughness Field Value Type Description GltfPbrMetallicRoughness Properties Material Unity Material wrapper for the GltfMaterial Declaration public Material Material { get; } Property Value Type Description Material"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMaterialCommonConstant.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMaterialCommonConstant.html",
    "title": "Class GltfMaterialCommonConstant | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfMaterialCommonConstant Inheritance Object GltfProperty GltfMaterialCommonConstant Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfMaterialCommonConstant : GltfProperty Fields ambientFactor Used to scale the ambient light contributions to this material Declaration public float[] ambientFactor Field Value Type Description Single [] lightmapFactor Scale factor for the lightmap texture Declaration public float[] lightmapFactor Field Value Type Description Single [] lightmapTexture Texture used to store pre-computed direct lighting Declaration public GltfNormalTextureInfo lightmapTexture Field Value Type Description GltfNormalTextureInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMesh.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMesh.html",
    "title": "Class GltfMesh | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfMesh A set of primitives to be rendered. A node can contain one or more meshes. A node's transform places the mesh in the scene. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfMesh Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfMesh : GltfChildOfRootProperty Fields primitives An array of primitives, each defining geometry to be rendered with a material. 1 Declaration public GltfMeshPrimitive[] primitives Field Value Type Description GltfMeshPrimitive [] weights Array of weights to be applied to the Morph Targets. 0 Declaration public double[] weights Field Value Type Description Double [] Properties Mesh Unity Mesh wrapper for the GltfMesh Declaration public Mesh Mesh { get; } Property Value Type Description Mesh"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMeshPrimitive.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMeshPrimitive.html",
    "title": "Class GltfMeshPrimitive | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfMeshPrimitive Geometry to be rendered with the given material. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json Inheritance Object GltfProperty GltfMeshPrimitive Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfMeshPrimitive : GltfProperty Fields indices The index of the accessor that contains mesh indices. When this is not defined, the primitives should be rendered without indices using drawArrays() . When defined, the accessor must contain indices: the bufferView referenced by the accessor must have a target equal to 34963 (ELEMENT_ARRAY_BUFFER); a byteStride that is tightly packed, i.e., 0 or the byte size of componentType in bytes; componentType must be 5121 (UNSIGNED_BYTE), 5123 (UNSIGNED_SHORT) or 5125 (UNSIGNED_INT), the latter is only allowed when OES_element_index_uint extension is used; type must be \\&quot;SCALAR\\&quot; . Declaration public int indices Field Value Type Description Int32 material The index of the material to apply to this primitive when rendering. Declaration public int material Field Value Type Description Int32 mode The type of primitives to render. All valid values correspond to WebGL enums. Declaration public GltfDrawMode mode Field Value Type Description GltfDrawMode Properties Attributes A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data. Declaration public GltfMeshPrimitiveAttributes Attributes { get; } Property Value Type Description GltfMeshPrimitiveAttributes SubMesh Unity Mesh wrapper for the GltfMeshPrimitive SubMesh Declaration public Mesh SubMesh { get; } Property Value Type Description Mesh Targets An array of Morph Targets, each Morph Target is a dictionary mapping attributes (only \"POSITION\" and \"NORMAL\" supported) to their deviations in the Morph Target (index of the accessor containing the attribute displacements' data). Declaration public List<Dictionary<string, int>> Targets { get; } Property Value Type Description List < Dictionary < String , Int32 >>"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMeshPrimitiveAttributes.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMeshPrimitiveAttributes.html",
    "title": "Class GltfMeshPrimitiveAttributes | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfMeshPrimitiveAttributes Common mesh primitive attributes. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json Inheritance Object GltfMeshPrimitiveAttributes Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfMeshPrimitiveAttributes Remarks Application specific semantics are not supported Fields COLOR_0 Declaration public int COLOR_0 Field Value Type Description Int32 JOINTS_0 Declaration public int JOINTS_0 Field Value Type Description Int32 NORMAL Declaration public int NORMAL Field Value Type Description Int32 POSITION Declaration public int POSITION Field Value Type Description Int32 TANGENT Declaration public int TANGENT Field Value Type Description Int32 TEXCOORD_0 Declaration public int TEXCOORD_0 Field Value Type Description Int32 TEXCOORD_1 Declaration public int TEXCOORD_1 Field Value Type Description Int32 TEXCOORD_2 Declaration public int TEXCOORD_2 Field Value Type Description Int32 TEXCOORD_3 Declaration public int TEXCOORD_3 Field Value Type Description Int32 WEIGHTS_0 Declaration public int WEIGHTS_0 Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMinFilterMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfMinFilterMode.html",
    "title": "Enum GltfMinFilterMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfMinFilterMode Minification filter mode. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfMinFilterMode Fields Name Description Linear LinearMipmapLinear LinearMipmapNearest Nearest NearestMipmapLinear NearestMipmapNearest None"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.AdapterInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.AdapterInfo.html",
    "title": "Class AdapterInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class AdapterInfo Inheritance Object AdapterInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class AdapterInfo Fields Description Declaration public string Description Field Value Type Description String DHCP Declaration public DHCPInfo DHCP Field Value Type Description DHCPInfo Gateways Declaration public IpAddressInfo[] Gateways Field Value Type Description IpAddressInfo [] HardwareAddress Declaration public string HardwareAddress Field Value Type Description String Index Declaration public int Index Field Value Type Description Int32 IpAddresses Declaration public IpAddressInfo[] IpAddresses Field Value Type Description IpAddressInfo [] Name Declaration public string Name Field Value Type Description String Type Declaration public string Type Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.AssemblyExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class AssemblyExtensions Inheritance Object AssemblyExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class AssemblyExtensions Methods GetLoadableTypes(Assembly) Assembly.GetTypes() can throw in some cases. This extension will catch that exception and return only the types which were successfully loaded from the assembly. Declaration public static IEnumerable<Type> GetLoadableTypes(this Assembly this) Parameters Type Name Description Assembly this Returns Type Description IEnumerable < Type >"
  },
  "api/Microsoft.MixedReality.Toolkit.Audio.IAudioInfluencer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Audio.IAudioInfluencer.html",
    "title": "Interface IAudioInfluencer | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IAudioInfluencer Interface that should be implemented by any class that wishes to influence how an audio source sounds. Namespace : Microsoft.MixedReality.Toolkit.Audio Assembly : cs.temp.dll.dll Syntax public interface IAudioInfluencer Methods ApplyEffect(GameObject) Applies an audio effect. Declaration void ApplyEffect(GameObject soundEmittingObject) Parameters Type Name Description GameObject soundEmittingObject The GameObject on which the effect is to be applied. RemoveEffect(GameObject) Removes a previously applied audio effect. Declaration void RemoveEffect(GameObject soundEmittingObject) Parameters Type Name Description GameObject soundEmittingObject The GameObject from which the effect is to be removed."
  },
  "api/Microsoft.MixedReality.Toolkit.BaseDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseDataProvider.html",
    "title": "Class BaseDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseDataProvider Inheritance Object BaseService BaseDataProvider < IMixedRealityService > BaseDataProvider Implements IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseDataProvider<IMixedRealityService>.Registrar BaseDataProvider<IMixedRealityService>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Add a <T> of type IMixedRealityService, which defines the service type this data provider is valid for.\")] public abstract class BaseDataProvider : BaseDataProvider<IMixedRealityService>, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors BaseDataProvider(IMixedRealityService, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration protected BaseDataProvider(IMixedRealityService service, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityService service The IMixedRealityService to which the provider is providing data. String name The friendly name of the data provider. UInt32 priority The registration priority of the data provider. BaseMixedRealityProfile profile The configuration profile for the data provider. BaseDataProvider(IMixedRealityServiceRegistrar, IMixedRealityService, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] protected BaseDataProvider(IMixedRealityServiceRegistrar registrar, IMixedRealityService service, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityService service The IMixedRealityService to which the provider is providing data. String name The friendly name of the data provider. UInt32 priority The registration priority of the data provider. BaseMixedRealityProfile profile The configuration profile for the data provider. Implements IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.BaseExtensionService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.BaseExtensionService.html",
    "title": "Class BaseExtensionService | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseExtensionService The base extension service implements IMixedRealityExtensionService and provides default properties for all extension services. Inheritance Object BaseService BaseExtensionService SceneTransitionService LostTrackingService Implements IMixedRealityExtensionService IMixedRealityService IDisposable Inherited Members BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.Update() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public abstract class BaseExtensionService : BaseService, IMixedRealityExtensionService, IMixedRealityService, IDisposable Remarks Empty, but reserved for future use, in case additional IMixedRealityExtensionService properties or methods are assigned. Constructors BaseExtensionService(IMixedRealityServiceRegistrar, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] protected BaseExtensionService(IMixedRealityServiceRegistrar registrar, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. String name The friendly name of the service. UInt32 priority The registration priority of the service. BaseMixedRealityProfile profile The configuration profile for the service. BaseExtensionService(String, UInt32, BaseMixedRealityProfile) Constructor. Declaration protected BaseExtensionService(string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description String name The friendly name of the service. UInt32 priority The registration priority of the service. BaseMixedRealityProfile profile The configuration profile for the service. Properties Registrar The service registrar instance that registered this service. Declaration [Obsolete(\"The Registrar property is obsolete and will be removed in a future version of the Microsoft Mixed Reality Toolkit\")] protected IMixedRealityServiceRegistrar Registrar { get; set; } Property Value Type Description IMixedRealityServiceRegistrar Implements IMixedRealityExtensionService IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.BoundaryEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.BoundaryEventData.html",
    "title": "Class BoundaryEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class BoundaryEventData The data describing the boundary system event. Inheritance Object GenericBaseEventData BoundaryEventData Inherited Members GenericBaseEventData.EventSource GenericBaseEventData.EventTime GenericBaseEventData.BaseInitialize(IMixedRealityEventSource) Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public class BoundaryEventData : GenericBaseEventData Constructors BoundaryEventData(EventSystem) Constructor. Declaration public BoundaryEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Properties AreBoundaryWallsVisualized Are the boundary walls being visualized by the boundary system. Declaration public bool AreBoundaryWallsVisualized { get; } Property Value Type Description Boolean IsCeilingVisualized Is the ceiling being visualized by the boundary system. Declaration public bool IsCeilingVisualized { get; } Property Value Type Description Boolean Remarks The boundary system defines the ceiling as a plane set at BoundaryHeight above the floor. IsFloorVisualized Is the floor being visualized by the boundary system. Declaration public bool IsFloorVisualized { get; } Property Value Type Description Boolean IsPlayAreaVisualized Is the play area being visualized by the boundary system. Declaration public bool IsPlayAreaVisualized { get; } Property Value Type Description Boolean IsTrackedAreaVisualized Is the tracked area being visualized by the boundary system. Declaration public bool IsTrackedAreaVisualized { get; } Property Value Type Description Boolean Methods Initialize(IMixedRealityBoundarySystem, Boolean, Boolean, Boolean, Boolean, Boolean) Declaration public void Initialize(IMixedRealityBoundarySystem boundarySystem, bool isFloorVisualized, bool isPlayAreaVisualized, bool isTrackedAreaVisualized, bool areBoundaryWallsVisualized, bool isCeilingVisualized) Parameters Type Name Description IMixedRealityBoundarySystem boundarySystem Boolean isFloorVisualized Boolean isPlayAreaVisualized Boolean isTrackedAreaVisualized Boolean areBoundaryWallsVisualized Boolean isCeilingVisualized"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Boundary.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Boundary.Editor Classes MixedRealityBoundaryVisualizationProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.IMixedRealityBoundarySystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.IMixedRealityBoundarySystem.html",
    "title": "Interface IMixedRealityBoundarySystem | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityBoundarySystem Manager interface for a Boundary system in the Mixed Reality Toolkit All replacement systems for providing Boundary functionality should derive from this interface Inherited Members IMixedRealityEventSystem.EventListeners IMixedRealityEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) IMixedRealityEventSystem.Register(GameObject) IMixedRealityEventSystem.Unregister(GameObject) IMixedRealityEventSystem.RegisterHandler<T>(IEventSystemHandler) IMixedRealityEventSystem.UnregisterHandler<T>(IEventSystemHandler) IMixedRealityService.Name IMixedRealityService.Priority IMixedRealityService.ConfigurationProfile IMixedRealityService.Initialize() IMixedRealityService.Reset() IMixedRealityService.Enable() IMixedRealityService.Update() IMixedRealityService.LateUpdate() IMixedRealityService.Disable() IMixedRealityService.Destroy() IMixedRealityEventSource.SourceId IMixedRealityEventSource.SourceName Namespace : Microsoft.MixedReality.Toolkit.Boundary Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityBoundarySystem : IMixedRealityEventSystem, IMixedRealityService, IDisposable, IMixedRealityEventSource, IEqualityComparer Properties BoundaryHeight The height of the play space, in meters. Declaration float BoundaryHeight { get; set; } Property Value Type Description Single Remarks This is used to create a three dimensional boundary volume. BoundaryVisualizationProfile Typed representation of the ConfigurationProfile property. Declaration MixedRealityBoundaryVisualizationProfile BoundaryVisualizationProfile { get; } Property Value Type Description MixedRealityBoundaryVisualizationProfile BoundaryWallsPhysicsLayer The physics layer that the generated boundary walls are assigned to. Declaration int BoundaryWallsPhysicsLayer { get; set; } Property Value Type Description Int32 Bounds Two dimensional representation of the geometry of the boundary, as provided by the platform. Declaration Edge[] Bounds { get; } Property Value Type Description Edge [] Remarks BoundaryGeometry should be treated as the outline of the player's space, placed on the floor. CeilingPhysicsLayer The physics layer that the generated boundary ceiling is assigned to. Declaration int CeilingPhysicsLayer { get; set; } Property Value Type Description Int32 FloorHeight Indicates the height of the floor, in relation to the coordinate system origin. Declaration float? FloorHeight { get; } Property Value Type Description Nullable < Single > Remarks If a floor has been located, FloorHeight.HasValue will be true, otherwise it will be false. FloorPhysicsLayer The physics layer that the generated floor is assigned to. Declaration int FloorPhysicsLayer { get; set; } Property Value Type Description Int32 PlayAreaPhysicsLayer The physics layer that the generated play area is assigned to. Declaration int PlayAreaPhysicsLayer { get; set; } Property Value Type Description Int32 Scale The scale (ex: World Scale) of the experience. Declaration ExperienceScale Scale { get; set; } Property Value Type Description ExperienceScale ShowBoundaryCeiling Enable / disable ceiling rendering. Declaration bool ShowBoundaryCeiling { get; set; } Property Value Type Description Boolean Remarks The ceiling is defined as a GameObject positioned BoundaryHeight above the floor. ShowBoundaryWalls Enable / disable boundary wall rendering. Declaration bool ShowBoundaryWalls { get; set; } Property Value Type Description Boolean ShowFloor Enable / disable floor rendering. Declaration bool ShowFloor { get; set; } Property Value Type Description Boolean ShowPlayArea Enable / disable play area rendering. Declaration bool ShowPlayArea { get; set; } Property Value Type Description Boolean ShowTrackedArea Enable / disable tracked area rendering. Declaration bool ShowTrackedArea { get; set; } Property Value Type Description Boolean TrackedAreaPhysicsLayer The physics layer that the generated tracked area is assigned to. Declaration int TrackedAreaPhysicsLayer { get; set; } Property Value Type Description Int32 Methods Contains(Vector3, BoundaryType) Determines if a location is within the specified area of the boundary space. Declaration bool Contains(Vector3 location, BoundaryType boundaryType = BoundaryType.TrackedArea) Parameters Type Name Description Vector3 location The location to be checked. BoundaryType boundaryType The type of boundary space being checked. Returns Type Description Boolean True if the location is within the specified area of the boundary space. Remarks Use: BoundaryType.PlayArea for the inscribed volume BoundaryType.TrackedArea for the area defined by the boundary edges. GetBoundaryCeilingVisualization() Gets the GameObject that represents the upper surface of the user's boundary. Declaration GameObject GetBoundaryCeilingVisualization() Returns Type Description GameObject The boundary ceiling visualization object or null if one does not exist. GetBoundaryWallVisualization() Gets the GameObject that represents the user's boundary walls. Declaration GameObject GetBoundaryWallVisualization() Returns Type Description GameObject The boundary wall visualization object or null if one does not exist. GetFloorVisualization() Gets the GameObject that represents the user's floor. Declaration GameObject GetFloorVisualization() Returns Type Description GameObject The floor visualization object or null if one does not exist. GetPlayAreaVisualization() Gets the GameObject that represents the user's play area. Declaration GameObject GetPlayAreaVisualization() Returns Type Description GameObject The play area visualization object or null if one does not exist. GetTrackedAreaVisualization() Gets the GameObject that represents the user's tracked area. Declaration GameObject GetTrackedAreaVisualization() Returns Type Description GameObject The tracked area visualization object or null if one does not exist. TryGetRectangularBoundsParams(out Vector2, out Single, out Single, out Single) Returns the description of the inscribed rectangular bounds. Declaration bool TryGetRectangularBoundsParams(out Vector2 center, out float angle, out float width, out float height) Parameters Type Name Description Vector2 center The center of the rectangle. Single angle The orientation of the rectangle. Single width The width of the rectangle. Single height The height of the rectangle. Returns Type Description Boolean True if an inscribed rectangle was found in the boundary geometry, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Boundary.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Boundary.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Boundary | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Boundary Classes BoundaryEventData The data describing the boundary system event. InscribedRectangle The InscribedRectangle class defines the largest rectangle within an arbitrary shape. MixedRealityBoundarySystem The Boundary system controls the presentation and display of the users boundary in a scene. MixedRealityBoundaryVisualizationProfile Configuration profile settings for setting up boundary visualizations. Structs Edge The Edge structure defines the points of a line segment that are used to construct a polygonal boundary. Interfaces IMixedRealityBoundaryHandler IMixedRealityBoundarySystem Manager interface for a Boundary system in the Mixed Reality Toolkit All replacement systems for providing Boundary functionality should derive from this interface Enums BoundaryType Defines different types of boundaries that can be requested."
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildDeployWindow.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildDeployWindow.html",
    "title": "Class BuildDeployWindow | Mixed Reality Toolkit Documentation",
    "keywords": "Class BuildDeployWindow Build window - supports SLN creation, APPX from SLN, Deploy on device, and misc helper utilities associated with the build/deploy/test iteration loop Requires the device to be set in developer mode and to have secure connections disabled (in the security tab in the device portal) Inheritance Object BuildDeployWindow Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public class BuildDeployWindow : EditorWindow Methods BuildAll(Boolean) Builds the open Unity project and its AppX for BuildTarget.WSAPlayer . Declaration public static void BuildAll(bool install = true) Parameters Type Name Description Boolean install BuildAppx() Builds an AppX for the open Unity project for BuildTarget.WSAPlayer . Declaration public static void BuildAppx() BuildUnityProject() Builds the open Unity project for BuildTarget.WSAPlayer . Declaration public static void BuildUnityProject() OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.BuildInfo.html",
    "title": "Class BuildInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class BuildInfo Inheritance Object BuildInfo UwpBuildInfo Implements IBuildInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Build.Editor Assembly : cs.temp.dll.dll Syntax public class BuildInfo : IBuildInfo Constructors BuildInfo(Boolean) Declaration public BuildInfo(bool isCommandLine = false) Parameters Type Name Description Boolean isCommandLine Properties AutoIncrement Should the build auto increment the build version number? Declaration public bool AutoIncrement { get; set; } Property Value Type Description Boolean BuildOptions Build options to include in the Unity player build pipeline. Declaration public BuildOptions BuildOptions { get; set; } Property Value Type Description BuildOptions BuildPlatform The build platform (i.e. x86, x64) Declaration public string BuildPlatform { get; set; } Property Value Type Description String BuildSymbols The symbols associated with this build. Declaration public string BuildSymbols { get; set; } Property Value Type Description String BuildTarget The build target. Declaration public virtual BuildTarget BuildTarget { get; } Property Value Type Description BuildTarget ColorSpace Optional parameter to set the player's ColorSpace Declaration public ColorSpace? ColorSpace { get; set; } Property Value Type Description Nullable < ColorSpace > Configuration The build configuration (i.e. debug, release, or master) Declaration public string Configuration { get; set; } Property Value Type Description String IsCommandLine Is this build being issued from the command line? Declaration public bool IsCommandLine { get; } Property Value Type Description Boolean LogDirectory The default location of log files generated by sub-processes of the build system. Declaration public string LogDirectory { get; set; } Property Value Type Description String Remarks Note that this different from the Unity flag -logFile, which controls the location of the Unity log file. This is specifically for logs generated by other processes that the MRTK build tools produces (for example, when msbuild.exe is involved) OutputDirectory The directory to put the final build output. Declaration public string OutputDirectory { get; set; } Property Value Type Description String Remarks Defaults to \" Application.dataPath /Builds/Platform Target/\" PostBuildAction A post-build action to raise after building the Unity player. Declaration public Action<IBuildInfo, BuildReport> PostBuildAction { get; set; } Property Value Type Description Action < IBuildInfo , BuildReport > PreBuildAction A pre-build action to raise before building the Unity player. Declaration public Action<IBuildInfo> PreBuildAction { get; set; } Property Value Type Description Action < IBuildInfo > Scenes The list of scenes to include in the build. Declaration public IEnumerable<string> Scenes { get; set; } Property Value Type Description IEnumerable < String > ScriptingBackend Optional parameter to set the scripting backend Declaration public ScriptingImplementation? ScriptingBackend { get; set; } Property Value Type Description Nullable < ScriptingImplementation > Implements IBuildInfo"
  },
  "api/Microsoft.MixedReality.Toolkit.Build.Editor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Build.Editor.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Build.Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Build.Editor Classes BuildDeployPreferences Build and Deploy Specific Editor Preferences for the Build and Deploy Window. BuildDeployWindow Build window - supports SLN creation, APPX from SLN, Deploy on device, and misc helper utilities associated with the build/deploy/test iteration loop Requires the device to be set in developer mode and to have secure connections disabled (in the security tab in the device portal) BuildInfo BuildInfoExtensions UnityPlayerBuildTools Cross platform player build tools UwpAppxBuildTools UwpBuildDeployPreferences UwpBuildInfo UwpPlayerBuildTools Class containing various utility methods to build a WSA solution from a Unity project. Interfaces IBuildInfo The Build Info defines common properties for a build."
  },
  "api/Microsoft.MixedReality.Toolkit.CameraExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraExtensions.html",
    "title": "Class CameraExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class CameraExtensions Extension methods for the Unity's Camera class Inheritance Object CameraExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class CameraExtensions Methods GetDistanceForFrustumHeight(Camera, Single) Gets the distance to the camera that a specific frustum height would be at. Declaration public static float GetDistanceForFrustumHeight(this Camera camera, float frustumHeight) Parameters Type Name Description Camera camera The camera to get the distance from Single frustumHeight The frustum height Returns Type Description Single GetFrustumSizeForDistance(Camera, Single) Gets the frustum size at a given distance from the camera. Declaration public static Vector2 GetFrustumSizeForDistance(this Camera camera, float distanceFromCamera) Parameters Type Name Description Camera camera The camera to get the frustum size for Single distanceFromCamera The distance from the camera to get the frustum size at Returns Type Description Vector2 GetHorizontalFieldOfViewDegrees(Camera) Get the horizontal FOV from the stereo camera in degrees Declaration public static float GetHorizontalFieldOfViewDegrees(this Camera camera) Parameters Type Name Description Camera camera Returns Type Description Single GetHorizontalFieldOfViewRadians(Camera) Get the horizontal FOV from the stereo camera in radians Declaration public static float GetHorizontalFieldOfViewRadians(this Camera camera) Parameters Type Name Description Camera camera Returns Type Description Single IsInFOV(Camera, Vector3) Returns if a point will be rendered on the screen in either eye Declaration public static bool IsInFOV(this Camera camera, Vector3 position) Parameters Type Name Description Camera camera The camera to check the point against Vector3 position Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.CameraSystem.MixedRealityCameraSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.CameraSystem.MixedRealityCameraSystem.html",
    "title": "Class MixedRealityCameraSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityCameraSystem The Camera system controls the settings of the main camera. Inheritance Object BaseService BaseEventSystem BaseCoreSystem BaseDataProviderAccessCoreSystem MixedRealityCameraSystem Implements IMixedRealityDataProviderAccess IMixedRealityCameraSystem IMixedRealityEventSystem IMixedRealityEventSource IEqualityComparer IMixedRealityService IDisposable Inherited Members BaseDataProviderAccessCoreSystem.Reset() BaseDataProviderAccessCoreSystem.LateUpdate() BaseDataProviderAccessCoreSystem.GetDataProviders() BaseDataProviderAccessCoreSystem.GetDataProviders<T>() BaseDataProviderAccessCoreSystem.GetDataProvider(String) BaseDataProviderAccessCoreSystem.GetDataProvider<T>(String) BaseDataProviderAccessCoreSystem.RegisterDataProvider<T>(Type, SupportedPlatforms, Object[]) BaseDataProviderAccessCoreSystem.RegisterDataProvider<T>(T) BaseDataProviderAccessCoreSystem.UnregisterDataProvider<T>(String) BaseDataProviderAccessCoreSystem.UnregisterDataProvider<T>(T) BaseCoreSystem.Registrar BaseEventSystem.enableDanglingHandlerDiagnostics BaseEventSystem.EventHandlersByType BaseEventSystem.EventListeners BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) BaseEventSystem.RegisterHandler<T>(IEventSystemHandler) BaseEventSystem.UnregisterHandler<T>(IEventSystemHandler) BaseEventSystem.Register(GameObject) BaseEventSystem.Unregister(GameObject) BaseService.DefaultPriority BaseService.Priority BaseService.ConfigurationProfile BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.CameraSystem Assembly : cs.temp.dll.dll Syntax public class MixedRealityCameraSystem : BaseDataProviderAccessCoreSystem, IMixedRealityDataProviderAccess, IMixedRealityCameraSystem, IMixedRealityEventSystem, IMixedRealityEventSource, IEqualityComparer, IMixedRealityService, IDisposable Constructors MixedRealityCameraSystem(BaseMixedRealityProfile) Constructor. Declaration public MixedRealityCameraSystem(BaseMixedRealityProfile profile = null) Parameters Type Name Description BaseMixedRealityProfile profile The configuration profile for the service. MixedRealityCameraSystem(IMixedRealityServiceRegistrar, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public MixedRealityCameraSystem(IMixedRealityServiceRegistrar registrar, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the service. BaseMixedRealityProfile profile The configuration profile for the service. Properties CameraProfile Typed representation of the ConfigurationProfile property. Declaration public MixedRealityCameraProfile CameraProfile { get; } Property Value Type Description MixedRealityCameraProfile IsOpaque Is the current camera displaying on an opaque (VR / immersive) or a transparent (AR) device Declaration public bool IsOpaque { get; } Property Value Type Description Boolean Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration public override string Name { get; protected set; } Property Value Type Description String Overrides BaseService.Name SourceId The Unique Source Id of this Event Source. Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName The Name of this Event Source. Declaration public string SourceName { get; } Property Value Type Description String Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseEventSystem.Destroy() Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseDataProviderAccessCoreSystem.Enable() Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseDataProviderAccessCoreSystem.Update() Implements IMixedRealityDataProviderAccess IMixedRealityCameraSystem IMixedRealityEventSystem IMixedRealityEventSource IEqualityComparer IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.DocLinkAttribute.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.DocLinkAttribute.html",
    "title": "Class DocLinkAttribute | Mixed Reality Toolkit Documentation",
    "keywords": "Class DocLinkAttribute Defines a documentation link for a service. Used primarily by service inspector facades. Inheritance Object DocLinkAttribute Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public class DocLinkAttribute : Attribute Constructors DocLinkAttribute(String) Declaration public DocLinkAttribute(string url) Parameters Type Name Description String url Properties URL Declaration public string URL { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.DoubleExtensions.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.DoubleExtensions.html",
    "title": "Class DoubleExtensions | Mixed Reality Toolkit Documentation",
    "keywords": "Class DoubleExtensions Extension methods for the .Net Double struct Inheritance Object DoubleExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public static class DoubleExtensions Methods Approximately(Double, Double, Double) Checks if two numbers are approximately equal. Similar to Mathf.Approximately(float, float) , but the tolerance can be specified. Declaration public static bool Approximately(this double number, double other, double tolerance) Parameters Type Name Description Double number One of the numbers to compare. Double other The other number to compare. Double tolerance The amount of tolerance to allow while still considering the numbers approximately equal. Returns Type Description Boolean True if the difference between the numbers is less than or equal to the tolerance, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SliderChangeColor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SliderChangeColor.html",
    "title": "Class SliderChangeColor | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderChangeColor Inheritance Object SliderChangeColor Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class SliderChangeColor : MonoBehaviour Methods OnSliderUpdateBlue(SliderEventData) Declaration public void OnSliderUpdateBlue(SliderEventData eventData) Parameters Type Name Description SliderEventData eventData OnSliderUpdatedGreen(SliderEventData) Declaration public void OnSliderUpdatedGreen(SliderEventData eventData) Parameters Type Name Description SliderEventData eventData OnSliderUpdatedRed(SliderEventData) Declaration public void OnSliderUpdatedRed(SliderEventData eventData) Parameters Type Name Description SliderEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SliderLunarLander.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SliderLunarLander.html",
    "title": "Class SliderLunarLander | Mixed Reality Toolkit Documentation",
    "keywords": "Class SliderLunarLander Inheritance Object SliderLunarLander Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class SliderLunarLander : MonoBehaviour Methods OnSliderUpdated(SliderEventData) Declaration public void OnSliderUpdated(SliderEventData eventData) Parameters Type Name Description SliderEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SolverExampleManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SolverExampleManager.html",
    "title": "Class SolverExampleManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class SolverExampleManager Inheritance Object SolverExampleManager Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class SolverExampleManager : MonoBehaviour Properties TrackedType Declaration public TrackedObjectType TrackedType { get; set; } Property Value Type Description TrackedObjectType Methods SetOrbital() Declaration public void SetOrbital() SetRadialView() Declaration public void SetRadialView() SetSurfaceMagnetism() Declaration public void SetSurfaceMagnetism() SetTrackedController() Declaration public void SetTrackedController() SetTrackedCustom() Declaration public void SetTrackedCustom() SetTrackedHands() Declaration public void SetTrackedHands() SetTrackedHead() Declaration public void SetTrackedHead()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SpawnOnPointerEvent.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.SpawnOnPointerEvent.html",
    "title": "Class SpawnOnPointerEvent | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpawnOnPointerEvent Inheritance Object SpawnOnPointerEvent Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos Assembly : cs.temp.dll.dll Syntax public class SpawnOnPointerEvent : MonoBehaviour Fields PrefabToSpawn Declaration public GameObject PrefabToSpawn Field Value Type Description GameObject Methods Spawn(MixedRealityPointerEventData) Declaration public void Spawn(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader.MaterialMatrix.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader.MaterialMatrix.html",
    "title": "Class MaterialMatrix | Mixed Reality Toolkit Documentation",
    "keywords": "Class MaterialMatrix Builds a matrix of spheres demonstrating a spectrum of two material properties. Inheritance Object MaterialMatrix Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader Assembly : cs.temp.dll.dll Syntax public class MaterialMatrix : MonoBehaviour Methods BuildMatrix() Declaration public void BuildMatrix()"
  },
  "api/Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader.MaterialMatrixEditor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader.MaterialMatrixEditor.html",
    "title": "Class MaterialMatrixEditor | Mixed Reality Toolkit Documentation",
    "keywords": "Class MaterialMatrixEditor Editor to build a matrix of spheres demonstrating a spectrum of material properties. Inheritance Object MaterialMatrixEditor Namespace : Microsoft.MixedReality.Toolkit.Examples.Demos.StandardShader Assembly : cs.temp.dll.dll Syntax public class MaterialMatrixEditor : Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursorContextData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursorContextData.html",
    "title": "Class AnimatedCursorContextData | Mixed Reality Toolkit Documentation",
    "keywords": "Class AnimatedCursorContextData Inheritance Object AnimatedCursorData < CursorContextEnum > AnimatedCursorContextData Inherited Members AnimatedCursorData<CursorContextEnum>.name AnimatedCursorData<CursorContextEnum>.Name AnimatedCursorData<CursorContextEnum>.cursorState AnimatedCursorData<CursorContextEnum>.CursorState AnimatedCursorData<CursorContextEnum>.parameter AnimatedCursorData<CursorContextEnum>.Parameter Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class AnimatedCursorContextData : AnimatedCursorData<CursorContextEnum>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursorData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursorData-1.html",
    "title": "Class AnimatedCursorData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class AnimatedCursorData<T> Data struct for cursor state information for the Animated Cursor, which leverages the Unity animation system. This defines a modification to an Unity animation parameter, based on cursor state. Inheritance Object AnimatedCursorData<T> AnimatedCursorContextData AnimatedCursorStateData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class AnimatedCursorData<T> Type Parameters Name Description T Fields cursorState Declaration protected T cursorState Field Value Type Description T name Declaration protected string name Field Value Type Description String parameter Declaration protected AnimatorParameter parameter Field Value Type Description AnimatorParameter Properties CursorState The Cursor State for this specific animation. Declaration public T CursorState { get; } Property Value Type Description T Name The name of this specific cursor state. Declaration public string Name { get; } Property Value Type Description String Parameter Animator parameter definition for this cursor state. Declaration public AnimatorParameter Parameter { get; } Property Value Type Description AnimatorParameter"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursorStateData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.AnimatedCursorStateData.html",
    "title": "Class AnimatedCursorStateData | Mixed Reality Toolkit Documentation",
    "keywords": "Class AnimatedCursorStateData Inheritance Object AnimatedCursorData < CursorStateEnum > AnimatedCursorStateData Inherited Members AnimatedCursorData<CursorStateEnum>.name AnimatedCursorData<CursorStateEnum>.Name AnimatedCursorData<CursorStateEnum>.cursorState AnimatedCursorData<CursorStateEnum>.CursorState AnimatedCursorData<CursorStateEnum>.parameter AnimatedCursorData<CursorStateEnum>.Parameter Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class AnimatedCursorStateData : AnimatedCursorData<CursorStateEnum>"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseController.html",
    "title": "Class BaseController | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseController Base Controller class to inherit from for all controllers. Inheritance Object BaseController BaseHand GenericJoystickController MouseController UnityTouchController Implements IMixedRealityController Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseController : IMixedRealityController Constructors BaseController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration protected BaseController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties AngularVelocity Declaration public Vector3 AngularVelocity { get; protected set; } Property Value Type Description Vector3 ControllerHandedness The designated hand that the Input Source is managing, as defined by the SDK / Unity. Declaration public Handedness ControllerHandedness { get; } Property Value Type Description Handedness DefaultInteractions The default interactions for this controller. Declaration public virtual MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] DefaultLeftHandedInteractions The Default Left Handed interactions for this controller. Declaration public virtual MixedRealityInteractionMapping[] DefaultLeftHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] DefaultRightHandedInteractions The Default Right Handed interactions for this controller. Declaration public virtual MixedRealityInteractionMapping[] DefaultRightHandedInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Enabled Is the controller enabled? Declaration public bool Enabled { get; set; } Property Value Type Description Boolean InputSource The registered Input Source for this controller Declaration public IMixedRealityInputSource InputSource { get; } Property Value Type Description IMixedRealityInputSource Interactions Mapping definition for this controller, linking the Physical inputs to logical Input System Actions Declaration public MixedRealityInteractionMapping[] Interactions { get; } Property Value Type Description MixedRealityInteractionMapping [] IsInPointingPose Some controllers such as articulated should only be able to invoke pointing/distant interactions in certain poses. Declaration public virtual bool IsInPointingPose { get; } Property Value Type Description Boolean IsPositionApproximate Indicates the accuracy of the position data being reported. Declaration public bool IsPositionApproximate { get; protected set; } Property Value Type Description Boolean IsPositionAvailable Indicates that this controller is currently providing position data. Declaration public bool IsPositionAvailable { get; protected set; } Property Value Type Description Boolean Remarks This value may change during usage for some controllers. As a best practice, be sure to check this value before using position data. IsRotationAvailable Indicates that this controller is currently providing rotation data. Declaration public bool IsRotationAvailable { get; protected set; } Property Value Type Description Boolean Remarks This value may change during usage for some controllers. As a best practice, be sure to check this value before using rotation data. TrackingState Outputs the current state of the Input Source, whether it is tracked or not. As defined by the SDK / Unity. Declaration public TrackingState TrackingState { get; protected set; } Property Value Type Description TrackingState Velocity Declaration public Vector3 Velocity { get; protected set; } Property Value Type Description Vector3 Visualizer Declaration public IMixedRealityControllerVisualizer Visualizer { get; protected set; } Property Value Type Description IMixedRealityControllerVisualizer Methods AssignControllerMappings(MixedRealityInteractionMapping[]) Load the Interaction mappings for this controller from the configured Controller Mapping profile Declaration public void AssignControllerMappings(MixedRealityInteractionMapping[] mappings) Parameters Type Name Description MixedRealityInteractionMapping [] mappings Configured mappings from a controller mapping profile GetControllerMappings() Declaration protected static MixedRealityControllerMapping[] GetControllerMappings() Returns Type Description MixedRealityControllerMapping [] GetControllerVisualizationProfile() Declaration protected static MixedRealityControllerVisualizationProfile GetControllerVisualizationProfile() Returns Type Description MixedRealityControllerVisualizationProfile IsControllerMappingEnabled() Declaration protected static bool IsControllerMappingEnabled() Returns Type Description Boolean SetupConfiguration(Type) Sets up the configuration based on the Mixed Reality Controller Mapping Profile. Declaration public bool SetupConfiguration(Type controllerType) Parameters Type Name Description Type controllerType The type this controller represents. Returns Type Description Boolean SetupConfiguration(Type, InputSourceType) Sets up the configuration based on the Mixed Reality Controller Mapping Profile. Declaration public bool SetupConfiguration(Type controllerType, InputSourceType inputSourceType = InputSourceType.Controller) Parameters Type Name Description Type controllerType InputSourceType inputSourceType Returns Type Description Boolean SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness, if necessary. Declaration public abstract void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness TryAddControllerModelToSceneHierarchy(GameObject) Declaration protected bool TryAddControllerModelToSceneHierarchy(GameObject controllerObject) Parameters Type Name Description GameObject controllerObject Returns Type Description Boolean TryRenderControllerModel(Type, InputSourceType) Try to render a controller model for this controller from the visualization profile. Declaration protected virtual bool TryRenderControllerModel(Type controllerType, InputSourceType inputSourceType) Parameters Type Name Description Type controllerType The type of controller to load the model for. InputSourceType inputSourceType Whether the model represents a hand or a controller. Returns Type Description Boolean True if a model was successfully loaded or model rendering is disabled. False if a model tried to load but failed. Implements IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseControllerPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseControllerPointer.html",
    "title": "Class BaseControllerPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseControllerPointer Base Pointer class for pointers that exist in the scene as GameObjects. Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer BaseControllerPointer BaseMousePointer LinePointer PokePointer SpherePointer TouchPointer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityPointer IEqualityComparer Inherited Members ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Single>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseControllerPointer : ControllerPoseSynchronizer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityPointer, IEqualityComparer Fields HasSelectPressedOnce True if select has been pressed once since this component was enabled Declaration protected bool HasSelectPressedOnce Field Value Type Description Boolean IsHoldPressed Declaration protected bool IsHoldPressed Field Value Type Description Boolean IsSelectPressed True if select is pressed right now Declaration protected bool IsSelectPressed Field Value Type Description Boolean pointerAction Declaration protected MixedRealityInputAction pointerAction Field Value Type Description MixedRealityInputAction raycastOrigin Declaration protected Transform raycastOrigin Field Value Type Description Transform Properties BaseCursor The pointer's cursor. Declaration public IMixedRealityCursor BaseCursor { get; set; } Property Value Type Description IMixedRealityCursor Controller The current controller reference. Declaration public override IMixedRealityController Controller { get; set; } Property Value Type Description IMixedRealityController Overrides ControllerPoseSynchronizer.Controller CursorModifier The currently active cursor modifier. Declaration public ICursorModifier CursorModifier { get; set; } Property Value Type Description ICursorModifier DefaultPointerExtent The length of the pointer when nothing is hit. Declaration public float DefaultPointerExtent { get; set; } Property Value Type Description Single DisableCursorOnStart Declaration protected bool DisableCursorOnStart { get; } Property Value Type Description Boolean FocusTarget The currently focused target. Declaration public IMixedRealityFocusHandler FocusTarget { get; set; } Property Value Type Description IMixedRealityFocusHandler InputSourceParent This pointer's input source parent. Declaration public IMixedRealityInputSource InputSourceParent { get; protected set; } Property Value Type Description IMixedRealityInputSource IsActive Declaration public virtual bool IsActive { get; set; } Property Value Type Description Boolean IsFocusLocked Is the focus for this pointer currently locked? Declaration public bool IsFocusLocked { get; set; } Property Value Type Description Boolean IsInteractionEnabled Is the pointer active and have the conditions for the interaction been satisfied to enable the interaction? Declaration public virtual bool IsInteractionEnabled { get; } Property Value Type Description Boolean IsTargetPositionLockedOnFocusLock Specifies whether the pointer's target position (cursor) is locked to the target object when focus is locked. Most pointers want the cursor to \"stick\" to the object when manipulating, so set this to true by default. Declaration public virtual bool IsTargetPositionLockedOnFocusLock { get; set; } Property Value Type Description Boolean PointerExtent Maximum distance at which all pointers can collide with a GameObject , unless it has an override extent. Declaration public float PointerExtent { get; set; } Property Value Type Description Single PointerId This pointer's id. Declaration public uint PointerId { get; } Property Value Type Description UInt32 PointerName This pointer's name. Declaration public string PointerName { get; set; } Property Value Type Description String Position Pointer position. Declaration public virtual Vector3 Position { get; } Property Value Type Description Vector3 PrioritizedLayerMasksOverride The physics layers to use when performing scene queries. Declaration public LayerMask[] PrioritizedLayerMasksOverride { get; set; } Property Value Type Description LayerMask [] Remarks If set, will override the IMixedRealityInputSystem 's default scene query layer mask array. Rays The scene query rays. Declaration public RayStep[] Rays { get; protected set; } Property Value Type Description RayStep [] RayStabilizer Ray stabilizer used when calculating position of pointer end point. Declaration public IBaseRayStabilizer RayStabilizer { get; set; } Property Value Type Description IBaseRayStabilizer Result The scene query pointer result. Declaration public IPointerResult Result { get; set; } Property Value Type Description IPointerResult Rotation Pointer rotation. Declaration public virtual Quaternion Rotation { get; } Property Value Type Description Quaternion SceneQueryType The type of physics scene query to use. Declaration public virtual SceneQueryType SceneQueryType { get; set; } Property Value Type Description SceneQueryType SphereCastRadius The radius to use when SceneQueryType is set to Sphere or SphereColliders. Declaration public float SphereCastRadius { get; set; } Property Value Type Description Single Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 OnDisable() Declaration protected override void OnDisable() Overrides InputSystemGlobalHandlerListener.OnDisable() OnEnable() Declaration protected override void OnEnable() Overrides InputSystemGlobalHandlerListener.OnEnable() OnInputDown(InputEventData) Input Down updates from Interactions, Keys, or any other simple input. Declaration public override void OnInputDown(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides ControllerPoseSynchronizer.OnInputDown(InputEventData) OnInputUp(InputEventData) Input Up updates from Interactions, Keys, or any other simple input. Declaration public override void OnInputUp(InputEventData eventData) Parameters Type Name Description InputEventData eventData Overrides ControllerPoseSynchronizer.OnInputUp(InputEventData) OnPostSceneQuery() Called after performing the scene query. Declaration public virtual void OnPostSceneQuery() OnPreCurrentPointerTargetChange() Called during the scene query just before the current pointer target changes. Declaration public virtual void OnPreCurrentPointerTargetChange() OnPreSceneQuery() Called before performing the scene query. Declaration public virtual void OnPreSceneQuery() OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public override void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData Overrides ControllerPoseSynchronizer.OnSourceLost(SourceStateEventData) SetCursor(GameObject) Set a new cursor for this IMixedRealityPointer Declaration public virtual void SetCursor(GameObject newCursor = null) Parameters Type Name Description GameObject newCursor The new cursor Remarks This GameObject must have a IMixedRealityCursor attached to it. Start() Declaration protected override void Start() Overrides InputSystemGlobalHandlerListener.Start() Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityPointer IEqualityComparer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseCursor.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseCursor.html",
    "title": "Class BaseCursor | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseCursor Object that represents a cursor in 3D space. Inheritance Object BaseCursor AnimatedCursor FingerCursor InteractiveMeshCursor MeshCursor ObjectCursor SpriteCursor Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class BaseCursor : MonoBehaviour, IMixedRealityCursor, IMixedRealityFocusChangedHandler, IMixedRealitySourceStateHandler, IMixedRealityPointerHandler, IEventSystemHandler Fields PrimaryCursorVisual Declaration protected Transform PrimaryCursorVisual Field Value Type Description Transform SourceDownIds Declaration public List<uint> SourceDownIds Field Value Type Description List < UInt32 > TargetedObject Declaration protected GameObject TargetedObject Field Value Type Description GameObject targetPosition Declaration protected Vector3 targetPosition Field Value Type Description Vector3 targetRotation Declaration protected Quaternion targetRotation Field Value Type Description Quaternion targetScale Declaration protected Vector3 targetScale Field Value Type Description Vector3 Properties CursorAngularScale The angular scale of cursor in relation to Main Camera, assuming a mesh with bounds of Vector3(1,1,1) Declaration public float CursorAngularScale { get; set; } Property Value Type Description Single CursorAngularSize The angular size of cursor in relation to Main Camera, assuming a mesh with bounds of Vector3(1,1,1) Declaration public float CursorAngularSize { get; set; } Property Value Type Description Single CursorContext Declaration public CursorContextEnum CursorContext { get; } Property Value Type Description CursorContextEnum CursorState Declaration public CursorStateEnum CursorState { get; } Property Value Type Description CursorStateEnum DefaultCursorDistance The maximum distance the cursor can be with nothing hit Declaration public float DefaultCursorDistance { get; set; } Property Value Type Description Single GameObjectReference Returns the IMixedRealityCursor 's GameObject reference. Declaration public GameObject GameObjectReference { get; } Property Value Type Description GameObject The GameObject this IMixedRealityCursor component is attached to. IsPointerDown Declaration public bool IsPointerDown { get; } Property Value Type Description Boolean IsPointerValid Checks whether the associated pointer is null, and if the pointer is a UnityEngine.Object it also checks whether it has been destroyed. Declaration protected bool IsPointerValid { get; } Property Value Type Description Boolean IsSourceDetected Declaration protected bool IsSourceDetected { get; } Property Value Type Description Boolean IsVisible Is the cursor currently visible? Declaration public bool IsVisible { get; } Property Value Type Description Boolean LocalScale Local scale of the IMixedRealityCursor . Declaration public virtual Vector3 LocalScale { get; } Property Value Type Description Vector3 LookRotationBlend Blend value for surface normal to user facing lerp. Declaration public float LookRotationBlend { get; set; } Property Value Type Description Single Pointer The IMixedRealityPointer this IMixedRealityCursor is associated with. Declaration public virtual IMixedRealityPointer Pointer { get; set; } Property Value Type Description IMixedRealityPointer Position Position of the IMixedRealityCursor . Declaration public virtual Vector3 Position { get; } Property Value Type Description Vector3 PositionLerpTime Blend value for surface normal to user facing lerp. Declaration public float PositionLerpTime { get; set; } Property Value Type Description Single ResizeCursorWithDistance Dictates whether the cursor should resize based on distance. If true, cursor will appear to be the same size no matter what distance it is from Main Camera. Declaration public bool ResizeCursorWithDistance { get; set; } Property Value Type Description Boolean Rotation Rotation of the IMixedRealityCursor . Declaration public virtual Quaternion Rotation { get; } Property Value Type Description Quaternion RotationLerpTime Blend value for surface normal to user facing lerp. Declaration public float RotationLerpTime { get; set; } Property Value Type Description Single ScaleLerpTime Blend value for surface normal to user facing lerp. Declaration public float ScaleLerpTime { get; set; } Property Value Type Description Single SetVisibilityOnSourceDetected Sets the visibility of the IMixedRealityCursor when the source is detected. Declaration public bool SetVisibilityOnSourceDetected { get; set; } Property Value Type Description Boolean SurfaceCursorDistance Declaration public float SurfaceCursorDistance { get; } Property Value Type Description Single UseUnscaledTime When lerping, use unscaled time. This is useful for games that have a pause mechanism or otherwise adjust the game timescale. Declaration public bool UseUnscaledTime { get; set; } Property Value Type Description Boolean VisibleSourcesCount Declaration public uint VisibleSourcesCount { get; set; } Property Value Type Description UInt32 Methods CheckCursorContext() Virtual function for checking cursor context changes. Declaration public virtual CursorContextEnum CheckCursorContext() Returns Type Description CursorContextEnum CheckCursorState() Virtual function for checking state changes. Declaration public virtual CursorStateEnum CheckCursorState() Returns Type Description CursorStateEnum Destroy() Utility method to destroy cursor dependencies (e.g. event subscriptions) in the system explicitly in the middle update loop. This is a \"replacement\" of Unity OnDestroy. Relying on Unity OnDestroy may cause event handler subscription to become invalid at the point of destroying. Declaration public virtual void Destroy() LerpToTargetTransform() Declaration protected void LerpToTargetTransform() OnBeforeFocusChange(FocusEventData) Focus event that is raised before the focus is actually changed. Declaration public virtual void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Remarks Useful for logic that needs to take place before focus changes. OnCursorContextChange(CursorContextEnum) Change the cursor context state to the new context. Override in cursor implementations. Declaration public virtual void OnCursorContextChange(CursorContextEnum context) Parameters Type Name Description CursorContextEnum context OnCursorStateChange(CursorStateEnum) Change the cursor state to the new state. Override in cursor implementations. Declaration public virtual void OnCursorStateChange(CursorStateEnum state) Parameters Type Name Description CursorStateEnum state OnDisable() Declaration protected virtual void OnDisable() OnEnable() Declaration protected virtual void OnEnable() OnFocusChanged(FocusEventData) Focus event that is raised when the focused object is changed. Declaration public virtual void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnInputDisabled() Disable input and set to contextual to override input Declaration public virtual void OnInputDisabled() OnInputEnabled() Enable input and set to none to reset cursor Declaration public virtual void OnInputEnabled() OnPointerClicked(MixedRealityPointerEventData) When a pointer clicked event is raised, this method is used to pass along the event data to the input handler. Declaration public virtual void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) When a pointer down event is raised, this method is used to pass along the event data to the input handler. Declaration public virtual void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Called every frame a pointer is down. Can be used to implement drag-like behaviors. Declaration public virtual void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) When a pointer up event is raised, this method is used to pass along the event data to the input handler. Declaration public virtual void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnSourceDetected(SourceStateEventData) Raised when a source is detected. Declaration public virtual void OnSourceDetected(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData OnSourceLost(SourceStateEventData) Raised when a source is lost. Declaration public virtual void OnSourceLost(SourceStateEventData eventData) Parameters Type Name Description SourceStateEventData eventData RegisterManagers() Register to events from the managers the cursor needs. Declaration protected virtual void RegisterManagers() SetVisibility(Boolean) Declaration public virtual void SetVisibility(bool visible) Parameters Type Name Description Boolean visible SnapToTargetTransform() Declaration protected void SnapToTargetTransform() Start() Declaration protected virtual void Start() UnregisterManagers() Unregister from events from the managers the cursor needs. Declaration protected virtual void UnregisterManagers() UpdateCursorTransform() Update the cursor's transform Declaration protected virtual void UpdateCursorTransform() Implements IMixedRealityCursor IMixedRealityFocusChangedHandler IMixedRealitySourceStateHandler IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseEyeFocusHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseEyeFocusHandler.html",
    "title": "Class BaseEyeFocusHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseEyeFocusHandler Base Component for handling Eye Focus on GameObject s. Inheritance Object BaseFocusHandler BaseEyeFocusHandler Implements IMixedRealityFocusHandler IMixedRealityFocusChangedHandler IEventSystemHandler Inherited Members BaseFocusHandler.FocusEnabled BaseFocusHandler.HasFocus BaseFocusHandler.Focusers BaseFocusHandler.OnFocusEnter(FocusEventData) BaseFocusHandler.OnFocusExit(FocusEventData) BaseFocusHandler.OnFocusChanged(FocusEventData) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseEyeFocusHandler : BaseFocusHandler, IMixedRealityFocusHandler, IMixedRealityFocusChangedHandler, IEventSystemHandler Methods OnBeforeFocusChange(FocusEventData) Focus event that is raised before the focus is actually changed. Declaration public override void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Overrides BaseFocusHandler.OnBeforeFocusChange(FocusEventData) Remarks Useful for logic that needs to take place before focus changes. OnEyeFocusDwell() Triggered once the eye gaze ray has intersected with this target's collider for a specified amount of time. Declaration protected virtual void OnEyeFocusDwell() OnEyeFocusStart() Triggered once the eye gaze ray starts intersecting with this target's collider. Declaration protected virtual void OnEyeFocusStart() OnEyeFocusStay() Triggered while the eye gaze ray is intersecting with this target's collider. Declaration protected virtual void OnEyeFocusStay() OnEyeFocusStop() Triggered once the eye gaze ray stops intersecting with this target's collider. Declaration protected virtual void OnEyeFocusStop() Update() Handles highlighting targets when the cursor enters its hit box. Declaration protected virtual void Update() Implements IMixedRealityFocusHandler IMixedRealityFocusChangedHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.BaseFocusHandler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.BaseFocusHandler.html",
    "title": "Class BaseFocusHandler | Mixed Reality Toolkit Documentation",
    "keywords": "Class BaseFocusHandler Base Component for handling Focus on GameObject s. Inheritance Object BaseFocusHandler BaseEyeFocusHandler Implements IMixedRealityFocusHandler IMixedRealityFocusChangedHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public abstract class BaseFocusHandler : MonoBehaviour, IMixedRealityFocusHandler, IMixedRealityFocusChangedHandler, IEventSystemHandler Properties FocusEnabled Is focus enabled for this Component ? Declaration public virtual bool FocusEnabled { get; set; } Property Value Type Description Boolean Focusers The list of IMixedRealityPointer s that are currently focused on this GameObject Declaration public List<IMixedRealityPointer> Focusers { get; } Property Value Type Description List < IMixedRealityPointer > HasFocus Does this object currently have focus by any IMixedRealityPointer ? Declaration public virtual bool HasFocus { get; } Property Value Type Description Boolean Methods OnBeforeFocusChange(FocusEventData) Focus event that is raised before the focus is actually changed. Declaration public virtual void OnBeforeFocusChange(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Remarks Useful for logic that needs to take place before focus changes. OnFocusChanged(FocusEventData) Focus event that is raised when the focused object is changed. Declaration public virtual void OnFocusChanged(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusEnter(FocusEventData) The Focus Enter event is raised on this GameObject whenever a IMixedRealityPointer 's focus enters this GameObject 's Collider . Declaration public virtual void OnFocusEnter(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData OnFocusExit(FocusEventData) The Focus Exit event is raised on this GameObject whenever a IMixedRealityPointer 's focus leaves this GameObject 's Collider . Declaration public virtual void OnFocusExit(FocusEventData eventData) Parameters Type Name Description FocusEventData eventData Implements IMixedRealityFocusHandler IMixedRealityFocusChangedHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandData.HandJointDataGenerator.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandData.HandJointDataGenerator.html",
    "title": "Delegate SimulatedHandData.HandJointDataGenerator | Mixed Reality Toolkit Documentation",
    "keywords": "Delegate SimulatedHandData.HandJointDataGenerator Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public delegate void HandJointDataGenerator(MixedRealityPose[] jointPoses); Parameters Type Name Description MixedRealityPose [] jointPoses"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.SimulatedHandData.html",
    "title": "Class SimulatedHandData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SimulatedHandData Snapshot of simulated hand data. Inheritance Object SimulatedHandData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Serializable] public class SimulatedHandData Properties IsPinching Declaration public bool IsPinching { get; } Property Value Type Description Boolean IsTracked Declaration public bool IsTracked { get; } Property Value Type Description Boolean Joints Declaration public MixedRealityPose[] Joints { get; } Property Value Type Description MixedRealityPose [] Methods Copy(SimulatedHandData) Declaration public void Copy(SimulatedHandData other) Parameters Type Name Description SimulatedHandData other Update(Boolean, Boolean, SimulatedHandData.HandJointDataGenerator) Replace the hand data with the given values. Declaration public bool Update(bool isTrackedNew, bool isPinchingNew, SimulatedHandData.HandJointDataGenerator generator) Parameters Type Name Description Boolean isTrackedNew True if the hand is currently tracked. Boolean isPinchingNew True if the hand is in a pinching pose that causes a \"Select\" action. SimulatedHandData.HandJointDataGenerator generator Generator function that produces joint positions and rotations. The joint data generator is only used when the hand is tracked. Returns Type Description Boolean True if the hand data has been changed. Remarks The timestamp of the hand data will be the current time, see DateTime.UtcNow ."
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Services.TestBaseDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Services.TestBaseDataProvider.html",
    "title": "Class TestBaseDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestBaseDataProvider Base class for test data providers Inheritance Object BaseService BaseDataProvider < IMixedRealityService > TestBaseDataProvider TestInputDataProvider TestSpatialAwarenessDataProvider Implements IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseDataProvider<IMixedRealityService>.Registrar BaseDataProvider<IMixedRealityService>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Update() BaseService.LateUpdate() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.Services Assembly : cs.temp.dll.dll Syntax public class TestBaseDataProvider : BaseDataProvider<IMixedRealityService>, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors TestBaseDataProvider(IMixedRealityService, String, UInt32, BaseMixedRealityProfile) Declaration public TestBaseDataProvider(IMixedRealityService service, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityService service String name UInt32 priority BaseMixedRealityProfile profile Properties IsEnabled Declaration public bool IsEnabled { get; } Property Value Type Description Boolean IsInitialized Declaration public bool IsInitialized { get; } Property Value Type Description Boolean Methods Destroy() Declaration public override void Destroy() Overrides BaseService.Destroy() Disable() Declaration public override void Disable() Overrides BaseService.Disable() Enable() Declaration public override void Enable() Overrides BaseService.Enable() Initialize() Declaration public override void Initialize() Overrides BaseService.Initialize() Reset() Declaration public override void Reset() Overrides BaseService.Reset() Implements IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Services.TestInputDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Services.TestInputDataProvider.html",
    "title": "Class TestInputDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestInputDataProvider Dummy test IMixedRealityInputDeviceManager implementation only used for testing Inheritance Object BaseService BaseDataProvider < IMixedRealityService > TestBaseDataProvider TestInputDataProvider Implements IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityInputDeviceManager Inherited Members TestBaseDataProvider.IsEnabled TestBaseDataProvider.IsInitialized TestBaseDataProvider.Initialize() TestBaseDataProvider.Reset() TestBaseDataProvider.Enable() TestBaseDataProvider.Disable() TestBaseDataProvider.Destroy() BaseDataProvider<IMixedRealityService>.Registrar BaseDataProvider<IMixedRealityService>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Update() BaseService.LateUpdate() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.Services Assembly : cs.temp.dll.dll Syntax public class TestInputDataProvider : TestBaseDataProvider, ITestInputDataProvider, IMixedRealityDataProvider, ITestService, IMixedRealityService, IDisposable, IMixedRealityInputDeviceManager Constructors TestInputDataProvider(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Declaration public TestInputDataProvider(IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityInputSystem inputSystem String name UInt32 priority BaseMixedRealityProfile profile Methods GetActiveControllers() Declaration public IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController [] Implements IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityInputDeviceManager"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Services.TestSpatialAwarenessDataProvider.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Services.TestSpatialAwarenessDataProvider.html",
    "title": "Class TestSpatialAwarenessDataProvider | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestSpatialAwarenessDataProvider Dummy test IMixedRealitySpatialAwarenessObserver implementation only used for testing Inheritance Object BaseService BaseDataProvider < IMixedRealityService > TestBaseDataProvider TestSpatialAwarenessDataProvider Implements IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealitySpatialAwarenessObserver IMixedRealitySpatialAwarenessMeshObserver Inherited Members TestBaseDataProvider.IsEnabled TestBaseDataProvider.IsInitialized TestBaseDataProvider.Initialize() TestBaseDataProvider.Reset() TestBaseDataProvider.Enable() TestBaseDataProvider.Disable() TestBaseDataProvider.Destroy() BaseDataProvider<IMixedRealityService>.Registrar BaseDataProvider<IMixedRealityService>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Update() BaseService.LateUpdate() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.Services Assembly : cs.temp.dll.dll Syntax public class TestSpatialAwarenessDataProvider : TestBaseDataProvider, ITestSpatialAwarenessDataProvider, IMixedRealityDataProvider, ITestService, IMixedRealityService, IDisposable, IMixedRealitySpatialAwarenessObserver, IMixedRealitySpatialAwarenessMeshObserver Constructors TestSpatialAwarenessDataProvider(IMixedRealitySpatialAwarenessSystem, String, UInt32, BaseMixedRealityProfile) Declaration public TestSpatialAwarenessDataProvider(IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealitySpatialAwarenessSystem spatialAwarenessSystem String name UInt32 priority BaseMixedRealityProfile profile Properties DefaultPhysicsLayer Declaration public int DefaultPhysicsLayer { get; } Property Value Type Description Int32 DisplayOption Declaration public SpatialAwarenessMeshDisplayOptions DisplayOption { get; set; } Property Value Type Description SpatialAwarenessMeshDisplayOptions IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean IsStationaryObserver Declaration public bool IsStationaryObserver { get; set; } Property Value Type Description Boolean LevelOfDetail Declaration public SpatialAwarenessMeshLevelOfDetail LevelOfDetail { get; set; } Property Value Type Description SpatialAwarenessMeshLevelOfDetail Meshes Declaration public IReadOnlyDictionary<int, SpatialAwarenessMeshObject> Meshes { get; } Property Value Type Description IReadOnlyDictionary < Int32 , SpatialAwarenessMeshObject > MeshPhysicsLayer Declaration public int MeshPhysicsLayer { get; set; } Property Value Type Description Int32 MeshPhysicsLayerMask Declaration public int MeshPhysicsLayerMask { get; } Property Value Type Description Int32 ObservationExtents Declaration public Vector3 ObservationExtents { get; set; } Property Value Type Description Vector3 ObserverOrigin Declaration public Vector3 ObserverOrigin { get; set; } Property Value Type Description Vector3 ObserverRotation Declaration public Quaternion ObserverRotation { get; set; } Property Value Type Description Quaternion ObserverVolumeType Declaration public VolumeType ObserverVolumeType { get; set; } Property Value Type Description VolumeType OcclusionMaterial Declaration public Material OcclusionMaterial { get; set; } Property Value Type Description Material RecalculateNormals Declaration public bool RecalculateNormals { get; set; } Property Value Type Description Boolean SourceId Declaration public uint SourceId { get; } Property Value Type Description UInt32 SourceName Declaration public string SourceName { get; } Property Value Type Description String StartupBehavior Declaration public AutoStartBehavior StartupBehavior { get; set; } Property Value Type Description AutoStartBehavior TrianglesPerCubicMeter Declaration public int TrianglesPerCubicMeter { get; set; } Property Value Type Description Int32 UpdateInterval Declaration public float UpdateInterval { get; set; } Property Value Type Description Single VisibleMaterial Declaration public Material VisibleMaterial { get; set; } Property Value Type Description Material Methods ClearObservations() Declaration public void ClearObservations() Equals(Object, Object) Declaration public bool Equals(object x, object y) Parameters Type Name Description Object x Object y Returns Type Description Boolean GetHashCode(Object) Declaration public int GetHashCode(object obj) Parameters Type Name Description Object obj Returns Type Description Int32 Resume() Declaration public void Resume() Suspend() Declaration public void Suspend() Implements IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealitySpatialAwarenessObserver IMixedRealitySpatialAwarenessMeshObserver"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.Services.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.Services.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.Services | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.Services Classes TestBaseDataProvider Base class for test data providers TestInputDataProvider Dummy test IMixedRealityInputDeviceManager implementation only used for testing TestSpatialAwarenessDataProvider Dummy test IMixedRealitySpatialAwarenessObserver implementation only used for testing"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SlateTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SlateTests.html",
    "title": "Class SlateTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class SlateTests Inheritance Object SlateTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class SlateTests Methods Instantiate_GGVScroll() Test hand ray scroll instantiated from prefab Declaration public IEnumerator Instantiate_GGVScroll() Returns Type Description IEnumerator Prefab_GGVScroll() Test ggv scroll instantiated from prefab Declaration public IEnumerator Prefab_GGVScroll() Returns Type Description IEnumerator Prefab_RayScroll() Test hand ray scroll instantiated from prefab Declaration public IEnumerator Prefab_RayScroll() Returns Type Description IEnumerator Prefab_TouchScroll() Tests touch scrolling instantiated from prefab Declaration public IEnumerator Prefab_TouchScroll() Returns Type Description IEnumerator Prefab_TouchZoom() Test touch zooming instantiated from prefab Declaration public IEnumerator Prefab_TouchZoom() Returns Type Description IEnumerator Setup() Declaration public void Setup() TearDown() Declaration public void TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SolverTests.SetupData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SolverTests.SetupData.html",
    "title": "Class SolverTests.SetupData | Mixed Reality Toolkit Documentation",
    "keywords": "Class SolverTests.SetupData Internal class used to store data for setup Inheritance Object SolverTests.SetupData Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax protected class SetupData Fields handler Declaration public SolverHandler handler Field Value Type Description SolverHandler solver Declaration public Solver solver Field Value Type Description Solver target Declaration public GameObject target Field Value Type Description GameObject"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SolverTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SolverTests.html",
    "title": "Class SolverTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class SolverTests Inheritance Object BasePlayModeTests SolverTests Inherited Members BasePlayModeTests.Setup() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class SolverTests : BasePlayModeTests Methods TearDown() Declaration public override void TearDown() Overrides BasePlayModeTests.TearDown() TestDirectionalIndicator() Test solver system's ability to add multiple solvers at runtime and switch between them. Declaration public IEnumerator TestDirectionalIndicator() Returns Type Description IEnumerator TestHandConstraint() Test the HandConstraint to make sure it tracks hands correctly. Declaration public IEnumerator TestHandConstraint() Returns Type Description IEnumerator TestHandModality() Tests solver handler's ability to switch hands Declaration public IEnumerator TestHandModality() Returns Type Description IEnumerator TestInBetween() Test solver system's ability to change target types at runtime Declaration public IEnumerator TestInBetween() Returns Type Description IEnumerator TestOverlap() Test the Overlap solver and make sure it tracks the left simulated hand exactly Declaration public IEnumerator TestOverlap() Returns Type Description IEnumerator TestRuntimeInstantiation() Test adding solver dynamically at runtime to GameObject Declaration public IEnumerator TestRuntimeInstantiation() Returns Type Description IEnumerator TestSolverSwap() Test solver system's ability to add multiple solvers at runtime and switch between them. Declaration public IEnumerator TestSolverSwap() Returns Type Description IEnumerator TestSurfaceMagnetism() Test Surface Magnetism against \"wall\" and that attached object falls head direction Declaration public IEnumerator TestSurfaceMagnetism() Returns Type Description IEnumerator TestTargetTypes() Test solver system's ability to change target types at runtime Declaration public IEnumerator TestTargetTypes() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem.SpatialAwarenessSystemTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem.SpatialAwarenessSystemTests.html",
    "title": "Class SpatialAwarenessSystemTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpatialAwarenessSystemTests Inheritance Object SpatialAwarenessSystemTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem Assembly : cs.temp.dll.dll Syntax public class SpatialAwarenessSystemTests Methods TearDown() Declaration public void TearDown() TestDataProviderRegisteration() Declaration public void TestDataProviderRegisteration() TestEmptyDataProvider() Declaration public void TestEmptyDataProvider() TestGetSpatialAwarenessSystem() Declaration public void TestGetSpatialAwarenessSystem() TestSpatialAwarenessSystemDoesNotExist() Declaration public void TestSpatialAwarenessSystemDoesNotExist() TestSpatialAwarenessSystemExists() Declaration public void TestSpatialAwarenessSystemExists()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Tests.SpatialAwarenessSystem Classes SpatialAwarenessSystemTests"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SpeechTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SpeechTests.html",
    "title": "Class SpeechTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpeechTests Inheritance Object SpeechTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class SpeechTests Methods Setup() Declaration public void Setup() TearDown() Declaration public void TearDown() TestToggleProfilerCommand() Declaration public IEnumerator TestToggleProfilerCommand() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.SpherePointerTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.SpherePointerTests.html",
    "title": "Class SpherePointerTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class SpherePointerTests Inheritance Object BasePlayModeTests SpherePointerTests Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class SpherePointerTests : BasePlayModeTests Methods GrabLayerMasks() Verifies that SpherePointer correctly returns IsNearObject and IsInteractionEnabled only when it is near a grabbable object, on the correct grabbable layer. Declaration public IEnumerator GrabLayerMasks() Returns Type Description IEnumerator Setup() Declaration public override void Setup() Overrides BasePlayModeTests.Setup() SpherePointerDistances() Verifies that the IsNearObject and IsInteractionEnabled get set at the correct times as a hand approaches a grabbable object Declaration public IEnumerator SpherePointerDistances() Returns Type Description IEnumerator TearDown() Declaration public override void TearDown() Overrides BasePlayModeTests.TearDown()"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.StandardShaderTests.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.StandardShaderTests.html",
    "title": "Class StandardShaderTests | Mixed Reality Toolkit Documentation",
    "keywords": "Class StandardShaderTests Inheritance Object BasePlayModeTests StandardShaderTests Inherited Members BasePlayModeTests.Setup() BasePlayModeTests.TearDown() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class StandardShaderTests : BasePlayModeTests Methods TestMeshOutline() Tests if the MeshOutline component can be added and manipulated at runtime. Declaration public IEnumerator TestMeshOutline() Returns Type Description IEnumerator TestMeshOutlineHierarchy() Tests if the MeshOutlineHierarchy component can be added and manipulated at runtime. Declaration public IEnumerator TestMeshOutlineHierarchy() Returns Type Description IEnumerator TestMeshSmoother() Tests if the MeshSmoother component can be added an manipulated at runtime. Declaration public IEnumerator TestMeshSmoother() Returns Type Description IEnumerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.TestPointer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.TestPointer.html",
    "title": "Class TestPointer | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestPointer A simple pointer that is just used for Unity play mode tests. It doesn't update anything itself - it is expected that any test using it will manually update data as necessary. If you would like to setup pointer parameters in data (e.g. a prefab), you can use FocusRaycastTestProxy . Inheritance Object TestPointer Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public class TestPointer : GenericPointer Constructors TestPointer() Declaration public TestPointer() Properties Position Declaration public override Vector3 Position { get; } Property Value Type Description Vector3 Rotation Declaration public override Quaternion Rotation { get; } Property Value Type Description Quaternion Methods OnPostSceneQuery() Declaration public override void OnPostSceneQuery() OnPreCurrentPointerTargetChange() Declaration public override void OnPreCurrentPointerTargetChange() OnPreSceneQuery() Declaration public override void OnPreSceneQuery() SetFromTestProxy(FocusRaycastTestProxy) Initialize all applicable settings on this pointer from testProxy and then set this pointer active, so that it will update its Result in the next Update() . Declaration public void SetFromTestProxy(FocusRaycastTestProxy testProxy) Parameters Type Name Description FocusRaycastTestProxy testProxy"
  },
  "api/Microsoft.MixedReality.Toolkit.Tests.TestUtilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Tests.TestUtilities.html",
    "title": "Class TestUtilities | Mixed Reality Toolkit Documentation",
    "keywords": "Class TestUtilities Inheritance Object TestUtilities Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Tests Assembly : cs.temp.dll.dll Syntax public static class TestUtilities Fields additiveTestScenes Declaration public static Scene[] additiveTestScenes Field Value Type Description Scene [] primaryTestScene Declaration public static Scene primaryTestScene Field Value Type Description Scene Methods AssertAboutEqual(Quaternion, Quaternion, String, Single) Declaration public static void AssertAboutEqual(Quaternion actual, Quaternion expected, string message, float tolerance = 0.01F) Parameters Type Name Description Quaternion actual Quaternion expected String message Single tolerance AssertAboutEqual(Vector3, Vector3, String, Single) Declaration public static void AssertAboutEqual(Vector3 actual, Vector3 expected, string message, float tolerance = 0.01F) Parameters Type Name Description Vector3 actual Vector3 expected String message Single tolerance AssertNotAboutEqual(Quaternion, Quaternion, String, Single) Declaration public static void AssertNotAboutEqual(Quaternion val1, Quaternion val2, string message, float tolerance = 0.01F) Parameters Type Name Description Quaternion val1 Quaternion val2 String message Single tolerance AssertNotAboutEqual(Vector3, Vector3, String, Single) Declaration public static void AssertNotAboutEqual(Vector3 val1, Vector3 val2, string message, float tolerance = 0.01F) Parameters Type Name Description Vector3 val1 Vector3 val2 String message Single tolerance EditorCreateScenes(Int32) Creates a number of scenes and loads them additively for testing. Must create a minimum of 1. Used only in editor tests. Declaration public static void EditorCreateScenes(int numScenesToCreate = 1) Parameters Type Name Description Int32 numScenesToCreate EditorTearDownScenes() Destroys all scene assets that were created over the course of testing. Used only in editor tests. Declaration public static void EditorTearDownScenes() InitializeCamera() Declaration public static void InitializeCamera() InitializeMixedRealityToolkit(MixedRealityToolkitConfigurationProfile) Declaration public static void InitializeMixedRealityToolkit(MixedRealityToolkitConfigurationProfile configuration) Parameters Type Name Description MixedRealityToolkitConfigurationProfile configuration InitializeMixedRealityToolkit(Boolean) Declaration public static void InitializeMixedRealityToolkit(bool useDefaultProfile = false) Parameters Type Name Description Boolean useDefaultProfile InitializeMixedRealityToolkitAndCreateScenes(Boolean, Int32) Creates the requested number of scenes, then creates one instance of the MixedRealityToolkit in the active scene. Declaration public static void InitializeMixedRealityToolkitAndCreateScenes(bool useDefaultProfile = false, int numScenesToCreate = 1) Parameters Type Name Description Boolean useDefaultProfile Int32 numScenesToCreate InitializePlayspace() Creates a playspace and moves it into a default position. Declaration public static void InitializePlayspace() PlayspaceToOriginLookingForward() Forces the playspace camera to face forward. Declaration public static void PlayspaceToOriginLookingForward() ShutdownMixedRealityToolkit() Declaration public static void ShutdownMixedRealityToolkit()"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfNormalTextureInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfNormalTextureInfo.html",
    "title": "Class GltfNormalTextureInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfNormalTextureInfo https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.normalTextureInfo.schema.json Inheritance Object GltfProperty GltfTextureInfo GltfNormalTextureInfo Inherited Members GltfTextureInfo.index GltfTextureInfo.textCoord GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfNormalTextureInfo : GltfTextureInfo Fields scale The scalar multiplier applied to each normal vector of the texture. This value is ignored if normalTexture is not specified. This value is linear. Declaration public double scale Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfObject.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfObject.html",
    "title": "Class GltfObject | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfObject Inheritance Object GltfProperty GltfObject Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfObject : GltfProperty Fields accessors An array of accessors. An accessor is a typed view into a bufferView. Declaration public GltfAccessor[] accessors Field Value Type Description GltfAccessor [] animations An array of keyframe animations. Declaration public GltfAnimation[] animations Field Value Type Description GltfAnimation [] asset Metadata about the glTF asset. Declaration public GltfAssetInfo asset Field Value Type Description GltfAssetInfo buffers An array of buffers. A buffer points to binary geometry, animation, or skins. Declaration public GltfBuffer[] buffers Field Value Type Description GltfBuffer [] bufferViews An array of bufferViews. A bufferView is a view into a buffer generally representing a subset of the buffer. Declaration public GltfBufferView[] bufferViews Field Value Type Description GltfBufferView [] cameras An array of cameras. A camera defines a projection matrix. Declaration public GltfCamera[] cameras Field Value Type Description GltfCamera [] extensionsRequired Names of glTF extensions required to properly load this asset. Declaration public string[] extensionsRequired Field Value Type Description String [] extensionsUsed Names of glTF extensions used somewhere in this asset. Declaration public string[] extensionsUsed Field Value Type Description String [] images An array of images. An image defines data used to create a texture. Declaration public GltfImage[] images Field Value Type Description GltfImage [] materials An array of materials. A material defines the appearance of a primitive. Declaration public GltfMaterial[] materials Field Value Type Description GltfMaterial [] meshes An array of meshes. A mesh is a set of primitives to be rendered. Declaration public GltfMesh[] meshes Field Value Type Description GltfMesh [] nodes An array of nodes. Declaration public GltfNode[] nodes Field Value Type Description GltfNode [] samplers An array of samplers. A sampler contains properties for texture filtering and wrapping modes. Declaration public GltfSampler[] samplers Field Value Type Description GltfSampler [] scene The index of the default scene. Declaration public int scene Field Value Type Description Int32 scenes An array of scenes. Declaration public GltfScene[] scenes Field Value Type Description GltfScene [] skins An array of skins. A skin is defined by joints and matrices. Declaration public GltfSkin[] skins Field Value Type Description GltfSkin [] textures An array of textures. Declaration public GltfTexture[] textures Field Value Type Description GltfTexture [] Properties GameObjectReference The GameObject reference for the gltf Object. Declaration public GameObject GameObjectReference { get; } Property Value Type Description GameObject Name The name of the gltf Object. Declaration public string Name { get; } Property Value Type Description String RegisteredExtensions The list of registered glTF extensions found for this object. Declaration public List<GltfExtension> RegisteredExtensions { get; } Property Value Type Description List < GltfExtension > Uri The absolute path to the glTF Object on disk. Declaration public string Uri { get; } Property Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfOcclusionTextureInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfOcclusionTextureInfo.html",
    "title": "Class GltfOcclusionTextureInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfOcclusionTextureInfo https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.occlusionTextureInfo.schema.json Inheritance Object GltfProperty GltfTextureInfo GltfOcclusionTextureInfo Inherited Members GltfTextureInfo.index GltfTextureInfo.textCoord GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfOcclusionTextureInfo : GltfTextureInfo Fields strength A scalar multiplier controlling the amount of occlusion applied. A value of 0.0 means no occlusion. A value of 1.0 means full occlusion. This value is ignored if the corresponding texture is not specified. This value is linear. 0.0 1.0 Declaration public double strength Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfPbrMetallicRoughness.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfPbrMetallicRoughness.html",
    "title": "Class GltfPbrMetallicRoughness | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfPbrMetallicRoughness A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.pbrMetallicRoughness.schema.json Inheritance Object GltfProperty GltfPbrMetallicRoughness Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfPbrMetallicRoughness : GltfProperty Fields baseColorFactor The RGBA components of the base color of the material. The fourth component (A) is the opacity of the material. These values are linear. Declaration public float[] baseColorFactor Field Value Type Description Single [] baseColorTexture The base color texture. This texture contains RGB(A) components in sRGB color space. The first three components (RGB) specify the base color of the material. If the fourth component (A) is present, it represents the opacity of the material. Otherwise, an opacity of 1.0 is assumed. Declaration public GltfTextureInfo baseColorTexture Field Value Type Description GltfTextureInfo metallicFactor The metalness of the material. A value of 1.0 means the material is a metal. A value of 0.0 means the material is a dielectric. Values in between are for blending between metals and dielectrics such as dirty metallic surfaces. This value is linear. Declaration public double metallicFactor Field Value Type Description Double metallicRoughnessTexture The metallic-roughness texture has two components. The first component (R) contains the metallic-ness of the material. The second component (G) contains the roughness of the material. These values are linear. If the third component (B) and/or the fourth component (A) are present, they are ignored. Declaration public GltfTextureInfo metallicRoughnessTexture Field Value Type Description GltfTextureInfo roughnessFactor The roughness of the material. A value of 1.0 means the material is completely rough. A value of 0.0 means the material is completely smooth. This value is linear. Declaration public double roughnessFactor Field Value Type Description Double"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfProperty.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfProperty.html",
    "title": "Class GltfProperty | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfProperty Inheritance Object GltfProperty GltfAccessorSparse GltfAccessorSparseIndices GltfAccessorSparseValues GltfAnimationChannel GltfAnimationChannelTarget GltfAnimationSampler GltfAssetInfo GltfCameraOrthographic GltfCameraPerspective GltfChildOfRootProperty GltfMaterialCommonConstant GltfMeshPrimitive GltfObject GltfPbrMetallicRoughness GltfTextureInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfProperty Fields Extensions https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/extension.schema.json Declaration public readonly Dictionary<string, string> Extensions Field Value Type Description Dictionary < String , String > Extras https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/extras.schema.json Declaration public readonly Dictionary<string, string> Extras Field Value Type Description Dictionary < String , String >"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfSampler.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfSampler.html",
    "title": "Class GltfSampler | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfSampler Texture sampler properties for filtering and wrapping modes. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfSampler Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfSampler : GltfChildOfRootProperty Fields GltfMinFilter Minification filter. All valid values correspond to WebGL enums. Declaration public GltfMinFilterMode GltfMinFilter Field Value Type Description GltfMinFilterMode magFilter Magnification filter. Valid values correspond to WebGL enums: 9728 (NEAREST) and 9729 (LINEAR). Declaration public GltfMagnificationFilterMode magFilter Field Value Type Description GltfMagnificationFilterMode wrapS s wrapping mode. All valid values correspond to WebGL enums. Declaration public GltfWrapMode wrapS Field Value Type Description GltfWrapMode wrapT t wrapping mode. All valid values correspond to WebGL enums. Declaration public GltfWrapMode wrapT Field Value Type Description GltfWrapMode"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfScene.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfScene.html",
    "title": "Class GltfScene | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfScene The indices of each root node. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/scene.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfScene Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfScene : GltfChildOfRootProperty Fields nodes Indices of each root node. Declaration public int[] nodes Field Value Type Description Int32 []"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfSkin.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfSkin.html",
    "title": "Class GltfSkin | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfSkin Joints and matrices defining a skin. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/skin.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfSkin Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfSkin : GltfChildOfRootProperty Fields inverseBindMatrices The index of the accessor containing the floating-point 4x4 inverse-bind matrices. The default is that each matrix is a 4x4 Identity matrix, which implies that inverse-bind matrices were pre-applied. Declaration public int inverseBindMatrices Field Value Type Description Int32 joints Indices of skeleton nodes, used as joints in this skin. The array length must be the same as the count property of the inverseBindMatrices accessor (when defined). Declaration public int[] joints Field Value Type Description Int32 [] skeleton The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root. Declaration public int skeleton Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfTexture.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfTexture.html",
    "title": "Class GltfTexture | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfTexture A texture and its sampler. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/texture.schema.json Inheritance Object GltfProperty GltfChildOfRootProperty GltfTexture Inherited Members GltfChildOfRootProperty.name GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfTexture : GltfChildOfRootProperty Fields sampler The index of the sampler used by this texture. Declaration public int sampler Field Value Type Description Int32 source The index of the image used by this texture. Declaration public int source Field Value Type Description Int32 Properties Texture Unity Texture2D wrapper for GltfTexture Declaration public Texture2D Texture { get; } Property Value Type Description Texture2D"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfTextureInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfTextureInfo.html",
    "title": "Class GltfTextureInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfTextureInfo https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/textureInfo.schema.json Inheritance Object GltfProperty GltfTextureInfo GltfNormalTextureInfo GltfOcclusionTextureInfo Inherited Members GltfProperty.Extensions GltfProperty.Extras Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public class GltfTextureInfo : GltfProperty Fields index The index of the texture. Declaration public int index Field Value Type Description Int32 textCoord This integer value is used to construct a string in the format TEXCOORD_<set index> which is a reference to a key in mesh.primitives.attributes (e.g. A value of 0 corresponds to TEXCOORD_0). Declaration public int textCoord Field Value Type Description Int32"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfWrapMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.GltfWrapMode.html",
    "title": "Enum GltfWrapMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum GltfWrapMode Texture wrap mode. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Assembly : cs.temp.dll.dll Syntax public enum GltfWrapMode Fields Name Description ClampToEdge MirroredRepeat None Repeat"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Utilities.Gltf.Schema Classes GltfAccessor https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json GltfAccessorSparse Sparse storage of attributes that deviate from their initialization value. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.schema.json GltfAccessorSparseIndices Indices of those attributes that deviate from their initialization value. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.indices.schema.json GltfAccessorSparseValues https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.sparse.values.schema.json GltfAnimation A keyframe animation. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.schema.json GltfAnimationChannel Targets an animation's sampler at a node's property. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.schema.json GltfAnimationChannelTarget The index of the node and TRS property that an animation channel targets. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.target.schema.json GltfAnimationSampler Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target). https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.sampler.schema.json GltfAssetInfo Metadata about the glTF asset. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/asset.schema.json GltfBuffer A buffer points to binary geometry, animation, or skins. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/buffer.schema.json GltfBufferView A view into a buffer generally representing a subset of the buffer. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/bufferView.schema.json GltfCamera A camera's projection. A node can reference a camera to apply a transform to place the camera in the scene https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.schema.json GltfCameraOrthographic An orthographic camera containing properties to create an orthographic projection matrix. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.orthographic.schema.json GltfCameraPerspective A perspective camera containing properties to create a perspective projection matrix. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.perspective.schema.json GltfChildOfRootProperty https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/glTFChildOfRootProperty.schema.json GltfImage Image data used to create a texture. Image can be referenced by URI or bufferView index. mimeType is required in the latter case. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/image.schema.json GltfMaterial The material appearance of a primitive. https://github.com/KhronosGroup/glTF/tree/master/specification/2.0/schema GltfMaterialCommonConstant GltfMesh A set of primitives to be rendered. A node can contain one or more meshes. A node's transform places the mesh in the scene. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.schema.json GltfMeshPrimitive Geometry to be rendered with the given material. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json GltfMeshPrimitiveAttributes Common mesh primitive attributes. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json GltfNode A node in the node hierarchy. When the node contains skin , all mesh.primitives must contain JOINT and WEIGHT attributes. A node can have either a matrix or any combination of translation / rotation / scale (TRS) properties. TRS properties are converted to matrices and postmultiplied in the T * R * S order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the Identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; matrix will not be present. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/node.schema.json GltfNormalTextureInfo https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.normalTextureInfo.schema.json GltfObject GltfOcclusionTextureInfo https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.occlusionTextureInfo.schema.json GltfPbrMetallicRoughness A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.pbrMetallicRoughness.schema.json GltfProperty GltfSampler Texture sampler properties for filtering and wrapping modes. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json GltfScene The indices of each root node. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/scene.schema.json GltfSkin Joints and matrices defining a skin. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/skin.schema.json GltfTexture A texture and its sampler. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/texture.schema.json GltfTextureInfo https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/textureInfo.schema.json Enums GltfAccessorAttributeType Specifies if the attribute is a scalar, vector, or matrix. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json GltfAlphaMode The alpha rendering mode of the material. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/material.schema.json GltfAnimationChannelPath The name of the node's TRS property to modify, or the weights of the Morph Target it instantiates. For the translation property, the values that are provided by the sampler are the translation along the x, y, and z axes. For the rotation property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the scale property, the values are the scaling factors along the x, y, and z axes. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.channel.target.schema.json GltfBufferViewTarget The target that the GPU buffer should be bound to. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/bufferView.schema.json GltfCameraType Specifies if the camera uses a perspective or orthographic projection. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/camera.schema.json GltfComponentType https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/accessor.schema.json:componentType The datatype of components in the attribute. All valid values correspond to WebGL enums. The corresponding typed arrays are 'Int8Array', 'Uint8Array', 'Int16Array', 'Uint16Array', 'Uint32Array', and 'Float32Array', respectively. 5125 (UNSIGNED_INT) is only allowed when the accessor contains indices, i.e., the accessor is only referenced by 'primitive.indices'. GltfDrawMode The type of primitives to render. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/mesh.primitive.schema.json GltfInterpolationType Interpolation algorithm. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/animation.sampler.schema.json GltfMagnificationFilterMode Magnification filter mode. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json GltfMinFilterMode Minification filter mode. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json GltfWrapMode Texture wrap mode. https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/schema/sampler.schema.json"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.ColliderType.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.ColliderType.html",
    "title": "Enum ColliderType | Mixed Reality Toolkit Documentation",
    "keywords": "Enum ColliderType Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization Assembly : cs.temp.dll.dll Syntax public enum ColliderType Fields Name Description Box Mesh MeshConvex None"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.ConstructGltf.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.ConstructGltf.html",
    "title": "Class ConstructGltf | Mixed Reality Toolkit Documentation",
    "keywords": "Class ConstructGltf Inheritance Object ConstructGltf Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization Assembly : cs.temp.dll.dll Syntax public static class ConstructGltf Methods Construct(GltfObject) Constructs the glTF Object. Declaration public static void Construct(this GltfObject gltfObject) Parameters Type Name Description GltfObject gltfObject ConstructAsync(GltfObject) Constructs the glTF Object. Declaration public static Task<GameObject> ConstructAsync(this GltfObject gltfObject) Parameters Type Name Description GltfObject gltfObject Returns Type Description Task < GameObject > The new GameObject of the final constructed GltfScene"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.GlbAssetImporter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.GlbAssetImporter.html",
    "title": "Class GlbAssetImporter | Mixed Reality Toolkit Documentation",
    "keywords": "Class GlbAssetImporter Inheritance Object GlbAssetImporter Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor Assembly : cs.temp.dll.dll Syntax public class GlbAssetImporter : ScriptedImporter Methods OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext context) Parameters Type Name Description AssetImportContext context"
  },
  "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.GltfAssetImporter.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor.GltfAssetImporter.html",
    "title": "Class GltfAssetImporter | Mixed Reality Toolkit Documentation",
    "keywords": "Class GltfAssetImporter Inheritance Object GltfAssetImporter Namespace : Microsoft.MixedReality.Toolkit.Utilities.Gltf.Serialization.Editor Assembly : cs.temp.dll.dll Syntax public class GltfAssetImporter : ScriptedImporter Methods OnImportAsset(AssetImportContext) Declaration public override void OnImportAsset(AssetImportContext context) Parameters Type Name Description AssetImportContext context"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ApplicationInfo.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.ApplicationInfo.html",
    "title": "Class ApplicationInfo | Mixed Reality Toolkit Documentation",
    "keywords": "Class ApplicationInfo Inheritance Object ApplicationInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class ApplicationInfo Fields Name Declaration public string Name Field Value Type Description String PackageFamilyName Declaration public string PackageFamilyName Field Value Type Description String PackageFullName Declaration public string PackageFullName Field Value Type Description String PackageOrigin Declaration public int PackageOrigin Field Value Type Description Int32 PackageRelativeId Declaration public string PackageRelativeId Field Value Type Description String Publisher Declaration public string Publisher Field Value Type Description String"
  },
  "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.AvailableWiFiNetworks.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.WindowsDevicePortal.AvailableWiFiNetworks.html",
    "title": "Class AvailableWiFiNetworks | Mixed Reality Toolkit Documentation",
    "keywords": "Class AvailableWiFiNetworks Inheritance Object AvailableWiFiNetworks Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.WindowsDevicePortal Assembly : cs.temp.dll.dll Syntax public class AvailableWiFiNetworks Fields AvailableNetworks Declaration public WirelessNetworkInfo[] AvailableNetworks Field Value Type Description WirelessNetworkInfo []"
  },
  "api/Microsoft.MixedReality.Toolkit.IMixedRealityService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.IMixedRealityService.html",
    "title": "Interface IMixedRealityService | Mixed Reality Toolkit Documentation",
    "keywords": "Interface IMixedRealityService Generic interface for all Mixed Reality Services Namespace : Microsoft.MixedReality.Toolkit Assembly : cs.temp.dll.dll Syntax public interface IMixedRealityService : IDisposable Properties ConfigurationProfile The configuration profile for the service. Declaration BaseMixedRealityProfile ConfigurationProfile { get; } Property Value Type Description BaseMixedRealityProfile Remarks Many services may wish to provide a typed version (ex: MixedRealityInputSystemProfile) that casts this value for ease of use in calling code. Name Optional Priority attribute if multiple services of the same type are required, enables targeting a service for action. Declaration string Name { get; } Property Value Type Description String Priority Optional Priority to reorder registered managers based on their respective priority, reduces the risk of race conditions by prioritizing the order in which managers are evaluated. Declaration uint Priority { get; } Property Value Type Description UInt32 Methods Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration void Destroy() Disable() Optional Disable function to pause the service. Declaration void Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration void Enable() Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration void Initialize() LateUpdate() Optional LateUpdate function to that is called after Update has been called on all services. Declaration void LateUpdate() Reset() Optional Reset function to perform that will Reset the service, for example, whenever there is a profile change. Declaration void Reset() Update() Optional Update function to perform per-frame updates of the service. Declaration void Update()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputAnimation.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputAnimation.html",
    "title": "Class InputAnimation | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputAnimation Contains a set of animation curves that describe motion of camera and hands. Inheritance Object InputAnimation Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax [Serializable] public class InputAnimation Constructors InputAnimation() Declaration public InputAnimation() Fields jointCount Declaration protected static readonly int jointCount Field Value Type Description Int32 Properties CameraCurves Declaration public InputAnimation.PoseCurves CameraCurves { get; } Property Value Type Description InputAnimation.PoseCurves Duration Declaration public float Duration { get; } Property Value Type Description Single markerCount Declaration public int markerCount { get; } Property Value Type Description Int32 Methods AddCameraPoseKey(Single, MixedRealityPose, Single, Single) Add a keyframe for the camera transform. Declaration public void AddCameraPoseKey(float time, MixedRealityPose cameraPose, float positionThreshold, float rotationThreshold) Parameters Type Name Description Single time MixedRealityPose cameraPose Single positionThreshold Single rotationThreshold AddHandJointKey(Single, Handedness, TrackedHandJoint, MixedRealityPose, Single, Single) Add a keyframe for one hand joint. Declaration public void AddHandJointKey(float time, Handedness handedness, TrackedHandJoint joint, MixedRealityPose jointPose, float positionThreshold, float rotationThreshold) Parameters Type Name Description Single time Handedness handedness TrackedHandJoint joint MixedRealityPose jointPose Single positionThreshold Single rotationThreshold AddHandStateKey(Single, Handedness, Boolean, Boolean) Add a keyframe for the tracking state of a hand. Declaration public void AddHandStateKey(float time, Handedness handedness, bool isTracked, bool isPinching) Parameters Type Name Description Single time Handedness handedness Boolean isTracked Boolean isPinching AddMarker(InputAnimationMarker) Add a user-defined marker. Declaration public void AddMarker(InputAnimationMarker marker) Parameters Type Name Description InputAnimationMarker marker Clear() Remove all keyframes from all animation curves. Declaration public void Clear() CreateHandJointCurves(Handedness, TrackedHandJoint) Make sure the pose animation curves for the given hand joint exist. Declaration public InputAnimation.PoseCurves CreateHandJointCurves(Handedness handedness, TrackedHandJoint joint) Parameters Type Name Description Handedness handedness TrackedHandJoint joint Returns Type Description InputAnimation.PoseCurves CutoffBeforeTime(Single) Remove all keyframes from all animation curves with time values before the given cutoff time. Declaration public void CutoffBeforeTime(float time) Parameters Type Name Description Single time Remarks If keyframes exists before the cutoff time then one preceding keyframe will be retained, so that interpolation at the cutoff time yields the same result. EvaluateCameraPose(Single) Evaluate the camera transform at the given time. Declaration public MixedRealityPose EvaluateCameraPose(float time) Parameters Type Name Description Single time Returns Type Description MixedRealityPose EvaluateHandJoint(Single, Handedness, TrackedHandJoint) Evaluate joint pose at the given time. Declaration public MixedRealityPose EvaluateHandJoint(float time, Handedness handedness, TrackedHandJoint joint) Parameters Type Name Description Single time Handedness handedness TrackedHandJoint joint Returns Type Description MixedRealityPose EvaluateHandState(Single, Handedness, out Boolean, out Boolean) Evaluate hand tracking state at the given time. Declaration public void EvaluateHandState(float time, Handedness handedness, out bool isTracked, out bool isPinching) Parameters Type Name Description Single time Handedness handedness Boolean isTracked Boolean isPinching FindMarkerInterval(Single) Find an index i in the sorted events list, such that events[i].time <= time < events[i+1].time. Declaration public int FindMarkerInterval(float time) Parameters Type Name Description Single time Returns Type Description Int32 0 <= i < eventCount if a full interval could be found. -1 if time is less than the first event time. eventCount-1 if time is greater than the last event time. Remarks Uses binary search. FromStream(Stream) Deserialize animation data from a stream. Declaration public void FromStream(Stream stream) Parameters Type Name Description Stream stream GetMarker(Int32) Get the marker at the given index. Declaration public InputAnimationMarker GetMarker(int index) Parameters Type Name Description Int32 index Returns Type Description InputAnimationMarker RemoveMarker(Int32) Remove the user-defined marker at the given index. Declaration public void RemoveMarker(int index) Parameters Type Name Description Int32 index SetMarkerTime(Int32, Single) Change the time of the marker at the given index. Declaration public void SetMarkerTime(int index, float time) Parameters Type Name Description Int32 index Single time ToStream(Stream, Single) Serialize animation data into a stream. Declaration public void ToStream(Stream stream, float startTime) Parameters Type Name Description Stream stream Single startTime TryGetHandJointCurves(Handedness, TrackedHandJoint, out InputAnimation.PoseCurves) Get animation curves for the pose of the given hand joint, if they exist. Declaration public bool TryGetHandJointCurves(Handedness handedness, TrackedHandJoint joint, out InputAnimation.PoseCurves curves) Parameters Type Name Description Handedness handedness TrackedHandJoint joint InputAnimation.PoseCurves curves Returns Type Description Boolean"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputAnimationMarker.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputAnimationMarker.html",
    "title": "Class InputAnimationMarker | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputAnimationMarker A used-defined marker on the input animation timeline. Inheritance Object InputAnimationMarker Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputAnimationMarker Fields name Custom name of the marker. Declaration public string name Field Value Type Description String time Placement of the marker relative to the input animation start time. Declaration public float time Field Value Type Description Single"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputAnimationSerializationUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputAnimationSerializationUtils.html",
    "title": "Class InputAnimationSerializationUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputAnimationSerializationUtils Functions for serializing input animation data to and from binary files. Inheritance Object InputAnimationSerializationUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public static class InputAnimationSerializationUtils Fields Extension Declaration public const string Extension = \"bin\" Field Value Type Description String VersionMajor Declaration public const int VersionMajor = 1 Field Value Type Description Int32 VersionMinor Declaration public const int VersionMinor = 0 Field Value Type Description Int32 Methods GetOutputFilename(String, Boolean) Generate a file name for export. Declaration public static string GetOutputFilename(string baseName = \"InputAnimation\", bool appendTimestamp = true) Parameters Type Name Description String baseName Boolean appendTimestamp Returns Type Description String ReadBoolCurve(BinaryReader, AnimationCurve) Deserialize an animation curve from binary data, ignoring tangents. Declaration public static void ReadBoolCurve(BinaryReader reader, AnimationCurve curve) Parameters Type Name Description BinaryReader reader AnimationCurve curve ReadBoolCurveArray(BinaryReader, AnimationCurve[]) Deserialize an array of animation curves from binary data, ignoring tangents. Declaration public static void ReadBoolCurveArray(BinaryReader reader, AnimationCurve[] curves) Parameters Type Name Description BinaryReader reader AnimationCurve [] curves ReadFloatCurve(BinaryReader, AnimationCurve) Deserialize an animation curve with tangents from binary data. Declaration public static void ReadFloatCurve(BinaryReader reader, AnimationCurve curve) Parameters Type Name Description BinaryReader reader AnimationCurve curve ReadFloatCurveArray(BinaryReader, AnimationCurve[]) Deserialize an array of animation curves with tangents from binary data. Declaration public static void ReadFloatCurveArray(BinaryReader reader, AnimationCurve[] curves) Parameters Type Name Description BinaryReader reader AnimationCurve [] curves ReadHeader(BinaryReader, out Int32, out Int32) Write a header for the input animation file format into the stream. Declaration public static void ReadHeader(BinaryReader reader, out int fileVersionMajor, out int fileVersionMinor) Parameters Type Name Description BinaryReader reader Int32 fileVersionMajor Int32 fileVersionMinor ReadMarkerList(BinaryReader, List<InputAnimationMarker>) Deserialize a list of markers. Declaration public static void ReadMarkerList(BinaryReader reader, List<InputAnimationMarker> markers) Parameters Type Name Description BinaryReader reader List < InputAnimationMarker > markers WriteBoolCurve(BinaryWriter, AnimationCurve, Single) Serialize an animation curve as binary data, ignoring tangents. Declaration public static void WriteBoolCurve(BinaryWriter writer, AnimationCurve curve, float startTime) Parameters Type Name Description BinaryWriter writer AnimationCurve curve Single startTime WriteBoolCurveArray(BinaryWriter, AnimationCurve[], Single) Serialize an array of animation curves as binary data, ignoring tangents. Declaration public static void WriteBoolCurveArray(BinaryWriter writer, AnimationCurve[] curves, float startTime) Parameters Type Name Description BinaryWriter writer AnimationCurve [] curves Single startTime WriteFloatCurve(BinaryWriter, AnimationCurve, Single) Serialize an animation curve with tangents as binary data. Declaration public static void WriteFloatCurve(BinaryWriter writer, AnimationCurve curve, float startTime) Parameters Type Name Description BinaryWriter writer AnimationCurve curve Single startTime WriteFloatCurveArray(BinaryWriter, AnimationCurve[], Single) Serialize an array of animation curves with tangents as binary data. Declaration public static void WriteFloatCurveArray(BinaryWriter writer, AnimationCurve[] curves, float startTime) Parameters Type Name Description BinaryWriter writer AnimationCurve [] curves Single startTime WriteHeader(BinaryWriter) Write a header for the input animation file format into the stream. Declaration public static void WriteHeader(BinaryWriter writer) Parameters Type Name Description BinaryWriter writer WriteMarkerList(BinaryWriter, List<InputAnimationMarker>, Single) Serialize a list of markers. Declaration public static void WriteMarkerList(BinaryWriter writer, List<InputAnimationMarker> markers, float startTime) Parameters Type Name Description BinaryWriter writer List < InputAnimationMarker > markers Single startTime"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputEventData-1.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputEventData-1.html",
    "title": "Class InputEventData<T> | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputEventData<T> Describes and input event with a specific type. Inheritance Object BaseInputEventData InputEventData InputEventData<T> HandTrackingInputEventData Inherited Members InputEventData.Handedness InputEventData.Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputEventData<T> : InputEventData Type Parameters Name Description T Constructors InputEventData(EventSystem) Constructor. Declaration public InputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties InputData The input data of the event. Declaration public T InputData { get; } Property Value Type Description T Methods Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction, T) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, Handedness handedness, MixedRealityInputAction inputAction, T data) Parameters Type Name Description IMixedRealityInputSource inputSource Handedness handedness MixedRealityInputAction inputAction T data"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputEventData.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputEventData.html",
    "title": "Class InputEventData | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputEventData Describes an Input Event that has a source id. Inheritance Object BaseInputEventData InputEventData InputEventData<T> MixedRealityPointerEventData Inherited Members BaseInputEventData.EventTime BaseInputEventData.InputSource BaseInputEventData.SourceId BaseInputEventData.MixedRealityInputAction BaseInputEventData.BaseInitialize(IMixedRealityInputSource, MixedRealityInputAction) Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputEventData : BaseInputEventData Constructors InputEventData(EventSystem) Constructor. Declaration public InputEventData(EventSystem eventSystem) Parameters Type Name Description EventSystem eventSystem Typically will be EventSystems.EventSystem.current Properties Handedness Handedness of the IMixedRealityInputSource . Declaration public Handedness Handedness { get; } Property Value Type Description Handedness Methods Initialize(IMixedRealityInputSource, Handedness, MixedRealityInputAction) Used to initialize/reset the event and populate the data. Declaration public void Initialize(IMixedRealityInputSource inputSource, Handedness handedness, MixedRealityInputAction inputAction) Parameters Type Name Description IMixedRealityInputSource inputSource Handedness handedness MixedRealityInputAction inputAction"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputPlaybackService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputPlaybackService.html",
    "title": "Class InputPlaybackService | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputPlaybackService Plays back input animation via the input simulation system. Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager BaseInputSimulationService InputPlaybackService Implements IMixedRealityInputPlaybackService IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseInputSimulationService.GetActiveControllers() BaseInputSimulationService.UpdateHandDevice(HandSimulationMode, Handedness, SimulatedHandData) BaseInputSimulationService.GetHandDevice(Handedness) BaseInputSimulationService.GetOrAddHandDevice(Handedness, HandSimulationMode) BaseInputSimulationService.RemoveHandDevice(Handedness) BaseInputSimulationService.RemoveAllHandDevices() BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.LateUpdate() BaseService.Disable() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputPlaybackService : BaseInputSimulationService, IMixedRealityInputPlaybackService, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors InputPlaybackService(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public InputPlaybackService(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. InputPlaybackService(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public InputPlaybackService(IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties Animation The animation currently being played. Declaration public InputAnimation Animation { get; set; } Property Value Type Description InputAnimation Duration Duration of the played animation. Declaration public float Duration { get; } Property Value Type Description Single HandDataLeft Pose data for the left hand. Declaration public SimulatedHandData HandDataLeft { get; } Property Value Type Description SimulatedHandData HandDataRight Pose data for the right hand. Declaration public SimulatedHandData HandDataRight { get; } Property Value Type Description SimulatedHandData IsPlaying True if the animation is currently playing. Declaration public bool IsPlaying { get; } Property Value Type Description Boolean LocalTime The local time in seconds relative to the start of the animation. Declaration public float LocalTime { get; set; } Property Value Type Description Single Methods CheckCapability(MixedRealityCapability) Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability Returns Type Description Boolean LoadInputAnimation(String) Try to load input animation data from the given file. Declaration public bool LoadInputAnimation(string filepath) Parameters Type Name Description String filepath Returns Type Description Boolean True if loading input animation from the file succeeded. Pause() Pause playback and keep the current local time. Declaration public void Pause() Play() Start playing the animation. Declaration public void Play() Stop() Stop playing the animation and jump to the start. Declaration public void Stop() Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Implements IMixedRealityInputPlaybackService IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputRayUtils.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputRayUtils.html",
    "title": "Class InputRayUtils | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputRayUtils Utilities for accessing position, rotation of rays. Inheritance Object InputRayUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public static class InputRayUtils Methods GetHeadGazeRay() Gets the ray representing the position and direction of the user's head. Declaration public static Ray GetHeadGazeRay() Returns Type Description Ray The ray the head gaze TryGetEyeGazeRay(out Ray) Gets the ray> representing the position and direction of the user's eyes. Declaration public static bool TryGetEyeGazeRay(out Ray ray) Parameters Type Name Description Ray ray The ray being returned Returns Type Description Boolean True if the ray is being returned, false otherwise. TryGetHandRay(Handedness, out Ray) Gets the ray associated with the user's hand. Declaration public static bool TryGetHandRay(Handedness hand, out Ray ray) Parameters Type Name Description Handedness hand The handedness of the hand Ray ray The ray being returned Returns Type Description Boolean True if the ray is being returned, false otherwise. TryGetMotionControllerRay(Handedness, out Ray) Gets the ray associated with the motion controller. Declaration public static bool TryGetMotionControllerRay(Handedness hand, out Ray ray) Parameters Type Name Description Handedness hand The handedness of the motion controller Ray ray The ray being returned Returns Type Description Boolean True if the ray is being returned, false otherwise. TryGetRay(InputSourceType, Handedness, out Ray) Gets the ray associated with the desired input source type and hand. Declaration public static bool TryGetRay(InputSourceType sourceType, Handedness hand, out Ray ray) Parameters Type Name Description InputSourceType sourceType The type of input source Handedness hand The handedness of the input source Ray ray The ray being returned Returns Type Description Boolean True if the ray is being returned, false otherwise."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputRecordingService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputRecordingService.html",
    "title": "Class InputRecordingService | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputRecordingService Provides input recording into an internal buffer and exporting to files. Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager InputRecordingService Implements IMixedRealityInputRecordingService IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.GetActiveControllers() BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Update() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputRecordingService : BaseInputDeviceManager, IMixedRealityInputRecordingService, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors InputRecordingService(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public InputRecordingService(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. InputRecordingService(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public InputRecordingService(IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties InputRecordingProfile Return the service profile and ensure that the type is correct. Declaration public MixedRealityInputRecordingProfile InputRecordingProfile { get; } Property Value Type Description MixedRealityInputRecordingProfile IsEnabled Service has been enabled. Declaration public bool IsEnabled { get; } Property Value Type Description Boolean IsRecording True if input is being recorded. Declaration public bool IsRecording { get; } Property Value Type Description Boolean RecordingBufferTimeLimit Maximum duration in seconds of the input recording if UseBufferTimeLimit is enabled. Declaration public float RecordingBufferTimeLimit { get; set; } Property Value Type Description Single Remarks If UseBufferTimeLimit is enabled then keyframes older than this limit will be discarded. StartTime Declaration public float StartTime { get; } Property Value Type Description Single UseBufferTimeLimit Limit the size of the recording buffer. Declaration public bool UseBufferTimeLimit { get; set; } Property Value Type Description Boolean Remarks If recording is limited any input older than the RecordingBufferTimeLimit will be discarded. Methods Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() DiscardRecordedInput() Discard all recorded input Declaration public void DiscardRecordedInput() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseService.Enable() LateUpdate() Optional LateUpdate function to that is called after Update has been called on all services. Declaration public override void LateUpdate() Overrides BaseService.LateUpdate() SaveInputAnimation(String) Save recorded input animation to a file. Declaration public string SaveInputAnimation(string directory = null) Parameters Type Name Description String directory Directory in which to create the file. If null the persistent data path of the app is used. Returns Type Description String File path where input has been recorded. Remarks Filename is determined automatically. SaveInputAnimation(String, String) Save recorded input animation to a file. Declaration public string SaveInputAnimation(string filename, string directory = null) Parameters Type Name Description String filename Name of the file to create. String directory Directory in which to create the file. If null the persistent data path of the app is used. Returns Type Description String File path where input has been recorded. StartRecording() Start unlimited input recording. Declaration public void StartRecording() StopRecording() Stop recording input. Declaration public void StopRecording() Events OnRecordingStarted Declaration public event Action OnRecordingStarted Event Type Type Description Action OnRecordingStopped Declaration public event Action OnRecordingStopped Event Type Type Description Action Implements IMixedRealityInputRecordingService IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationControlMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationControlMode.html",
    "title": "Enum InputSimulationControlMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InputSimulationControlMode Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum InputSimulationControlMode Fields Name Description Fly Walk"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationIndicators.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationIndicators.html",
    "title": "Class InputSimulationIndicators | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSimulationIndicators A row of indicator buttons to control input simulation features. Inheritance Object InputSimulationIndicators Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputSimulationIndicators : MonoBehaviour Fields iconHandActiveLeft Icon for left hand when under user control. Declaration public Sprite iconHandActiveLeft Field Value Type Description Sprite iconHandActiveRight Icon for right hand when under user control. Declaration public Sprite iconHandActiveRight Field Value Type Description Sprite iconHandIdleLeft Icon for left hand when visible but not actively controlled. Declaration public Sprite iconHandIdleLeft Field Value Type Description Sprite iconHandIdleRight Icon for right hand when visible but not actively controlled. Declaration public Sprite iconHandIdleRight Field Value Type Description Sprite iconHandUntrackedLeft Icon for left hand when untracked. Declaration public Sprite iconHandUntrackedLeft Field Value Type Description Sprite iconHandUntrackedRight Icon for right hand when untracked. Declaration public Sprite iconHandUntrackedRight Field Value Type Description Sprite imageHandLeft Component displaying the left hand icon. Declaration public UnityEngine.UI.Image imageHandLeft Field Value Type Description UnityEngine.UI.Image imageHandRight Component displaying the right hand icon. Declaration public UnityEngine.UI.Image imageHandRight Field Value Type Description UnityEngine.UI.Image"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationService.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationService.html",
    "title": "Class InputSimulationService | Mixed Reality Toolkit Documentation",
    "keywords": "Class InputSimulationService Service that provides simulated mixed reality input information based on mouse and keyboard input in editor Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager BaseInputSimulationService InputSimulationService Implements IInputSimulationService IMixedRealityEyeGazeDataProvider IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityCapabilityCheck Inherited Members BaseInputSimulationService.GetActiveControllers() BaseInputSimulationService.UpdateHandDevice(HandSimulationMode, Handedness, SimulatedHandData) BaseInputSimulationService.GetHandDevice(Handedness) BaseInputSimulationService.GetOrAddHandDevice(Handedness, HandSimulationMode) BaseInputSimulationService.RemoveHandDevice(Handedness) BaseInputSimulationService.RemoveAllHandDevices() BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class InputSimulationService : BaseInputSimulationService, IInputSimulationService, IMixedRealityEyeGazeDataProvider, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable, IMixedRealityCapabilityCheck Constructors InputSimulationService(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public InputSimulationService(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. InputSimulationService(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public InputSimulationService(IMixedRealityInputSystem inputSystem, string name, uint priority, BaseMixedRealityProfile profile) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties HandDataLeft Pose data for the left hand. Declaration public SimulatedHandData HandDataLeft { get; } Property Value Type Description SimulatedHandData HandDataRight Pose data for the right hand. Declaration public SimulatedHandData HandDataRight { get; } Property Value Type Description SimulatedHandData HandPositionLeft Position of the left hand in view space. Declaration public Vector3 HandPositionLeft { get; set; } Property Value Type Description Vector3 HandPositionRight Position of the right hand in view space. Declaration public Vector3 HandPositionRight { get; set; } Property Value Type Description Vector3 HandRotationLeft Rotation euler angles of the left hand in view space. Declaration public Vector3 HandRotationLeft { get; set; } Property Value Type Description Vector3 HandRotationRight Rotation euler angles of the right hand in view space. Declaration public Vector3 HandRotationRight { get; set; } Property Value Type Description Vector3 HandSimulationMode Simulated hand behavior. Declaration public HandSimulationMode HandSimulationMode { get; set; } Property Value Type Description HandSimulationMode InputSimulationProfile Typed representation of the ConfigurationProfile property. Declaration public MixedRealityInputSimulationProfile InputSimulationProfile { get; set; } Property Value Type Description MixedRealityInputSimulationProfile IsAlwaysVisibleHandLeft The left hand is always tracking. Declaration public bool IsAlwaysVisibleHandLeft { get; set; } Property Value Type Description Boolean IsAlwaysVisibleHandRight The right hand is always tracking. Declaration public bool IsAlwaysVisibleHandRight { get; set; } Property Value Type Description Boolean IsSimulatingHandLeft The left hand is controlled by user input. Declaration public bool IsSimulatingHandLeft { get; } Property Value Type Description Boolean IsSimulatingHandRight The right hand is controlled by user input. Declaration public bool IsSimulatingHandRight { get; } Property Value Type Description Boolean UserInputEnabled If true then keyboard and mouse input are used to simulate hands. Declaration public bool UserInputEnabled { get; set; } Property Value Type Description Boolean Methods CheckCapability(MixedRealityCapability) Checks to see if one or more registered data providers supports the requested capability on the current platform. Declaration public bool CheckCapability(MixedRealityCapability capability) Parameters Type Name Description MixedRealityCapability capability The capability to check. Returns Type Description Boolean True if the capability is supported, false otherwise. Destroy() Optional Destroy function to perform cleanup of the service before the Mixed Reality Toolkit is destroyed. Declaration public override void Destroy() Overrides BaseService.Destroy() Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseService.Enable() Initialize() The initialize function is used to setup the service once created. This method is called once all services have been registered in the Mixed Reality Toolkit. Declaration public override void Initialize() Overrides BaseService.Initialize() LateUpdate() Optional LateUpdate function to that is called after Update has been called on all services. Declaration public override void LateUpdate() Overrides BaseService.LateUpdate() ResetHandLeft() Reset the left hand. Declaration public void ResetHandLeft() ResetHandRight() Reset the right hand. Declaration public void ResetHandRight() Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Explicit Interface Implementations IMixedRealityEyeGazeDataProvider.SaccadeProvider Declaration IMixedRealityEyeSaccadeProvider IMixedRealityEyeGazeDataProvider.SaccadeProvider { get; } Returns Type Description IMixedRealityEyeSaccadeProvider IMixedRealityEyeGazeDataProvider.SmoothEyeTracking Declaration bool IMixedRealityEyeGazeDataProvider.SmoothEyeTracking { get; set; } Returns Type Description Boolean Implements IInputSimulationService IMixedRealityEyeGazeDataProvider IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityCapabilityCheck"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationWindow.ToolMode.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.InputSimulationWindow.ToolMode.html",
    "title": "Enum InputSimulationWindow.ToolMode | Mixed Reality Toolkit Documentation",
    "keywords": "Enum InputSimulationWindow.ToolMode Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public enum ToolMode Fields Name Description Playback Play back input animation as simulated input. Record Record input animation and store in the asset."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.MouseController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.MouseController.html",
    "title": "Class MouseController | Mixed Reality Toolkit Documentation",
    "keywords": "Class MouseController Manages the mouse using unity input system. Inheritance Object BaseController MouseController Implements IMixedRealityController Inherited Members BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.IsInPointingPose BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class MouseController : BaseController, IMixedRealityController Constructors MouseController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public MouseController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState The controller's tracking state. Handedness controllerHandedness The handedness (ex: right) of the controller. IMixedRealityInputSource inputSource The controller's input source. MixedRealityInteractionMapping [] interactions The set of interactions supported by this controller. Properties DefaultInteractions The default interactions for this controller. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Methods SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness, if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) Update() Update controller. Declaration public void Update() Implements IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.MouseDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.MouseDeviceManager.html",
    "title": "Class MouseDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class MouseDeviceManager Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager MouseDeviceManager Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityMouseDeviceManager IMixedRealityInputDeviceManager Inherited Members BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.GetActiveControllers() BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Reset() BaseService.LateUpdate() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class MouseDeviceManager : BaseInputDeviceManager, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable, IMixedRealityMouseDeviceManager, IMixedRealityInputDeviceManager Constructors MouseDeviceManager(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public MouseDeviceManager(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. MouseDeviceManager(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public MouseDeviceManager(IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Properties Controller Current Mouse Controller. Declaration public MouseController Controller { get; } Property Value Type Description MouseController CursorSpeed Declaration public float CursorSpeed { get; set; } Property Value Type Description Single MouseInputProfile Declaration public MixedRealityMouseInputProfile MouseInputProfile { get; } Property Value Type Description MixedRealityMouseInputProfile WheelSpeed Declaration public float WheelSpeed { get; set; } Property Value Type Description Single Methods Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Enable() Optional Enable function to enable / re-enable the service. Declaration public override void Enable() Overrides BaseService.Enable() Initialize() Declaration public override void Initialize() Overrides BaseService.Initialize() Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable IMixedRealityMouseDeviceManager IMixedRealityInputDeviceManager"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.UnityJoystickManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.UnityJoystickManager.html",
    "title": "Class UnityJoystickManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityJoystickManager Manages joysticks using unity input system. Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager UnityJoystickManager Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.LateUpdate() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class UnityJoystickManager : BaseInputDeviceManager, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors UnityJoystickManager(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public UnityJoystickManager(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. UnityJoystickManager(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public UnityJoystickManager(IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Fields ActiveControllers Declaration protected static readonly Dictionary<string, GenericJoystickController> ActiveControllers Field Value Type Description Dictionary < String , GenericJoystickController > Methods Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() GetActiveControllers() Retrieve all controllers currently registered with this device at runtime (if direct access is required) Declaration public override IMixedRealityController[] GetActiveControllers() Returns Type Description IMixedRealityController [] Overrides BaseInputDeviceManager.GetActiveControllers() GetCurrentControllerType(String) Gets the current controller type for the joystick name provided. Declaration protected virtual SupportedControllerType GetCurrentControllerType(string joystickName) Parameters Type Name Description String joystickName The name of the joystick from Unity's Input.GetJoystickNames Returns Type Description SupportedControllerType The supported controller type GetOrAddController(String) Gets or adds a controller using the joystick name provided. Declaration protected virtual GenericJoystickController GetOrAddController(string joystickName) Parameters Type Name Description String joystickName The name of the joystick from Unity's Input.GetJoystickNames Returns Type Description GenericJoystickController A new controller reference. RemoveController(String) Removes a controller using the joystick name provided. Declaration protected virtual void RemoveController(string joystickName) Parameters Type Name Description String joystickName The name of the joystick from Unity's Input.GetJoystickNames Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.UnityTouchController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.UnityTouchController.html",
    "title": "Class UnityTouchController | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityTouchController Inheritance Object BaseController UnityTouchController Implements IMixedRealityController Inherited Members BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.IsInPointingPose BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class UnityTouchController : BaseController, IMixedRealityController Constructors UnityTouchController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Declaration public UnityTouchController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions The default interactions for this controller. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Lifetime The current lifetime of the Touch. Declaration public float Lifetime { get; } Property Value Type Description Single ManipulationThreshold The threshold a finger must move before starting a manipulation gesture. Declaration public float ManipulationThreshold { get; set; } Property Value Type Description Single MaxTapContactTime Time in seconds to determine if the contact registers as a tap or a hold Declaration public float MaxTapContactTime { get; set; } Property Value Type Description Single ScreenPointRay Current Screen point ray for the Touch. Declaration public Ray ScreenPointRay { get; } Property Value Type Description Ray TouchData Current Touch Data for the Controller. Declaration public Touch TouchData { get; } Property Value Type Description Touch Methods EndTouch() End the touch. Declaration public void EndTouch() SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness, if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides BaseController.SetupDefaultInteractions(Handedness) StartTouch() Start the touch. Declaration public void StartTouch() Update() Update the touch data. Declaration public void Update() Implements IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.UnityTouchDeviceManager.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.UnityTouchDeviceManager.html",
    "title": "Class UnityTouchDeviceManager | Mixed Reality Toolkit Documentation",
    "keywords": "Class UnityTouchDeviceManager Manages Touch devices using unity input system. Inheritance Object BaseService BaseDataProvider < IMixedRealityInputSystem > BaseInputDeviceManager UnityTouchDeviceManager Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable Inherited Members BaseInputDeviceManager.InputSystemProfile BaseInputDeviceManager.GetActiveControllers() BaseInputDeviceManager.RequestPointers(SupportedControllerType, Handedness) BaseDataProvider<IMixedRealityInputSystem>.Registrar BaseDataProvider<IMixedRealityInputSystem>.Service BaseService.DefaultPriority BaseService.Name BaseService.Priority BaseService.ConfigurationProfile BaseService.Initialize() BaseService.Reset() BaseService.Enable() BaseService.LateUpdate() BaseService.Destroy() BaseService.disposed BaseService.Dispose() BaseService.Dispose(Boolean) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class UnityTouchDeviceManager : BaseInputDeviceManager, IMixedRealityInputDeviceManager, IMixedRealityDataProvider, IMixedRealityService, IDisposable Constructors UnityTouchDeviceManager(IMixedRealityServiceRegistrar, IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration [Obsolete(\"This constructor is obsolete (registrar parameter is no longer required) and will be removed in a future version of the Microsoft Mixed Reality Toolkit.\")] public UnityTouchDeviceManager(IMixedRealityServiceRegistrar registrar, IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityServiceRegistrar registrar The IMixedRealityServiceRegistrar instance that loaded the data provider. IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. UnityTouchDeviceManager(IMixedRealityInputSystem, String, UInt32, BaseMixedRealityProfile) Constructor. Declaration public UnityTouchDeviceManager(IMixedRealityInputSystem inputSystem, string name = null, uint priority = 10U, BaseMixedRealityProfile profile = null) Parameters Type Name Description IMixedRealityInputSystem inputSystem The IMixedRealityInputSystem instance that receives data from this provider. String name Friendly name of the service. UInt32 priority Service priority. Used to determine order of instantiation. BaseMixedRealityProfile profile The service's configuration profile. Methods Disable() Optional Disable function to pause the service. Declaration public override void Disable() Overrides BaseService.Disable() Update() Optional Update function to perform per-frame updates of the service. Declaration public override void Update() Overrides BaseService.Update() Implements IMixedRealityInputDeviceManager IMixedRealityDataProvider IMixedRealityService IDisposable"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.XboxController.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.XboxController.html",
    "title": "Class XboxController | Mixed Reality Toolkit Documentation",
    "keywords": "Class XboxController Xbox Controller using Unity Input System Inheritance Object BaseController GenericJoystickController XboxController Implements IMixedRealityController Inherited Members GenericJoystickController.PointerOffsetAngle GenericJoystickController.CurrentControllerPosition GenericJoystickController.CurrentControllerRotation GenericJoystickController.LastControllerPose GenericJoystickController.CurrentControllerPose GenericJoystickController.UpdateController() GenericJoystickController.UpdateButtonData(MixedRealityInteractionMapping) GenericJoystickController.UpdateSingleAxisData(MixedRealityInteractionMapping) GenericJoystickController.UpdateDualAxisData(MixedRealityInteractionMapping) GenericJoystickController.UpdatePoseData(MixedRealityInteractionMapping) BaseController.DefaultLeftHandedInteractions BaseController.DefaultRightHandedInteractions BaseController.Enabled BaseController.TrackingState BaseController.ControllerHandedness BaseController.InputSource BaseController.Visualizer BaseController.IsPositionAvailable BaseController.IsPositionApproximate BaseController.IsRotationAvailable BaseController.Interactions BaseController.AngularVelocity BaseController.Velocity BaseController.IsInPointingPose BaseController.SetupConfiguration(Type, InputSourceType) BaseController.SetupConfiguration(Type) BaseController.AssignControllerMappings(MixedRealityInteractionMapping[]) BaseController.TryRenderControllerModel(Type, InputSourceType) BaseController.TryAddControllerModelToSceneHierarchy(GameObject) BaseController.GetControllerVisualizationProfile() BaseController.IsControllerMappingEnabled() BaseController.GetControllerMappings() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.Input.UnityInput Assembly : cs.temp.dll.dll Syntax public class XboxController : GenericJoystickController, IMixedRealityController Constructors XboxController(TrackingState, Handedness, IMixedRealityInputSource, MixedRealityInteractionMapping[]) Constructor. Declaration public XboxController(TrackingState trackingState, Handedness controllerHandedness, IMixedRealityInputSource inputSource = null, MixedRealityInteractionMapping[] interactions = null) Parameters Type Name Description TrackingState trackingState Handedness controllerHandedness IMixedRealityInputSource inputSource MixedRealityInteractionMapping [] interactions Properties DefaultInteractions Default interactions for Xbox Controller using Unity Input System. Declaration public override MixedRealityInteractionMapping[] DefaultInteractions { get; } Property Value Type Description MixedRealityInteractionMapping [] Overrides BaseController.DefaultInteractions Methods SetupDefaultInteractions(Handedness) Assign the default interactions based on controller handedness, if necessary. Declaration public override void SetupDefaultInteractions(Handedness controllerHandedness) Parameters Type Name Description Handedness controllerHandedness Overrides GenericJoystickController.SetupDefaultInteractions(Handedness) Implements IMixedRealityController"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.UnityInput.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Input.UnityInput | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Input.UnityInput Classes GenericJoystickController MouseController Manages the mouse using unity input system. MouseDeviceManager UnityJoystickManager Manages joysticks using unity input system. UnityTouchController UnityTouchDeviceManager Manages Touch devices using unity input system. XboxController Xbox Controller using Unity Input System"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Utilities.CanvasUtility.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Utilities.CanvasUtility.html",
    "title": "Class CanvasUtility | Mixed Reality Toolkit Documentation",
    "keywords": "Class CanvasUtility Helper class for setting up canvases for use in the MRTK. Inheritance Object CanvasUtility Implements IMixedRealityPointerHandler IEventSystemHandler Namespace : Microsoft.MixedReality.Toolkit.Input.Utilities Assembly : cs.temp.dll.dll Syntax public class CanvasUtility : MonoBehaviour, IMixedRealityPointerHandler, IEventSystemHandler Methods OnPointerClicked(MixedRealityPointerEventData) Declaration public void OnPointerClicked(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDown(MixedRealityPointerEventData) Declaration public void OnPointerDown(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerDragged(MixedRealityPointerEventData) Declaration public void OnPointerDragged(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData OnPointerUp(MixedRealityPointerEventData) Declaration public void OnPointerUp(MixedRealityPointerEventData eventData) Parameters Type Name Description MixedRealityPointerEventData eventData Implements IMixedRealityPointerHandler IEventSystemHandler"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Utilities.ScaleMeshEffect.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Utilities.ScaleMeshEffect.html",
    "title": "Class ScaleMeshEffect | Mixed Reality Toolkit Documentation",
    "keywords": "Class ScaleMeshEffect On Unity UI components the unity_ObjectToWorld matrix is not the transformation matrix of the local transform the Graphic component lives on, but that of it's parent Canvas. Many MRTK/Standard shader effects require object scale to be known. To solve this issue the ScaleMeshEffect will store scaling information into UV channel attributes during UI mesh construction. Ideally we would store the scale in one attribute but UGUI only supports two scalers per attribute (even in the tangent attribute). Inheritance Object ScaleMeshEffect Namespace : Microsoft.MixedReality.Toolkit.Input.Utilities Assembly : cs.temp.dll.dll Syntax public class ScaleMeshEffect : BaseMeshEffect Methods Awake() Enforces the parent canvas uses UV channel attributes. Declaration protected override void Awake() ModifyMesh(VertexHelper) Stores scaling information into UV channel attributes during UI mesh construction. Declaration public override void ModifyMesh(VertexHelper vh) Parameters Type Name Description VertexHelper vh The vertex helper to populate with new vertex data."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.Utilities.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.Utilities.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Input.Utilities | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Input.Utilities Classes CanvasUtility Helper class for setting up canvases for use in the MRTK. ScaleMeshEffect On Unity UI components the unity_ObjectToWorld matrix is not the transformation matrix of the local transform the Graphic component lives on, but that of it's parent Canvas. Many MRTK/Standard shader effects require object scale to be known. To solve this issue the ScaleMeshEffect will store scaling information into UV channel attributes during UI mesh construction. Ideally we would store the scale in one attribute but UGUI only supports two scalers per attribute (even in the tangent attribute)."
  },
  "api/Microsoft.MixedReality.Toolkit.Input.WindowsMixedRealityControllerVisualizer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.WindowsMixedRealityControllerVisualizer.html",
    "title": "Class WindowsMixedRealityControllerVisualizer | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityControllerVisualizer Inheritance Object InputSystemGlobalHandlerListener ControllerPoseSynchronizer MixedRealityControllerVisualizer WindowsMixedRealityControllerVisualizer Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler < Single > IMixedRealityInputHandler < Vector2 > IMixedRealityInputHandler < Vector3 > IMixedRealityInputHandler < Quaternion > IMixedRealityInputHandler < MixedRealityPose > IEventSystemHandler IMixedRealityControllerVisualizer Inherited Members MixedRealityControllerVisualizer.GameObjectProxy MixedRealityControllerVisualizer.OnInputDown(InputEventData) MixedRealityControllerVisualizer.OnInputUp(InputEventData) MixedRealityControllerVisualizer.OnInputChanged(InputEventData<Single>) MixedRealityControllerVisualizer.OnInputChanged(InputEventData<Vector2>) ControllerPoseSynchronizer.Handedness ControllerPoseSynchronizer.DestroyOnSourceLost ControllerPoseSynchronizer.IsTracked ControllerPoseSynchronizer.TrackingState ControllerPoseSynchronizer.Controller ControllerPoseSynchronizer.UseSourcePoseData ControllerPoseSynchronizer.PoseAction ControllerPoseSynchronizer.RegisterHandlers() ControllerPoseSynchronizer.UnregisterHandlers() ControllerPoseSynchronizer.OnSourceDetected(SourceStateEventData) ControllerPoseSynchronizer.OnSourceLost(SourceStateEventData) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<TrackingState>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector2>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Vector3>) ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Vector3>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<Quaternion>) ControllerPoseSynchronizer.OnInputChanged(InputEventData<MixedRealityPose>) InputSystemGlobalHandlerListener.OnEnable() InputSystemGlobalHandlerListener.Start() InputSystemGlobalHandlerListener.OnDisable() InputSystemGlobalHandlerListener.EnsureInputSystemValid() Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityControllerVisualizer : MixedRealityControllerVisualizer, IMixedRealityControllerPoseSynchronizer, IMixedRealitySourcePoseHandler, IMixedRealitySourceStateHandler, IMixedRealityInputHandler, IMixedRealityBaseInputHandler, IMixedRealityInputHandler<float>, IMixedRealityInputHandler<Vector2>, IMixedRealityInputHandler<Vector3>, IMixedRealityInputHandler<Quaternion>, IMixedRealityInputHandler<MixedRealityPose>, IEventSystemHandler, IMixedRealityControllerVisualizer Methods OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) Raised when the source pose is changed. Declaration public override void OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose> eventData) Parameters Type Name Description SourcePoseEventData < MixedRealityPose > eventData Overrides ControllerPoseSynchronizer.OnSourcePoseChanged(SourcePoseEventData<MixedRealityPose>) Implements IMixedRealityControllerPoseSynchronizer IMixedRealitySourcePoseHandler IMixedRealitySourceStateHandler IMixedRealityInputHandler IMixedRealityBaseInputHandler IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IMixedRealityInputHandler<T> IEventSystemHandler IMixedRealityControllerVisualizer"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.WindowsMixedRealityHandRecorder.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.WindowsMixedRealityHandRecorder.html",
    "title": "Class WindowsMixedRealityHandRecorder | Mixed Reality Toolkit Documentation",
    "keywords": "Class WindowsMixedRealityHandRecorder Record joint positions of a hand and log them for use in simulated hands. Inheritance Object WindowsMixedRealityHandRecorder Namespace : Microsoft.MixedReality.Toolkit.Input Assembly : cs.temp.dll.dll Syntax public class WindowsMixedRealityHandRecorder : MonoBehaviour Properties OutputFileName Default output filename for saving the recorded pose. Declaration public string OutputFileName { get; } Property Value Type Description String ReferenceJoint The joint positioned at the origin at the start of the recording. Declaration public TrackedHandJoint ReferenceJoint { get; set; } Property Value Type Description TrackedHandJoint Remarks If the reference joint moves between start and stop of recording then final position is used as an offset. Example: A \"poke\" gesture can be simulated by moving the index finger forward between start and stop, giving an offset that creates a poking motion when interpolated. Methods RecordHandStop() Declaration public void RecordHandStop() RecordLeftHandStart() Declaration public void RecordLeftHandStart() RecordRightHandStart() Declaration public void RecordRightHandStart()"
  },
  "api/Microsoft.MixedReality.Toolkit.Input.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Input.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Input | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Input Classes AnimatedCursor Animated cursor is a cursor driven using an animator to inject state information and animate accordingly AnimatedCursorContextData AnimatedCursorData<T> Data struct for cursor state information for the Animated Cursor, which leverages the Unity animation system. This defines a modification to an Unity animation parameter, based on cursor state. AnimatedCursorStateData BaseController Base Controller class to inherit from for all controllers. BaseControllerPointer Base Pointer class for pointers that exist in the scene as GameObjects. BaseCursor Object that represents a cursor in 3D space. BaseEyeFocusHandler Base Component for handling Eye Focus on GameObject s. BaseFocusHandler Base Component for handling Focus on GameObject s. BaseGenericInputSource Base class for input sources that don't inherit from MonoBehaviour. BaseHand BaseHandVisualizer BaseInputDeviceManager Class providing a base implementation of the IMixedRealityInputDeviceManager interface. BaseInputEventData Base class of all Input Events. BaseInputHandler Base class for the Mixed Reality Toolkit's SDK input handlers. BaseInputSimulationService Base class for services that create simulated input devices. BaseMousePointer Base Mouse Pointer Implementation. BaseNearInteractionTouchable Base class for all NearInteractionTouchables. ColliderNearInteractionTouchable Obsolete base class for all touchables using colliders. Use BaseNearInteractionTouchable instead. ControllerMappingLibrary Helper utility to manage all the required Axis configuration for platforms, where required ControllerPoseSynchronizer Waits for a controller to be initialized, then synchronizes its transform position to a specified handedness. CursorContextInfo The cursor will display the context specified in this component if it is part of the targeted object CursorModifier Component that can be added to any GameObject with a Collider to modify the IMixedRealityCursor reacts when focused by a IMixedRealityPointer . DefaultPointerMediator The default implementation for pointer mediation in MRTK which is responsible for determining which pointers are active based on the state of all pointers. For example, one of the key things this class does is disable far pointers when a near pointer is close to an object. DefaultPrimaryPointerSelector Default primary pointer selector. The primary pointer is chosen among all interaction enabled ones using the following rules in order: Currently pressed pointer that has been pressed for the longest Pointer that was released most recently Pointer that became interaction enabled most recently DefaultRaycastProvider The default implementation of IMixedRealityRaycastProvider. DictationEventData Describes an Input Event with voice dictation. DictationHandler Script used to start and stop recording sessions in the current dictation system and report the transcribed text via UnityEvents. For this script to work, a dictation system like 'Windows Dictation Input Provider' must be added to the Data Providers in the Input System profile. DictationHandler.StringUnityEvent EyeTrackingTarget A game object with the \"EyeTrackingTarget\" script attached reacts to being looked at independent of other available inputs. FingerCursor Cursor used to aide in near finger interactions. FocusEventData Describes an Input Event associated with a specific pointer's focus state change. FocusHandler Utility component to hook up Unity events to the OnFocusEnter and OnFocusExit events. FocusProvider The focus provider handles the focused objects per input source. GazePointerVisibilityStateMachine Helper class for managing the visibility of the gaze pointer to match windows mixed reality and HoloLens 2 When application starts, gaze pointer is visible. Then when articulate hands / motion controllers appear, hide the gaze cursor. Whenever user says \"select\", make the gaze cursor appear. GazeProvider This class provides Gaze as an Input Source so users can interact with objects using their head. GenericPointer Base Class for pointers that don't inherit from MonoBehaviour. GGVPointer This class allows for HoloLens 1 style input, using a far gaze ray for focus with hand and gesture-based input and interaction across it. HandBounds Utility behavior to access the axis aligned bounds of IMixedRealityHands (or the proxy visualizer of IMixedRealityControllers). HandJointService HandJointUtils HandMeshInfo HandRay HandTrackingInputEventData InputActionHandler Script used to handle input action events. Invokes Unity events when the configured input action starts or ends. InputActionUnityEvent Unity event for input action events. Contains the data of the input event that triggered the action. InputAnimation Contains a set of animation curves that describe motion of camera and hands. InputAnimation.PoseCurves InputAnimationMarker A used-defined marker on the input animation timeline. InputAnimationSerializationUtils Functions for serializing input animation data to and from binary files. InputEventData Describes an Input Event that has a source id. InputEventData<T> Describes and input event with a specific type. InputPlaybackService Plays back input animation via the input simulation system. InputRayUtils Utilities for accessing position, rotation of rays. InputRecordingService Provides input recording into an internal buffer and exporting to files. InputSimulationIndicators A row of indicator buttons to control input simulation features. InputSimulationService Service that provides simulated mixed reality input information based on mouse and keyboard input in editor InputSimulationWindow Tools for simulating and recording input as well as playing back input animation in the Unity editor. InputSystemGlobalHandlerListener This component ensures that input events are forwarded to this component when focus or gaze is not required. InputSystemGlobalListener This component ensures that all input events are forwarded to this GameObject when focus or gaze is not required. InteractiveMeshCursor A cursor that looks and acts more like the shell cursor. A two part cursor with visual feedback for all cursor states KeyBindingInspector Inspector for KeyBindings. This shows a simple dropdown list for selecting a binding, as well as a button for binding keys by pressing them. KeyBindingPopupWindow Utility window that listens to input events to set a key binding. Pressing a key or mouse button will define the binding and then immediately close the popup. KeyInputSystem Utility class to poll input for key bindings. LinePointer A simple line pointer for drawing lines from the input source origin to the current pointer position. ManualCameraControl Class for manually controlling the camera in the Unity editor. Attach to the MainCamera object. MeshCursor Object that represents a cursor in 3D space controlled by gaze. MixedRealityCanvasInspector Editor class used to edit UI Canvases. MixedRealityControllerAttribute Attach to a controller device class to make it show up in the controller mapping profile. MixedRealityControllerInfo This script keeps track of the GameObjects representations for each button on the Mixed Reality Controllers. It also keeps track of the animation Transforms in order to properly animate according to user input. MixedRealityControllerMappingProfile New controller types can be registered by adding the MixedRealityControllerAttribute to the controller class. MixedRealityControllerVisualizationProfile MixedRealityControllerVisualizer The Mixed Reality Visualization component is primarily responsible for synchronizing the user's current input with controller models. MixedRealityEyeTrackingProfile MixedRealityGesturesProfile Configuration profile settings for setting up and consuming Input Actions. MixedRealityHandTrackingProfile MixedRealityInputActionRulesProfile MixedRealityInputActionsProfile Configuration profile settings for setting up and consuming Input Actions. MixedRealityInputModule MixedRealityInputModule.PointerData MixedRealityInputModuleEditor MixedRealityInputRecordingProfile Settings for recording input animation assets. MixedRealityInputSimulationProfile MixedRealityInputSimulationProfileInspector MixedRealityInputSystem The Mixed Reality Toolkit's specific implementation of the IMixedRealityInputSystem MixedRealityInputSystemProfile Configuration profile settings for setting up controller pointers. MixedRealityInteractionMapping Maps the capabilities of controllers, linking the Physical inputs of a controller to a Logical construct in a runtime project MixedRealityMouseInputProfile MixedRealityMouseInputProfileInspector MixedRealityPointerEventData Describes an Input Event that involves a tap, click, or touch. MixedRealityPointerProfile Configuration profile settings for setting up controller pointers. MixedRealitySpeechCommandsProfile Configuration profile settings for setting up and consuming Speech Commands. MouseDelta Utility struct that provides mouse delta in pixels (screen space), normalized viewport coordinates, and world units. MousePointer The MousePointer represents a mouse cursor in world space. It uses spherical movement around the camera. Its movement is bound to screenspace, but based in the delta movement of the computer mouse. MouseRotationProvider Utility class to manage toggling of mouse rotation and associated features, such as cursor visibility/locking NearInteractionGrabbable Add a NearInteractionGrabbable component to any GameObject that has a collidable on it in order to make that collidable near grabbable. Any IMixedRealityNearPointer will then dispatch pointer events to the closest near grabbable objects. Additionally, the near pointer will send focus enter and exit events when the decorated object is the closest object to the near pointer NearInteractionTouchable Add a NearInteractionTouchable to your scene and configure a touchable surface in order to get PointerDown and PointerUp events whenever a PokePointer touches this surface. NearInteractionTouchableInspector NearInteractionTouchableInspectorBase NearInteractionTouchableSurface A near interaction object which is a flat surface and can be pressed in one direction. NearInteractionTouchableUnityUI Use a Unity UI RectTransform as touchable surface. NearInteractionTouchableVolume Add a NearInteractionTouchableVolume to your scene and configure a touchable volume in order to get PointerDown and PointerUp events whenever a PokePointer collides with this volume. ObjectCursor The object cursor can switch between different game objects based on its state. It simply links the game object to set to active with its associated cursor state. PointerClickHandler This component handles pointer clicks from all types of input sources. i.e. a primary mouse button click, motion controller selection press, or hand tap. PointerHandler Script used to raise Unity Events in response to pointer events. PointerUnityEvent Unity event for a pointer event. Contains the pointer event data. PointerUtils PokePointer A near interaction pointer that generates touch events based on touchables in close proximity. ScreenSpaceMousePointer Uses the desktop mouse cursor instead of any mouse representation within the scene. It's movement is bound to screenspace. ShellHandRayPointer SimulatedArticulatedHand SimulatedGestureHand SimulatedHand SimulatedHandData Snapshot of simulated hand data. SimulatedHandDataProvider Produces simulated data every frame that defines joint positions. SimulatedHandUtils SourcePoseEventData<T> Describes a source change event. SourceStateEventData Describes an source state event that has a source id. SpeechEventData Describes an input event that involves keyword recognition. SpeechInputHandler This component handles the speech input events raised form the IMixedRealityInputSystem . SpherePointer SpherePointerGrabPoint SpherePointerInspector SpherePointerVisual SpriteCursor Object that represents a cursor comprised of sprites and colors for each state TouchHandler TouchPointer Touch Pointer Implementation. WindowsMixedRealityControllerVisualizer WindowsMixedRealityHandRecorder Record joint positions of a hand and log them for use in simulated hands. Structs Headset The headset definition defines the headset as defined by the SDK / Unity. InputActionEventPair Data class that maps MixedRealityInputAction s to UnityEvent s wired up in the inspector. InputActionRuleDigital Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleDualAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRulePoseAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleQuaternionAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleSingleAxis Generic Input Action Rule for raising actions based on specific criteria. InputActionRuleVectorAxis Generic Input Action Rule for raising actions based on specific criteria. KeyBinding Identifier of a key combination or mouse button for generic input binding. KeywordAndResponse Keyword/UnityEvent pair that ties voice input to UnityEvents wired up in the inspector. MeshCursor.MeshCursorDatum MixedRealityControllerMapping Used to define a controller or other input device's physical buttons, and other attributes. MixedRealityControllerVisualizationSetting Used to define a controller's visualization settings. MixedRealityGestureMapping Data structure for mapping gestures to MixedRealityInputAction s that can be raised by the Input System. MixedRealityInputAction An Input Action for mapping an action to an Input Sources Button, Joystick, Sensor, etc. MixedRealityInputDataProviderConfiguration MixedRealityRaycastHit The resulting hit information from an IMixedRealityRaycastProvider. ObjectCursor.ObjectCursorDatum PointerOption Defines a pointer option to assign to a controller. SpeechCommands Data structure for mapping Voice and Keyboard input to MixedRealityInputAction s that can be raised by the Input System. SpriteCursor.SpriteCursorDatum Interfaces ICursorModifier Interface for cursor modifiers that can modify a GameObject 's properties. IInputActionRule<T> Interface for defining Input Action Rules IInputSimulationService IMixedRealityBaseInputHandler Base interface for all input handlers. This allows us to use ExecuteEvents.ExecuteHierarchy<IMixedRealityBaseInputHandler> to send an event to all input handling interfaces. IMixedRealityController Mixed Reality Toolkit controller definition, used to manage a specific controller type IMixedRealityControllerPoseSynchronizer Basic interface for synchronizing to a controller pose. IMixedRealityControllerVisualizer IMixedRealityCursor Cursor Interface for handling input events and setting visibility. IMixedRealityDictationHandler Interface to implement dictation events. IMixedRealityDictationSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type IMixedRealityEyeGazeDataProvider Provides eye tracking information. IMixedRealityEyeGazeProvider Implements the Gaze Provider for an Input Source. IMixedRealityEyeSaccadeProvider Provides eye tracking information. IMixedRealityFocusChangedHandler Interface to implement to react to focus changed events. IMixedRealityFocusHandler Interface to implement to react to focus enter/exit. IMixedRealityFocusProvider Implements the Focus Provider for handling focus of pointers. IMixedRealityGazeProvider Implements the Gaze Provider for an Input Source. IMixedRealityGestureHandler Interface to implement for generic gesture input. IMixedRealityGestureHandler<T> Interface to implement for generic gesture input. IMixedRealityHand Hand definition, used to provide access to hand joints and other data. IMixedRealityHandJointHandler Interface to implement for hand joint information. IMixedRealityHandJointService Mixed Reality Toolkit device definition, used to instantiate and manage a specific device / SDK IMixedRealityHandMeshHandler Interface to implement for hand mesh information. IMixedRealityHandVisualizer Hand visualization definition, used to provide access to hand joint objects. IMixedRealityInputActionHandler Interface to receive input action events. IMixedRealityInputDeviceManager Mixed Reality Toolkit input device definition, used to instantiate and manage one or more input devices IMixedRealityInputHandler Interface to implement for simple generic input. IMixedRealityInputHandler<T> Interface to implement for more complex generic input. IMixedRealityInputPlaybackService Plays back input animation via the input simulation system. IMixedRealityInputRecordingService Provides input recording into an internal buffer and exporting to files. IMixedRealityInputSource Interface for an input source. An input source is the origin of user input and generally comes from a physical controller, sensor, or other hardware device. IMixedRealityInputSystem Manager interface for a Input system in the Mixed Reality Toolkit All replacement systems for providing Input System functionality should derive from this interface IMixedRealityMousePointer Interface for handling mouse pointers. IMixedRealityNearPointer IMixedRealityPointer Interface for handling pointers. IMixedRealityPointerHandler Interface to implement to react to simple pointer input. IMixedRealityPointerMediator Interface for handling groups of pointers resolving conflicts between them. E.g., ensuring that far pointers are disabled when a near pointer is active. IMixedRealityPrimaryPointerSelector Interface used by the focus provider to select the pointer that will be considered as primary. The current primary pointer can we obtained via PrimaryPointer or subscribing to the primary pointer changed event via SubscribeToPrimaryPointerChanged(PrimaryPointerChangedHandler, Boolean) . IMixedRealityRaycastProvider Interface to handle raycasts into the scene. Used by FocusProvider to perform ray and sphere cast queries for pointers. IMixedRealitySourcePoseHandler Interface to implement to react to source IMixedRealitySourceStateHandler Interface to implement to react to source state changes, such as when an input source is detected or lost. IMixedRealitySpeechHandler Interface to implement to react to speech recognition. IMixedRealitySpeechSystem Mixed Reality Toolkit controller definition, used to manage a specific controller type IMixedRealityTeleportPointer IMixedRealityTouchHandler Implementation of this interface causes a script to receive notifications of Touch events from HandTrackingInputSources IMixedRealityTouchPointer Interface for handling touch pointers. IPointerPreferences Provides interface for getting and setting behaviors and possible other settings for pointers in the input system. Behaviors are described based on pointer type and input type, not per pointer. This is to ensure that new pointers that appear maintain consistent behavior. IPointerResult Interface defining a pointer result. Enums CursorContextEnum Enum for current cursor context CursorContextInfo.CursorAction CursorStateEnum Enum for current cursor state DeviceInputType The InputType defines the types of input exposed by a controller. Denoting the available buttons / interactions that a controller supports. GestureInputType The GestureInputType defines the types of gestures exposed by a controller. HandSimulationMode InputSimulationControlMode InputSimulationWindow.ToolMode InputSourceType The InputSourceType defines the types of input sources. KeyBinding.KeyType The type of value encoded in the Microsoft.MixedReality.Toolkit.Input.KeyBinding.code property. KeyBinding.MouseButton Enum for interpreting the mouse button integer index. MixedRealityControllerConfigurationFlags Flags used by MixedRealityControllerAttribute. MixedRealityControllerInfo.ControllerElementEnum PointerBehavior Specifies how a pointer in MRTK's default input system behaves. SupportedControllerType The SDKType lists the XR SDKs that are supported by the Mixed Reality Toolkit. Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) TouchableEventType Type of Events to receive from a PokePointer. Delegates PrimaryPointerChangedHandler Delegate type used to handle primary pointer changes. Old and new pointer values can be null to indicate transition from or to no primary pointer, but they won't both be null simultaneously. SimulatedHandData.HandJointDataGenerator"
  },
  "api/Microsoft.MixedReality.Toolkit.Inspectors.MixedRealityEyeTrackingProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Inspectors.MixedRealityEyeTrackingProfileInspector.html",
    "title": "Class MixedRealityEyeTrackingProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityEyeTrackingProfileInspector Inheritance Object MixedRealityEyeTrackingProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Inspectors Assembly : cs.temp.dll.dll Syntax public class MixedRealityEyeTrackingProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Inspectors.MixedRealityHandTrackingProfileInspector.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Inspectors.MixedRealityHandTrackingProfileInspector.html",
    "title": "Class MixedRealityHandTrackingProfileInspector | Mixed Reality Toolkit Documentation",
    "keywords": "Class MixedRealityHandTrackingProfileInspector Inheritance Object MixedRealityHandTrackingProfileInspector Namespace : Microsoft.MixedReality.Toolkit.Inspectors Assembly : cs.temp.dll.dll Syntax public class MixedRealityHandTrackingProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector Methods IsProfileInActiveInstance() Declaration protected override bool IsProfileInActiveInstance() Returns Type Description Boolean OnEnable() Declaration protected override void OnEnable() OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Microsoft.MixedReality.Toolkit.Inspectors.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.Inspectors.html",
    "title": "Namespace Microsoft.MixedReality.Toolkit.Inspectors | Mixed Reality Toolkit Documentation",
    "keywords": "Namespace Microsoft.MixedReality.Toolkit.Inspectors Classes MixedRealityEyeTrackingProfileInspector MixedRealityHandTrackingProfileInspector"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRExtendedDisplay.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRExtendedDisplay.html",
    "title": "Class CVRExtendedDisplay | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRExtendedDisplay Inheritance Object CVRExtendedDisplay Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRExtendedDisplay Methods GetDXGIOutputInfo(ref Int32, ref Int32) Declaration public void GetDXGIOutputInfo(ref int pnAdapterIndex, ref int pnAdapterOutputIndex) Parameters Type Name Description Int32 pnAdapterIndex Int32 pnAdapterOutputIndex GetEyeOutputViewport(EVREye, ref UInt32, ref UInt32, ref UInt32, ref UInt32) Declaration public void GetEyeOutputViewport(EVREye eEye, ref uint pnX, ref uint pnY, ref uint pnWidth, ref uint pnHeight) Parameters Type Name Description EVREye eEye UInt32 pnX UInt32 pnY UInt32 pnWidth UInt32 pnHeight GetWindowBounds(ref Int32, ref Int32, ref UInt32, ref UInt32) Declaration public void GetWindowBounds(ref int pnX, ref int pnY, ref uint pnWidth, ref uint pnHeight) Parameters Type Name Description Int32 pnX Int32 pnY UInt32 pnWidth UInt32 pnHeight"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRInput.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRInput.html",
    "title": "Class CVRInput | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRInput Inheritance Object CVRInput Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRInput Methods DecompressSkeletalBoneData(IntPtr, UInt32, EVRSkeletalTransformSpace, VRBoneTransform_t[]) Declaration public EVRInputError DecompressSkeletalBoneData(IntPtr pvCompressedBuffer, uint unCompressedBufferSize, EVRSkeletalTransformSpace eTransformSpace, VRBoneTransform_t[] pTransformArray) Parameters Type Name Description IntPtr pvCompressedBuffer UInt32 unCompressedBufferSize EVRSkeletalTransformSpace eTransformSpace VRBoneTransform_t [] pTransformArray Returns Type Description EVRInputError GetActionHandle(String, ref UInt64) Declaration public EVRInputError GetActionHandle(string pchActionName, ref ulong pHandle) Parameters Type Name Description String pchActionName UInt64 pHandle Returns Type Description EVRInputError GetActionOrigins(UInt64, UInt64, UInt64[]) Declaration public EVRInputError GetActionOrigins(ulong actionSetHandle, ulong digitalActionHandle, ulong[] originsOut) Parameters Type Name Description UInt64 actionSetHandle UInt64 digitalActionHandle UInt64 [] originsOut Returns Type Description EVRInputError GetActionSetHandle(String, ref UInt64) Declaration public EVRInputError GetActionSetHandle(string pchActionSetName, ref ulong pHandle) Parameters Type Name Description String pchActionSetName UInt64 pHandle Returns Type Description EVRInputError GetAnalogActionData(UInt64, ref InputAnalogActionData_t, UInt32, UInt64) Declaration public EVRInputError GetAnalogActionData(ulong action, ref InputAnalogActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice) Parameters Type Name Description UInt64 action InputAnalogActionData_t pActionData UInt32 unActionDataSize UInt64 ulRestrictToDevice Returns Type Description EVRInputError GetBoneCount(UInt64, ref UInt32) Declaration public EVRInputError GetBoneCount(ulong action, ref uint pBoneCount) Parameters Type Name Description UInt64 action UInt32 pBoneCount Returns Type Description EVRInputError GetBoneHierarchy(UInt64, Int32[]) Declaration public EVRInputError GetBoneHierarchy(ulong action, int[] pParentIndices) Parameters Type Name Description UInt64 action Int32 [] pParentIndices Returns Type Description EVRInputError GetBoneName(UInt64, Int32, StringBuilder, UInt32) Declaration public EVRInputError GetBoneName(ulong action, int nBoneIndex, StringBuilder pchBoneName, uint unNameBufferSize) Parameters Type Name Description UInt64 action Int32 nBoneIndex StringBuilder pchBoneName UInt32 unNameBufferSize Returns Type Description EVRInputError GetDigitalActionData(UInt64, ref InputDigitalActionData_t, UInt32, UInt64) Declaration public EVRInputError GetDigitalActionData(ulong action, ref InputDigitalActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice) Parameters Type Name Description UInt64 action InputDigitalActionData_t pActionData UInt32 unActionDataSize UInt64 ulRestrictToDevice Returns Type Description EVRInputError GetInputSourceHandle(String, ref UInt64) Declaration public EVRInputError GetInputSourceHandle(string pchInputSourcePath, ref ulong pHandle) Parameters Type Name Description String pchInputSourcePath UInt64 pHandle Returns Type Description EVRInputError GetOriginLocalizedName(UInt64, StringBuilder, UInt32, Int32) Declaration public EVRInputError GetOriginLocalizedName(ulong origin, StringBuilder pchNameArray, uint unNameArraySize, int unStringSectionsToInclude) Parameters Type Name Description UInt64 origin StringBuilder pchNameArray UInt32 unNameArraySize Int32 unStringSectionsToInclude Returns Type Description EVRInputError GetOriginTrackedDeviceInfo(UInt64, ref InputOriginInfo_t, UInt32) Declaration public EVRInputError GetOriginTrackedDeviceInfo(ulong origin, ref InputOriginInfo_t pOriginInfo, uint unOriginInfoSize) Parameters Type Name Description UInt64 origin InputOriginInfo_t pOriginInfo UInt32 unOriginInfoSize Returns Type Description EVRInputError GetPoseActionData(UInt64, ETrackingUniverseOrigin, Single, ref InputPoseActionData_t, UInt32, UInt64) Declaration public EVRInputError GetPoseActionData(ulong action, ETrackingUniverseOrigin eOrigin, float fPredictedSecondsFromNow, ref InputPoseActionData_t pActionData, uint unActionDataSize, ulong ulRestrictToDevice) Parameters Type Name Description UInt64 action ETrackingUniverseOrigin eOrigin Single fPredictedSecondsFromNow InputPoseActionData_t pActionData UInt32 unActionDataSize UInt64 ulRestrictToDevice Returns Type Description EVRInputError GetSkeletalActionData(UInt64, ref InputSkeletalActionData_t, UInt32) Declaration public EVRInputError GetSkeletalActionData(ulong action, ref InputSkeletalActionData_t pActionData, uint unActionDataSize) Parameters Type Name Description UInt64 action InputSkeletalActionData_t pActionData UInt32 unActionDataSize Returns Type Description EVRInputError GetSkeletalBoneData(UInt64, EVRSkeletalTransformSpace, EVRSkeletalMotionRange, VRBoneTransform_t[]) Declaration public EVRInputError GetSkeletalBoneData(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalMotionRange eMotionRange, VRBoneTransform_t[] pTransformArray) Parameters Type Name Description UInt64 action EVRSkeletalTransformSpace eTransformSpace EVRSkeletalMotionRange eMotionRange VRBoneTransform_t [] pTransformArray Returns Type Description EVRInputError GetSkeletalBoneDataCompressed(UInt64, EVRSkeletalMotionRange, IntPtr, UInt32, ref UInt32) Declaration public EVRInputError GetSkeletalBoneDataCompressed(ulong action, EVRSkeletalMotionRange eMotionRange, IntPtr pvCompressedData, uint unCompressedSize, ref uint punRequiredCompressedSize) Parameters Type Name Description UInt64 action EVRSkeletalMotionRange eMotionRange IntPtr pvCompressedData UInt32 unCompressedSize UInt32 punRequiredCompressedSize Returns Type Description EVRInputError GetSkeletalReferenceTransforms(UInt64, EVRSkeletalTransformSpace, EVRSkeletalReferencePose, VRBoneTransform_t[]) Declaration public EVRInputError GetSkeletalReferenceTransforms(ulong action, EVRSkeletalTransformSpace eTransformSpace, EVRSkeletalReferencePose eReferencePose, VRBoneTransform_t[] pTransformArray) Parameters Type Name Description UInt64 action EVRSkeletalTransformSpace eTransformSpace EVRSkeletalReferencePose eReferencePose VRBoneTransform_t [] pTransformArray Returns Type Description EVRInputError GetSkeletalSummaryData(UInt64, ref VRSkeletalSummaryData_t) Declaration public EVRInputError GetSkeletalSummaryData(ulong action, ref VRSkeletalSummaryData_t pSkeletalSummaryData) Parameters Type Name Description UInt64 action VRSkeletalSummaryData_t pSkeletalSummaryData Returns Type Description EVRInputError GetSkeletalTrackingLevel(UInt64, ref EVRSkeletalTrackingLevel) Declaration public EVRInputError GetSkeletalTrackingLevel(ulong action, ref EVRSkeletalTrackingLevel pSkeletalTrackingLevel) Parameters Type Name Description UInt64 action EVRSkeletalTrackingLevel pSkeletalTrackingLevel Returns Type Description EVRInputError SetActionManifestPath(String) Declaration public EVRInputError SetActionManifestPath(string pchActionManifestPath) Parameters Type Name Description String pchActionManifestPath Returns Type Description EVRInputError ShowActionOrigins(UInt64, UInt64) Declaration public EVRInputError ShowActionOrigins(ulong actionSetHandle, ulong ulActionHandle) Parameters Type Name Description UInt64 actionSetHandle UInt64 ulActionHandle Returns Type Description EVRInputError ShowBindingsForActionSet(VRActiveActionSet_t[], UInt32, UInt64) Declaration public EVRInputError ShowBindingsForActionSet(VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t, ulong originToHighlight) Parameters Type Name Description VRActiveActionSet_t [] pSets UInt32 unSizeOfVRSelectedActionSet_t UInt64 originToHighlight Returns Type Description EVRInputError TriggerHapticVibrationAction(UInt64, Single, Single, Single, Single, UInt64) Declaration public EVRInputError TriggerHapticVibrationAction(ulong action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, ulong ulRestrictToDevice) Parameters Type Name Description UInt64 action Single fStartSecondsFromNow Single fDurationSeconds Single fFrequency Single fAmplitude UInt64 ulRestrictToDevice Returns Type Description EVRInputError UpdateActionState(VRActiveActionSet_t[], UInt32) Declaration public EVRInputError UpdateActionState(VRActiveActionSet_t[] pSets, uint unSizeOfVRSelectedActionSet_t) Parameters Type Name Description VRActiveActionSet_t [] pSets UInt32 unSizeOfVRSelectedActionSet_t Returns Type Description EVRInputError"
  },
  "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRIOBuffer.html": {
    "href": "api/Microsoft.MixedReality.Toolkit.OpenVR.Headers.CVRIOBuffer.html",
    "title": "Class CVRIOBuffer | Mixed Reality Toolkit Documentation",
    "keywords": "Class CVRIOBuffer Inheritance Object CVRIOBuffer Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Microsoft.MixedReality.Toolkit.OpenVR.Headers Assembly : cs.temp.dll.dll Syntax public class CVRIOBuffer Methods Close(UInt64) Declaration public EIOBufferError Close(ulong ulBuffer) Parameters Type Name Description UInt64 ulBuffer Returns Type Description EIOBufferError Open(String, EIOBufferMode, UInt32, UInt32, ref UInt64) Declaration public EIOBufferError Open(string pchPath, EIOBufferMode mode, uint unElementSize, uint unElements, ref ulong pulBuffer) Parameters Type Name Description String pchPath EIOBufferMode mode UInt32 unElementSize UInt32 unElements UInt64 pulBuffer Returns Type Description EIOBufferError PropertyContainer(UInt64) Declaration public ulong PropertyContainer(ulong ulBuffer) Parameters Type Name Description UInt64 ulBuffer Returns Type Description UInt64 Read(UInt64, IntPtr, UInt32, ref UInt32) Declaration public EIOBufferError Read(ulong ulBuffer, IntPtr pDst, uint unBytes, ref uint punRead) Parameters Type Name Description UInt64 ulBuffer IntPtr pDst UInt32 unBytes UInt32 punRead Returns Type Description EIOBufferError Write(UInt64, IntPtr, UInt32) Declaration public EIOBufferError Write(ulong ulBuffer, IntPtr pSrc, uint unBytes) Parameters Type Name Description UInt64 ulBuffer IntPtr pSrc UInt32 unBytes Returns Type Description EIOBufferError"
  },
  "Documentation/hologram-stabilization.html": {
    "href": "Documentation/hologram-stabilization.html",
    "title": "全息图稳定 | Mixed Reality Toolkit Documentation",
    "keywords": "全息图稳定 性能 为了使基础的混合现实平台和设备产生最佳结果，实现执行帧率很重要。目标帧率（例如：60 FPS或90 FPS）将因平台和设备而异。但是，足够帧率的混合现实应用程序将具有稳定的全息图以及有效的头部跟踪，手部跟踪等功能。 环境追踪 稳定的全息渲染在很大程度上取决于平台和设备的头部姿势跟踪。在每一帧中，Unity根据基础平台估计并提供的摄像机姿势来渲染场景。如果此跟踪未正确跟随实际的头部运动，则全息图将在视觉上显得不准确。对于像HoloLens这样的AR设备，用户可以将虚拟全息图与现实世界联系起来，这一点尤其明显和重要。性能对于可靠的头部跟踪很重要，但是也存在 其他重要的环境注意事项 。影响用户体验的环境元素的类型将取决于目标平台的具体情况。 Windows混合现实 Windows Mixed Reality平台提供了一些 参考资料 用于平台上的全息图稳定。尽管开发人员可以使用一些关键工具来改善用户的全息图视觉体验。 深度缓冲区共享 Unity开发人员可以选择与平台共享应用程序的深度缓冲区。这提供了当前帧存在全息图的信息，平台可以通过称为Late-Stage Reprojection的硬件辅助过程利用该信息来使全息图稳定。 Late-Stage Reprojection 在渲染帧结束时，Windows Mixed Reality平台将获取应用程序生成的颜色和深度渲染目标，并转换最终的屏幕输出，以解决自上一次头部姿势预测以来任何轻微的头部运动。应用程序的游戏循环需要时间才能执行。例如，在60 FPS时，这意味着应用程序花费了约16.667ms来渲染一帧。即使这似乎是微不足道的时间，用户的头部位置和方向也将发生变化，从而为渲染中的相机产生新的投影矩阵。Late-Stage Reprojection会转换最终图像中的像素，以解决这一新问题。 Per-pixel vs stabilization plane LSR 根据Windows混合现实设备上运行的设备端点和操作系统版本，Late-Stage Reprojection算法将按像素执行或通过 稳定平面 . 基于每个像素的深度 基于每个像素深度的重新投影涉及利用深度缓冲区来修改每个像素的图像输出，从而使全息图稳定在各种距离处。例如，距离1m的球体可能在距离10m的柱子前面。如果用户将头部稍微倾斜，则表示球体的像素将与表示柱子的较远像素具有不同的变换。每像素重投影将考虑每个像素的距离差异，以实现更准确的重投影。 稳定面 如果不可能创建一个精确的深度缓冲区与平台共享，则另一种形式的LSR使用稳定平面。场景中的所有全息图都将获得一定的稳定性，但是位于所需平面中的全息图将获得最大的硬件稳定性。可以通过HolographicSettings.SetFocusPointForFrame将平面的点和法线提供给平台。 Unity提供的API . 深度缓冲区格式 如果以HoloLens为开发目标，则强烈建议使用16位深度缓冲格式而不是24位深度缓冲格式。尽管深度值的精度较低，但这可以极大地节省性能。弥补较低的精度并避免 z-fighting ，建议减少 far clip plane 从Unity设置的1000m默认值开始。 [!注意] 如果使用 16位深度格式 ，则模板缓冲区所需的效果将不起作用，因为在这种情况下 Unity不创建模板缓冲区 。相反，选择 24位深度格式 通常会创建一个 8位模板缓冲器 （如果适用于端点图形平台。 Unity中的深度缓冲区共享 为了利用基于深度的LSR，开发人员需要采取两个重要步骤。 在 Edit > Project Settings > Player > XR Settings > Virtual Reality SDKs >下启用 Depth Buffer Sharing 如果以HoloLens为目标，建议也选择 16位深度格式 在屏幕上渲染颜色时，也要渲染深度 不透明的游戏对象 在Unity中，通常会自动写入深度。但是，默认情况下，透明和文本对象通常不会写入深度。如果使用MRTK标准着色器或Text Mesh Pro，则可以很容易地对其进行补救。 [!注意] 为了快速确定场景中哪些对象没有可视地写入深度缓冲区，可以使用 Render Depth Buffer utility 在“MRTK Configuration profile”配置文件中的Editor Settings下。 透明MRTK标准着色器 对于透明材料，使用 MRTK标准着色器r , 选择要在 Inspector 窗口中查看的材料。然后单击 Fix Now 按钮以将材质转换为写入深度（即Z-Write On）。 之前 后 Text Mesh Pro 对于Text Mesh Pro对象，选择TMP GameObject以在检查器中查看它。在材质组件下，切换指定材质的着色器以使用MRTK TextMeshPro着色器。 自定义着色器 如果要编写自定义着色器，请添加 ZWrite flag 到 Pass 块定义的顶部以配置着色器以写入深度缓冲区。 Shader \"Custom/MyShader\" { SubShader { Pass { ... ZWrite On ... } } } 不透明的支持 如果上述方法不适用于给定场景（即使用Unity UI），则可能有另一个对象写入深度缓冲区。一个常见的示例是在场景的浮动面板上使用Unity UI文本。通过使面板不透明或至少写到一定深度，文本和面板都将被平台稳定，因为它们的z值非常接近。 WorldAnchors (HoloLens) 除了确保满足正确的配置以确保视觉稳定性外，重要的是要确保全息图在其正确的物理位置保持稳定。为了在物理空间中的重要位置通知平台，开发人员可以利用 WorldAnchors 在需要留在一个地方的GameObjects上.= WorldAnchor 是添加到GameObject的一种组件，该组件可以完全控制该对象的变换。 诸如HoloLens之类的设备正在不断扫描并了解环境。因此，随着HoloLens跟踪空间中的运动和位置，其估计值将被更新并且 调整Unity坐标系 .例如，如果在开始时将GameObject放置在距离摄像机1m的位置，则当HoloLens跟踪环境时，它可能会意识到GameObject所在的物理点实际上位于1.1m处。这将导致全息图漂移。将WorldAnchor应用于GameObject将使锚能够控制对象的变换，从而使对象保持在正确的物理位置（即，在运行时更新为1.1m而不是1m）。在整个应用会话中留存 WorldAnchors ，开发人员可以使用 WorldAnchorStore 来 保存并加载WorldAnchors . [!注意] 一旦将WorldAnchor组件添加到GameObject，就无法修改该GameObject的变换（即transform.position = x）。开发人员必须删除WorldAnchor才能编辑变换。 WorldAnchor m_anchor; public void AddAnchor() { this.m_anchor = this.gameObject.AddComponent<WorldAnchor>(); } public void RemoveAnchor() { DestroyImmediate(m_anchor); } 建议查看 性能 HoloLens的环境注意事项 Windows混合现实的全息图稳定性 Focus point in Unity Unity中的坐标系 Persistence in Unity 了解混合现实的性能 Unity的性能建议"
  },
  "Assets/MixedRealityToolkit.SDK/Profiles/MixedRealityControllerConfigurationProfile.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Profiles/MixedRealityControllerConfigurationProfile.html",
    "title": "Mixed Reality Controller Configuration Profile | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Controller Configuration Profile When you need to use input controllers for your Mixed Reality project, they are registered and configured centrally within the Controller configuration profile as you can see here: This enables you to very quickly define which SDKs / controllers you want to support in your project and configure how each are intended to work. The configuration is broken down in to several key components, as detailed below: Main Controller Template definition In the first section of the configuration, the options are detailed as follows: Render Motion Controllers This defines whether or not controllers should be rendered or not. By not adding a ControllerVisualizer in to the scene also has the same effect. This also disabled the Global Model options below. Use Default Models (for future implementation) This option will use the models for the controller direct from the SDK (where available), so that you don't have to configure a custom model. Global Left / Right hand models These allow you at the top level to define the default model that will be drawn for each controlling hand. If no hand is available, the Left most model will be used by default. To alter the position and rotation of the displayed model in relation to the Controller pose, then update the controllers Model Prefab transform values. See the \"Example Models\" section below for the controller models and their recommended transform settings provided in the SDK's \" Standard Assets \" folder. Add a New Controller Template This enables you to add a new controller definition (detailed below) to the profile to add another supported SDK. Controller Template Each controller template allows you to configure any of the supported controllers for the various SDKs that have been enabled through the Mixed Reality Toolkit. Each controller is added by SDK and the prevailing hand. Any SDK Controller types or hands NOT configured will not be detected or used in a running project. The options for configuring a template are detailed as follows: Controller Your custom name for the controller, just for easy reference Controller Type (Work in progress, see list for enabled devices) A drop down list of supported controllers by the Mixed Reality Toolkit, namely: Windows Mixed Reality Motion Controllers HoloLens 2 articulated hands HoloLens 1 hands HoloLens 1 clicker OpenVR Default (fallback) controllers Oculus Touch Vive Wand Vive Knuckles (experimental) Windows Gaming Gamepad (like Xbox) Handedness Which hand is configured for this controller definition Both does not configure all controllers at this time. Use Default model For this controller only, use the model for the controller direct from the SDK (where available), so that you don't have to configure a custom model. This overrides the Global Model setting. Note This is currently supported on both Windows Mixed Reality and OpenVR, loading any controller models provided by the platform API. Override Model Like the Global Model options, allows you to provide a model to be drawn for this specific controller. This overrides the Global Model setting. Interaction Mappings The interaction mappings allow you to map logical input actions for use in your project to the various controller inputs available from the physical device. These are different for each controller type, as shown below: Motion Controller Oculus Touch Vive Wand In the future custom mappings may become available, for now they are defined per the devices own specification according to the input definitions set out by Unity The Action each input can perform, is completely up to you. See the Input Action configuration profile for more information. Example Models The models provided in the Mixed Reality Toolkit \"Standard Assets\" folder are as follows: These can be found in \"Mixed Reality Toolkit SDK / Standard Assets / Controllers\" Debug Controllers The Mixed Reality Toolkit provides a set of basic Gizmo style controllers, used to help align your models to the controller position output by the SDK, to help with offset settings. Note, the ability to display BOTH the Gizmo and the controller models isn't supported as yet. This will be included in a future release. We recommend applying the following Prefab transform values to align the controller model when using to align with the users view: Position - no change Rotation - X 90 (left) -90 (right), Y 0 , Z 0 Additional models available to download Oculus hands (provided via the Oculus open source project) Oculus provide two basic hand models, including animation (although not available through the visualizer currently). Source -> Oculus Hand Package download We recommend applying the following Prefab transform values to align the controller model with the users view: Position - no change Rotation - X 0, Y 0 , Z 90 (left) -90 (right) Oculus Rift touch controllers (provided via the Oculus open source project) Oculus also provide animated controller models for their touch controllers. Source -> Oculus Sample Framework for Unity Project We recommend applying the following Prefab transform values to align the controller model when using to align with the users view: Position - no change Rotation - no change HTC Vive wand controllers (available in the SteamVR SDK) Steam provide basic models for the HTC Vive Wand controllers. Source -> Included as part of the Unity SteamVR SDK, or the Steam VR Client \"(Steam Install Folder)\\Steam\\steamapps\\common\\SteamVR\\resources\\rendermodels\" If you use Steams Models, we recommend applying the following Prefab transform values to align the controller model when using to align with the users view: Position - no change Rotation - no change"
  },
  "Assets/MixedRealityToolkit.SDK/Profiles/README.html": {
    "href": "Assets/MixedRealityToolkit.SDK/Profiles/README.html",
    "title": "Mixed Reality Toolkit - SDK - Elements - Profiles | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit - SDK - Elements - Profiles This folder contains example MRTK profiles used to configure your solution. This includes: MixedRealityConfigurationProfile The main configuration profile for the Mixed Reality Toolkit, hosting the start up and manager initialization options for the framework. MixedRealityInputActionsProfile Input Actions catalogue for your project, defining the logical actions your project will perform for any given input / axis type MixedRealityControllerConfigurationProfile Central configuration file for controllers to be used in your project. Allows the registration of controllers for various SDKs and map the inputs of those controllers to the logical actions used in your project. Additionally, allows you to set the models to be used for those controllers, whether they are the SDK's default, a single generic model per hand or specific models for each controller type. MixedRealityCameraProfile Camera profile options for the project, including clipping and skybox settings. MixedRealitySpeechCommandsProfile Similar to the Input Actions, allows you to define a set of recognized keywords and assign them to logical Input actions in your project. MixedRealityDiagnosticsProfile Configuration for showing diagnostic data while using your project."
  },
  "README.html": {
    "href": "README.html",
    "title": "什么是 Mixed Reality Toolkit | Mixed Reality Toolkit Documentation",
    "keywords": "什么是 Mixed Reality Toolkit MRTK-Unity 是一个微软驱动的项目，它提供了一系列组件和功能，用于加速Unity中跨平台的MR应用程序开发。以下是它的一些功能: 提供 基本构建模块用于HoloLens, Windows Mixed Reality 和 OpenVR的Unity 开发 . 允许 快速原型设计 通过编辑器内模拟使您可以立即查看更改。 作为 可扩展框架 运行，为开发人员提供了替换核心组件的能力。 支持广泛的平台 ，包括 Microsoft HoloLens Microsoft HoloLens 2 Windows Mixed Reality headsets OpenVR headsets (HTC Vive / Oculus Rift) MRTK 入门 入门 MRTK 概述 功能指南 API 参考 构建状态 Branch CI Status Docs Status mrtk_development 所需软件 Windows SDK 18362+ Unity 2018.4.x Visual Studio 2019 模拟器 (可选) 要使用MRTK v2生成应用程序，您需要Windows 10 May 2019 Update SDK。 要运行沉浸式头显的应用程序，您需要Windows 10 Fall Creators Update。 Unity 3D 引擎支持在Windows 10 中构建混合现实项目 Visual Studio用于代码编辑，部署和构建UWP应用程序包 模拟器允许你在没有设备的模拟环境中测试应用程序 功能区 输入系统 手动跟踪 (HoloLens 2) 眼动跟踪 (HoloLens 2) 配置文件 Gaze + Gesture (HoloLens) UI 控件 Solvers 多场景 管理 空间 感知 诊断 工具 MRTK 标准 Shader Speech & Dictation 边界 系统 编辑器内 模拟 实验性 功能 UI 和 交互构件模块 Button Bounding Box Manipulation Handler 按钮控件，支持各种输入方法，包括HoloLens 2的全连接手 用于操纵3D空间对象的标准UI 用一只手或两只手操纵对象的脚本 Slate System Keyboard Interactable 2D样式平面，支持通过全连接手输入来滚动 在Unity中使用系统键盘的示例脚本 一个脚本用于使对象可交互，同时具有可视化状态和主题支持 Solver Object Collection Tooltip 多种对象定位行为，例如tag-along, body-lock，恒定的view size 以及surface magnetism 用于将一组三维对象进行排列的脚本 具有灵活 anchor/pivot system 的注释UI，可用于标记运动控制器和对象 Slider MRTK Standard Shader Hand Menu 用于调整值的Slider UI，支持直接的手部跟踪交互 MRTK 标准着色器支持多种快速设计元素并且有性能保证 使用Hand Constraint Solver 锁定在手部的UI，用于快速访问 App Bar Pointers Fingertip Visualization 手动激活Bounding Box的UI 了解各种类型的指针 指尖的视觉可见会提高直接交互的自信 Near Menu Spatial Awareness Voice Command 演示如何使用Solver将对象附加到手部关节上 使您的全息对象与物理环境互动 集成语音输入的脚本和示例 Eye Tracking: Target Selection Eye Tracking: Navigation Eye Tracking: Heat Map 结合眼睛，声音和手部输入，轻松快捷地在整个场景中选择全息物体 了解如何根据您的所看向的地方自动滚动文本或流畅放大重点内容 示例用于记录，加载和可视化用户在您的应用程序中所看向的 工具 Optimize Window Dependency Window Build Window Input recording 自动配置混合现实项目以优化性能 分析资源之间的依赖并识别未使用的资源 为混合现实应用程序配置并执行端到端构建过程 在编辑器中记录和回放头部运动和手动跟踪数据 示例场景 在 示例场景 中探索MRTK的各种类型的交互和UI控件。 您可以在 Assets/MixedRealityToolkit.Examples/Demos 文件夹下找到其他示例场景。 MRTK 示例中心 使用MRTK示例中心，您可以尝试MRTK中的各种示例场景。 您可以在 Release Assets 文件夹下找到HoloLens（x86），HoloLens 2（ARM）和Windows Mixed Reality沉浸式头显（x64）的预构建应用程序包。 使用Windows Device Portal 在HoloLens上安装应用程序 . 请参阅 示例中心README页面 以了解有关创建具有MRTK场景系统和场景转换服务的多场景中心的详细信息。 使用MRTK制作的示例应用 元素周期表 是一个开源示例应用程序，它演示了如何使用MRTK的输入系统和构建模块来为HoloLens和沉浸式头显创建应用程序体验。阅读移植故事: 使用MRTK v2将元素周期表应用程序引入HoloLens 2 Galaxy Explorer 是一个开源示例应用程序，最初作为HoloLens 'Share Your Idea'系列的一部分于2016年3月开发。已使用MRTK v2更新了Galaxy Explorer，使用了HoloLens 2的新功能。阅读故事： HoloLens 2的Galaxy Explorer的制作 与社区互动 Join the conversation around MRTK on Slack . You can join the Slack community via the automatic invitation sender . Ask questions about using MRTK on Stack Overflow using the MRTK tag. Search for known issues or file a new issue if you find something broken in MRTK code. For questions about contributing to MRTK, go to the mixed-reality-toolkit channel on slack. This project has adopted the Microsoft Open Source Code of Conduct . For more information, see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. 混合现实开发中心的有用资源 探索 设计 开发 发布 了解如何为HoloLens和沉浸式头显（VR）建立混合现实体验。 获取设计指南。构建用户界面。学习交互和输入。 获取开发指南。学习技术。了解科学。 为他人准备好您的应用程序，并考虑创建3D启动器。 Azure上的有用资源 Spatial Anchors Speech Services Vision Services Spatial Anchors是一种跨平台的服务。通过该服务，可以使用跨设备的，随时间变化仍保持在自己位置的对象创建混合现实体验 发现并将Azure支持的语音功能（如语音转文字，说话者识别或语音翻译）集成到您的应用程序中。 使用视觉服务（例如计算机视觉，人脸检测，情感识别或视频索引器）识别并分析您的图像或视频内容。 了解有关MRTK项目的更多信息 您可以在 our wiki 的Project Management部分下找到我们的规划材料。在迭代计划问题中，您始终可以看到团队正在积极研究的项目。 如何贡献 在 贡献 上了解如何为MRTK贡献力量. 有关MRTK存储库中使用的不同分支的详细信息，请查看 Branch Guide ."
  },
  "Documentation/SpatialAwareness/SpatialObjectMeshObserver.html": {
    "href": "Documentation/SpatialAwareness/SpatialObjectMeshObserver.html",
    "title": "Configuring Mesh Observers for Editor | Mixed Reality Toolkit Documentation",
    "keywords": "Configuring Mesh Observers for Editor A convenient way to provide environment mesh data in the Unity editor is to use the SpatialObjectMeshObserver class. The Spatial Object Mesh Observer is an editor-only data provider for the Spatial Awareness system that enables importing 3D model data to represent a spatial mesh. One common use of the Spatial Object Mesh Observer is to import data scanned via a Microsoft HoloLens to test how an experience adapts to different environments from within Unity. Getting started This guide will walk through setting up a Spatial Object Mesh Observer . There are three key steps to enable this feature. Add a Spatial Object Mesh Observer to the Spatial Awareness system profile Set the Environment Mesh Data object Configure rest of the Mesh Observer profile properties Set up a Spatial Object Mesh Observer profile Select the desired Mixed Reality Toolkit configuration profile or select the Mixed Reality Toolkit object in scene Open or expand the Spatial Awareness System tab Click on \"Add Spatial Observer\" button Select the SpatialObjectMeshObserver type Select the desired Spatial Mesh Object . By default, the observer is configured with an example model. This model was created using a Microsoft HoloLens but it is possible to create a new scan mesh object . Configure rest of the Mesh Observer profile properties Spatial Object Mesh Observer profile notes Since the Spatial Object Mesh Observer loads data from a 3D model, it does not honor some of the standard mesh observer settings which are outlined below. Update Interval The Spatial Object Mesh Observer sends all meshes to an application when the model is loaded. It does not simulate time deltas between updates. An application can re-receive the mesh events by calling myObserver.ClearObservation() and myObserver.Resume() . Is Stationary Observer The Spatial Object Mesh Observer considers all 3D mesh objects to be stationary and disregards origin. Observer Shape and Extents The Spatial Object Mesh Observer sends the entire 3D mesh to the application. Observer shape and extents are not considered. Level of Detail and Triangles / Cubic Meter The Observer does not attempt to find 3D model LODs when sending the meshes to the application. Acquiring environment scans This section outlines additional information to create and gather Spatial Mesh Object files for use with the Spatial Object Mesh Observer . Windows Device Portal The Windows Device Portal can be used to download the spatial mesh, as a .obj file, from a Microsoft HoloLens device. Scan by simply walking and viewing the desired environment with a HoloLens Connect to the HoloLens using the Windows Device Portal Navigate to the 3D View page Click the Update button under Spatial Mapping section Click the Save button under Spatial Mapping section to save the obj file to PC Note HoloToolkit .room files Many developers will have previously used HoloToolkit to scan environments and create .room files. The Mixed Reality Toolkit now supports importing these files as GameObjects in Unity and use them as Spatial Mesh Objects in the observer. See also Profiles Mixed Reality Toolkit Profile configuration guide Spatial Awareness Getting started Configuring Mesh Observers on Device Configuring Mesh Observers via code Using the Windows Device Portal"
  },
  "Documentation/SpatialAwareness/UsageGuide.html": {
    "href": "Documentation/SpatialAwareness/UsageGuide.html",
    "title": "Configuring Mesh Observers via code | Mixed Reality Toolkit Documentation",
    "keywords": "Configuring Mesh Observers via code This article will discuss some of the key mechanisms and APIs to programmatically configure the Spatial Awareness system and related Mesh Observer data providers. Accessing Mesh Observers Mesh Observer classes that implement the IMixedRealitySpatialAwarenessMeshObserver interface provide platform-specific mesh data to the Spatial Awareness system. Multiple Observers can be configured in the Spatial Awareness profile. Accessing the data providers of the Spatial Awareness system is mostly the same as for any other Mixed Reality Toolkit service. The Spatial Awareness service must be casted to the IMixedRealityDataProviderAccess interface to access via the GetDataProvider<T> APIs, which can then be utilized to access the Mesh Observer objects directly at runtime. // Use CoreServices to quickly get access to the IMixedRealitySpatialAwarenessSystem var spatialAwarenessService = CoreServices.SpatialAwarenessSystem; // Cast to the IMixedRealityDataProviderAccess to get access to the data providers var dataProviderAccess = spatialAwarenessService as IMixedRealityDataProviderAccess; // Get the first Mesh Observer available, generally we have only one registered var meshObserver = dataProviderAccess.GetDataProvider<IMixedRealitySpatialAwarenessMeshObserver>(); // Get the SpatialObjectMeshObserver specifically var meshObserverName = \"Spatial Object Mesh Observer\"; var spatialObjectMeshObserver = dataProviderAccess.GetDataProvider<IMixedRealitySpatialAwarenessMeshObserver>(meshObserverName); Starting and stopping mesh observation One of the most common tasks when dealing with the Spatial Awareness system is turning the feature off/on dynamically at runtime. This is done per Observer via the IMixedRealitySpatialAwarenessObserver.Resume and IMixedRealitySpatialAwarenessObserver.Suspend APIs. // Cast the Spatial Awareness system to IMixedRealityDataProviderAccess to get an Observer var access = CoreServices.SpatialAwarenessSystem as IMixedRealityDataProviderAccess; // Get the first Mesh Observer available, generally we have only one registered var observer = access.GetDataProvider<IMixedRealitySpatialAwarenessMeshObserver>(); // Suspends observation of spatial mesh data observer.Suspend(); // Resumes observation of spatial mesh data observer.Resume(); This code functionality can also be simplified via access through the Spatial Awareness system directly. var meshObserverName = \"Spatial Object Mesh Observer\"; CoreServices.SpatialAwarenessSystem.ResumeObserver<IMixedRealitySpatialAwarenessMeshObserver>(meshObserverName); Starting and stopping all mesh observation It is generally convenient to start/stop all mesh observation in the application. This can be achieved through the helpful Spatial Awareness system APIs, ResumeObservers() and SuspendObservers() . // Resume Mesh Observation from all Observers CoreServices.SpatialAwarenessSystem.ResumeObservers(); // Suspend Mesh Observation from all Observers CoreServices.SpatialAwarenessSystem.SuspendObservers(); Enumerating and accessing the meshes Accessing the meshes can be done per Observer and then enumerating through the meshes known to that Mesh Observer via the IMixedRealitySpatialAwarenessMeshObserver API. If running in editor, one can use the AssetDatabase.CreateAsset() to save the Mesh object to an asset file. If running on device, there are many community and store plugins available to serialize the MeshFilter data into a model file type( OBJ Example ). // Cast the Spatial Awareness system to IMixedRealityDataProviderAccess to get an Observer var access = CoreServices.SpatialAwarenessSystem as IMixedRealityDataProviderAccess; // Get the first Mesh Observer available, generally we have only one registered var observer = access.GetDataProvider<IMixedRealitySpatialAwarenessMeshObserver>(); // Loop through all known Meshes foreach (SpatialAwarenessMeshObject meshObject in observer.Meshes.Values) { Mesh mesh = meshObject.Filter.mesh; // Do something with the Mesh object } Showing and hiding the spatial mesh It's possible to programmatically hide/show meshes using the sample code below: // Cast the Spatial Awareness system to IMixedRealityDataProviderAccess to get an Observer var access = CoreServices.SpatialAwarenessSystem as IMixedRealityDataProviderAccess; // Get the first Mesh Observer available, generally we have only one registered var observer = access.GetDataProvider<IMixedRealitySpatialAwarenessMeshObserver>(); // Set to not visible observer.DisplayOption = SpatialAwarenessMeshDisplayOptions.None; // Set to visible and the Occlusion material observer.DisplayOption = SpatialAwarenessMeshDisplayOptions.Occlusion; Registering for Mesh Observation events Components can implement the IMixedRealitySpatialAwarenessObservationHandler<SpatialAwarenessMeshObject> and then register with the Spatial Awareness system to receive Mesh Observation events. The DemoSpatialMeshHandler script is a useful example and starting point for listening to Mesh Observer events. This is a simplified example of DemoSpatialMeshHandler script and Mesh Observation event listening. // Simplify type using SpatialAwarenessHandler = IMixedRealitySpatialAwarenessObservationHandler<SpatialAwarenessMeshObject>; public class MyMeshObservationExample : MonoBehaviour, SpatialAwarenessHandler { private void OnEnable() { // Register component to listen for Mesh Observation events, typically done in OnEnable() CoreServices.SpatialAwarenessSystem.RegisterHandler<SpatialAwarenessHandler>(this); } private void OnDisable() { // Unregister component from Mesh Observation events, typically done in OnDisable() CoreServices.SpatialAwarenessSystem.UnregisterHandler<SpatialAwarenessHandler>(this); } public virtual void OnObservationAdded(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> eventData) { // Do stuff } public virtual void OnObservationUpdated(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> eventData) { // Do stuff } public virtual void OnObservationRemoved(MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> eventData) { // Do stuff } } See Also Spatial Awareness Getting Started Configuring the Spatial Awareness Mesh Observer Spatial Awareness API documentation"
  },
  "Documentation/TeleportSystem/Overview.html": {
    "href": "Documentation/TeleportSystem/Overview.html",
    "title": "Teleport System | Mixed Reality Toolkit Documentation",
    "keywords": "Teleport System The teleport system is a sub-system of the MRTK that handles teleporting the user when the application is using an opaque display. For AR experiences (like HoloLens), the teleportation system is not active. For immersive HMD experiences (OpenVR, WMR) the teleport system can be enabled. Enabling and disabling The teleport system can be enabled or disabled by toggling the checkbox in its profile. This can be done by selecting the MixedRealityToolkit object in the scene, clicking \"Teleport\" and then toggling the \"Enable Teleport System\" checkbox. This can also be done at runtime: void DisableTeleportSystem() { CoreServices.TeleportSystem.Disable(); } void EnableTeleportSystem() { CoreServices.TeleportSystem.Enable(); } Events The teleport system exposes events through the IMixedRealityTeleportHandler interface to provide signals on when teleport actions begin, end, or get cancelled. See the linked API documentation for more details on the mechanics of the events and their associated payload. Usage How to register for teleportation events The code below shows how to create a MonoBehaviour that will listen for teleportation events. This code assumes that the teleport system is enabled. using Microsoft.MixedReality.Toolkit; using Microsoft.MixedReality.Toolkit.Teleport; using UnityEngine; public class TeleportHandlerExample : MonoBehaviour, IMixedRealityTeleportHandler { public void OnTeleportCanceled(TeleportEventData eventData) { Debug.Log(\"Teleport Cancelled\"); } public void OnTeleportCompleted(TeleportEventData eventData) { Debug.Log(\"Teleport Completed\"); } public void OnTeleportRequest(TeleportEventData eventData) { Debug.Log(\"Teleport Request\"); } public void OnTeleportStarted(TeleportEventData eventData) { Debug.Log(\"Teleport Started\"); } void OnEnable() { // This is the critical call that registers this class for events. Without this // class's IMixedRealityTeleportHandler interface will not be called. CoreServices.TeleportSystem.RegisterHandler<IMixedRealityTeleportHandler>(this); } void OnDisable() { // Unregistering when disabled is important, otherwise this class will continue // to receive teleportation events. CoreServices.TeleportSystem.UnregisterHandler<IMixedRealityTeleportHandler>(this); } }"
  },
  "Documentation/Tools/ControllerMappingTool.html": {
    "href": "Documentation/Tools/ControllerMappingTool.html",
    "title": "Controller Mapping Tool | Mixed Reality Toolkit Documentation",
    "keywords": "Controller Mapping Tool The controller mapping tool is a runtime (on device or in the editor) tool that enables developers to quickly determine the Unity input axis and button mappings for a hardware controller (ex: motion controller). This tool is very useful when developing support for a new hardware controller. It can also help to confirm a suspected control mapping issue in the support class for an existing controller. Using the controller mapping tool To get started with the controller mapping tool, navigate to MixedRealityToolkit.Tools\\RuntimeTools\\Tools\\ControllerMappingTool and open the ControllerMappingTool scene. Once the scene has been loaded, the project can either be run in the editor, using play mode, or built and run on a device. To examine Unity's mappings for a controller: Connect the controller Press each button and move each axis Note the mappings in the display Update the control mappings in the input system data provider for the controller Note The controller mapping tool does not make use of Microsoft Mixed Reality Toolkit components. It directly communicates with Unity to determine and display the control mappings. All controls display The large display panel reports the state of all defined Unity input axes and buttons (ex: Axis 10, Button 3). This panel provides a complete view of the state of the controller. Active controls display The smaller, narrow display panel shows the Unity input axed and buttons which are in an actice state (ex: a button is pressed). The active controls display provides an easy to read summary view of the state of the controller. See also Creating an input system data provider"
  },
  "Documentation/Tools/DependencyWindow.html": {
    "href": "Documentation/Tools/DependencyWindow.html",
    "title": "Dependency Window | Mixed Reality Toolkit Documentation",
    "keywords": "Dependency Window Often in Unity it is difficult to gleam which assets are being used, and what is referencing them. The \"Find References in Scene\" option works great when you are only concerned with the current scene, but what about your entire Unity project? This is where the Dependency Window can be useful. The Dependency Window displays how assets reference and depend on each other. Dependencies are calculated by parsing guids within project YAML files (note, script to script dependencies are not considered). Usage To open the window select Mixed Reality Toolkit->Utilities->Dependency Window this will open the window and automatically begin building your project's dependency graph. Once the dependency graph is built you can select assets in the project tab to inspect their dependencies. The window displays a list of assets the currently select asset depends on, and a hierarchical list of assets that depend on it. If nothing depends on the currently selected asset you can consider deleting it from your project (note some assets are loaded programmatically via APIs like Shader.Find() and may not be caught by the dependency tracker). The window can also display just a list of all assets which are not referenced by any other assets and could be considered for deletion: Note If assets are modified, added, or removed while the dependency window is in use it is advised to refresh the dependency graph for the most \"up to date\" results."
  },
  "Documentation/Tools/ExtensionServiceCreationWizard.html": {
    "href": "Documentation/Tools/ExtensionServiceCreationWizard.html",
    "title": "Extension Service Creation Wizard （扩展服务创建向导） | Mixed Reality Toolkit Documentation",
    "keywords": "Extension Service Creation Wizard （扩展服务创建向导） 从单例过渡到服务可能很困难。通过使开发人员能够（几乎）与创建新的MonoBehaviour脚本一样容易地创建新服务，此向导可以补充我们的其他文档和示例代码。要了解从头开始创建服务的信息，请参阅我们的 建立注册服务指南 (即将发布). 启动向导 从主菜单启动向导: MixedRealityToolkit/Utilities/Create Extension Service - 该向导将带您完成生成服务脚本，界面和配置文件类的过程。 编辑服务脚本 默认情况下，新脚本资源将在MixedRealityToolkit.Extensions文件夹中生成。完成向导后，请导航至此处并打开新的服务脚本。 生成的服务脚本包括一些类似于新MonoBehaviour脚本的提示。他们将让您知道在哪里初始化和更新您的服务。 namespace Microsoft.MixedReality.Toolkit.Extensions { [MixedRealityExtensionService(SupportedPlatforms.WindowsStandalone|SupportedPlatforms.MacStandalone|SupportedPlatforms.LinuxStandalone|SupportedPlatforms.WindowsUniversal)] public class NewService : BaseExtensionService, INewService, IMixedRealityExtensionService { private NewServiceProfile newServiceProfile; public NewService(IMixedRealityServiceRegistrar registrar, string name, uint priority, BaseMixedRealityProfile profile) : base(registrar, name, priority, profile) { newServiceProfile = (NewServiceProfile)profile; } public override void Initialize() { // 在这里进行服务初始化。 } public override void Update() { // 在这里进行服务更新。 } } } 如果选择在向导中注册服务，则只需编辑此脚本，您的服务就会自动更新。否则，您可以阅读 在这里注册您的新服务 ."
  },
  "Documentation/Tools/HolographicRemoting.html": {
    "href": "Documentation/Tools/HolographicRemoting.html",
    "title": "Getting Started with Holographic Remoting | Mixed Reality Toolkit Documentation",
    "keywords": "Getting Started with Holographic Remoting Holographic remoting streams holographic content from a PC to your Microsoft HoloLens in real-time, using a Wi-Fi connection. This feature can significantly increase developer productivity when developing mixed reality applications. Initial setup To enable remoting to a HoloLens, it is important to ensure that the project is using the latest remoting components. Open Window > Package Manager Verify that latest version of the Windows Mixed Reality package is installed. Ensure the latest Holographic Remoting application is installed, on the HoloLens, via the Microsoft Store. When using a HoloLens 2, support for remoting articulated hand and eye tracking data has been added to MRTK. To enable these features, configure the project using the following steps. Run the MRTK Configurator Utility ( Mixed Reality Toolkit > Utilities > Configure Unity Project ) Expand Modify Configurations Ensure that Enable MSBuild for Unity is selected Click Apply Connecting to the HoloLens Once the project has been configured, a connection can be established to the HoloLens. In File > Build Settings , ensure that the project build type is set to Universal Windows Platform On the HoloLens, launch the Holographic Remoting application. In Unity, select Window > XR > Holographic Emulation . Set Emulation Mode to Remote to Device . Select the Device Version . Using the IP Address displayed by the Holographic Remoting application, set the Remote Machine field. Click Connect . Note If you cannot connect, make sure your HoloLens2 is not plugged in and restart Unity. Starting a remoting session With Unity connected to the HoloLens, enter play mode in the editor. When the session is complete, exit play mode. Note There is a known issue with some versions of Unity where the editor may hang upon entering play mode during a remoting session. This issue may manifest if the Holographic window is open when the project is loaded. To ensure this issue does not occur, always close the Holographic dialog prior to exiting Unity. See Also Holographic Remoting troubleshooting and limitations Microsoft Holographic Remoting software license terms"
  },
  "Documentation/Tools/OptimizeWindow.html": {
    "href": "Documentation/Tools/OptimizeWindow.html",
    "title": "Optimize Window | Mixed Reality Toolkit Documentation",
    "keywords": "Optimize Window The MRTK Optimize Window is a utility to help automate and inform in the process of configuring a mixed reality project for best performance in Unity. This tool generally focuses on rendering configurations that when set to the correct preset can save milliseconds of processing. The Active Build Target is the build platform currently targeted by the project for compiling. The Performance Target instructs the optimize tool what kind of device endpoints to target. AR Headsets are mobile-class devices such as HoloLens VR Standalone are mobile-class devices such as the Oculus Go or Quest VR Tethered are PC-powered devices such as the Samsung Odyssey, Oculus Rift or HTC Vive etc. Setting optimizations The settings optimization tab covers some of the important rendering configurations for a Unity project. This section can help automate and inform what settings should be changed for the best performing results. A green check icon means that an optimal value has been configured in the project/scene for this particular setting. A yellow warning icon indicates the current configuration can be improved. Clicking the associated button in a given section will auto-configure that setting in the Unity project/scene to a more optimal value. Single Pass Instanced Rendering Single Pass instanced rendering is the most efficient rendering path for mixed reality applications. This configuration ensures the render pipeline is executed only once for both eyes and that draw calls are instanced across both eyes. Depth buffer sharing To improve hologram stabilization , developers can share the application's depth buffer which gives the platform information of where and what holograms to stabilize in the rendered scene. Depth buffer format Furthermore, for AR Headsets , it is recommended to utilize a 16-bit depth format when enabling depth buffer sharing compared to 24-bit. This means lower precision but saves on performance. If z-fighting occurs because there is less precision in calculating depth for pixels, then it is recommended to move the far clip plane closer to the camera (ex: 50m instead of 1000m). Note If using 16-bit depth format , stencil buffer required effects will not work because Unity does not create a stencil buffer in this setting. Selecting 24-bit depth format conversely will generally create an 8-bit stencil buffer , if applicable on the endpoint graphics platform. If using a Mask component which requires the stencil buffer, consider using RectMask2D instead which does not require the stencil buffer and thus can be used in conjunction with a 16-bit depth format . Real-time Global Illumination Real-time Global illumination in Unity can provide fantastic aesthetic results but at a very high cost. Global illumination lighting is very expensive in mixed reality and thus it is recommended to disable this feature in development. Note Global illumination settings in Unity are set per-scene and not once across the entire project. Scene analysis The Scene Analysis tab is designed to inform developers what elements currently in the scene will likely have the biggest impact on performance. Lighting analysis This section will examine the number of lights currently in the scene as well as any lights that should disable shadows. Shadow casting is a very expensive operation. Polygon count analysis The tool also provides polygon count statistics. It can be very helpful to quickly identify which GameObjects have the highest polygon complexity in a given scene to target for optimizations. Unity UI raycast analysis Graphics raycast operations are performed per pointer in MRTK to determine if any Unity UI elements are in focus. These raycasts can be quite expensive and to help improve performance, UI elements that do not need to be returned in the results should be disabled as raycast targets. Every Graphic element has a Graphic.raycastTarget property. This tool will search for text UI elements that have this property enabled and thus are likely candidates to be disabled. Shader analysis The Unity Standard shader can produce very high quality visual results for games but is not generally best suited for the performance needs of mixed reality applications, especially since such applications are generally GPU bounded. Thus, it is recommended to developers to utilize the MRTK Standard shader to balance aesthetics & graphical features with performance. The Shader Analysis tab scans the current project's Asset folder for materials using the Unity Standard shader or if desired, all materials not using Mixed Reality Toolkit provided shaders. Once discovered, developers can convert all materials or convert individually using the appropriate buttons. See Also Performance Hologram Stabilization"
  },
  "NOTICE.html": {
    "href": "NOTICE.html",
    "title": "| Mixed Reality Toolkit Documentation",
    "keywords": "NOTICES AND INFORMATION Do Not Translate or Localize This software incorporates material from third parties. Microsoft makes certain open source code available at http://3rdpartysource.microsoft.com , or you may send a check or money order for US $5.00, including the product name, the open source component name, and version number, to: Source Code Compliance Team Microsoft Corporation One Microsoft Way Redmond, WA 98052 USA Notwithstanding any other terms, you may reverse engineer this software to the extent required to debug changes to any libraries licensed under the GNU Lesser General Public License. Oculus Controller Images Copyright (c) Facebook Technologies, LLC and its affiliates. All rights reserved. Art Attribution License 1.0 You may use these images solely for referring to the corresponding product in your video game or VR experience (including manuals for users). Otherwise, you may not use these images, or any trademarks, logos or other intellectual property owned by Facebook Technologies, LLC formerly known as Oculus VR, LLC (“Oculus”), including but not limited to use on merchandise or other product such as clothing, hats, or mugs. Do not use the Oculus images in a way that implies a partnership, sponsorship or endorsement; or features Oculus on materials associated with pornography, illegal activities, or other materials that violate Oculus Terms. THE IMAGES ARE PROVIDED TO YOU ON AN “AS IS” BASIS AND YOU ARE SOLELY RESPONSIBLE FOR YOUR USE OF THE IMAGES. OCULUS DISCLAIMS ALL WARRANTIES REGARDING THE IMAGES, INCLUDING WARRANTIES OF NON-INFRINGEMENT. OCULUS SHALL NOT BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL OR PUNITIVE DAMAGES ARISING FROM OR RELATED TO YOUR USE OF THE IMAGES. For the avoidance of doubt, this license shall not apply to the Oculus name, trademark or service mark, logo or design SteamVR Unity Plugin Copyright (c) Valve Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation andor other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Unity 3D Async Await Util Copyright (c) 2016 Modest Tree Media Inc Licensed under the MIT License. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Visual Profiler Copyright (c) Microsoft Corporation. All rights reserved. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE"
  },
  "Documentation/Rendering/MaterialInstance.html": {
    "href": "Documentation/Rendering/MaterialInstance.html",
    "title": "Material Instance | Mixed Reality Toolkit Documentation",
    "keywords": "Material Instance The MaterialInstance behavior aides in tracking instance material lifetime and automatically destroys instanced materials for the user. This utility component can be used as a replacement to Renderer.material or Renderer.materials . Note MaterialPropertyBlocks are preferred over material instancing but are not always available in all scenarios. Why can using Renderer.material be an issue? If you add the below code to a Unity scene and hit play memory usage will continue to climb and climb: public class Leak : MonoBehaviour { private void Update() { var cube = GameObject.CreatePrimitive(PrimitiveType.Cube); // Memory leak, the material allocated is not tracked & destroyed. cube.GetComponent<Renderer>().material.color = Color.red; ... Destroy(cube); } } Note The above Leak behavior will crash Unity if ran for too long! As an alternative try using the MaterialInstance behavior: public class NoLeak : MonoBehaviour { private void Update() { var cube = GameObject.CreatePrimitive(PrimitiveType.Cube); // No memory leak, the material allocated is tracked & destroyed by MaterialInstance. cube.EnsureComponent<MaterialInstance>().Material.color = Color.red; ... Destroy(cube); } } Usage When invoking Unity's Renderer.material (s), Unity automatically instantiates new materials. It is the caller's responsibility to destroy the materials when a material is no longer needed or the game object is destroyed. The MaterialInstance behavior helps avoid material leaks and keeps material allocation paths consistent during edit and run time. When a MaterialPropertyBlock can not be used and a material must be instanced, MaterialInstance can be used as follows: public class MyBehaviour : MonoBehaviour { // Assigned via the inspector. public Renderer targetRenderer; private void OnEnable() { Material material = targetRenderer.EnsureComponent<MaterialInstance>().Material; material.color = Color.red; ... } } If multiple objects need ownership of the material instance it's best to take explicit ownership for reference tracking. (An optional interface called IMaterialInstanceOwner exists to aide with ownership.) Below is example usage: public class MyBehaviour : MonoBehaviour, IMaterialInstanceOwner { // Assigned via the inspector. public Renderer targetRenderer; private void OnEnable() { Material material = targetRenderer.EnsureComponent<MaterialInstance>().AcquireMaterial(this); material.color = Color.red; ... } private void OnDisable() { targetRenderer.GetComponent<MaterialInstance>()?.ReleaseMaterial(this) } public void OnMaterialChanged(MaterialInstance materialInstance) { // Optional method for when materials change outside of the MaterialInstance. ... } } For more information please see the example usage demonstrated within the ClippingPrimitive behavior. See Also MRTK Standard Shader"
  },
  "Documentation/SceneSystem/SceneSystemContentLoading.html": {
    "href": "Documentation/SceneSystem/SceneSystemContentLoading.html",
    "title": "Content Scene Loading | Mixed Reality Toolkit Documentation",
    "keywords": "Content Scene Loading All content load operations are asynchronous, and by default all content loading is additive. Manager and lighting scenes are never affected by content loading operations. For information about monitoring load progress and scene activation, see Monitoring Content Loading. Loading Content To load content scenes use the LoadContent method: IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); // Additively load a single content scene await sceneSystem.LoadContent(\"MyContentScene\"); // Additively load a set of content scenes await sceneSystem.LoadContent(new string[] { \"MyContentScene1\", \"MyContentScene2\", \"MyContentScene3\" }); Single Scene Loading The equivalent of a single scene load can be achieved via the optional mode argument. LoadSceneMode.Single will first unload all loaded content scenes before proceeding with the load. IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); // ContentScene1, ContentScene2 and ContentScene3 will be loaded additively await sceneSystem.LoadContent(\"ContentScene1\"); await sceneSystem.LoadContent(\"ContentScene2\"); await sceneSystem.LoadContent(\"ContentScene3\"); // ContentScene1, ContentScene2 and ContentScene3 will be unloaded // SingleContentScene will be loaded additively await sceneSystem.LoadContent(\"SingleContentScene\", LoadSceneMode.Single); Next / Previous Scene Loading Content can be singly loaded in order of build index. This is useful for showcase applications that take users through a set of demonstration scenes one-by-one. Note that next / prev content loading uses LoadSceneMode.Single by default to ensure that the previous content is unloaded. IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); if (nextSceneRequested && sceneSystem.NextContentExists) { await sceneSystem.LoadNextContent(); } if (prevSceneRequested && sceneSystem.PrevContentExists) { await sceneSystem.LoadPrevContent(); } PrevContentExists will return true if there is at least one content scene that has a lower build index than the lowest build index currently loaded. NextContentExists will return true if there is at least one content scene that has a higher build index than the highest build index currently loaded. If the wrap argument is true, content will loop back to the first / last build index. This removes the need to check for next / previous content: IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); if (nextSceneRequested) { await sceneSystem.LoadNextContent(true); } if (prevSceneRequested) { await sceneSystem.LoadPrevContent(true); } Loading by Tag It's sometimes desirable to load content scenes in groups. Eg, a stage of an experience may be composed of multiple scenes, all of which must be loaded simultaneously to function. To facilitate this, you can tag your scenes and then load them or unload them with that tag. IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); await LoadContentByTag(\"Stage1\"); // Wait until stage 1 is complete await UnloadContentByTag(\"Stage1\"); await LoadContentByTag(\"Stage2); Loading by tag can also be useful if artists want to incorporate / remove elements from an experience without having to modify scripts. For instance, running this script with the following two sets of tags produces different results: IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); await LoadContentByTag(\"Terrain\"); await LoadContentByTag(\"Structures\"); await LoadContentByTag(\"Vegetation\"); Testing content Scene Name Scene Tag Loaded by script DebugTerrainPhysics Terrain • StructureTesting Structures • VegetationTools Vegetation • Mountain Terrain • Cabin Structures • Trees Vegetation • Final content Scene Name Scene Tag Loaded by script DebugTerrainPhysics DoNotInclude StructureTesting DoNotInclude VegetationTools DoNotInclude Mountain Terrain • Cabin Structures • Trees Vegetation • Editor Behavior You can perform all these operations in editor and in play mode by using the Scene System's service inspector. In edit mode scene loads will be instantaneous, while in play mode you can observe loading progress and use activation tokens."
  },
  "Documentation/ServiceUtilities/MixedRealityServiceRegistryAndIMixedRealityServiceRegistrar.html": {
    "href": "Documentation/ServiceUtilities/MixedRealityServiceRegistryAndIMixedRealityServiceRegistrar.html",
    "title": "What are the MixedRealityServiceRegistry and IMixedRealityServiceRegistrar? | Mixed Reality Toolkit Documentation",
    "keywords": "What are the MixedRealityServiceRegistry and IMixedRealityServiceRegistrar? The Mixed Reality Toolkit has two very similarly named components that perform related tasks: MixedRealityServiceRegistry and IMixedRealityServiceRegistrar. MixedRealityServiceRegistry The MixedRealityServiceRegistry is the component that contains instances of each registered service (core systems and extension services). Note The MixedRealityServiceRegistry contains instances of objects that implement IMixedRealityService interface, including IMixedRealityExtensionService . Objects implementing the IMixedRealityDataProvider (a subclass of IMixedRealityService) are explicitly not registered in the MixedRealityServiceRegistry. These objects are managed by the individual services (ex: Spatial Awareness). The MixedRealityServiceRegistry is implemented as a static C# class and is the recommended pattern to use to acquire service instances in application code. The following snippet demonstrates acquiring an IMixedRealityInputSystem instance. IMixedRealityInputSystem inputSystem = null; if (!MixedRealityServiceRegistry.TryGetService<IMixedRealityInputSystem>(out inputSystem)) { // Failed to acquire the input system. It may not have been registered } IMixedRealityServiceRegistrar The IMixedRealityServiceRegistrar is the interface that defines the functionality implemented by components that manage the registration of one or more services. Components that implement IMixedRealityServiceRegistrar are responsible for adding and removing the data within the MixedRealityServiceRegistry. The MixedRealityToolkit object is one such component. Other registrars can be found in the MixedRealityToolkit.SDK.Experimental.Features folder. These components can be used to add single service (ex: Spatial Awareness) support to an application. These single service managers are listed below. BoundarySystemManager CameraSystemManager DiagnosticsSystemManager InputSystemManager SpatialAwarenessSystemManager TeleportSystemManager Each of the above components, with the exception of the InputSystemManager, are responsible for managing the registration and status of a single service type. The InputSystem requires some additional support services (ex: FocusProvider) that are also managed by the InputSystemManager. In general, the methods defined by IMixedRealityServiceRegistrar are called internally by service management components or called by services that require additional service components to function correctly. Application code should, generally, not call these methods as doing so may cause the application to behave unpredictably (ex: a cached service instance may become invalid). See also IMixedRealityServiceRegistrar API documentation MixedRealityServiceRegistry API documentation"
  },
  "Documentation/SpatialAwareness/ConfiguringSpatialAwarenessMeshObserver.html": {
    "href": "Documentation/SpatialAwareness/ConfiguringSpatialAwarenessMeshObserver.html",
    "title": "Configuring Mesh Observers for Device | Mixed Reality Toolkit Documentation",
    "keywords": "Configuring Mesh Observers for Device This guide will walk through configuring the out-of-box Spatial Mesh Observer in MRTK which supports the Windows Mixed Reality platform (i.e HoloLens). The default implementation provided by the Mixed Reality Toolkit is the WindowsMixedRealitySpatialMeshObserver class. Many of the properties in this article though apply for other custom Observer implementations . Profile Settings The following two items must be defined first when configuring a Spatial Mesh Observer profile for the Spatial Awareness system . The concrete observer type implementation list of supported platform(s) to run this observer Note All observers must extend the IMixedRealitySpatialAwarenessObserver interface. General Settings Startup Behavior The startup behavior specifies whether the observer will begin running when first instantiated. The two options are: Auto Start - The default value whereby the observer will begin operation after initialization Manual Start - The Observer will wait to be directed to start If using Manual Start , one must resume and suspend them at runtime via code . Update Interval The time, in seconds, between requests to the platform to update spatial mesh data. Typical values fall in the range of 0.1 and 5.0 seconds. Is Stationary Observer Indicates whether or not the observer is to remain stationary or to move and update with the user. If true, the Observer Shape with volume defined by Observation Extents will remain at the origin on startup. If false, the Observer space will follow the user's head as the shape's origin. There will be no mesh data calculated for any physical area outside of the Observer space as defined by these properties: Is Stationary Observer , Observer Shape *, and Observation Extents . Observer Shape The observer shape defines the type of volume that the mesh observer will use when observing meshes. The supported options are: Axis Aligned Cube - Rectangular shape that stays aligned with the axes of the world coordinate system, as determined at application startup. User Aligned Cube - Rectangular shape that rotates to align with the users local coordinate system. Sphere - A spherical volume with a center at the world space origin. The X value of the Observation Extents property will be used as the radius of the sphere. Observation Extents The observation extents define the distance from the observation point that meshes will be observed. Physics Settings Physics Layer The physics layer on which spatial mesh objects will be placed in order to interact with the Unity Physics and RayCast systems. Note The Mixed Reality Toolkit reserves layer 31 by default for use by Spatial Awareness observers. Recalculate Normals Specifies whether or not the mesh observer will recalculate the normals of the mesh following observation. This setting is available to ensure applications receive meshes that contain valid normals data on platforms that do not return them with meshes. Level of Detail Settings Level of Detail Specifies the level of detail (LOD) of the spatial mesh data. Currently defined values are Coarse, Fine and Custom. Coarse - Places a smaller impact on application performance and is an excellent choice for navigation/plane finding. Medium - Balanced setting often useful for experiences that continually scan the environment for both large features, floors and walls, as well as occlusion details. Fine - Generally exacts a higher impact on application performance and is a great option for occlusion meshes. Custom - Requires the application to specify the Triangles / Cubic Meter property and allows applications to tune the accuracy vs. performance impact of the spatial mesh observer. Note It is not guaranteed that all Triangles/Cubic Meter values are honored by all platforms. Experimentation and profiling is highly recommended when using a custom LOD. Triangles per Cubic Meter Valid when using the Custom setting for the Level of Detail property and specifies the triangle density for the spatial mesh. Display Settings Display Option Specifies how spatial meshes are to be displayed by the observer. Supported values are: None - Observer will not render the mesh Visisble - Mesh data will be visible using the Visible Material Occlusion - Mesh data will be occlude items in scene using teh Occlusion Material Spatial Observers can be resumed/suspended at runtime via code. Warning Setting Display Option to None does NOT stop the observer from running. If you wish to stop all observers, applications will need to suspend all observers via CoreServices.SpatialAwareness.SuspendObservers() Visible Material Indicates the material to be used when visualizing the spatial mesh. Occlusion Material Indicates the material to be used to cause the spatial mesh to occlude holograms. See Also Spatial Awareness System Configuring Spatial Awareness system via Code IMixedRealitySpatialAwarenessObserver API documentation IMixedRealitySpatialAwarenessMeshObserver API documentation BaseSpatialObserver API documentation"
  },
  "Documentation/SpatialAwareness/CreateDataProvider.html": {
    "href": "Documentation/SpatialAwareness/CreateDataProvider.html",
    "title": "Creating a Spatial Awareness system data provider | Mixed Reality Toolkit Documentation",
    "keywords": "Creating a Spatial Awareness system data provider The Spatial Awareness system is an extensible system for providing applications with data about real world environments. To add support for a new hardware platform or a new form of Spatial Awareness data, a custom data provider may be required. This article describes how to create custom data providers , also called Spatial Observers, for the Spatial Awareness system. The example code shown here is from the SpatialObjectMeshObserver class implementation which is useful for loading 3D mesh data in-editor . Note The complete source code used in this example can be found in the MixedRealityToolkit.Providers\\ObjectMeshObserver folder . Namespace and folder structure Data providers can be distributed in one of two ways: Third party add-ons Part of the Microsoft Mixed Reality Toolkit The approval process for submissions of new data providers to the MRTK will vary on a case-by-case basis and will be communicated at the time of the initial proposal. Proposals can be submitted by creating a new Feature Request type issue . Third Party add-on Namespace Data providers are required to have a namespace to mitigate potential name collisions. It is recommended that the namespace includes the following components. Company name producing the add-on Feature area For example, a Spatial Awareness data provider created and shipped by the Contoso company may be \"Contoso.MixedReality.Toolkit.SpatialAwareness\" . Folder structure It is recommended that the source code for data providers be layed out in a folder hierarchy as shown in the following image. Where the ContosoSpatialAwareness folder contains the implementation of the data provider, the Editor folder contains the inspector (and any other Unity editor specific code), and the Profiles folder contains one or more pre-made profile scriptable objects. MRTK submission Namespace If a spatial awareness system data provider is being submitted to the Mixed Reality Toolkit repository , the namespace must begin with Microsoft.MixedReality.Toolkit (ex: Microsoft.MixedReality.Toolkit.SpatialObjectMeshObserver ) and the code should be located in a folder beneath MixedRealityToolkit.Providers (ex: MixedRealityToolkit.Providers\\ObjectMeshObserver ). Folder structure All code should be located in a folder beneath MixedRealityToolkit.Providers (ex: MixedRealityToolkit.Providers\\ObjectMeshObserver). Define the spatial data object The first step in creating a Spatial Awareness data provider is determining the type of data (ex: meshes or planes) it will provide to applications. All spatial data objects must implement the IMixedRealitySpatialAwarenessObject interface. The Mixed Reality Toolkit foundation provides the following spatial objects that can be used or extended in new data providers. BaseSpatialAwarenessObject SpatialAwarenessMeshObject SpatialAwarenessPlanarObject Implement the data provider Specify interface and/or base class inheritance All Spatial Awareness data providers must implement the IMixedRealitySpatialAwarenessObserver interface, which specifies the minimum functionality required by the Spatial Awareness system. The MRTK foundation includes the BaseSpatialObserver class which provides a default implementation of this required functionality. public class SpatialObjectMeshObserver : BaseSpatialObserver, IMixedRealitySpatialAwarenessMeshObserver, IMixedRealityCapabilityCheck { } Note The IMixedRealityCapabilityCheck interface is used by the SpatialObjectMeshObserver class to indicate that it provides support for the SpatialAwarenessMesh capability. Apply the MixedRealityDataProvider attribute A key step in creating a Spatial Awareness data provider is to apply the MixedRealityDataProvider attribute to the class. This step enables setting the default profile and platform(s) for the data provider, when selected in the Spatial Awareness profile as well as Name, folder path, and more. [MixedRealityDataProvider( typeof(IMixedRealitySpatialAwarenessSystem), SupportedPlatforms.WindowsEditor | SupportedPlatforms.MacEditor | SupportedPlatforms.LinuxEditor, \"Spatial Object Mesh Observer\", \"ObjectMeshObserver/Profiles/DefaultObjectMeshObserverProfile.asset\", \"MixedRealityToolkit.Providers\")] public class SpatialObjectMeshObserver : BaseSpatialObserver, IMixedRealitySpatialAwarenessMeshObserver, IMixedRealityCapabilityCheck { } Implement the IMixedRealityDataProvider methods Once the class has been defined, the next step is to provide the implementation of the IMixedRealityDataProvider interface. Note The BaseSpatialObserver class, via the BaseService class, provides only an empty implementations for IMixedRealityDataProvider methods. The details of these methods are generally data provider specific. The methods that should be implemented by the data provider are: Destroy() Disable() Enable() Initialize() Reset() Update() Implement the data provider logic The next step is to add the logic of the data provider by implementing the specific data provider interface, for example IMixedRealitySpatialAwarenessMeshObserver . This portion of the data provider will typically be platform specific. Observation change notifications To allow applications to respond to changes in the device's understanding of the environment, the data provider raises notification events as defined in the IMixedRealitySpatialAwarenessObservationtHandler<T> interface. OnObservationAdded() OnObservationRemoved() OnObservationUpdated() The following code from the SpatialObjectMeshObserver examples demonstrates raising and event when mesh data is added. // The data to be sent when mesh observation events occur. // This member variable is initialized as part of the Initialize() method. private MixedRealitySpatialAwarenessEventData<SpatialAwarenessMeshObject> meshEventData = null; /// <summary> /// Sends the observations using the mesh data contained within the configured 3D model. /// </summary> private void SendMeshObjects() { if (!sendObservations) { return; } if (spatialMeshObject != null) { MeshFilter[] meshFilters = spatialMeshObject.GetComponentsInChildren<MeshFilter>(); for (int i = 0; i < meshFilters.Length; i++) { SpatialAwarenessMeshObject meshObject = SpatialAwarenessMeshObject.Create( meshFilters[i].sharedMesh, MeshPhysicsLayer, $\"Spatial Object Mesh {currentMeshId}\", currentMeshId, ObservedObjectParent); meshObject.GameObject.transform.localPosition = meshFilters[i].transform.position; meshObject.GameObject.transform.localRotation = meshFilters[i].transform.rotation; ApplyMeshMaterial(meshObject); meshes.Add(currentMeshId, meshObject); // Initialize the meshEventData variable with data for the added event. meshEventData.Initialize(this, currentMeshId, meshObject); // Raise the event via the spatial awareness system. SpatialAwarenessSystem?.HandleEvent(meshEventData, OnMeshAdded); currentMeshId++; } } sendObservations = false; } Note The SpatialObjectMeshObserver does not raise OnObservationUpdated events since the 3D model is only loaded once. The implementation in the WindowsMixedRealitySpatialMeshObserver file provides an example of raising an OnObservationUpdated event for an observed mesh. Create the profile and inspector In the Mixed Reality Toolkit, data providers are configured using profiles . Define the profile Profile contents should mirror the accessible properties of the data provider (ex: update interval). All of the user configurable properties defined in each interface should be contained with the profile. Base classes are encouraged if a new data provider extends an existing provider. For example, the SpatialObjectMeshObserverProfile extends the MixedRealitySpatialAwarenessMeshObserverProfile to enable customers to provide a 3D model to be used as the environment data. [CreateAssetMenu( menuName = \"Mixed Reality Toolkit/Profiles/Spatial Object Mesh Observer Profile\", fileName = \"SpatialObjectMeshObserverProfile\", order = 100)] public class SpatialObjectMeshObserverProfile : MixedRealitySpatialAwarenessMeshObserverProfile { [SerializeField] [Tooltip(\"The model containing the desired mesh data.\")] private GameObject spatialMeshObject = null; /// <summary> /// The model containing the desired mesh data. /// </summary> public GameObject SpatialMeshObject => spatialMeshObject; } The CreateAssetMenu attribute can be applied to the profile class to enable customers to create a profile instance using the Create > Assets > Mixed Reality Toolkit > Profiles menu. Implement the inspector Profile inspectors are the user interface for configuring and viewing profile contents. Each profile inspector should extend the BaseMixedRealityToolkitConfigurationProfileInspector class. The CustomEditor attribute informs Unity the type of asset to which the inspector applies. [CustomEditor(typeof(SpatialObjectMeshObserverProfile))] public class SpatialObjectMeshObserverProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector { } Create assembly definition(s) The Mixed Reality Toolkit uses assembly definition ( .asmdef ) files to specify dependencies between components as well as to assist Unity in reducing compilation time. It is recommended that assembly definition files are created for all data providers and their editor components. Using the folder structure in the earlier example, there would be two .asmdef files for the ContosoSpatialAwareness data provider. The first assembly definition is for the data provider. For this example, it will be called ContosoSpatialAwareness and will be located in the example's ContosoSpatialAwareness folder. This assembly definition must specify a dependency on Microsoft.MixedReality.Toolkit and any other assemblies upon which it depends. The ContosoInputEditor assembly definition will specify the profile inspector and any editor specific code. This file must be located in the root folder of the editor code. In this example, the file will be located in the ContosoSpatialAwareness\\Editor folder. This assembly definition will contain a reference to the ContosoSpatialAwareness assembly as well as: Microsoft.MixedReality.Toolkit Microsoft.MixedReality.Toolkit.Editor.Inspectors Microsoft.MixedReality.Toolkit.Editor.Utilities Register the data provider Once created, the data provider can be registered with the Spatial Awareness system to be used in the application. Packaging and distribution Data providers that are distributed as third party components have the specific details of packaging and distribution left to the preference of the developer. Likely, the most common solution will be to generate a .unitypackage and distribute via the Unity Asset Store. If a data provider is submitted and accepted as a part of the Microsoft Mixed Reality Toolkit package, the Microsoft MRTK team will package and distribute it as part of the MRTK offerings. See also Spatial awareness system IMixedRealitySpatialAwarenessObject interface BaseSpatialAwarenessObject class SpatialAwarenessMeshObject class SpatialAwarenessPlanarObject class IMixedRealitySpatialAwarenessObserver interface BaseSpatialObserver class IMixedRealitySpatialAwarenessMeshObserver interface IMixedRealityDataProvider interface IMixedRealityCapabilityCheck interface"
  },
  "Documentation/SpatialAwareness/SpatialAwarenessGettingStarted.html": {
    "href": "Documentation/SpatialAwareness/SpatialAwarenessGettingStarted.html",
    "title": "Spatial Awareness | Mixed Reality Toolkit Documentation",
    "keywords": "Spatial Awareness The Spatial Awareness system provides real-world environmental awareness in mixed reality applications. When introduced on Microsoft HoloLens, Spatial Awareness provided a collection of meshes, representing the geometry of the environment, which allowed for compelling interactions between holograms and the real-world. Note At this time, the Mixed Reality Toolkit does not ship with Spatial Understanding algorithms as originally packaged in the HoloToolkit. Spatial Understanding generally involves transforming Spatial Mesh data to create simplified and/or grouped Mesh data such as planes, walls, floors, ceilings, etc. Getting Started Adding support for Spatial Awareness requires two key components of the Mixed Reality Toolkit: the Spatial Awareness system and a supported platform provider. Enable the Spatial Awareness system Register and configure one or more spatial observers to provide mesh data Build and deploy to a platform that supports Spatial Awareness Enable the Spatial Awareness system The Spatial Awareness system is managed by the MixedRealityToolkit object (or another service registrar component). Follow the steps below to enable or disable the Spatial Awareness system in the MixedRealityToolkit profile. The Mixed Reality Toolkit ships with a few default pre-configured profiles. Some of these have the Spatial Awareness system enabled OR disabled by default. The intent of this pre-configuration, particularly for when disabled, is to avoid the visual overhead of calculating and rendering the meshes. Profile System Enabled by Default DefaultHoloLens1ConfigurationProfile False DefaultHoloLens2ConfigurationProfile False DefaultMixedRealityToolkitConfigurationProfile True Select the MixedRealityToolkit object in the scene hierarchy to open in the Inspector Panel. Navigate to the Spatial Awareness System section and check Enable Spatial Awareness System Select the desired Spatial Awareness system implementation type. The MixedRealitySpatialAwarenessSystem is the default provided. Register observers Services in the Mixed Reality Toolkit can have Data Provider services that supplement the main service with platform specific data and implementation controls. An example of this is the Mixed Reality Input System which has multiple data providers to get controller and other related input information from various platform-specific APIs. The Spatial Awareness system is similar in that data providers supply the system with mesh data about the real-world. The Spatial Awareness profile must have at least one Spatial Observer registered. Spatial Observers are generally platform specific components that act as the provider for surfacing various types of mesh data from a platform specific endpoint (i.e HoloLens). Open or expand the Spatial Awareness System profile Click the \"Add Spatial Observer\" button Select the desired Spatial Observer implementation type Modify configuration properties on the observer as necessary Note Users of the DefaultMixedRealityToolkitConfigurationProfile will have the Spatial Awareness system pre-configured for the Windows Mixed Reality platform which uses the WindowsMixedRealitySpatialMeshObserver class. Build and Deploy Once the Spatial Awareness system is configured with the desired observer(s), the project can be built and deployed to the target platform. Important If targeting the Windows Mixed Reality platform (ex: HoloLens), it is important to ensure the Spatial Perception capability is enabled in order to use the Spatial Awareness system on device. Warning Some platforms, including Microsoft HoloLens, provide support for remote execution from within Unity. This feature enables rapid development and testing without requiring the build and deploy step. Be sure to do final acceptance testing using a built and deployed version of the application, running on the target hardware and platform. See Also Spatial Awareness API documentation Configuring Observer for Device Configuring Observer for Editor Creating a custom Observer Spatial Mapping Overview WMR Spatial Mapping in Unity WMR"
  },
  "Documentation/Tools/ScreenshotUtility.html": {
    "href": "Documentation/Tools/ScreenshotUtility.html",
    "title": "Screenshot Utility | Mixed Reality Toolkit Documentation",
    "keywords": "Screenshot Utility Often taking screenshots in Unity for documentation and promotional imagery can be burdensome and the output often looks less than desirable. This is where the ScreenshotUtility class comes into play. The ScreenshotUtility class aides in taking screenshots via menu items and public APIs within the Unity editor. Screenshots can be captured at various resolutions and with transparent clear colors for use in easy post compositing of images. Taking screenshots from a standalone build is not supported by this tool. Taking Screenshots Screenshots can be easily capture while in the editor by selecting Mixed Reality Toolkit->Utilities->Take Screenshot and then selecting your desired option. Make sure to have the game window tab visible if capturing while not playing, or a screenshot may not be saved. By default, all screenshots are saved to your temporary cache path , the path to the screenshot will be displayed in the Unity console. Example Screenshot Capture The below screenshot was captured with the \"4x Resolution (Transparent Background)\" option. This outputs a high-resolution image with whatever pixels normally represented by the clear color saved as transparent pixels. This technique helps developers showcase their application for the store, or other media outlets, by overlaying this image on top of other imagery."
  },
  "Documentation/Diagnostics/ConfiguringDiagnostics.html": {
    "href": "Documentation/Diagnostics/ConfiguringDiagnostics.html",
    "title": "配置诊断系统 | Mixed Reality Toolkit Documentation",
    "keywords": "配置诊断系统 通用设置 Show Diagnostics (显示诊断) 指示诊断系统是否要显示已配置的诊断选项。 禁用后，所有已配置的诊断选项将被隐藏。 Profiler Settings (分析器设置) Show Profiler (显示分析器) 指示是否显示可视化分析器。 Frame Sample Rate (帧采样率) 收集帧以进行帧率计算的时间（以秒为单位）。范围是0到5秒。 Window Anchor (窗口锚点) 探查器窗口应锚定到视口的哪个部分。默认值为 Lower Center 。 Window Offset (窗口偏移) 从视口中心偏移的位置，以放置可视化分析器。偏移量将沿“窗口锚点”属性的方向。 Window Scale (窗口大小) 大小乘数应用于分析器窗口。例如，将该值设置为2将使窗口大小加倍。 Window Follow Speed (窗口跟随速度) 移动分析器窗口以在视口内保持可见性的速度。 Programmatically controlling the Diagnostics System (以编程方式控制诊断系统) 也可以在运行时切换诊断系统和分析器的可见性。例如，下面的代码将隐藏诊断系统和分析器。 CoreServices.DiagnosticsSystem.ShowDiagnostics = false; CoreServices.DiagnosticsSystem.ShowProfiler = false; 建议浏览 诊断系统 使用可视化分析器"
  },
  "Documentation/Performance/PerfGettingStarted.html": {
    "href": "Documentation/Performance/PerfGettingStarted.html",
    "title": "性能 | Mixed Reality Toolkit Documentation",
    "keywords": "性能 入门 使性能合理化的最简单方法是通过帧速率或应用程序每秒可以渲染图像的次数。如目标平台所概述的那样，达到目标帧速率很重要（即 Windows混合现实 , Oculus , 等).例如，在HoloLens上，目标帧速率为60 FPS。低帧率应用程序可能会导致用户体验恶化，例如恶化 全息图稳定 ，世界跟踪，手部跟踪等。为了帮助开发人员跟踪并获得高质量的帧速率，混合现实工具包提供了各种工具和脚本。 可视分析器 为了在开发的整个生命周期中不断跟踪性能，强烈建议在运行和调试应用程序时始终显示可视分析器。混合现实工具包提供了 可视分析器 诊断工具，可在应用程序视图中提供有关当前FPS和内存使用情况的实时信息。可以通过在 MRTK配置文件检查器 下方的 诊断系统设置 . 此外，与在Unity编辑器或仿真器中运行相比，在设备上运行时利用Visual Profiler跟踪帧速率尤为重要。在设备上运行时，将描述最准确的性能结果 发布配置版本 . [!注意] 如果针对Windows Mixed Reality构建，请使用 主配置版本 Optimize Window MRTK Optimize Window 提供信息和自动化工具，以帮助混合现实开发人员设置环境以获得最佳性能，并确定场景和资源中的潜在瓶颈。Unity中的某些关键配置可以帮助为混合现实项目提供实质上更优化的结果。 通常，这些设置涉及适合混合现实的渲染配置。与传统的3D图形开发相比，混合现实应用程序是独特的，因为有两个屏幕（即两只眼睛）可以渲染整个场景。 通过使用MRTK优化窗口，可以在Unity项目中自动配置以下参考的建议设置。 建议的Unity设置 单遍实例渲染 Unity中XR的默认渲染配置为 多遍 . 此设置指示Unity执行两次整个渲染管道，每只眼睛执行一次。可以通过选择来优化 单遍实例渲染 代替。此配置利用 渲染目标数组 能够执行将实例插入适当的单个绘制调用 渲染目标 为每只眼睛。此外，此模式允许所有渲染都在渲染管道的一次执行中完成。因此，选择Single Pass Instanced渲染作为混合现实应用程序的渲染路径可以 在CPU和GPU上节省大量时间 并且是推荐的渲染配置。 但是，为了对每只眼睛的每个网格发出单个绘制调用， GPU实例化 必须由所有着色器支持。实例化使GPU可以在两只眼睛之间多路复用绘图调用。Unity内置着色器以及 MRTK标准着色器 默认情况下，在着色器代码中包含必要的实例化指令。如果为Unity编写自定义着色器，则可能需要更新这些着色器以支持Single Pass Instanced渲染。 自定义着色器的示例代码 struct appdata { float4 vertex : POSITION; float2 uv : TEXCOORD0; UNITY_VERTEX_INPUT_INSTANCE_ID //Insert }; struct v2f { float2 uv : TEXCOORD0; float4 vertex : SV_POSITION; UNITY_VERTEX_OUTPUT_STEREO //Insert }; v2f vert (appdata v) { v2f o; UNITY_SETUP_INSTANCE_ID(v); //Insert UNITY_INITIALIZE_OUTPUT(v2f, o); //Insert UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o); //Insert o.vertex = UnityObjectToClipPos(v.vertex); o.uv = v.uv; return o; } 质量设置 Unity提供 预设以控制质量 每个平台端点的渲染次数。这些预设控制可以启用图形功能，例如阴影，抗锯齿，全局照明等。建议降低这些设置并优化渲染期间执行的计算数量。 Step 1: 更新混合现实Unity项目以使用 低质量 级别设置 Edit > Project Settings , 然后选择 Quality category > Select Low Quality for the UWP Platform Step 2: 对于每个Unity场景文件，禁用 实时全局照明 Window > Rendering > Lighting Settings > Uncheck Real-time Global Illumination Depth buffer sharing (HoloLens) 如果针对Windows Mixed Reality平台（尤其是HoloLens）进行开发，则在 XR设置 下启用 深度缓冲区共享 可以帮助您 全息图稳定 . 但是，深度缓冲区的处理可能会导致性能损失，特别是如果使用 24位深度格式 . 因此， 强烈建议 将深度缓冲区配置为16位精度。 如果 z-fighting 由于低位格式而发生，请确认 far clip plane 将所有相机中的设置为该应用程序可能的最低值。默认情况下，Unity设置far clip plane为1000m。在HoloLens上，对于大多数应用场景，通常50m的far clip plane绰绰有余。 [!注意] 如果使用 16位深度格式 ，则模板缓冲区所需的效果将不起作用，因为 Unity不创建模板缓冲区 在这种情况下。相反，如果适用于端点图形平台，则选择 24位深度格式 通常会创建8位模板缓冲区。 如果使用 Mask组件 需要模板缓冲区，请考虑使用 RectMask2D 它不需要模板缓冲区，因此可以与 16位深度格式 一起使用。 [!注意] 为了快速确定场景中哪些对象没有可视地写入深度缓冲区，可以使用 Render Depth Buffer utility 在“MRTK Configuration profile”配置文件中的 Editor Settings 下。 一般建议 对于混合现实开发人员而言，性能可能是一个模棱两可且不断变化的挑战，并且优化性能的知识范围非常广泛。但有一些一般性建议，以帮助您了解如何提高应用程序的性能。 将应用程序的执行简化为运行在CPU或GPU上的各个部分，从而确定应用程序是否受任一组件的约束，这很有用。可能存在跨越两个处理单元的瓶颈以及一些必须仔细研究的独特方案。但是，对于入门而言，最好掌握应用程序在最多时间执行的位置。 GPU限制 由于大多数混合现实应用程序平台都在利用 立体渲染 ，由于呈现“双倍宽”屏幕的性质，被GPU限制非常常见。此外，移动混合现实平台（如HoloLens或Oculus Quest）将受到移动级CPU和GPU处理能力的限制。 当专注于GPU时，应用程序通常必须在两个重要阶段完成每一帧。 执行 顶点着色器 执行 像素着色器 （也称为片段着色器） 无需深入研究计算机图形学的复杂领域和 渲染管线 ，每个着色器阶段都是一个在GPU上运行以产生以下内容的程序。 顶点着色器将网格顶点转换为屏幕空间中的坐标（即，每个顶点执行的代码） 像素着色器计算要为给定像素和网格片段绘制的颜色（即，每个像素执行代码） 关于性能调整，通常专注于优化像素着色器中的操作通常会更有成果。应用程序可能只需要绘制一个只有8个顶点的立方体。但是，立方体占用的屏幕空间可能约为数百万个像素。因此，如果减少像素着色器上的着色器代码数量少于顶点着色器，则减少10个操作可以节省大量工作。 这是利用这一优势的主要原因之一 MRTK标准着色器 因为此着色器通常在像素和顶点上执行的指令要比Unity Standard着色器少得多，同时实现了可比的美学效果。 CPU 优化 GPU 优化 应用仿真逻辑 渲染操作 简化物理 减少照明计算 简化动画 减少多边形数量和可绘制对象的数量 管理垃圾收集 减少透明物体的数量 缓存引用 避免后期处理/全屏效果 Draw call实例化 Unity中降低性能的最常见错误之一是在运行时克隆材质。如果GameObjects共享相同的材质和/或相同的网格，则可以通过以下技术将其优化为单次绘制调用： 静态批处理 , 动态批处理 和 GPU实例化 .但是，如果开发人员修改了 渲染器的材质 在运行时，Unity将创建分配材质的克隆副本。 例如，如果一个场景中有100个cube，则开发人员可能希望在运行时为其分配唯一的颜色。访问 renderer.material.color 在C＃中，它将使Unity在此特定渲染器/ GameObject的内存中创建新材质。100个立方体中的每个立方体都有其自己的材质，因此无法将它们合并到一个绘制调用中，而是将成为从CPU到GPU的100个绘制调用请求。 为了克服这一障碍并仍然为每个立方体分配唯一的颜色，开发人员应利用 MaterialPropertyBlock . private PropertyBlock m_PropertyBlock ; private Renderer myRenderer; private void Start() { myRenderer = GetComponent<Renderer>(); m_PropertyBlock = new MaterialPropertyBlock(); } private void ChangeColor() { // 为此渲染器创建一个材质的副本 myRenderer.material.color = Color.red; // vs. // 保留渲染器的实例化功能 m_PropertyBlock.SetColor(\"_Color\", Color.red); myRenderer.SetPropertyBlock(m_PropertyBlock); } Unity性能工具 Unity提供了内置于编辑器中的出色性能工具。 Unity Profiler Unity Frame Debugger 如果估计一个着色器与另一个着色器之间的大致性能折衷，则编译每个着色器并查看每个着色器阶段的操作数很有用。可以通过选择一个 着色器资源 然后点击 Compile and show code 按钮。这将编译所有着色器变体，并使用结果打开Visual Studio。注意：根据使用给定着色器的材质启用的功能，所产生的统计结果可能会有所不同。Unity将仅编译当前项目中直接使用的着色器变体。 Unity 标准着色器统计信息示例 MRTK Standard shader statistics example 建议浏览 Unity 适用于初学者的Unity性能优化 Unity性能优化教程 Unity优化最佳实践 优化图形性能 移动优化实用指南 Windows混合现实 建议的Unity设置 了解混合现实的性能 Unity的性能建议 Windows Unity的事件跟踪指南 Oculus 性能准则 性能工具"
  },
  "Documentation/Profiles/Profiles.html": {
    "href": "Documentation/Profiles/Profiles.html",
    "title": "Profiles | Mixed Reality Toolkit Documentation",
    "keywords": "Profiles One of the main ways that the MRTK is configured is through the many profiles available in the foundation package. The main MixedRealityToolkit object in a scene will have the active profile, which is essentially a ScriptableObject. The top level MRTK Configuration Profile contains sub-profile data for each core of the primary core systems, each of which are designed to configure the behavior of their corresponding sub-systems. Furthermore, these sub-profiles are also Scriptable Objects and thus can contain references to other profile objects one level below them. There is essentially an entire tree of connected profiles that make up the configuration information for how to initialize the MRTK sub-systems and features. For example, the Input system's behavior is governed by an input system profile object . It's highly recommended to always modify the profile ScriptableObject assets via the in-editor inspector. Profile Inspector Note While it is intended that profiles can be swapped out at runtime, this currently does not work Default Profile The MRTK provides a set of default profiles which cover most platforms and scenarios that the MRTK supports. For example, when you select the DefaultMixedRealityToolkitConfigurationProfile you will be able to try out scenarios on VR (OpenVR, WMR) and HoloLens (1 and 2). Note that because this is a general use profile, it's not optimized for any particular use case. If you want to have more performant/specific settings that are better on other platforms, see the other profiles below, which are slightly tweaked to be better on their respective platforms. HoloLens 2 Profile The MRTK also provides a default profile that is optimized for deployment and testing on the HoloLens 2: DefaultHoloLens2ConfigurationProfile . When prompted to choose a profile for the MixedRealityToolkit object, use this profile instead of the default selected profile. The key differences between the HoloLens2 profile and the Default Profile are: Disabled Features: Boundary System Teleport System Spatial Awareness System Hand mesh visualization (due to performance overhead) Enabled Systems: The Eye Tracking provider Eye input simulation Camera profile settings are set to match so that the editor quality and player quality are the same. This is different from the default camera profile where Opaque displays are set to a higher quality. This change means that in-editor quality will be lower, which will more closely match what will be rendered on the device. Note The Spatial Awareness system is turned off by default based on client feedback - it is an interesting visualization to see initially but is typically turned off to avoid the visual distraction and the additional performance hit of having it on. The system can be re-enabled by following the instructions here ."
  },
  "Documentation/SceneSystem/SceneSystemGettingStarted.html": {
    "href": "Documentation/SceneSystem/SceneSystemGettingStarted.html",
    "title": "Scene system overview | Mixed Reality Toolkit Documentation",
    "keywords": "Scene system overview When to use the scene system If your project consists of a single scene, the Scene System probably isn't necessary. It is most useful when one or more of the following are true: Your project has multiple scenes. You're used to single scene loading, but you don't like the way it destroys the MixedRealityToolkit instance. You want a simple way to additively load multiple scenes to construct your experience. You want a simple way to keep track of load operations in progress or a simple way to control scene activation for multiple scenes being loaded at once. You want to keep lighting consistent and predictable across all your scenes. How to use the scene system Scene Types Content Scene Loading Monitoring Content Loading Lighting Scene Loading Editor settings By default, the Scene System enforces several behaviors in the Unity editor. If you find any of these behaviors heavy-handed, they can be disabled in the Editor Settings section of your Scene System profile. Editor Manage Build Settings: If true, the service will update your build settings automatically, ensuring that all manager, lighting and content scenes are added. Disable this if you want total control over build settings. Editor Enforce Scene Order: If true, the service will ensure that the manager scene is displayed first in scene hierarchy, followed by lighting and then content. Disable this if you want total control over scene hierarchy. Editor Manage Loaded Scenes: If true, the service will ensure that the manager, content and lighting scenes are always loaded. Disable if you want total control over which scenes are loaded in editor. Editor Enforce Lighting Scene Types: If true, the service will ensure that only the lighting-related components defined in PermittedLightingSceneComponentTypes are allowed in lighting scenes. Disable if you want total control over the content of lighting scenes."
  },
  "Documentation/SceneSystem/SceneSystemLightingScenes.html": {
    "href": "Documentation/SceneSystem/SceneSystemLightingScenes.html",
    "title": "Lighting Scene Operations | Mixed Reality Toolkit Documentation",
    "keywords": "Lighting Scene Operations The default lighting scene defined in your profile is loaded on startup. That lighting scene remains loaded until SetLightingScene is called. IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); sceneSystem.SetLightingScene(\"MorningLighting\"); Lighting Setting Transitions transitionType controls the style of the transition to new lighting scene. IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); sceneSystem.SetLightingScene(\"MiddayLighting\", LightingSceneTransitionType.CrossFade); The available styles are: Type Description Duration None Previous lighting scene is unloaded, new lighting scene is loaded. No transition. Ignored FadeToBlack Previous lighting scene fades out to black. New lighting scene is loaded, then faded up from black. Useful for smooth transitions between locations. Used CrossFade Previous lighting scene fades out as new lighting scene fades in. Useful for smooth transitions between lighting setups in the same location. Used Note that some lighting settings cannot be interpolated during transitions. If you want a smooth visual transition these settings will have to remain consistent between lighting scenes. Setting Smooth FadeToBlack Transition Smooth CrossFade Transition Skybox No No Custom Reflections No No Sun light realtime shadows Yes No"
  },
  "Documentation/SceneSystem/SceneSystemLoadProgress.html": {
    "href": "Documentation/SceneSystem/SceneSystemLoadProgress.html",
    "title": "Monitoring Content Loading | Mixed Reality Toolkit Documentation",
    "keywords": "Monitoring Content Loading Scene Operation Progress When content is being loaded or unloaded, the SceneOperationInProgress property will return true. You can monitor the progress of this operation via the SceneOperationProgress property. The SceneOperationProgress value is the average of all current async scene operations. At the start of a content load, SceneOperationProgress will be zero. Once fully completed, SceneOperationProgress will be set to 1 and will remain at 1 until the next operation takes place. Note that only content scene operations affect these properties. These properties reflect the state of an entire operation from start to finish, even if that operation includes multiple steps: IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); // First do an additive scene load // SceneOperationInProgress will be true for the duration of this operation // SceneOperationProgress will show 0-1 as it completes await sceneSystem.LoadContent(\"ContentScene1\"); // Now do a single scene load // This will result in two actions back-to-back // First \"ContentScene1\" will be unloaded // Then \"ContentScene2\" will be loaded // SceneOperationInProgress will be true for the duration of this operation // SceneOperationProgress will show 0-1 as it completes sceneSystem.LoadContent(\"ContentScene2\", LoadSceneMode.Single) Progress Examples SceneOperationInProgress can be useful if activity should be suspended while content is being loaded: public class FooManager : MonoBehaviour { private void Update() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); // Don't update foos while a scene operation is in progress if (sceneSystem.SceneOperationInProgress) { return; } // Update foos ... } ... } SceneOperationProgress can be used to display progress dialogs: public class ProgressDialog : MonoBehaviour { private void Update() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); if (sceneSystem.SceneOperationInProgress) { DisplayProgressIndicator(sceneSystem.SceneOperationProgress); } else { HideProgressIndicator(); } } ... } Monitoring With Actions The Scene System provides several actions to let you know when scenes are being loaded or unloaded. Each action relays the name of the affected scene. If a load or unload operation involves multiple scenes, the relevant actions will be invoked once per affected scene. They are also invoked all at once when the load or unload operation is fully completed. For this reason it's recommended that you use OnWillUnload actions to detect content that will be destroyed, as opposed to using OnUnloaded actions to detect destroyed content after the fact. On the flip side, because OnLoaded actions are only invoked when all scenes are activated and fully loaded, using OnLoaded actions to detect and use new content is guaranteed to be safe. Action When it's invoked Content Scenes Lighting Scenes Manager Scenes OnWillLoadContent Just prior to a content scene load • OnContentLoaded After all content scenes in a load operation have been fully loaded and activated • OnWillUnloadContent Just prior to a content scene unload operation • OnContentUnloaded After all content scenes in an unload operation have been fully unloaded • OnWillLoadLighting Just prior to a lighting scene load • OnLightingLoaded After a lighting scene has been fully loaded and activated • OnWillUnloadLighting Just prior to a lighting scene unload • OnLightingUnloaded After a lighting scene has been fully unloaded • OnWillLoadScene Just prior to a scene load • • • OnSceneLoaded After all scenes in an operation are fully loaded and activated • • • OnWillUnloadScene Just prior to a scene unload • • • OnSceneUnloaded After a scene is fully unloaded • • • Action Examples Another progress dialog example using actions and a coroutine instead of Update: public class ProgressDialog : MonoBehaviour { private bool displayingProgress = false; private void Start() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); sceneSystem.OnWillLoadContent += HandleSceneOperation; sceneSystem.OnWillUnloadContent += HandleSceneOperation; } private void HandleSceneOperation (string sceneName) { // This may be invoked multiple times per frame - once per scene being loaded or unloaded. // So filter the events appropriately. if (displayingProgress) { return; } displayingProgress = true; StartCoroutine(DisplayProgress()); } private IEnumerator DisplayProgress() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); while (sceneSystem.SceneOperationInProgress) { DisplayProgressIndicator(sceneSystem.SceneOperationProgress); yield return null; } HideProgressIndicator(); displayingProgress = false; } ... } Controlling Scene Activation By default content scenes are set to activate when loaded. If you want to control scene activation manually, you can pass a SceneActivationToken to any content load method. If multiple content scenes are being loaded by a single operation, this activation token will apply to all scenes. IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); SceneActivationToken activationToken = new SceneActivationToken(); // Load the content and pass the activation token sceneSystem.LoadContent(new string[] { \"ContentScene1\", \"ContentScene2\", \"ContentScene3\" }, LoadSceneMode.Additive, activationToken); // Wait until all users have joined the experience while (!AllUsersHaveJoinedExperience()) { await Task.Yield(); } // Let scene system know we're ready to activate all scenes activationToken.AllowSceneActivation = true; // Wait for all scenes to be fully loaded and activated while (sceneSystem.SceneOperationInProgress) { await Task.Yield(); } // Proceed with experience Checking which content is loaded The ContentSceneNames property provides an array of available content scenes in order of build index. You can check whether these scenes are loaded via IsContentLoaded(string contentName) . IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); string[] contentSceneNames = sceneSystem.ContentSceneNames; bool[] loadStatus = new bool[contentSceneNames.Length]; for (int i = 0; i < contentSceneNames.Length; i++>) { loadStatus[i] = sceneSystem.IsContentLoaded(contentSceneNames[i]); }"
  },
  "Documentation/SceneSystem/SceneSystemSceneTypes.html": {
    "href": "Documentation/SceneSystem/SceneSystemSceneTypes.html",
    "title": "Scene Types | Mixed Reality Toolkit Documentation",
    "keywords": "Scene Types Scenes have been divided into three types, and each type has a different function. Content Scenes These are the scenes you're used to dealing with. Any kind of content can be stored in them, and they can be loaded or unloaded in any combination. Content scenes are enabled by default. Any scenes included in your profile's Content Scenes array can be loaded / unloaded by the service. Manager scenes A single scene with a required MixedRealityToolkit instance. This scene will be loaded first on launch and will remain loaded for the lifetime of the app. The manager scene can also host other objects that should never be destroyed. This is the preferred alternative to DontDestroyOnLoad. To enable this feature, check Use Manager Scene in your profile and drag a scene object into the Manager Scene field. Lighting Scenes A set of scenes which store lighting information and lighting objects. Only one can be loaded at a time, and their settings can be blended during loads for smooth lighting transitions. Unity's lighting settings - ambient light, skyboxes, etc - can be tricky to manage when using additive loading because they're tied to individual scenes and override behavior is not straightforward. In practice this can cause confusion when assets are authored in lighting conditions that don't obtain at runtime. The Scene System uses lighting scenes to ensure that these settings remain consistent regardless of what scenes are loaded or active, both in edit mode and in play mode. To enable this feature, check Use Lighting Scene in your profile and populate the Lighting Scenes array. Cached Lighting Settings Your profile stores cached copies of the lighting settings kept in your lighting scenes. If those settings change in your lighting scenes, you will need to update your cache to ensure lighting appears as expected in play mode. Your profile will display a warning when it suspects your cached settings are out of date. Clicking Update Cached Lighting Settings will load each of your lighting scenes, extract their settings, then store them in your profile. Editor Behavior One benefit of using lighting scenes is knowing your content is lit correctly while editing. To this end, the Scene Service will keep a lighting scene loaded at all times, and will copy that scene's lighting settings to the current active scene.* You can change which lighting scene is loaded by opening the Scene System's service inspector. In edit mode you can instantaneously transition between lighting scenes. In play mode, you can preview transitions. * Note: Typically the active scene determines your lighting settings in editor. However we choose not to use this feature to enforce lighting settings, because the active scene is also where newly created objects are placed by default, and lighting scenes are only permitted to contain lighting components. Instead, the current lighting scene's settings are automatically copied to the active scene's settings instead. Keep in mind that this will result in your content scene's lighting settings being over-written."
  },
  "Documentation/EyeTracking/EyeTracking_IsUserCalibrated.html": {
    "href": "Documentation/EyeTracking/EyeTracking_IsUserCalibrated.html",
    "title": "Eye Calibration | Mixed Reality Toolkit Documentation",
    "keywords": "Eye Calibration To be or not to be eye calibrated If eye tracking is a fundamental part of your app experience, you may wish to ensure that the user's eye calibration is valid. The main reason for it to be invalid is that the user has chosen to skip the eye tracking calibration when putting on the device. This page covers the following: Describes how to detect that a user is eye calibrated Provides a sample for how to trigger a user notification to instruct the user to go through the eye calibration Automatically dismiss notification if eye calibration becomes valid Manually dismiss notification if user chooses to continue without calibration How to detect the eye calibration state The MixedRealityToolkit.InputSystem.EyeGazeProvider provides a bool? property called IsEyeGazeValid . It returns null if no information from the eye tracker is available yet. Once data has been received, it will either return true or false to indicate that the user's eye tracking calibration is valid or invalid. Sample eye calibration notification - Step-by-step Open the MRTK eye tracking example package Load EyeTrackingDemo-00-RootScene.unity scene Check out EyeCalibrationChecker : In this scene, we have already a sample for detecting whether the current user is calibrated under the EyeCalibrationChecker game object . It simply parents a few text meshes and has some additional triggers for blending the notification in and out. This includes slowly increasing its size and opacity on activation. Once the notification is dismissed, it will slowly decrease its size and fade out. Attached to the EyeCalibrationChecker game object is the EyeCalibrationChecker script which exposes two Unity Events: OnEyeCalibrationDetected() OnNoEyeCalibrationDetected() These events will only trigger if the calibration status changes. Hence, if a user chooses to dismiss the notification, the notification will not show up again until The app gets restarted A valid user has been detected and then a new uncalibrated user has put the device on For testing whether the animations and events are triggered correctly, the EyeCalibrationChecker script possesses a bool editorTestUserIsCalibrated flag. For example, when the app is running in the Unity Editor you can test, whether the notification automatically pops up once the calibration status changes from true to false and whether it automatically dismisses the notification again once the status changes from false to true. private bool? prevCalibrationStatus = null; ... void Update() { // Get the latest calibration state from the EyeGazeProvider bool? calibrationStatus = CoreServices.InputSystem?.EyeGazeProvider?.IsEyeCalibrationValid; ... if (calibrationStatus != null) { if (prevCalibrationStatus != calibrationStatus) { if (calibrationStatus == false) { OnNoEyeCalibrationDetected.Invoke(); } else { OnEyeCalibrationDetected.Invoke(); } prevCalibrationStatus = calibrationStatus; } } Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/EyeTracking/EyeTracking_Main.html": {
    "href": "Documentation/EyeTracking/EyeTracking_Main.html",
    "title": "混合现实工具包中的眼动跟踪 | Mixed Reality Toolkit Documentation",
    "keywords": "混合现实工具包中的眼动跟踪 HoloLens 2 提供了令人兴奋且功能强大的新输入：眼动跟踪! 眼动跟踪(Eye tracking)功能使用户可以在其整个视野中快速轻松地与全息物体互动，并且可以通过更好地识别用户的意图来使您的系统更智能。查阅Microsoft's Mixed Reality 关于HoloLens 2的眼动跟踪的文档 了解更多细节，例如解释功能强大的应用程序和对于眼动跟踪在混合现实中的设计准则。 眼动跟踪新手? 没问题！我们创建了许多视频，教程和示例，以帮助您开始使用 Mixed Reality Toolkit ! 我们建议从探索一些现有的眼动跟踪示例开始，这些示例演示了基于眼动的互动的最佳实践。 然后，您可以使用这些示例将看起来与您相关的部分应用在你的应用程序。 最后，我们还描述了如何使用核心组件设置新场景以使眼动跟踪在您的应用中正常工作。 MRTK眼动追踪示例 一个新开始-基本MRTK眼动跟踪设置"
  },
  "Documentation/EyeTracking/EyeTracking_Navigation.html": {
    "href": "Documentation/EyeTracking/EyeTracking_Navigation.html",
    "title": "Eye-Supported Navigation in MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "Eye-Supported Navigation in MRTK Imagine you are reading information on a slate and when you reach the end of the displayed text, the text automatically scrolls up to reveal more content. Or you can fluently zoom in where you are looking at. The map also automatically adjusts the content to keep the things of interest within your field of view. Another interesting application is the hands-free observation of 3D holograms by automatically bringing the parts of the hologram that you are looking at to the front. These are some of the examples that are described on this page in context of eye-supported navigation. The following descriptions assume that you are already familiar with how to set up eye tracking in your MRTK scene and with the basics of accessing eye tracking data in MRTK Unity. The examples discussed in the following are all part of the EyeTrackingDemo-03-Navigation.unity scene. Summary: Auto scroll of text, eye-gaze-supported pan and zoom of a virtual map, hands-free gaze-directed 3D rotation. Auto Scroll Auto scroll enables the user to scroll through texts without lifting a finger. Simply continue reading and the text will automatically scroll up or down depending on where the user is looking. You can start off from the example provided in EyeTrackingDemo-03-Navigation.unity . This example uses a TextMesh component to allow for flexibly loading and formatting new text. To enable auto scroll, simply add the following two scripts to your collider component of the textbox: ScrollRectTransf To scroll through a TextMesh or more generally speaking a RectTransform component you can use the ScrollRectTransf script. If you want to scroll through a texture instead of a RectTransform , use ScrollTexture instead of ScrollRectTransf . In the following, the parameters of ScrollRectTransf that are available in the Unity Editor are explained in more detail: Parameters Description LimitPanning If enabled, will stop the scrollable content at its boundary. RectTransfToNavigate Reference to the RectTransform to scroll in. RefToViewport Reference to the parent RectTransform of the scrollable content to determine the correct offset and boundary. AutoGazeScrollIsActive If enabled, the text will automatically scroll if the user looks at an active region (e.g., the top and bottom part of your scroll panel if the vertical scroll speed is not zero). ScrollSpeed_x If set to a value unequal to zero, horizontal scroll will be enabled. Negative values mean a change in scroll direction: Left to right vs. right to left. ScrollSpeed_y If set to a value unequal to zero, vertical scroll will be enabled. Negative values mean a change in scroll direction: Up to down vs. down to up. MinDistFromCenterForAutoScroll Normalized minimal distance in x and y from center of the target's hit box (0, 0) to scroll. Thus, values must range between 0 (always scroll) and 0.5 (no scroll). UseSkimProofing If enabled, it prevents sudden scroll movements when quickly looking around. This may make scrolling feel less responsive though. It can be tuned with the SkimProofUpdateSpeed value. SkimProofUpdateSpeed The lower the value, the slower the scrolling will speed up after skimming. Recommended value: 5. EyeTrackingTarget Attaching the EyeTrackingTarget component allows for flexibly handle eye-gaze-related events. The scroll sample demonstrates scrolling text that starts when the user looks at the panel and stops when the user is looking away from it. Gaze-supported Pan and Zoom Who hasn't used a virtual map before to search for their home or to explore entirely new places? Eye tracking allows you to directly dive into exactly the parts that you're interested in and once zoomed in, you can smoothly follow the course of a street to explore your neighborhood! This is not only useful for exploring geographical maps, but also to checking out details in photographs, data visualizations or even live-streamed medical imagery. To use this capability in your app is easy! For content rendered to a Texture (e.g., a photo, streamed data), simply add the PanZoomTexture script. For a RectTransform use PanZoomRectTransf . Extending the Auto Scroll capability, we essentially enable to scroll both vertically and horizontally at the same time and magnify content right around the user's current focus point. Parameters Description LimitPanning If enabled, will stop the scrollable content at its boundary. HandZoomEnabledOnStartup Indicates whether hand gestures are automatically enabled to perform a zoom gesture. You may want to disable it at first to avoid accidentally triggering zoom actions. RendererOfTextureToBeNavigated Referenced renderer of the texture to be navigated. Zoom_Acceleration Zoom acceleration defining the steepness of logistic speed function mapping. Zoom_SpeedMax Maximum zoom speed. Zoom_MinScale Minimum scale of the texture for zoom in - e.g., 0.5f (half the original size). Zoom_MaxScale Maximum scale of the texture for zoom out - e.g., 1f (the original size) or 2.0f (double the original size). Zoom_TimeInSecToZoom Timed zoom: Once triggered, a zoom in/out will be performed for the given amount of time in seconds. Zoom_Gesture Type of hand gesture to use to zoom in/out. --- --- Pan_AutoScrollIsActive If enabled, the text will automatically scroll if the user looks at an active region (e.g., the top and bottom part of your scroll panel if the vertical scroll speed is not zero). Pan_Speed_x If set to a value unequal to zero, horizontal scroll will be enabled. Negative values mean a change in scroll direction: Left to right vs. right to left. Pan_Speed_y If set to a value unequal to zero, vertical scroll will be enabled. Negative values mean a change in scroll direction: Up to down vs. down to up. Pan_MinDistFromCenter Normalized minimal distance in x and y from center of the target's hit box (0, 0) to scroll. Thus, values must range between 0 (always scroll) and 0.5 (no scroll). UseSkimProofing If enabled, it prevents sudden scroll movements when quickly looking around. This may make scrolling feel less responsive though. It can be tuned with the SkimProofUpdateSpeed value. SkimProofUpdateSpeed The lower the value, the slower the scrolling will speed up after skimming. Recommended value: 5. Attention-based 3D Rotation Imagine looking at a 3D object and the parts you want to see more closely magically turn toward you - as if the system would read your mind and know to turn the item toward you! That is the idea for attention-based 3D rotations which enable you to investigate all side of a hologram without lifting a finger. To enable this behavior, simply add the OnLookAtRotateByEyeGaze script to the part of your GameObject with a Collider component. You can tweak several parameters that are listed below to limit how fast and in which directions the hologram will turn. As you can imagine, having this behavior active at all times may quickly become pretty distracting in a crowded scene. This is why you may want to start out with this behavior disabled and then enable it quickly using voice commands. Alternatively, we added an example in EyeTrackingDemo-03-Navigation.unity to use TargetMoveToCamera for which you can select a focused target and it flies in front of you - simply say \"Come to me\" . Once in the near mode, the auto rotation mode is automatically enabled. In that mode, you can observe it from all sides either simply leaning back and looking at it, walking around it or reaching out to grab and rotate it with your hand. When you dismiss the target (look & pinch or say \"Send back\" ), it will return to its original location and will stop reacting to you from afar. Parameters Description SpeedX Horizontal rotation speed. SpeedY Vertical rotation speed. InverseX To inverse the horizontal rotation direction. InverseY To inverse the vertical rotation direction. RotationThreshInDegrees If the angle between 'Gaze to Target' and 'Camera to Target' is less than this value, do nothing. This is to prevent small jittery rotations.. MinRotX Minimum horizontal rotation angle. This is to limit the rotation in different directions. MaxRotX Maximum horizontal rotation angle. This is to limit the rotation in different directions. MinRotY Minimal vertical rotation angle to limit the rotation around the x axis. MaxRotY Maximum vertical rotation angle to limit the rotation around the y axis. In summary, the above scripts should enable you to get started to use eye gaze for various input navigation tasks such as scrolling texts, zooming and panning textures as well as rotating investigating 3D holograms. Related Topics Basic MRTK setup to use eye tracking Eye-supported target selection Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/EyeTracking/EyeTracking_Positioning.html": {
    "href": "Documentation/EyeTracking/EyeTracking_Positioning.html",
    "title": "Eye-supported target positioning in MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "Eye-supported target positioning in MRTK <!-- TODO: Add content --> We're currently restructuring and improving the MRTK documentation. This content will be updated soon! If you have any questions regarding this section please post in our MRTK slack channel. Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/EyeTracking/EyeTracking_TargetSelection.html": {
    "href": "Documentation/EyeTracking/EyeTracking_TargetSelection.html",
    "title": "Eye-supported target selection | Mixed Reality Toolkit Documentation",
    "keywords": "Eye-supported target selection This page discusses different options for accessing eye gaze data and eye gaze specific events to select targets in MRTK. Eye tracking allows for fast and effortless target selections using a combination of information about what a user is looking at with additional inputs such as hand tracking and voice commands : Look & Say \"Select\" (default voice command) Look & Say \"Explode\" or \"Pop\" (custom voice commands) Look & Bluetooth button Look & Pinch (i.e., hold up your hand in front of you and bring your thumb and index finger together) Please note that for this to work, the hand rays need to be disabled To select holographic content using eye gaze, there are several options: 1. Use the primary focus pointer: This can be understood as your prioritized cursor. By default, if the hands are in view, then this would be hand rays. If no hands are in view, then the prioritized pointer would be head or eye gaze. Thus, please note that based on the current design head or eye gaze is suppressed as a cursor input if hand rays are used. For example: A user wants to select a distant holographic button. As a developer, you want to provide a flexible solution that allows the user to achieve this tasks in various conditions: Walk up to the button and poke it Look at it from a distance and say \"select\" Target the button using a hand ray and performing a pinch In this case, the most flexible solution is to use the primary focus handler as it will notify you whenever the currently prioritized primary focus pointer triggers an event. Please note that if hand rays are enabled, the head or eye gaze focus pointer are disabled as soon as the hands come into view. Important Please note that if hand rays are enabled, the head or eye gaze focus pointer are disabled as soon as the hands come into view. If you want to support a 'look and pinch' interaction, you need to disable the hand ray . In our eye tracking sample scenes, we have disabled the hand ray to allow for showcasing richer interactions using eyes + hand motions - see for example Eye-Supported Positioning . 2. Use both eye focus and hand rays at the same time: There might be instances where you want to be more specific which type of focus pointers can trigger certain events and allow for simultaneously using multiple far interaction techniques. For example: In your app, a user can use far hand rays to manipulate some holographic mechanical setup - e.g., grab and hold some distant holographic engine parts and hold them in place. While doing so, the user has to go through a number of instructions and record her/his progress by marking off some check boxes. If the user has her/his hands not busy , it would be instinctual to simply touch the check box or select it using a hand ray. However, if the user has her/his hands busy, as in our case holding some holographic engine parts in place, you want to enable the user to seamlessly scroll through the instructions using their eye gaze and to simply look at a check box and say \"check it!\". To enable this, you need to use eye-specific EyeTrackingTarget script that is independent from the core MRTK FocusHandlers and will be discussed further below. 1. Use generic focus and pointer handlers If eye tracking is set up correctly (see Basic MRTK setup to use eye tracking ), enabling users to select holograms using their eyes is the same as for any other focus input (e.g., head gaze or hand ray).This provides the great advantage of a flexible way to interact with your holograms by defining the main focus type in your MRTK Input Pointer Profile depending on your user's needs, while leaving your code untouched. This allows for switching between head or eye gaze without changing a line of code or replace hand rays with eye targeting for far interactions. Focusing on a hologram To detect when a hologram is focused, use the 'IMixedRealityFocusHandler' interface that provides you with two interface members: OnFocusEnter and OnFocusExit . Here is a simple example from ColorTap.cs to change a hologram's color when being looked at. public class ColorTap : MonoBehaviour, IMixedRealityFocusHandler { void IMixedRealityFocusHandler.OnFocusEnter(FocusEventData eventData) { material.color = color_OnHover; } void IMixedRealityFocusHandler.OnFocusExit(FocusEventData eventData) { material.color = color_IdleState; } ... } Selecting a focused hologram To select a focused hologram, use PointerHandler to listen for input events to confirm a selection. For example, adding the IMixedRealityPointerHandler will make them react to simple pointer input. The IMixedRealityPointerHandler interface requires implementing the following three interface members: OnPointerUp , OnPointerDown , and OnPointerClicked . In the example below, we change the color of a hologram by looking at it and pinching or saying \"select\". The required action to trigger the event is defined by eventData.MixedRealityInputAction == selectAction whereby we can set the type of selectAction in the Unity Editor - by default it's the \"Select\" action. The types of available MixedRealityInputActions can be configured in the MRTK Profile via MRTK Configuration Profile -> Input -> Input Actions . public class ColorTap : MonoBehaviour, IMixedRealityFocusHandler, IMixedRealityPointerHandler { // Allow for editing the type of select action in the Unity Editor. [SerializeField] private MixedRealityInputAction selectAction = MixedRealityInputAction.None; ... void IMixedRealityPointerHandler.OnPointerUp(MixedRealityPointerEventData eventData) { if (eventData.MixedRealityInputAction == selectAction) { material.color = color_OnHover; } } void IMixedRealityPointerHandler.OnPointerDown(MixedRealityPointerEventData eventData) { if (eventData.MixedRealityInputAction == selectAction) { material.color = color_OnSelect; } } void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) { } } Eye-gaze-specific BaseEyeFocusHandler Given that eye gaze can be very different to other pointer inputs, you may want to make sure to only react to the focus input if it is eye gaze and it is currently the primary input pointer. For this purpose, you would use the BaseEyeFocusHandler which is specific to eye tracking and which derives from the BaseFocusHandler . As mentioned before, it will only trigger if eye gaze targeting is currently the primary pointer input (i.e., no hand ray is active). For more information, see How to support eye gaze + hand gestures . Here is an example from EyeTrackingDemo-03-Navigation.unity . In this demo, there are two 3D holograms that will turn depending on which part of the object is looked at: If the user looks at the left side of the hologram, then that part will slowly move towards the front facing the user. If the right side is looked at, then that part will slowly move to the front. This is a behavior that you may not want to have active at all times and also something that you may not want to accidentally trigger by a hand ray or head gaze. Having the OnLookAtRotateByEyeGaze attached, a GameObject will rotate while being looked at. public class OnLookAtRotateByEyeGaze : BaseEyeFocusHandler { ... protected override void OnEyeFocusStay() { // Update target rotation RotateHitTarget(); } ... /// /// This function computes the rotation of the target to move the currently /// looked at aspect slowly to the front. /// private void RotateHitTarget() { // Example for querying the hit position of the eye gaze ray using EyeGazeProvider Vector3 TargetToHit = (this.gameObject.transform.position - InputSystem.EyeGazeProvider.HitPosition).normalized; ... } } Check the API documentation for a complete list of available events of the BaseEyeFocusHandler : OnEyeFocusStart: Triggered once the eye gaze ray starts intersecting with this target's collider. OnEyeFocusStay: Triggered while the eye gaze ray is intersecting with this target's collider. OnEyeFocusStop: Triggered once the eye gaze ray stops intersecting with this target's collider. OnEyeFocusDwell: Triggered once the eye gaze ray has intersected with this target's collider for a specified amount of time. 2. Independent eye-gaze-specific EyeTrackingTarget Finally, we provide you with a solution that let's you treat eye-based input completely independent from other focus pointers via the EyeTrackingTarget script. This has three advantages : You can make sure that the hologram is only reacting to the user's eye gaze. This is independent from the currently active primary input. Hence, you can process multiple inputs at once - for example, combining fast eye targeting with hand gestures. Several Unity events have already been set up to make it fast and convenient to handle and reuse existing behaviors from within the Unity Editor or via code. There are also some disadvantages: More effort to handle separate inputs individually. No elegant degradation: It only supports eye targeting. If eye tracking is not working, you require some additional fallback. Similar to the BaseFocusHandler , the EyeTrackingTarget comes ready with several eye-gaze-specific Unity events that you can conveniently listen to either via the Unity Editor (see example below) or by using AddListener() in code: OnLookAtStart() WhileLookingAtTarget() OnLookAway() OnDwell() OnSelected() In the following, we walk you through a few examples for how to use EyeTrackingTarget . Example #1: Eye-supported smart notifications In EyeTrackingDemo-02-TargetSelection.unity , you can find an example for 'smart attentive notifications' that react to your eye gaze. These are 3D text boxes that can be placed in the scene and that will smoothly enlarge and turn toward the user when being looked at to ease legibility. While the user is reading the notification, the information keeps getting displayed crisp and clear. After reading it and looking away from the notification, the notification will automatically be dismissed and fades out. To achieve all this, there are a few generic behavior scripts that are not specific to eye tracking at all, such as: FaceUser ChangeSize BlendOut The advantage of this approach is that the same scripts can be reused by various events. For example, a hologram may start facing the user based on a voice commands or after pressing a virtual button. To trigger these events, you can simply reference the methods that should be executed in the EyeTrackingTarget script that is attached to your GameObject. For the example of the 'smart attentive notifications' , the following happens: OnLookAtStart() : The notification starts to... FaceUser.Engage: ... turn toward the user. ChangeSize.Engage: ... increase in size (up to a specified maximum scale) . BlendOut.Engage: ... starts to blend in more (after being at a more subtle idle state) . OnDwell() : Informs the BlendOut script that the notification has been looked at sufficiently. OnLookAway() : The notification starts to... FaceUser.Disengage: ... turn back to its original orientation. ChangeSize.Disengage: ... decrease back to its original size. BlendOut.Disengage: ... starts to blend out - If OnDwell() was triggered, blend out completely and destroy, otherwise back to its idle state. Design consideration: The key to an enjoyable experience here is to carefully tune the speed of any of these behaviors to avoid causing discomfort by reacting to the user’s eye gaze too quickly all the time. Otherwise this can quickly feel extremely overwhelming. Example #2: Holographic gem rotates slowly when looking at it Similar to Example #1, we can easily create a hover feedback for our holographic gems in EyeTrackingDemo-02-TargetSelection.unity scene that will slowly rotate in a constant direction and at a constant speed (in contrast to the rotation example from above) when being looked at. All you need is to trigger the rotation of the holographic gem from the EyeTrackingTarget 's WhileLookingAtTarget() event. Here are a few more details: Create a generic script that includes a public function to rotate the GameObject it is attached to. Below is an example from RotateWithConstSpeedDir.cs where we can tweak the rotation direction and speed from the Unity Editor. using UnityEngine; namespace Microsoft.MixedReality.Toolkit.Examples.Demos.EyeTracking { /// <summary> /// The associated GameObject will rotate when RotateTarget() is called based on a given direction and speed. /// </summary> public class RotateWithConstSpeedDir : MonoBehaviour { [Tooltip(\"Euler angles by which the object should be rotated by.\")] [SerializeField] private Vector3 RotateByEulerAngles = Vector3.zero; [Tooltip(\"Rotation speed factor.\")] [SerializeField] private float speed = 1f; /// <summary> /// Rotate game object based on specified rotation speed and Euler angles. /// </summary> public void RotateTarget() { transform.eulerAngles = transform.eulerAngles + RotateByEulerAngles * speed; } } } Add the EyeTrackingTarget script to your target GameObject and reference the RotateTarget() function in the UnityEvent trigger as shown the screenshot below: Example #3: Pop those gems aka multi-modal eye-gaze-supported target selection In the previous example, we have shown how easy it is to detect whether a target is looked at and how to trigger a reaction to that. Next, let's make the gems explode using the OnSelected() event from the EyeTrackingTarget . The interesting part is how the selection is triggered. The EyeTrackingTarget allows for quickly assigning different ways to invoke a selection: Pinch gesture : Setting the 'Select Action' to 'Select' uses the default hand gesture to trigger the selection. This means that the user can simply raise their hand and pinch their thumb and index finger together to confirm the selection. Say \"Select\" : Use the default voice command \"Select\" for selecting a hologram. Say \"Explode\" or \"Pop\" : To use custom voice commands, you need to follow two steps: Set up a custom action such as \"DestroyTarget\" Navigate to MRTK -> Input -> Input Actions Click \"Add a new action\" Set up the voice commands that trigger this action such as \"Explode\" or \"Pop\" Navigate to MRTK -> Input -> Speech Click \"Add a new speech command\" Associate the action you just created Assign a KeyCode to allow for triggering the action via a button press When a gem is selected it will explode, making a sound and disappear. This is handled by the HitBehaviorDestroyOnSelect script. You have two options: In the Unity Editor: You could simply link the script that is attached to each of our gem templates to the OnSelected() Unity event in the Unity Editor. In code: If you don't want to drag and drop GameObjects around, you can also simply add a event listener directly to your script. Here's an example from how we did it in the HitBehaviorDestroyOnSelect script: /// <summary> /// Destroys the game object when selected and optionally plays a sound or animation when destroyed. /// </summary> [RequireComponent(typeof(EyeTrackingTarget))] // This helps to ensure that the EyeTrackingTarget is attached public class HitBehaviorDestroyOnSelect : MonoBehaviour { ... private EyeTrackingTarget myEyeTrackingTarget = null; private void Start() { myEyeTrackingTarget = this.GetComponent<EyeTrackingTarget>(); if (myEyeTrackingTarget != null) { myEyeTrackingTarget.OnSelected.AddListener(TargetSelected); } } ... /// /// This is called once the EyeTrackingTarget detected a selection. /// public void TargetSelected() { // Play some animation // Play some audio effect // Handle destroying the target appropriately } } Example #4: Use hand rays and eye gaze input together Hand rays take priority over head and eye gaze targeting. This means, if hand rays are enabled, the moment the hands come into view, the hand ray will act as the primary pointer. However, there might be situations in which you want to use hand rays while still detecting whether a user is looking at a certain hologram. Easy! Essentially you require two steps: 1. Enable the hand ray: To enable the hand ray, go to Mixed Reality Toolkit -> Input -> Pointers . In the EyeTrackingDemo-00-RootScene where the Mixed Reality Toolkit is configured once for all of the eye tracking demo scenes, you should see the EyeTrackingDemoPointerProfile . You can either create a new Input Profile from scratch or adapt the current eye tracking one: From scratch: In the Pointers tab, select the DefaultMixedRealityInputPointerProfile from the context menu. This is the default pointer profile that already has the hand ray enabled! To change the default cursor (an opaque white dot), simply clone the profile and create your own custom pointer profile. Then replace DefaultCursor with EyeGazeCursor under Gaze Cursor Prefab . Based on the existing EyeTrackingDemoPointerProfile : Double-click the EyeTrackingDemoPointerProfile and add the following entry under Pointer Options : Controller Type: 'Articulated Hand', 'Windows Mixed Reality' Handedness: Any Pointer Prefab: DefaultControllerPointer 2. Detect that a hologram is looked at: Use the EyeTrackingTarget script to enable detecting that a hologram is looked at as described above. You can also take a look at the FollowEyeGaze sample script for inspiration as this is showing a hologram following your eye gaze (e.g., a cursor) whether hand rays are enabled or not. Now, when you start the eye tracking demo scenes, you should see a ray coming from your hands. For example, in the eye tracking target selection demo, the semi-transparent circle is still following your eye gaze and the gems respond to whether they are looked at or not, while the top scene menu buttons use the primary input pointer (your hands) instead. Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/Input/Controllers.html": {
    "href": "Documentation/Input/Controllers.html",
    "title": "Controllers | Mixed Reality Toolkit Documentation",
    "keywords": "Controllers 控制器(Controllers)由 input providers 自动创建和销毁。每种控制器类型都有许多由一个 axis type 定义的 physical inputs ，它提供给我们输入值的数据类型（开关值，单轴，双轴，六自由度，...）和 input type （按钮按下，触发器，拇指操纵杆，空间指针等）描述了输入的来源。物理输入通过MRTK组件中 Input System Profile 下的 Controller Input Mapping Profile 映射到 input actions 。"
  },
  "Documentation/Input/CreateDataProvider.html": {
    "href": "Documentation/Input/CreateDataProvider.html",
    "title": "Creating an input system data provider | Mixed Reality Toolkit Documentation",
    "keywords": "Creating an input system data provider The Mixed Reality Toolkit input system is an extensible system for enabling input device support. To add support for a new hardware platform, a custom input data provider may be required. This article describes how to create custom data providers, also called device managers, for the input system. The example code shown here is from the WindowsMixedRealityDeviceManager . The complete code used in this example can be found in the MixedRealityToolkit.Providers\\WindowsMixedReality folder. Namespace and folder structure Data providers can be distributed as a third party add-on or as a part of the Microsoft Mixed Reality Toolkit. The approval process for submissions of new data providers to the MRTK will vary on a case-by-case basis and will be communicated at the time of the initial proposal. Important If an input system data provider is being submitted to the Mixed Reality Toolkit repository , the namespace must begin with Microsoft.MixedReality.Toolkit (ex: Microsoft.MixedReality.Toolkit.WindowsMixedReality) and the code should be located in a folder beneath MixedRealityToolkit.Providers (ex: MixedRealityToolkit.Providers\\WindowsMixedReality). Namespace Data providers are required to have a namespace to mitigate potential name collisions. It is recommended that the namespace includes the following components. Company name Feature area For example, an input data provider created by the Contoso company may be \"Contoso.MixedReality.Toolkit.Input\". Recommended folder structure It is recommended that the source code for data providers be layed out in a folder hierarchy as shown in the following image. Where ContosoInput contains the implementation of the data provider, the Editor folder contains the inspector (and any other Unity editor specific code), the Textures folder contains images of the supported controllers, and Profiles contains one or more pre-made profiles. Note Some common controller images can be found in the MixedRealityToolkit\\StandardAssets\\Textures folder. Implement the data provider Specify interface and/or base class inheritance All input system data providers must implement the IMixedRealityInputDeviceManager interface, which specifies the minimum functionality required by the input system. The MRTK foundation includes the BaseInputDeviceManager class which provides a default implementation of this required functionality. For devices that build upon Unity's UInput class, the UnityJoystickManager class can be used as a base class. Note The BaseInputDeviceManager and UnityJoystickManager classes provide the required IMixedRealityInputDeviceManager implementation. public class WindowsMixedRealityDeviceManager : BaseInputDeviceManager, IMixedRealityCapabilityCheck { } IMixedRealityCapabilityCheck is used by the WindowsMixedRealityDeviceManager to indicate that it provides support for a set of input capabilities, specifically; articulated hands, gaze-gesture-voice hands and motion controllers. Apply the MixedRealityDataProvider attribute A key step of creating an input system data provider is to apply the MixedRealityDataProvider attribute to the class. This step enables setting the default profile and platform(s) for the provider, when selected in the input system profile. [MixedRealityDataProvider( typeof(IMixedRealityInputSystem), SupportedPlatforms.WindowsUniversal, \"Windows Mixed Reality Device Manager\")] public class WindowsMixedRealityDeviceManager : BaseInputDeviceManager, IMixedRealityCapabilityCheck { } Implement the IMixedRealityDataProvider methods Once the class has been defined, the next step is to provide the implementation of the IMixedRealityDataProvider interface. Note The BaseInputDeviceManager class, via the BaseService class, provides only empty implementations for IMixedRealityDataProvider methods. The details of these methods are generally data provider specific. The methods that should be implemented by the data provider are: Destroy() Disable() Enable() Initialize() Reset() Update() Implement the data provider logic The next step is to add the logic for managing the input devices, including any controllers to be supported. Implement the controller classes The example of the WindowsMixedRealityDeviceManager defines and implements the following controller classes. The source code for each of these classes can be found in the MixedRealityToolkit.Providers\\WindowsMixedReality folder. WindowsMixedRealityArticulatedHand.cs WindowsMixedRealityController.cs WindowsMixedRealityGGVHand.cs Note Not all device managers will support multiple controller types. Apply the MixedRealityController attribute Next, apply the MixedRealityController attribute to the class. This attribute specifies the type of controller (ex: articulated hand), the handedness (ex: left or right) and an optional controller image. [MixedRealityController( SupportedControllerType.WindowsMixedReality, new[] { Handedness.Left, Handedness.Right }, \"StandardAssets/Textures/MotionController\")] { } Configure the interaction mappings The next step is to define the set of interaction mappings supported by the controller. For devices that receive their data via Unity's Input class, the controller mapping tool is a helpful resource to confirm the correct axis and button mappings to assign to interactions. The following example is abbreviated from the GenericOpenVRController class, located in the MixedRealityToolkit.Providers\\OpenVR folder. public override MixedRealityInteractionMapping[] DefaultLeftHandedInteractions => new[] { // Controller Pose new MixedRealityInteractionMapping(0, \"Spatial Pointer\", AxisType.SixDof, DeviceInputType.SpatialPointer, MixedRealityInputAction.None), // Left Trigger Squeeze new MixedRealityInteractionMapping(1, \"Trigger Position\", AxisType.SingleAxis, DeviceInputType.Trigger, ControllerMappingLibrary.AXIS_9), // Left Trigger Press (Select) new MixedRealityInteractionMapping(2, \"Trigger Press (Select)\", AxisType.Digital, DeviceInputType.TriggerPress, KeyCode.JoystickButton14), }; Note The ControllerMappingLibrary class provides symbolic constants for the Unity input axis and button definitions. Raise notification events To enable applications to respond to input from the user, the data provider raises notification events corresponding to controller state changes as defined in the IMixedRealityInputHandler and IMixedRealityInputHandler<T> interfaces. For digital (button) type controls, raise the OnInputDown and OnInputUp events. // inputAction is the input event that is to be raised. if (interactionSourceState.touchpadPressed) { InputSystem?.RaiseOnInputDown(InputSource, ControllerHandedness, inputAction); } else { InputSystem?.RaiseOnInputUp(InputSource, ControllerHandedness, inputAction); } For analog controls (ex: touchpad position) the InputChanged event should be raised. InputSystem?.RaisePositionInputChanged(InputSource, ControllerHandedness, interactionMapping.MixedRealityInputAction, interactionSourceState.touchpadPosition); Create the profile and inspector In the Mixed Reality Toolkit, data providers are configured using profiles . Data providers with additional configuration options (ex: InputSimulationService ) should create a profile and inspector to allow customers to modify the behavior to best suit the needs of the application. The complete code for the example in this section can be found in the MixedRealityToolkit.Services\\InputSimulation folder. Define the profile Profile contents should mirror the accessible properties of the observer (ex: update interval). All of the user configurable properties defined in each interface should be contained with the profile. [CreateAssetMenu( menuName = \"Mixed Reality Toolkit/Profiles/Mixed Reality Simulated Input Profile\", fileName = \"MixedRealityInputSimulationProfile\", order = (int)CreateProfileMenuItemIndices.InputSimulation)] public class MixedRealityInputSimulationProfile : BaseMixedRealityProfile { } The CreateAssetMenu attribute can be applied to the profile class to enable customers to create a profile instance using the Create > Assets > Mixed Reality Toolkit > Profiles menu. Implement the inspector Profile inspectors are the user interface for configuring and viewing profile contents. Each profile inspector should extend the `BaseMixedRealityToolkitConfigurationProfileInspector class. [CustomEditor(typeof(MixedRealityInputSimulationProfile))] public class MixedRealityInputSimulationProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector { } The CustomEditor attribute informs Unity the type of asset to which the inspector applies. Create assembly definition(s) The Mixed Reality Toolkit uses assembly definition ( .asmdef ) files to specify dependencies between components as well as to assist Unity in reducing compilation time. It is recommended that assembly definition files are created for all data providers and their editor components. Using the folder structure in the earlier example, there would be two .asmdef files for the ContosoInput data provider. The first assembly definition is for the data provider. For this example, it will be called ContosoInput and will be located in the example's ContosoInput folder. This assembly definition must specify a dependency on Microsoft.MixedReality.Toolkit and any other assemblies upon which it depends. The ContosoInputEditor assembly definition will specify the profile inspector and any editor specific code. This file must be located in the root folder of the editor code. In this example, the file will be located in the ContosoInput\\Editor folder. This assembly definition will contain a reference to the ContosoInput assembly as well as: Microsoft.MixedReality.Toolkit Microsoft.MixedReality.Toolkit.Editor.Inspectors Microsoft.MixedReality.Toolkit.Editor.Utilities Register the data provider Once created, the data provider can be registered with the input system and be used in the application. Packaging and distribution Data providers that are distributed as third party components have the specific details of packaging and distribution left to the preference of the developer. Likely, the most common solution will be to generate a .unitypackage and distribute via the Unity Asset Store. If a data provider is submitted and accepted as a part of the Microsoft Mixed Reality Toolkit package, the Microsoft MRTK team will package and distribute it as part of the MRTK offerings. See also Input system BaseInputDeviceManager class IMixedRealityInputDeviceManager interface IMixedRealityInputHandler interface IMixedRealityInputHandler<T> interface IMixedRealityDataProvider interface IMixedRealityCapabilityCheck interface Controller Mapping Tool"
  },
  "Documentation/Input/Dictation.html": {
    "href": "Documentation/Input/Dictation.html",
    "title": "Dictation | Mixed Reality Toolkit Documentation",
    "keywords": "Dictation Dictation allows users to record audio clips and obtain a transcription. To use it make sure that a dictation system is registered in the Input System Profile . Windows Dictation Input Provider is the dictation system provided out of the box but alternative dictation systems can be created implementing IMixedRealityDictationSystem . Requirements The dictation system uses Unity's DictationRecognizer which itself uses the underlying Windows speech APIs for handling dictation. Note that this implies that this feature is only present on Windows-based platforms. Usage of the Dictation system requires both the \"Internet Client\" and \"Microphone\" application capabilities in the PlayerSettings - Capabilities section . See Windows Mixed Reality Documentation for more details on voice input in Unity. Configuration Once you have a dictation service set up, you can use the DictationHandler script to start and stop recording sessions and obtain the transcription results via UnityEvents. Dictation Hypothesis is raised as the user speaks with early, rough transcriptions of the audio captured so far. Dictation Result is raised at the end of each sentence (i.e. when the user pauses) with the final transcription of the audio captured so far. Dictation Complete is raised at the end of the recording session with the full, final transcription of the audio. Dictation Error is raised to inform of errors in the dictation service. The transcription in this case contains a description of the error. Example Scene Dictation scene in MixedRealityToolkit.Examples\\Demos\\Input\\Scenes\\Dictation shows the DictationHandler script in use. If you need more control, you can either extend this script or create your own implementing IMixedRealityDictationHandler to receive dictation events directly."
  },
  "Documentation/Input/Gaze.html": {
    "href": "Documentation/Input/Gaze.html",
    "title": "Gaze | Mixed Reality Toolkit Documentation",
    "keywords": "Gaze Gaze is a form of input that interacts with the world based on where the user is looking. Gaze exists in two different flavors Head gaze This type of gaze is based on the direction that the head/camera is looking at. Head gaze is active on systems that don't support eye gaze, or in cases where the hardware may support eye gaze, but the right set of permissions and setup has not been performed. Head gaze is usually associated with HoloLens 1 style interactions involving looking at object by placing it in the center of the Holographic Frame and then performing the air tap gesture. Eye gaze This type of gaze is based on where the user's eyes are looking. Eye gaze is only present on systems that support eye tracking. See the eye tracking documentation for more details on how to use eye gaze. GazeProvider Gaze functionality (both head and eye) is provided by the GazeProvider . This provider can be configured in the Pointer section of the input system profile: Like other sources of input, the gaze provider interacts with objects in the scene through use of a pointer (see this document for information on pointers) . In the case of the gaze provider, its pointer is an implemented via InternalGazePointer and is not configured through a profile. It is possible to replace the stock GazeProvider with an alternate implementation by changing Gaze Provider Type to reference a different class that implements IMixedRealityGazeProvider and IMixedRealityEyeGazeProvider . It's generally recommended to use the stock GazeProvider (and filing issues in when finding bugs) as re-implementing the GazeProvider is non-trivial. Usage How get the current gaze target This sample shows how to get the current game object that is targeted by the user gaze. void LogCurrentGazeTarget() { if (CoreServices.InputSystem.GazeProvider.GazeTarget) { Debug.Log(\"User gaze is currently over game object: \" + CoreServices.InputSystem.GazeProvider.GazeTarget) } } How to get the current gaze direction and origin This sample shows how to get the Vector3 representing the direction of the user gaze and the origin (the point from which the direction is going). void LogGazeDirectionOrigin() { Debug.Log(\"Gaze is looking in direction: \" + CoreServices.InputSystem.GazeProvider.GazeDirection); Debug.Log(\"Gaze origin is: \" + CoreServices.InputSystem.GazeProvider.GazeOrigin); }"
  },
  "Documentation/Input/Gestures.html": {
    "href": "Documentation/Input/Gestures.html",
    "title": "Gestures | Mixed Reality Toolkit Documentation",
    "keywords": "Gestures Gestures are input events based on human hands. There are two types of devices that raise gesture input events in MRTK: Windows Mixed Reality devices such as HoloLens. This describes pinching motions (\"Air Tap\") and tap-and-hold gestures. For more information on HoloLens gestures see the Windows Mixed Reality Gestures documentation . WindowsMixedRealityDeviceManager wraps the Unity XR.WSA.Input.GestureRecognizer to consume Unity's gesture events from HoloLens devices. Touch screen devices. UnityTouchController wraps the Unity Touch class that supports physical touch screens. Both of these input sources use the Gesture Settings profile to translate Unity's Touch and Gesture events respectively into MRTK's Input Actions . This profile can be found under the Input System Settings profile. Gesture Events Gesture events are received by implementing one of the gesture handler interfaces: IMixedRealityGestureHandler or IMixedRealityGestureHandler<TYPE> (see table of event handlers ). See Example Scene for an example implementation of a gesture event handler. When implementing the generic version, the OnGestureCompleted and OnGestureUpdated events can receive typed data of the following types: Vector2 - 2D position gesture. Produced by touch screens to inform of their deltaPosition . Vector3 - 3D position gesture. Produced by HoloLens to inform of: cumulativeDelta of a manipulation event normalizedOffset of a navigation event Quaternion - 3D rotation gesture. Available to custom input sources but not currently produced by any of the existing ones. MixedRealityPose - Combined 3D position/rotation gesture. Available to custom input sources but not currently produced by any of the existing ones. Order of events There are two principal chains of events, depending on user input: \"Hold\": Hold tap: start Manipulation Hold tap beyond HoldStartDuration : start Hold Release tap: complete Hold complete Manipulation \"Move\": Hold tap: start Manipulation Hold tap beyond HoldStartDuration : start Hold Move hand beyond NavigationStartThreshold : cancel Hold start Navigation Release tap: complete Manipulation complete Navigation Example Scene The HandInteractionGestureEventsExample scene in MixedRealityToolkit.Examples\\Demos\\HandTracking\\Scenes shows how to use the pointer Result to spawn an object at the hit location. Gesture Tester script is an example implementation to visualize gesture events via GameObjects. The handler functions change the color of indicator objects and display the last recorded event in text objects in the scene."
  },
  "Documentation/Input/HandTracking.html": {
    "href": "Documentation/Input/HandTracking.html",
    "title": "Hand Tracking | Mixed Reality Toolkit Documentation",
    "keywords": "Hand Tracking Hand Tracking Profile The Hand Tracking profile is found under the Input System profile . It contains settings for customizing hand representation. Joint Prefabs Joint prefabs are visualized using simple prefabs. The Palm and Index Finger joints are of special importance and have their own prefab, while all other joints share the same prefab. By default the hand joint prefabs are simple geometric primitives. These can be replaced if desired. If no prefab is specified at all, empty GameObjects are created instead. Warning Avoid using complex scripts or expensive rendering in joint prefabs, since joint objects are transformed on every frame and can have significant performance cost! Hand Mesh Prefab The hand mesh is used if fully defined mesh data is provided by the hand tracking device. The mesh renderable in the prefab is replaced by data from the device, so a dummy mesh such as a cube is sufficient. The material of the prefab is used for the hand mesh. Hand mesh display can have a noticeable performance impact, for this reason it can be disabled entirely by unchecking Enable Hand Mesh Visualization option. Hand visualization settings The hand mesh and hand joint visualizations can be turned off or on via the Hand Mesh Visualization Modes setting and Hand Joint Visualization Modes respectively. These settings are application-mode specific, meaning it is possible to turn on some features while in editor (to see joints with in-editor simulation, for example) while having the same features turned off when deployed to device (in player builds). Note that it's generally recommended to have hand joint visualization turned on in editor (so that in-editor simulation will show where the hand joints are), and to have both hand joint visualization and hand mesh visualization turned off in player (because they incur a performance hit). Scripting Position and rotation can be requested from the input system for each individual hand joint as a MixedRealityPose . Alternatively the system allows access to GameObjects that follow the joints. This can be useful if another GameObject should track a joint continuously. Available joints are listed in the TrackedHandJoint enum. Note Joint object are destroyed when hand tracking is lost! Make sure that any scripts using the joint object handle the null case gracefully to avoid errors! Accessing a given Hand Controller A specific hand controller is often available, e.g. when handling input events. In this case the joint data can be requested directly from the device, using the IMixedRealityHand interface. Polling Joint Pose from Controller The TryGetJoint function returns false if the requested joint is not available for some reason. In that case the resulting pose will be MixedRealityPose.ZeroIdentity . public void OnSourceDetected(SourceStateEventData eventData) { var hand = eventData.Controller as IMixedRealityHand; if (hand != null) { if (hand.TryGetJoint(TrackedHandJoint.IndexTip, out MixedRealityPose jointPose) { // ... } } } Joint Transform from Hand Visualizer Joint objects can be requested from the controller visualizer . public void OnSourceDetected(SourceStateEventData eventData) { var handVisualizer = eventData.Controller.Visualizer as IMixedRealityHandVisualizer; if (handVisualizer != null) { if (handVisualizer.TryGetJointTransform(TrackedHandJoint.IndexTip, out Transform jointTransform) { // ... } } } Simplified joint data access If no specific controller is given then utility classes are provided for convenient access to hand joint data. These functions request joint data from the first available hand device currently tracked. Polling Joint Pose from HandJointUtils HandJointUtils is a static class that queries the first active hand device. if (HandJointUtils.TryGetJointPose(TrackedHandJoint.IndexTip, Handedness.Right, out MixedRealityPose pose)) { // ... } Joint Transform from Hand Joint Service IMixedRealityHandJointService keeps a persistent set of GameObjects for tracking joints. IMixedRealityHandJointService handJointService = null; if (CoreServices.InputSystem != null) { var dataProviderAccess = CoreServices.InputSystem as IMixedRealityDataProviderAccess; if (dataProviderAccess != null) { handJointService = dataProviderAccess.GetDataProvider<IMixedRealityHandJointService>(); } } if (handJointService != null) { Transform jointTransform = handJointService.RequestJointTransform(TrackedHandJoint.IndexTip, Handedness.Right); // ... } Hand Tracking Events The input system provides events as well, if polling data from controllers directly is not desirable. Joint Events IMixedRealityHandJointHandler handles updates of joint positions. public class MyHandJointEventHandler : IMixedRealityHandJointHandler { public Handedness myHandedness; void IMixedRealityHandJointHandler.OnHandJointsUpdated(InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>> eventData) { if (eventData.Handedness == myHandedness) { if (eventData.InputData.TryGetValue(TrackedHandJoint.IndexTip, out MixedRealityPose pose)) { // ... } } } } Mesh Events IMixedRealityHandMeshHandler handles changes of the articulated hand mesh. Note that hand meshes are not enabled by default. public class MyHandMeshEventHandler : IMixedRealityHandMeshHandler { public Handedness myHandedness; public Mesh myMesh; public void OnHandMeshUpdated(InputEventData<HandMeshInfo> eventData) { if (eventData.Handedness == myHandedness) { myMesh.vertices = eventData.InputData.vertices; myMesh.normals = eventData.InputData.normals; myMesh.triangles = eventData.InputData.triangles; if (eventData.InputData.uvs != null && eventData.InputData.uvs.Length > 0) { myMesh.uv = eventData.InputData.uvs; } // ... } } } Known Issues .NET Native There is currently a known issue with Master builds using the .NET backend. In .NET Native, IInspectable pointers cannot be marshaled from native to managed code using Marshal.GetObjectForIUnknown . The MRTK uses this to obtain the SpatialCoordinateSystem in order to receive hand and eye data from the platform. We've provided DLL source as a workaround for this issue, in the native Mixed Reality Toolkit repo . Please follow the instructions in the README there and copy the resulting binaries into a Plugins folder in your Unity assets. After that, the WindowsMixedRealityUtilities script provided in the MRTK will resolve the workaround for you. If you want to create your own DLL or include this workaround in an existing one, the core of the workaround is: extern \"C\" __declspec(dllexport) void __stdcall MarshalIInspectable(IUnknown* nativePtr, IUnknown** inspectable) { *inspectable = nativePtr; } And its use in your C# Unity code: [DllImport(\"DotNetNativeWorkaround.dll\", EntryPoint = \"MarshalIInspectable\")] private static extern void GetSpatialCoordinateSystem(IntPtr nativePtr, out SpatialCoordinateSystem coordinateSystem); private static SpatialCoordinateSystem GetSpatialCoordinateSystem(IntPtr nativePtr) { try { GetSpatialCoordinateSystem(nativePtr, out SpatialCoordinateSystem coordinateSystem); return coordinateSystem; } catch { UnityEngine.Debug.LogError(\"Call to the DotNetNativeWorkaround plug-in failed. The plug-in is required for correct behavior when using .NET Native compilation\"); return Marshal.GetObjectForIUnknown(nativePtr) as SpatialCoordinateSystem; } }"
  },
  "Documentation/Input/HowToAddNearInteractivity.html": {
    "href": "Documentation/Input/HowToAddNearInteractivity.html",
    "title": "How to add near interaction in MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "How to add near interaction in MRTK Near interactions come in the form of touches and grabs. Touch and grab events are raised as pointer events by the PokePointer and SpherePointer , respectively. Three key steps are required to listen for touch and/or grab input events on a particular GameObject. Ensure the relevant pointer is registered in the main MRTK Configuration Profile . Ensure the desired GameObject has the appropriate grab or touch script component and Unity Collider . Implement an input handler interface on an attached script to the desired GameObject to listen for the grab or touch events. Add grab interactions Ensure a SpherePointer is registered in the MRTK Pointer profile . The default MRTK profile and the default HoloLens 2 profile already contain a SpherePointer . One can confirm a SpherePointer will be created by selecting the MRTK Configuration Profile and navigating to Input > Pointers > Pointer Options . The default GrabPointer prefab, under MRTK.SDK/Features/UX/Prefabs/Pointers/ , should be listed with a Controller Type of Articulated Hand . A custom prefab can be utilized as long as it implements the SpherePointer class. On the GameObject that should be grabbable, add a NearInteractionGrabbable , as well as a collider. Make sure the layer of the GameObject is on a grabbable layer. By default, all layers except Spatial Awareness and Ignore Raycasts are grabbable. See which layers are grabbable by inspecting the Grab Layer Masks in your GrabPointer prefab. On the GameObject or one of its ancestors, add a script component that implements the IMixedRealityPointerHandler interface. Any ancestor of the object with the NearInteractionGrabbable will be able to receive pointer events, as well. Grab code example Below is a script that will print if an event is a touch or grab. In the relevant IMixedRealityPointerHandler interface function, one can look at the type of pointer that triggers that event via the MixedRealityPointerEventData . If the pointer is a SpherePointer , the interaction is a grab. public class PrintPointerEvents : MonoBehaviour, IMixedRealityPointerHandler { public void OnPointerDown(MixedRealityPointerEventData eventData) { if (eventData.Pointer is SpherePointer) { Debug.Log($\"Grab start from {eventData.Pointer.PointerName}\"); } if (eventData.Pointer is PokePointer) { Debug.Log($\"Touch start from {eventData.Pointer.PointerName}\"); } } public void OnPointerClicked(MixedRealityPointerEventData eventData) {} public void OnPointerDragged(MixedRealityPointerEventData eventData) {} public void OnPointerUp(MixedRealityPointerEventData eventData) {} } Add touch interactions The process for adding touch interactions on UnityUI elements is different than for vanilla 3D GameObjects. You can skip to the following section, Unity UI , for enabling Unity UI components. For both types of UX elements though, ensure a PokePointer is registered in the MRTK Pointer profile . The default MRTK profile and the default HoloLens 2 profile already contain a PokePointer . One can confirm a PokePointer will be created by selecting the MRTK Configuration Profile and navigate to Input > Pointers > Pointer Options . The default PokePointer prefab, under MRTK.SDK/Features/UX/Prefabs/Pointers/ , should be listed with a Controller Type of Articulated Hand . A custom prefab can be utilized as long as it implements the PokePointer class. 3D GameObjects On the GameObject that should be touchable, add a collider and a NearInteractionTouchable component. Set Events to Receive to Touch if using the IMixedRealityTouchHandler interface in your component script below. Click Fix bounds and Fix center On that object or one of its ancestors, add a script component that implements the IMixedRealityTouchHandler interface. Any ancestor of the object with the NearInteractionTouchable will be able to receive pointer events, as well. Note In the editor scene view with the NearInteractionTouchable GameObject selected, notice a white outline square and arrow. The arrow points to the \"front\" of the touchable. The collidable will only be touchable from that direction. To make a collider touchable from all directions, add a NearInteractionTouchableVolume instead. Unity UI Add/ensure there is a UnityUI canvas in the scene. On the GameObject that should be touchable, add a NearInteractionTouchableUnityUI component. Set Events to Receive to Touch if using the IMixedRealityTouchHandler interface in your component script below. On that object or one of its ancestors, add a script component that implements the IMixedRealityTouchHandler interface. Any ancestor of the object with the NearInteractionTouchableUnityUI will be able to receive pointer events as well. Important On the NearInteractionTouchable script component, for the property Events to Receive there are two options: Pointer and Touch . Set Events to Receive to Pointer if using the IMixedRealityPointerHandler interface and set to Touch if using the IMixedRealityTouchHandler interface in your component script that responds/handles the input events. Touch code example The code below demonstrates a MonoBehaviour that can be attached to a GameObject with a NearInteractionTouchable variant component and respond to touch input events. public class TouchEventsExample : MonoBehaviour, IMixedRealityTouchHandler { public void OnTouchStarted(HandTrackingInputEventData eventData) { string ptrName = eventData.Pointer.PointerName; Debug.Log($\"Touch started from {ptrName}\"); } public void OnTouchCompleted(HandTrackingInputEventData eventData) {} public void OnTouchUpdated(HandTrackingInputEventData eventData) { } } Near interaction script examples Touch events This example creates a cube, makes it touchable, and changes color on touch. public static void MakeChangeColorOnTouch(GameObject target) { // Add and configure the touchable var touchable = target.AddComponent<NearInteractionTouchableVolume>(); touchable.EventsToReceive = TouchableEventType.Pointer; var material = target.GetComponent<Renderer>().material; // Change color on pointer down and up var pointerHandler = target.AddComponent<PointerHandler>(); pointerHandler.OnPointerDown.AddListener((e) => material.color = Color.green); pointerHandler.OnPointerUp.AddListener((e) => material.color = Color.magenta); } Grab events The below example shows how to make a GameObject draggable. Assumes that the game object has a collider on it. public static void MakeNearDraggable(GameObject target) { // Instantiate and add grabbable target.AddComponent<NearInteractionGrabbable>(); // Add ability to drag by re-parenting to pointer object on pointer down var pointerHandler = target.AddComponent<PointerHandler>(); pointerHandler.OnPointerDown.AddListener((e) => { if (e.Pointer is SpherePointer) { target.transform.parent = ((SpherePointer)(e.Pointer)).transform; } }); pointerHandler.OnPointerUp.AddListener((e) => { if (e.Pointer is SpherePointer) { target.transform.parent = null; } }); } Useful APIs NearInteractionGrabbable NearInteractionTouchable NearInteractionTouchableUnityUI NearInteractionTouchableVolume IMixedRealityTouchHandler IMixedRealityPointerHandler See also Input Overview Pointers Input Events"
  },
  "Documentation/Input/InputActions.html": {
    "href": "Documentation/Input/InputActions.html",
    "title": "Input Actions （输入动作） | Mixed Reality Toolkit Documentation",
    "keywords": "Input Actions （输入动作） 输入动作 是对原始输入的抽象，旨在帮助将应用程序逻辑与产生输入的特定输入源隔离开。例如，定义一个 Select 动作并将其映射到鼠标左键，游戏手柄中的一个按钮和一个6自由度控制器中的一个触发器，可能会很有用。然后，您可以让您的应用程序逻辑侦听 Select 输入动作事件，而不必知道可能产生此事件的所有不同输入。 创建输入动作 在MRTK组件的 Input System Profile 内的 Input Actions Profile 中配置输入动作，指定动作名称和可以映射到的输入类型 （ 轴约束(Axis Constraint)) ） 这些是 轴约束 最常用的值： 轴约束 描述 Digital 开/关输入，例如游戏手柄或鼠标中的二进制按钮。. Single Axis 单轴模拟输入，如游戏手柄中的模拟触发器。 Dual Axis 双轴模拟输入，如摇杆。 Six Dof 具有6个自由度控制器产生的平移和旋转的3D姿势。 您可以在 轴类型 中找到完整列表. Mapping Inputs To Actions (将输入映射到动作) 将输入映射到动作的方式取决于输入源的类型： Controller Inputs (控制器输入) 转到 Input System Profile 下的 Controller Input Mapping Profile 。在这里，您会找到所有支持的控制器的列表： 选择要你想配置的一个，随即出现一个对话框窗口，其中包含所有控制器输入，可让您为每个输入设置一个动作： Speech Inputs (语音输入) 在 Input System Profile 下的 Speech Command Profile 中，您将找到当前定义的语音命令列表。要将其中之一映射到某个动作，只需在 Action 下拉列表中选择它即可。 Gesture Inputs (手势输入) Input System Profile 下的 Gestures Profile 包含所有已定义的手势。您可以在 Action 下拉列表中选择手势并且将它们映射到一个动作。 Handling Input Actions (处理输入动作) [!警告] 当前，只能使用本节中描述的方法来处理*数字(Digital)*类型的输入动作。对于其他动作类型，您必须直接处理相应输入的事件。例如，要处理映射到控制器输入的6自由度动作，您必须使用 IMixedRealityGestureHandler<T> with T = MixedRealityPose . 处理输入动作的最简单方法是利用 InputActionHandler 脚本。这使您可以使用Unity Events定义要监听的动作并对动作的开始和结束事件做出反应。 如果您想要更多控制权，可以直接在您的脚本中实现 IMixedRealityInputActionHandler 接口。查看 输入事件 部分，以了解有关通过handler接口进行事件处理的更多详细信息。 例子 有关示例场景，请参见 MixedRealityToolkit.Examples\\Demos\\Input\\Scenes\\InputActions 其中显示了如何创建动作，如何将其映射到控制器，语音和手势输入以及如何根据命令旋转对象。"
  },
  "Documentation/Input/InputEvents.html": {
    "href": "Documentation/Input/InputEvents.html",
    "title": "Input events（输入事件） | Mixed Reality Toolkit Documentation",
    "keywords": "Input events（输入事件） 下面的列表概述了将由自定义MonoBehavior组件实现的所有可用输入事件接口。MRTK输入系统将调用这些接口，以基于用户输入交互来处理自定义应用逻辑。 指针输入事件 与下面的标准输入事件类型稍有不同。 [!重要] 默认情况下，脚本仅在焦点指向GameObject的指针或焦点在GameObject的父对象上时才会接收输入事件。 Handler 事件 描述 IMixedRealitySourceStateHandler 检测到/丢失源 在检测到/丢失输入源时引发，例如在检测到全关节手或失去跟踪时。 IMixedRealitySourcePoseHandler 源姿势已更改 在源姿势变化时引发。源姿态表示输入源的一般姿态。可以通过 IMixedRealityInputHandler<MixedRealityPose> 获得特定的姿势，例如6DOF控制器中的紧握或指针姿势。 IMixedRealityInputHandler 输入 下/上 引发对按钮等二进制输入的更改。 IMixedRealityInputHandler<T> 输入已更改 在对给定类型的输入进行更改时引发。 T 可以采用以下值： - float (例如返回模拟触发) - Vector2 (例如，返回游戏手柄的指尖方向) - Vector3 (例如，被跟踪设备的返回位置) - Quaternion (例如，返回被跟踪设备的方向) - MixedRealityPose (例如，返回完全跟踪的设备) IMixedRealitySpeechHandler 语音关键字已识别 在识别 Speech Commands Profile 中配置的关键字之一时引发。 IMixedRealityDictationHandler 语音转文字 假设 结果 完全 错误 由听写系统引发，来报告听写会话的结果。 IMixedRealityGestureHandler 关于以下手势事件： 已开始 更新 已完成 取消 在手势检测时引发。 IMixedRealityGestureHandler<T> 手势已更新/完成 在检测到包含给定类型的其他数据的手势时引发。查看 手势事件 有关 T 可能值的详细信息。 IMixedRealityHandJointHandler 手部关节更新 当关节更新时，由全关节手控制器(articulated hand controllers)引发。 IMixedRealityHandMeshHandler 手部网格已更新 当更新手部网格时，由全关节手控制器引发。 IMixedRealityInputActionHandler 动作开始/结束 引发以指示映射到动作的输入的操作开始和结束。 Input events in action (活动的输入事件) 在脚本级别，可以通过实现上表中所示的事件处理程序接口之一来处理输入事件。当通过用户交互触发输入事件时，将发生以下情况： MRTK输入系统识别出已发生输入事件。 MRTK输入系统将输入事件的相关接口功能触发到所有 注册的全局输入处理者 对于在输入系统中注册的每个活动指针： 输入系统确定当前指针对准哪个GameObject。 输入系统利用 Unity的事件系统 被聚焦的GameObject上的所有匹配组件触发相关的接口功能。 如果有输入事件被 标记为已使用 , 该过程将结束，并且没有其他GameObjects将接收回调。 示例：识别语音命令后将搜索实现 IMixedRealitySpeechHandler 接口的组件。 注意: 如果在当前GameObject上找不到与所需接口匹配的组件，Unity事件系统将逐级向上搜索父GameObject。 如果没有注册任何全局输入处理者，并且没有找到具有匹配组件/接口的GameObject，则输入系统将调用每个后备注册的输入处理者 (input handler) [!注意] 指针输入事件 与上面列出的输入事件接口的处理方式稍有不同。特别是，指针输入事件仅由触发该输入事件的指针的焦点GameObject以及所有全局输入处理者处理。常规输入事件由焦点GameObjects处理所有活动指针。 输入事件接口示例 以下代码演示了 IMixedRealitySpeechHandler 接口。当用户对具有ShowHideSpeechHandler 类的焦点GameObject说“更小”或“更大”时，GameObject将自身缩放一半或两倍。 public class ShowHideSpeechHandler : MonoBehaviour, IMixedRealitySpeechHandler { ... void IMixedRealitySpeechHandler.OnSpeechKeywordRecognized(SpeechEventData eventData) { if (eventData.Command.Keyword == \"smaller\") { transform.localScale *= 0.5f; } else if (eventData.Command.Keyword == \"bigger\") { transform.localScale *= 2.0f; } } } [!注意] IMixedRealitySpeechHandler 输入事件要求将所需的关键字预先注册在 MRTK语音命令配置文件 . 为全局输入事件注册 若要创建侦听全局输入事件的组件，而不考虑可能聚焦的GameObject，组件必须在输入系统中注册自己。一旦注册，此MonoBehavior的任何实例将接收输入事件以及当前聚焦的任何GameObject和其他全局注册的侦听器。 如果输入事件已被 标记为已使用 ,全局注册的处理程序仍将全部接收回调。但是，没有被聚焦的GameObjects将接收该事件。 全局输入注册示例 public class GlobalHandListenerExample : MonoBehaviour, IMixedRealitySourceStateHandler, // 处理检测到的以及丢失的源 IMixedRealityHandJointHandler // 处理手的关节位置更新 { private void OnEnable() { // 指示输入系统我们希望接收所有类型的输入事件 // IMixedRealitySourceStateHandler 和 IMixedRealityHandJointHandler CoreServices.InputSystem?.RegisterHandler<IMixedRealitySourceStateHandler>(this); CoreServices.InputSystem?.RegisterHandler<IMixedRealityHandJointHandler>(this); } private void OnDisable() { // 该组件被销毁 // 指示输入系统无视我们来进行输入事件处理 CoreServices.InputSystem?.UnregisterHandler<IMixedRealitySourceStateHandler>(this); CoreServices.InputSystem?.UnregisterHandler<IMixedRealityHandJointHandler>(this); } // IMixedRealitySourceStateHandler 接口 public void OnSourceDetected(SourceStateEventData eventData) { var hand = eventData.Controller as IMixedRealityHand; // 仅对全关节手输入源做出响应 if (hand != null) { Debug.Log(\"Source detected: \" + hand.ControllerHandedness); } } public void OnSourceLost(SourceStateEventData eventData) { var hand = eventData.Controller as IMixedRealityHand; // 仅对全关节手输入源做出响应 if (hand != null) { Debug.Log(\"Source lost: \" + hand.ControllerHandedness); } } public void OnHandJointsUpdated( InputEventData<IDictionary<TrackedHandJoint, MixedRealityPose>> eventData) { MixedRealityPose palmPose; if (eventData.InputData.TryGetValue(TrackedHandJoint.Palm, out palmPose)) { Debug.Log(\"Hand Joint Palm Updated: \" + palmPose.Position); } } } 注册后备输入事件 后备输入处理者类似于已注册的全局输入处理者，但被视为输入事件处理的最后手段。仅当未找到全局输入处理者且没有焦点GameObjects时，才会利用后备输入处理者。 Fallback input handler (后备输入处理者) 示例 public class GlobalHandListenerExample : MonoBehaviour, IMixedRealitySourceStateHandler // 处理检测到和丢失的源 { private void OnEnable() { CoreServices.InputSystem?.PushFallbackInputHandler(this); } private void OnDisable() { CoreServices.InputSystem?.PopFallbackInputHandler(); } // IMixedRealitySourceStateHandler 接口 public void OnSourceDetected(SourceStateEventData eventData) { ... } public void OnSourceLost(SourceStateEventData eventData) { ... } } 如何停止输入事件 每个输入事件接口都提供一个 BaseInputEventData 数据对象作为接口上每个函数的参数。该事件数据对象是Unity自身的扩展 抽象事件数据 . 为了阻止输入事件在执行过程中传播 如活动的输入事件 , 组件可以调用 AbstractEventData.Use() 将事件标记为已使用。这将阻止任何其他GameObjects接收当前输入事件，但全局输入处理者除外。 [!注意] 调用 Use() 方法的组件将阻止其他GameObject接收它。但是，当前GameObject上的其他组件仍将接收输入事件并触发任何相关的接口函数。 建议浏览 指针 语音 输入状态"
  },
  "Documentation/Input/InputProviders.html": {
    "href": "Documentation/Input/InputProviders.html",
    "title": "Input Providers | Mixed Reality Toolkit Documentation",
    "keywords": "Input Providers Input providers 已在MRTK组件的 Registered Service Providers Profile 注册 这些是开箱即用的input providers，以及它们相应的controllers(控制器)： Input Provider Controllers Input Simulation Service Simulated Hand Mouse Device Manager Mouse OpenVR Device Manager Generic OpenVR, Vive Wand, Vive Knuckles, Oculus Touch, Oculus Remote, Windows Mixed Reality OpenVR Unity Joystick Manager Generic Joystick Unity Touch Device Manager Unity Touch Controller Windows Dictation Input Provider 无 Windows Mixed Reality Device Manager WMR Articulated Hand, WMR Controller, WMR GGV Hand Windows Speech Input Provider 无 Dictation and Speech providers 不创建任何控制器, 它们直接引发自己的专用输入事件。 可以通过实现 IMixedRealityInputDeviceManager 接口来创建自定义input providers 有关更多信息，请参见 创建一个 输入系统 data provider ."
  },
  "Documentation/Input/InputState.html": {
    "href": "Documentation/Input/InputState.html",
    "title": "访问MRTK中的输入状态 | Mixed Reality Toolkit Documentation",
    "keywords": "访问MRTK中的输入状态 通过遍历连接到输入源的控制器(controller)，可以直接查询MRTK中所有输入的状态。MRTK还提供了便捷的方法来访问眼睛，手，头和运动控制器(motion controller)的位置和旋转 有关通过迭代控制器和使用 InputRayUtils 类来查询输入的示例，请参见InputDataExample场景。 示例：在MRTK中访问头部，手部和眼睛的位置和旋转 MRTK 的 InputRayUtils 类提供了用于访问手部射线，头部射线，眼睛凝视视线和运动控制器射线的便捷方法。 // 获取头部射线 var headRay = InputRayUtils.GetHeadGazeRay(); // 获取右手射线 Ray rightHandRay; if(InputRayUtils.TryGetHandRay(Handedness.right, rightHandRay)) { // 右手射线可用 } else { // 右手射线不可用 } Example: Access position, rotation of all 6DOF controllers active in scene foreach(var controller in CoreServices.InputSystem.DetectedControllers) { // Interactions for a controller is the list of inputs that this controller exposes foreach(MixedRealityInteractionMapping inputMapping in controller.Interactions) { // 6DOF controllers support the \"SpatialPointer\" type (pointing direction) // or \"GripPointer\" type (direction of the 6DOF controller) if (inputMapping.InputType == DeviceInputType.SpatialPointer) { Debug.Log(\"spatial pointer PositionData: \" + inputMapping.PositionData); Debug.Log(\"spatial pointer RotationData: \" + inputMapping.RotationData); } if (inputMapping.InputType == DeviceInputType.SpatialGrip) { Debug.Log(\"spatial grip PositionData: \" + inputMapping.PositionData); Debug.Log(\"spatial grip RotationData: \" + inputMapping.RotationData); } } } See Also InputEvents Pointers HandTracking"
  },
  "Documentation/README_HandJointChaser.html": {
    "href": "Documentation/README_HandJointChaser.html",
    "title": "Hand Joint Chaser Example | Mixed Reality Toolkit Documentation",
    "keywords": "Hand Joint Chaser Example This example scene demonstrates how to use Solver to attach objects to the hand joints. Example scene You can find the example scene HandJointChaserExample scene in the MixedRealityToolkit.Examples package under Demos/Input/Scenes/ . Solver Handler Click Tracked Object To Reference and select Hand Joint Left or Hand Joint Right . You will be able to see Tracked Hand Joint drop down. From the drop down list, you can select specific joint to track. This example scene uses Radial View Solver to make an object follow the target object. See Solver page for more details."
  },
  "Documentation/README_Interactable.html": {
    "href": "Documentation/README_Interactable.html",
    "title": "Interactable | Mixed Reality Toolkit Documentation",
    "keywords": "Interactable The Interactable component is an all-in-one container to make any object easily interactable and responsive to input. Interactable acts as a catch-all for all types of input including touch, hand rays, speech etc and funnel these interactions into events and visual theme responses. This component provides an easy way to make buttons, change color on objects with focus, and more. How to configure Interactable The component allows for three primary sections of configuration: General input configuration Visual Themes targeted against multiple GameObjects Event handlers General input settings States States is a ScriptableObject parameter that defines the interactions phases, like press or observed, for Interactable Profiles and Visual Themes . The DefaultInteractableStates ships with MRTK out-of-box and is the default parameter for Interactable components. The DefaultInteractableStates asset contains four states and utilizes the InteractableStates state model implementation. Default : Nothing is happening, this is the most isolated base state. Focus : The object is being pointed at. This is a single state, no other states are currently set, but it will out rank Default. Press : The object is being pointed at and a button or hand is pressing. The Press state out ranks Default and Focus. This state will also get set as a fallback to Physical Press. Disabled : The button should not be interactive and visual feedback will let the user know for some reason this button is not usable at this time. In theory, the disabled state could contain all other states, but when Enabled is turned off, the Disabled state trumps all other states. A bit value (#) is assigned to the state depending on the order in the list. Note It is generally recommended to utilize the DefaultInteractableStates when creating Interactable components. However, there are 17 Interactable states available that can be used to drive themes, though some are meant to be driven by other components. Here is a list of those with built-in functionality. Visited: the Interactable has been clicked. Toggled: The button is in a toggled state or Dimension index is an odd number. Gesture: The hand or controller was pressed and has moved from the original position. VoiceCommand: A speech command was used to trigger the Interactable. PhysicalTouch: A touch input is currently detected, use NearInteractionTouchable to enable. Grab: A hand is currently grabbing in the bounds of the object, use NearInteractionGrabbable to enable Enabled Toggles whether an Interactable will start enabled or not. This corresponds to the Interactable.IsEnabled in code. An Interactable's enabled property is different than the enabled property configured via GameObject/Component (i.e SetActive etc). Disabling the GameObject or Interactable MonoBehaviour will disable everything in the class from running including input, visual themes, events, etc. Disabling via Interactable.IsEnabled will disable most input handling, resetting related input states. However, the class will still run every frame and receive input events which will be ignored. This is useful for displaying the Interactable in a disabled state which can be done via Visual Themes. A typical example of this would be a submit button waiting for all the required input fields to be completed. Input Actions Select the input action , from the input configuration or controller mapping profile, that the Interactable component should react to. This property can be configured at runtime in code via Interactable.InputAction . IsGlobal If true, this will mark the component as a global input listener for the selected input action . Default behavior is false which will restrict input to only this Interactable collider/GameObject. This property can be configured at runtime in code via Interactable.IsGlobal . Speech Command Speech command , from the MRTK Speech Commands Profile, to trigger an OnClick event for voice interaction. This property can be configured at runtime in code via Interactable.VoiceCommand . Requires Focus If true, the voice command will only activate the Interactable if and only if it already has focus from a pointer. If false, then the Interactable will act as a global listener for the selected voice command. The default behavior is true, as multiple global speech listeners can be difficult to organize in a scene. This property can be configured at runtime in code via Interactable.VoiceRequiresFocus . Selection Mode This property defines the selection logic. When an Interactable is clicked, it iterates into a next Dimension level. Dimensions is similar to rank and defines a state outside of inputs (i.e focus, press etc). They are useful for defining Toggle states or other multi-rank states associated with a button. The current Dimension level is tracked by Interactable.DimensionIndex . The selection modes available are: Button - Dimensions = 1, simple clickable Interactable Toggle - Dimensions = 2, Interactable alternates between on / off state Multi-dimension - Dimensions >= 3, every click increases the current dimension level + 1. Useful for defining a button state to a list, etc. Interactable also allows for multiple Themes to be defined per Dimension . For example when SelectionMode=Toggle , one theme may be applied when the Interactable is deselected and another theme applied when the component is selected . The current Selection Mode can be queried at runtime via Interactable.ButtonMode . Updating the mode at runtime can be achieved by setting the Interactable.Dimensions property to match the desired functionality. Furthermore, the current dimension, useful for Toggle and Multi-Dimension modes, can be accessed via Interactable.CurrentDimension . Interactable Profiles Profiles are items that create a relationship between a GameObject and a Visual Theme . The profile defines what content will be manipulated by a theme when a state change occurs . Themes work a lot like materials. They are scriptable objects that contain a list of properties that will be assigned to an object based on the current state. Themes are also re-usable and can be assigned across multiple Interactable UX objects. Events Every Interactable component has an OnClick event that fires when the component is simply selected. However, Interactable can be used to detect input events other than just OnClick . Click the Add Event button to add a new type of Event Receiver definition. Once added, select the type of Event desired. ) There are different types of event receivers to respond to different types of input. MRTK ships with the following set of receivers out-of-box. InteractableAudioReceiver InteractableOnClickReceiver InteractableOnFocusReceiver InteractableOnGrabReceiver InteractableOnHoldReceiver InteractableOnPressReceiver InteractableOnToggleReceiver InteractableOnTouchReceiver A custom receiver can be created by making a new class that extends ReceiverBase . Example of a Toggle Event Receiver Interactable Receivers The InteractableReceiver component allows for events to be defined outside of the source Interactable component. The InteractableReceiver will listen for a filtered event type fired by another Interactable . If the Interactable property is not directly assigned, then the Search Scope property defines the direction the InteractableReceiver listens for events which is either on itself, in a parent, or in a child GameObject. InteractableReceiverList acts in a similar fashion but for a list of matching events. Create custom events Like Visual Themes , events can be extended to detect any state pattern or to expose functionality. Custom events can be created in two main ways: Extend the ReceiverBase class to create a custom event that will show up in the dropdown list of event types. A Unity event is provided by default, but additional Unity events can be added or the event can be set to hide Unity events. This functionality allows a designer to work with an engineer on a project to create a custom event that the designer can setup in the editor. Extend the ReceiverBaseMonoBehavior class to create a completely custom event component that can reside on the Interactable or another object. The ReceiverBaseMonoBehavior will reference the Interactable to detect state changes. Example of extending ReceiverBase The CustomInteractablesReceiver class under MixedRealityToolkit.Examples displays status information about an Interactable and is an example how to create a custom Event Receiver. public CustomInteractablesReceiver(UnityEvent ev) : base(ev, \"CustomEvent\") { HideUnityEvents = true; // hides Unity events in the receiver - meant to be code only } The following methods are useful to override/implement when creating a custom Event Receiver. ReceiverBase.OnUpdate() is an abstract method that can be used to detect state patterns/transitions. Furthermore, the ReceiverBase.OnVoiceCommand() and ReceiverBase.OnClick() methods are useful for creating custom event logic when the Interactable is selected. public override void OnUpdate(InteractableStates state, Interactable source) { if (state.CurrentState() != lastState) { // the state has changed, do something new lastState = state.CurrentState(); ... } } public virtual void OnVoiceCommand(InteractableStates state, Interactable source, string command, int index = 0, int length = 1) { base.OnVoiceCommand(state, source, command, index, length); // voice command called, perform some action } public virtual void OnClick(InteractableStates state, Interactable source, IMixedRealityPointer pointer = null) { base.OnClick(state, source); // click called, perform some action } Displaying custom Event Receiver fields in the inspector ReceiverBase scripts use InspectorField attributes to expose custom properties in the inspector. Here's an example of Vector3 a custom property with tooltip and label information. This property will show up as configurable in the inspector when an Interactable GameObject is selected and has the associated Event Receiver type added. [InspectorField(Label = \"<Property label>\",Tooltip = \"<Insert tooltip info>\",Type = InspectorField.FieldTypes.Vector3)] public Vector3 EffectOffset = Vector3.zero; How to use Interactable Building a simple button One can create a simple button by simply adding the Interactable component to a GameObject that is configured to receive input events. It can have has a collider on it or on a child to receive input. If using Interactable with a Unity UI based GameObjects it should be under the Canvas GameObject. Take the button one step further, by creating a new profile, assigning the GameObject itself and creating a new theme. Furthermore, use the OnClick event to make something happen. Note Making a button pressable requires the PressableButton component. Additionally, the PhysicalPressEventRouter component is needed to funnel press events to the Interactable component. Creating Toggle and Multi-Dimension buttons Toggle button To make a button Toggle-able, change the the Selection Mode field to type Toggle . In the Profiles section, a new toggled theme is added for each profile that is used when the Interactable is toggled on. While the SelectionMode is set to Toggle, the IsToggled check box can be used to set the default value of the control at runtime initialization. CanSelect means the the Interactable can go from off to on while the CanDeselect means the inverse. Developers can utilize the SetToggled and IsToggled interfaces to get/set the toggle state of an Interactable via code. // If using SelectionMode = Toggle (i.e Dimensions == 2) // Make the Interactable selected and toggled on myInteractable.IsToggled = true; // Get whether the Interactable is selected or not bool isSelected = myInteractable.IsToggled; Toggle button collection It is common to have a list of toggle buttons where only one can be active at any given time, also known as a radial set or radio buttons etc. Use the InteractableToggleCollection component to enable this functionality. This control ensures only one Interactable is toggled on at any given time. The RadialSet prefab is also a great starting point out-of-box. To create a custom radial button group: Create multiple Interactable GameObjects/buttons Set each Interactable with SelectionMode = Toggle, CanSelect = true, and CanDeselect = false Create an empty parent GameObject over all the Interactables and add the InteractableToggleCollection component Add all Interactables to the ToggleList on the InteractableToggleCollection Set the InteractableToggleCollection.CurrentIndex property to determine which button is selected by default at start Multi-Dimensional button Multi-Dimension selection mode is used to create sequential buttons, or a button that has more than two steps, like controlling speed with three values, Fast (1x), Faster (2x) or Fastest (3x). With dimensions being a numeric value, up to 9 themes can be added to control the text label or texture of the button for each speed setting, using a different theme for each of step. Every click event will advance the DimensionIndex by 1 at runtime until the Dimensions value is reached then the cycle will reset to 0. Developers can assess the DimensionIndex to determine which dimension is currently active. // If using SelectionMode = Multi-dimension (i.e Dimensions >= 3) //Access the current DimensionIndex int currentDimension = myInteractable.CurrentDimension; //Set the current DimensionIndex to 2 myInteractable.CurrentDimension = 2; // Promote Dimension to next level myInteractable.IncreaseDimension(); Create Interactable at runtime Interactable can be easily added to any GameObject at runtime. The following example demonstrates how to assign a profile with a visual theme . var interactableObject = GameObject.CreatePrimitive(PrimitiveType.Cylinder); var interactable = interactableObject.AddComponent<Interactable>(); // Get the default configuration for the Theme engine InteractableColorTheme var newThemeType = ThemeDefinition.GetDefaultThemeDefinition<InteractableColorTheme>().Value; // Define a color for every state in our Default Interactable States newThemeType.StateProperties[0].Values = new List<ThemePropertyValue>() { new ThemePropertyValue() { Color = Color.black}, // Default new ThemePropertyValue() { Color = Color.black}, // Focus new ThemePropertyValue() { Color = Random.ColorHSV()}, // Pressed new ThemePropertyValue() { Color = Color.black}, // Disabled }; interactable.Profiles = new List<InteractableProfileItem>() { new InteractableProfileItem() { Themes = new List<Theme>() { Interactable.GetDefaultThemeAsset(new List<ThemeDefinition>() { newThemeType }) }, Target = interactableObject, }, }; // Force the Interactable to be clicked interactable.TriggerOnClick() Interactable Events via code One can add an action to the base Interactable.OnClick event via code with the following example. public static void AddOnClick(Interactable interactable) { interactable.OnClick.AddListener(() => Debug.Log(\"Interactable clicked\")); } Use the Interactable.AddReceiver<T>() function to add event receivers dynamically at runtime. The example code below demonstrates how to add an InteractableOnFocusReceiver , which listens for focus enter/exit, and furthermore define action code to perform when the event instances fire. public static void AddFocusEvents(Interactable interactable) { var onFocusReceiver = interactable.AddReceiver<InteractableOnFocusReceiver>(); onFocusReceiver.OnFocusOn.AddListener(() => Debug.Log(\"Focus on\")); onFocusReceiver.OnFocusOff.AddListener(() => Debug.Log(\"Focus off\")); } The example code below demonstrates how to add an InteractableOnToggleReceiver , which listens for selected/deselected state transitions on toggle-able Interactables , and furthermore define action code to perform when the event instances fire. public static void AddToggleEvents(Interactable interactable) { var toggleReceiver = interactable.AddReceiver<InteractableOnToggleReceiver>(); // Make the interactable have toggle capability, from code. // In the gui editor it's much easier interactable.Dimensions = 2; interactable.CanSelect = true; interactable.CanDeselect = true; toggleReceiver.OnSelect.AddListener(() => Debug.Log(\"Toggle selected\")); toggleReceiver.OnDeselect.AddListener(() => Debug.Log(\"Toggle un-selected\")); } See also Visual Themes Input Actions Speech Commands Buttons MRTK Standard Shader"
  },
  "Documentation/README_LostTrackingService.html": {
    "href": "Documentation/README_LostTrackingService.html",
    "title": "Lost Tracking Visualization | Mixed Reality Toolkit Documentation",
    "keywords": "Lost Tracking Visualization Lost Tracking Extension Service provides HoloLens shell style animated visual for the lost tracking state. How to use Lost Tracking Extensions In MRTK Profile, add Lost Tracking Service to the Extensions. Assign DefaultLostTrackingServiceProfile which includes LostTrackingVisualPrefab ."
  },
  "Documentation/README_ManipulationHandler.html": {
    "href": "Documentation/README_ManipulationHandler.html",
    "title": "Manipulation handler | Mixed Reality Toolkit Documentation",
    "keywords": "Manipulation handler The ManipulationHandler script allows for an object to be made movable, scalable, and rotatable using one or two hands. Manipulation can be restricted so that it only allows certain kinds of transformation. The script works with various types of inputs including HoloLens 2 articulated hand input, hand-rays, HoloLens (1st gen) gesture input, and immersive headset motion controller input. How to use the manipulation handler Add the ManipulationHandler.cs component to a GameObject. Make sure to also add a collider to the object, matching its grabbable bounds. To make the object respond to near articulated hand input, add the NearInteractionGrabbable.cs script as well. If you wish to set minimum or maximum values for the object's scale, you can add a TransformScaleHandler script. Inspector properties Host Transform Transform that will be dragged. Defaults to the object of the component. Manipulation Type Specifies whether the object can be manipulated using one hand, two hands, or both. One handed only Two handed only One and Two handed Two Handed Manipulation Type Scale : Only scaling is allowed. Rotate : Only rotation is allowed. Move Scale : Moving and scaling is allowed. Move Rotate : Moving and rotating is allowed. Rotate Scale : Rotating and scaling is allowed. Move Rotate Scale : Moving, rotating and scaling is allowed. Allow Far Manipulation Specifies whether manipulation can be done using far interaction with pointers. One Hand Rotation Mode Near Specifies how the object will behave when it is being grabbed with one hand / controller near. One Hand Rotation Mode Far Specifies how the object will behave when it is being grabbed with one hand / controller at distance. One Hand Rotation Mode Options Specifies how the object will rotate when it is being grabbed with one hand. Maintain original rotation : Does not rotate object as it is being moved Maintain rotation to user : Maintains the object's original rotation for X/Y axis to the user Gravity aligned maintain rotation to user : Maintains object's original rotation to user, but makes the object vertical. Useful for bounding boxes. Face user : Ensures object always faces the user. Useful for slates/panels. Face away from user : Ensures object always faces away from user. Useful for slates/panels that are configured backwards. Rotate about object center : Only works for articulated hands/controllers. Rotate object using rotation of the hand/controller, but about the object center point. Useful for inspecting at a distance. Rotate about grab point : Only works for articulated hands/controllers. Rotate object as if it was being held by hand/controller. Useful for inspection. Release Behavior When an object is released, specify its physical movement behavior. Requires a rigidbody component to be on that object. Nothing Everything Keep Velocity Keep Angular Velocity Constraints on Rotation Specifies on which axis the object will rotate when interacted with. None X-Axis Only Y-Axis Only Z-Axis Only Use Local Space For Constraint A toggle to switch between applying constraints in respect to world-space axis, or local space axis. Constraints on Movement None Fix distance from head Smoothing Active Specifies whether smoothing is active. Smoothing Amount One Hand Amount of smoothing to apply to the movement, scale, rotation. Smoothing of 0 means no smoothing. Max value means no change to value. Events Manipulation handler provides the following events: OnManipulationStarted : Fired when manipulation starts. OnManipulationEnded : Fires when the manipulation ends. OnHoverStarted : Fires when a hand / controller hovers the manipulatable, near or far. OnHoverEnded : Fires when a hand / controller un-hovers the manipulatable, near or far."
  },
  "Documentation/README_MRTKStandardShader.html": {
    "href": "Documentation/README_MRTKStandardShader.html",
    "title": "MRTK Standard Shader | Mixed Reality Toolkit Documentation",
    "keywords": "MRTK Standard Shader MRTK Standard shading system utilizes a single, flexible shader that can achieve visuals similar to Unity's Standard Shader, implement Fluent Design System principles, and remain performant on mixed reality devices. Example Scenes You can find the shader material examples in the MaterialGallery scene under: MixedRealityToolkit.Examples/Demos/StandardShader/Scenes/ All materials in this scene are using the MRTK/Standard shader. You can find a comparison scene to compare and test the MRTK/Standard shader against the Unity/Standard shader example in the StandardMaterialComparison scene under: MixedRealityToolkit.Examples/Demos/StandardShader/Scenes/ Architecture The MRTK/Standard shading system is an \"uber shader\" that uses Unity's shader program variant feature to auto-generate optimal shader code based on material properties. When a user selects material properties in the material inspector they only incur performance cost for features they have enabled. Material Inspector A custom material inspector exists for the MRTK/Standard shader called MixedRealityStandardShaderGUI.cs . The inspector automatically enables/disables shader features based on user selection and aides in setting up render state. For more information about each feature please hover over each property in the Unity Editor for a tooltip. The first portion of the inspector controls the material's render state. Rendering Mode determines when and how a material will be rendered. The aim of the MRTK/Standard shader is to mirror the rendering modes found in the Unity/Standard shader . The MRTK/Standard shader also includes an Additive rendering mode and Custom rendering mode for complete user control. Rendering Mode Opaque (Default) Suitable for normal solid objects with no transparent areas. Cutout Allows creation of transparent effects that have hard edges between the opaque and transparent areas. In this mode, there are no semi-transparent areas, the texture is either 100% opaque, or invisible. This is useful when using transparency to create the shape of materials such as vegetation. Fade Allows the transparency values to entirely fade an object out, including any specular highlights or reflections it may have. This mode is useful if you want to animate an object fading in or out. It is not suitable for rendering realistic transparent materials such as clear plastic or glass because the reflections and highlights will also be faded out. Transparent Suitable for rendering realistic transparent materials such as clear plastic or glass. In this mode, the material itself will take on transparency values (based on the texture’s alpha channel and the alpha of the tint colour), however reflections and lighting highlights will remain visible at full clarity as is the case with real transparent materials. Additive Enables an additive blending mode which sums the previous pixel color with the current pixel color. This is the preferred transparency mode to avoid transparency sorting issues. Custom Allows for every aspect of the rendering mode to be controlled manually. For advanced usage only. Cull Mode Off Disables face culling. Culling should only be set to Off when a two sided mesh is required. Front Enables front face culling. Back (Default) Enables back face culling . Back face culling should be enabled as often as possible to improve rendering performance. Performance One of the primary advantages to using the MRTK Standard shader over the Unity standard shader is performance. The MRTK Standard Shader is extensible to only utilize the features enabled. However, the MRTK Standard shader has also been written to deliver comparable aesthetic results as the Unity Standard shader but at a much lower cost. One simple way to compare shader performance is via the number of operations that needs to be performed on the GPU. Of course, the magnitude of calculations may fluctuate by features enabled and other rendering configurations. But, in general, the MRTK Standard shader performs significantly less computation than the Unity Standard shader. Unity Standard shader statistics example MRTK Standard shader statistics example Note These results can be generated by selecting and viewing a shader asset in the Unity inspector then clicking the Compile and show code button. Lighting The MRTK/Standard uses a simple approximation for lighting. Because this shader does not calculate for physical correctness and energy conservation, it renders quickly and efficient. Blinn-Phong is the primary lighting technique which is blended with Fresnel and image based lighting to approximate physically based lighting. The shader supports the following lighting techniques: Directional Light The shader will respect the direction, color, and intensity of the first Unity Directional Light in the scene (if enabled). Dynamic point lights, spot lights, or any other Unity light will not be considered in real time lighting. Spherical Harmonics The shader will use Light Probes to approximate lights in the scene using Spherical Harmonics if enabled. Spherical harmonics calculations are performed per vertex to reduce calculation cost. Lightmapping For static lighting the shader will respect lightmaps built by Unity's Lightmapping system simply mark the renderer as static (or lightmap static) to use lightmaps. Hover Light A Hover Light is a Fluent Design System paradigm that mimics a \"point light\" hovering near the surface of an object. Often used for far away cursor lighting the application can control the properties of a Hover Light via the HoverLight.cs . Up to 3 Hover Lights are supported at a time. Proximity Light A Proximity Light is a Fluent Design System paradigm that mimics a \"gradient inverse point light\" hovering near the surface of an object. Often used for near cursor lighting the application can control the properties of a Proximity Light via the ProximityLight.cs . Up to 2 Proximity Lights are supported at a time. Lightweight Scriptable Render Pipeline Support The MRTK contains an upgrade path to allow developers to utilize Unity's Lightweight Scriptable Render Pipeline (LWRP) with MRTK shaders. Tested in Unity 2019.1.1f1 and Lightweight RP 5.7.2 package. or instructions on getting started with the LWRP please see this page . To perform the MRTK upgrade select: Mixed Reality Toolkit -> Utilities -> Upgrade MRTK Standard Shader for Lightweight Render Pipeline After the upgrade occurs the MRTK/Standard shader will be altered and any magenta (shader error) materials should be fixed. To verify the upgrade successfully occurred please check the console for: Upgraded Assets/MixedRealityToolkit/StandardAssets/Shaders/MixedRealityStandard.shader for use with the Lightweight Render Pipeline. UGUI Support The MRTK Standard shading system works with Unity's built in UI system . On Unity UI components the unity_ObjectToWorld matrix is not the transformation matrix of the local transform the Graphic component lives on but that of its parent Canvas. Many MRTK/Standard shader effects require object scale to be known. To solve this issue the ScaleMeshEffect.cs will store scaling information into UV channel attributes during UI mesh construction. Note, when using a Unity Image component it is recommended to specify \"None (Sprite)\" for the Source Image to prevent Unity UI from generating extra vertices. A Canvas within the MRTK will prompt for the addition of a ScaleMeshEffect.cs when one is required: Texture Combiner To improve parity with the Unity Standard shader per pixel metallic, smoothness, emissive, and occlusion values can all be controlled via channel packing . For example: When you use channel packing, you only have to sample and load one texture into memory instead of four separate ones. When you write your texture maps in a program like Substance or Photoshop, you can hand pack them like so: Channel Property Red Metallic Green Occlusion Blue Emission (Greyscale) Alpha Smoothness Or, you can use the MRTK Texture Combiner Tool. To open the tool select: Mixed Reality Toolkit -> Utilities -> Texture Combiner which will open the below window: This windows can be automatically filled out by selecting a Unity Standard shader and clicking \"Autopopulate from Standard Material.\" Or, you can manually specify a texture (or constant value) per red, green, blue, or alpha channel. The texture combination is GPU accelerated and does not require the input texture to be CPU accessible. Additional Feature Documentation Below are extra details on a handful of features details available with the MRTK/Standard shader. Primitive Clipping Performant plane, sphere, and box shape clipping with the ability to specify which side of the primitive to clip against (inside or outside). You can find a scene that demonstrates advanced usage of clipping primitives in the ClippingExamples scene under: MixedRealityToolkit.Examples/Demos/StandardShader/Scenes/ ClippingPlane.cs , ClippingSphere.cs , and ClippingBox.cs can be used to easily control clipping primitive properties. Mesh Outlines Many mesh outline techniques are done using a post processing technique. Post processing provides great quality outlines, but can be prohibitively expensive on many Mixed Reality devices. You can find a scene that demonstrates usage of mesh outlines in the OutlineExamples scene under: MixedRealityToolkit.Examples/Demos/StandardShader/Scenes/ MeshOutline.cs and MeshOutlineHierarchy.cs can be used render an outline around a mesh renderer. Enabling this component introduces an additional render pass of the object being outlined, but is designed to run performantly on mobile Mixed Reality devices and does not utilize any post processes. Limitations of this effect include it not working well on objects which are not watertight (or required to be two sided) and depth sorting issues can occur on overlapping objects. The outline behaviors are designed to be used in conjunction with the MRTK/Standard shader. Outline materials are usually a solid unlit color, but can be configured to achieve a wide array of effects. The default configuration of a outline material is as follows: Depth Write - should be disabled for outline materials to make sure the outline does not prevent other objects from rendering. Vertex Extrusion - needs to be enabled to render the outline. Use Smooth Normals - this setting is optional for some meshes. Extrusion occurs by moving a vertex along a vertex normal, on some meshes extruding along the default normals will cause discontinuities in the outline. To fix these discontinuities you can check this box to use another set of smoothed normals which get generated by MeshSmoother.cs MeshSmoother.cs is a component which can be used to automatically generate smoothed normals on a mesh. This method groups vertices in a mesh that share the same location in space then averages the normals of those vertices. This process creates a copy of the underlying mesh and should be used only when required. Smooth normals generated via MeshSmoother.cs . Default normals used, notice the artifacts around the cube corners. Stencil Testing Built in configurable stencil test support to achieve a wide array of effects. Such as portals: Instanced Color Support Instanced color support to give thousands of GPU instanced meshes unique material properties: Triplanar Mapping Triplanar mapping is a technique to programmatically texture a mesh. Often used in terrain, meshes without UVs, or difficult to unwrap shapes. This implementation supports world or local space projection, the specification of blending smoothness, and normal map support. Note, each texture used requires 3 texture samples, so please use sparingly in performance critical situations. Vertex Extrusion Vertex extrusion in world space. Useful for visualizing extruded bounding volumes or transitions in/out meshes. Miscellaneous A checkbox to control albedo optimizations. As an optimization albedo operations are disabled when no albedo texture is specified. This is useful for controlling remote texture loading . Simply check this box: Per pixel clipping textures, local edge based anti aliasing, and normal map scaling are supported. See also Interactable"
  },
  "Documentation/README_NearMenu.html": {
    "href": "Documentation/README_NearMenu.html",
    "title": "Near Menu | Mixed Reality Toolkit Documentation",
    "keywords": "Near Menu Near Menu is a UX control which provides a collection of buttons or other UI components. It is floating around the user's body and easily accessible anytime. Since it is loosely coupled with the user, it does not disturb the user's interaction with the target content. The user can use the 'Pin' button to world-lock/unlock the menu. The menu can be grabbed and placed at a specific position. Interaction behavior Tag-along : The menu follows you and stays within 30-60cm range from the user for the near interactions. Pin : Using the 'Pin' button, the menu can be world-locked and released. Grab and move : The menu is always grabbable and movable. Regardless of the previous state, the menu will be pinned(world-locked) when grabbed and released. There are visual cues for the grabbable area. They are revealed on hand proximity. Prefabs Near Menu prefabs are designed to demonstrate how to use MRTK's various components to build menus for near interactions. NearMenuExample3x1.prefab NearMenuExample3x2.prefab NearMenuExample3x3.prefab NearMenuExample4x1.prefab NearMenuExample4x2.prefab Example scene You can find examples of Near Menu prefabs in the NearMenuExamples scene. Structure Near Menu prefabs are made with following MRTK components. PressableButtonHoloLens2 prefab Grid Object Collection : Multiple button layout in grid Manipulation Handler : Grab and move the menu RadialView Solver : Follow Me(tag-along) behavior How to customize 1. Add/Remove Buttons Under ButtonCollection object, add or remove buttons. 2. Update the Grid Object Collection Click Update Collection button in the Inspector of the ButtonCollection object. It will update the grid layout. You can configure the number of rows using Rows property of the Grid Object Collection. 3. Adjust the backplate size Adjust the size of the Quad under Backplate object. The width and height of the backplate should be 0.032 * [Number of the buttons + 1]. For example, if you have 3 x 2 buttons, the width of the backplate is 0.032 * 4 and the height is 0.032 * 3. You can directly put this expression into the Unity's field. *Default size of the HoloLens 2 button is 3.2x3.2 cm (0.032m) See also Buttons Bounding Box Slider Grid Object Collection Manipulation Handler RadialView Solver"
  },
  "Documentation/README_ObjectCollection.html": {
    "href": "Documentation/README_ObjectCollection.html",
    "title": "Object collection | Mixed Reality Toolkit Documentation",
    "keywords": "Object collection Object collection is a script to help lay out an array of objects in predefined three-dimensional shapes. It supports various surface styles including plane, cylinder, sphere, and radial. Since it supports any object in Unity, it can be used to layout both 2D and 3D objects. Object collection scripts GridObjectCollection supports Cylinder, Plane, Sphere, Radial surface types ScatterObjectCollection supports scattered style collection TileGridObjectCollection provides some additional options to GridObjectCollection. Note: TileGridObjectCollection does not extend GridObjectCollection , and has several bugs (see issue 6237 ). Therefore, it is recommended to use GridObjectCollection . Grid Object Collection - Cylinder Grid Object Collection - Sphere Grid Object Collection - Radial Grid Object Collection - Plane Scattered Object Collection Tile Grid Object Collection How to use an object collection To create a collection, create an empty GameObject and assign one of the Object Collection scripts to it. Any object(s) can be added as a child of the GameObject. Once finished adding child objects, click the Update Collection button in the inspector panel to generate the object collection. The objects will be laid out in the scene according to the collection parameters. Update Collection can be accessed through the code too. GridObjectCollection Content Alignment The content in a GridObjectCollection can be aligned so that the parent object is anchored to the top/middle/bottom and left/center/right of the collection. Use the anchor property to specify content alignment. GridObjectCollection Layout Order Use the Layout field to specify the row / column order that children are laid out: Column Then Row - Children are first laid out by horizontally (by column), then vertically (by row). Use Num Columns (or Columns property in code) to specify the number of columns in the grid. Row Then Column - Children are first laid out vertically (by row), then horizontally (by columns). Use Num Rows (or Rows property in code) to specify the number of rows in the grid. Horizontal - Children are laid out in a single row using columns only Vertical - Children are laid out in a single column using rows only. Object collection examples The ObjectCollectionExamples.unity example scene contains various examples of object collection types. Periodic table of the elements is an example app that demonstrates how object collections work. It uses object collection to layout the 3D element boxes in different shapes. Object collection types 3D objects An object collection can be used to layout imported 3D objects. The example below shows the plane and cylindrical layouts of 3D chair model objects using a collection. 2D Objects An object collection can also be crated from 2D images. For example, multiple images can be placed in a grid style."
  },
  "Documentation/README_Slate.html": {
    "href": "Documentation/README_Slate.html",
    "title": "Slate | Mixed Reality Toolkit Documentation",
    "keywords": "Slate The Slate prefab offers a thin window style control for displaying 2D content, for example plain text or articles including media. It offers a grabbable title bar as well as Follow Me and Close functionality. The content window can be scrolled via articulated hand input. How to use a slate control A slate control is composed of the following elements: TitleBar : The entire title bar on top of the slate. Title : The title area on the left side of the title bar. Buttons : The button area on the right side of the title bar. BackPlate : The back side of the slate. ContentQuad : Content is assigned as material. The example uses a sample material 'PanContent'. Bounding Box A slate control contains a bounding box script for scaling and rotating. For more information on bounding box, please see the Bounding box page. Buttons A standard slate offers two buttons as default on the top right of the title bar: Follow Me : Toggles an orbital solver components to make the slate object follow the user. Close : Disables the slate object. Scripts In general, the NearInteractionTouchable.cs script must be attached to any object that is intended to receive touch events from the IMixedRealityTouchHandler . HandInteractionPan.cs This script handles articulated hand input for touching and moving the content on the slate's ContentQuad . HandInteractionPanZoom.cs : In addition to the panning interaction, this script supports two-handed zooming."
  },
  "Documentation/README_Sliders.html": {
    "href": "Documentation/README_Sliders.html",
    "title": "Sliders | Mixed Reality Toolkit Documentation",
    "keywords": "Sliders Sliders are UI components that allow you to continuously change a value by moving a slider on a track. Currently the Pinch Slider can be moved by directly grabbing the slider, either directly or at a distance. Sliders work on AR and VR, using motion controllers, hands, or Gesture + Voice. Example scene You can find examples in the SliderExample scene under: MixedRealityToolkit.Examples/Demos/UX/Slider/Scenes/ How to use Sliders Drag and drop the PinchSlider prefab into the scene hierarchy. If you want to modify or create your own slider, remember to do the following: Make sure your that your thumb object has a collider on it. In the PinchSlider prefab, the collider is on SliderThumb/Button_AnimationContainer/Slider_Button Make sure that the object containing the collider also has a Near Interaction Grabbable component on it, if you want to be able to grab the slider near. We also recommend using the following hierarchy PinchSlider - Contains the sliderComponent SliderThumb - Contains the movable thumb TrackVisuals - Containing the track and any other visuals OtherVisuals - Containing any other visuals Slider Events Sliders expose the following events: OnValueUpdated - Called whenever the slider value changes OnInteractionStarted - Called when the user grabs the slider OnInteractionEnded - Called when the user releases the slider OnHoverEntered - Called when the user's hand / controller hovers over the slider, using either near or far interaction. OnHoverExited - Called when the user's hand / controller is no longer near the slider. Configuring Slider Bound and Axis You can directly move the starting and end points of the slider by moving the handles in the Scene: You can also specify the axis (in local space) of the slider via the Slider Axis field If you cannot use the handles, you can instead specify the start and end points of the slider via the Slider Start Distance and Slider End Distance fields. These specify start / end position of slider as a distance from the slider's center, in local coordinates. This means that once you set the slider start and end distances as you want them, you can scale the slider to be smaller or larger without needing to update the start and end distances."
  },
  "Documentation/README_Solver.html": {
    "href": "Documentation/README_Solver.html",
    "title": "Solvers | Mixed Reality Toolkit Documentation",
    "keywords": "Solvers Solvers are components that facilitate the means of calculating an object's position & orientation according to a predefine algorithm. An example may be placing an object on the surface the user's gaze raycast currently hits. Furthermore, the Solver system deterministically defines an order of operations for these transform calculations as there is no reliable way to specify to Unity the update order for components. Solvers offer a range of behaviors to attach objects to other objects or systems. One other example would be a tag-along object that hovers in front of the user (based on the camera). A solver could also be attached to a controller and an object to make the object tag-along the controller. All solvers can be safely stacked, for example a tag-along behavior + surface magnetism + momentum. How to use a solver The Solver system consists of three categories of scripts: Solver : The base abstract class that all solvers derive from. It provides state tracking, smoothing parameters and implementation, automatic solver system integration, and update order. SolverHandler : Sets the reference object to track against (ex: the main camera transform, hand ray, etc.), handles gathering of solver components, and executes updating them in the proper order. The third category is the solver itself. The following solvers provide the building blocks for basic behavior: Orbital : Locks to a specified position and offset from the referenced object. ConstantViewSize : Scales to maintain a constant size relative to the view of the referenced object. RadialView : Keeps the object within a view cone cast by the referenced object. SurfaceMagnetism : casts rays to surfaces in the world, and align the object to that surface. Momentum : Applies acceleration/velocity/friction to simulate momentum and springiness for an object being moved by other solvers/components. InBetween : Keeps an object in between two tracked objects. HandConstraint : Constrains object to follow hands in a region that doesn't intersect the GameObject with the hands. Useful for hand constrained interactive content such as menus, etc. This solver is intended to work with IMixedRealityHand but also works with IMixedRealityController . HandConstraintPalmUp : Derives from HandConstraint but includes logic to test if the palm is facing the user before activation. This solver only works with IMixedRealityHand controllers, with other controller types this solver will behave just like its base class. In order to use the Solver system, simply add one of the components listed above to a GameObject. Since all Solvers require a SolverHandler , one will be created automatically by Unity. Note Examples of how to use the Solvers system can be found in the SolverExamples.scene file. How to change tracking reference The Tracked Target Type property of the SolverHandler component defines the point of reference all solvers will use to calculate their algorithms. For example, a value type of Head with a simple SurfaceMagnetism component will result in a raycast from the head and in the direction of the user's gaze for solving what surface is hit. Potential values for the TrackedTargetType property are: Head : Point of reference is the transform of the main camera ControllerRay : Point of reference is the LinePointer transform on a controller (i.e pointer origin on a motion controller or hand controller) pointing in the direction of the line ray Use the TrackedHandedness property to select the handedness preference (i.e Left, Right, Both) HandJoint : Point of reference is the transform of a specific hand joint Use the TrackedHandedness property to select the handedness preference (i.e Left, Right, Both) Use the TrackedHandJoint property to determine the joint transform to utilize CustomOverride : Point of reference from the assigned TransformOverride Note For both ControllerRay and HandJoint types, the solver handler will attempt to provide the left controller/hand transform first and then the right if the former is not available or unless the TrackedHandedness property specifies otherwise. Example of various properties associated with each TrackedTargetType How to chain Solvers It is possible to add multiple Solver components to the same GameObject thus chaining their algorithms. The SolverHandler components handles updating all solvers on the same GameObject. By default the SolverHandler calls GetComponents<Solver>() on Start which will return the Solvers in the order that they appear in the inspector. Furthermore, setting the Updated Linked Transform property to true will instruct that Solver to save its calculated position, orientation, & scale to an intermediary variable accessible by all Solvers (i.e GoalPosition ). When false, the Solver will update the GameObject's transform directly. By saving the transform properties to an intermediary location, other Solvers are able to perform their calculations starting from the intermediary variable. This is because Unity does not allow updates to gameObject.transform to stack within the same frame. Note Developers can modify the order of execution of Solvers by setting the SolverHandler.Solvers property directly. How to create a new Solver All solvers must inherit from the abstract base class, Solver . The primary requirements of a Solver extension involves overriding the SolverUpdate method. In this method, developers should update the inherited GoalPosition , GoalRotation and GoalScale properties to the desired values. Furthermore, it is generally valuable to leverage SolverHandler.TransformTarget as the frame of reference desired by the consumer. The code provided below gives an example of a new Solver component called InFront that places the attached object 2m in front of the SolverHandler.TransformTarget . If the SolverHandler.TrackedTargetType is set by the consumer as Head , then the SolverHandler.TransformTarget will be the camera transform and thus this Solver will place the attached GameObject 2m in front of the users' gaze every frame. /// <summary> /// InFront solver positions an object 2m in front of the tracked transform target /// </summary> public class InFront : Solver { ... public override void SolverUpdate() { if (SolverHandler != null && SolverHandler.TransformTarget != null) { var target = SolverHandler.TransformTarget; GoalPosition = target.position + target.forward * 2.0f; } } } Solver implementation guides Common Solver properties Every Solver component has a core-set of identical properties that control the core Solver behavior. If Smoothing is enabled, then the Solver will gradually update the transform of the GameObject over time to the calculated values. The speed of this change is determined by every transform component's LerpTime property. For example, a higher MoveLerpTime value will result in slower increments in movement between frames. If MaintainScale is enabled, then the Solver will utilize the GameObject's default local scale. Common properties inherited by all Solver components Orbital The Orbital class is a tag-along component that behaves like planets in a solar system. This Solver will ensure the attached GameObject orbits around the tracked transform. Thus, if the Tracked Target Type of the SolverHandler is set to Head , then the GameObject will orbit around the user's head with a fixed offset applied. Developers can modify this fixed offset to keep menus or other scene components at eye-level or at waist level etc. around a user. This is done by modifying the Local Offset and World Offset properties. The Orientation Type property determines the rotation applied to the object if it should maintain its original rotation or always face the camera or face whatever transform is driving its position etc. Orbital example RadialView The RadialView is another tag-along component that keeps a particular portion of a GameObject within the frustum of the user's view. The Min & Max View Degrees properties determines how large of a portion of the GameObject must always be in view. The Min & Max Distance properties determines how far the GameObject should be kept from the user. For example, walking towards the GameObject with a Min Distance of 1m will push the GameObject away to ensure it is never closer than 1m to the user. Generally, the RadialView is used in conjunction with Tracked Target Type set to Head so that the component follows the user's gaze. However, this component can function to be kept in \"view\" of any Tracked Target Type . RadialView example InBetween The InBetween class will keep the attached GameObject between two transforms. These two transform endpoints are defined by the GameObject's own SolverHandler Tracked Target Type and the InBetween component's Second Tracked Target Type property. Generally, both types will be set to CustomOverride and the resulting SolverHandler.TransformOverride and InBetween.SecondTransformOverride values set to the two tracked endpoints. At runtime, the InBetween component will create another SolverHandler component based on the Second Tracked Target Type and Second Transform Override properties. The PartwayOffset defines where along the line between two transforms the object shall be placed with 0.5 as halfway, 1.0 at the first transform, and 0.0 at the second transform. Example of using InBetween solver to keep object between two transforms SurfaceMagnetism The SurfaceMagnetism works by performing a raycast against a set LayerMask of surfaces and placing the GameObject at that point of contact. The Surface Normal Offset will place the GameObject a set distance in meters away from the surface in the direction of the normal at the hit point on the surface. Conversely, the Surface Ray Offset will place the GameObject a set distance in meters away from the surface but in the opposite direction of the raycast performed. Thus, if the raycast is the user's gaze, then the GameObject will move closer along the line from the hit point on the surface to the camera. The Orientation Mode determines the type of rotation to apply in relation to the normal on the surface. None - No rotation applied TrackedTarget - Object will face the tracked transform driving the raycast SurfaceNormal - Object will align based on normal at hit point on surface Blended - Object will align based on normal at hit point on surface AND based on facing the tracked transform. To force the associated GameObject to stay vertical in any mode other than None , enable Keep Orientation Vertical . Note Use the Orientation Blend property to control the balance between rotation factors when Orientation Mode is set to Blended . A value of 0.0 will have orientation entirely driven by TrackedTarget mode and a value of 1.0 will have orientation driven entirely by SurfaceNormal . Determining what surfaces can be hit When adding a SurfaceMagnetism component to a GameObject, it is important to consider the layer of the GameObject and its children, if any have colliders. The component works by performing various types of raycasts to determine what surface to \"magnet\" itself against. If the solver GameObject has a collider on one of the layers listed in the MagneticSurfaces property of SurfaceMagnetism , then the raycast will likely hit itself resulting in the GameObject attaching to its own collider point. This odd behavior can be avoided by setting the main GameObject and all children to the Ignore Raycast layer or modifying the MagneticSurfaces LayerMask array appropriately. Conversely, a SurfaceMagnetism GameObject will not collide with surfaces on a layer not listed in the MagneticSurfaces property. It is generally recommended to place all desired surfaces on a dedicated layer (i.e Surfaces ) and setting the MagneticSurfaces property to just this layer. Using default or everything may result in UI components or cursors contributing to the solver. Finally, surfaces farther than the MaxRaycastDistance property setting will be ignored by the SurfaceMagnetism raycasts. Hand Menu with HandConstraint and HandConstraintPalmUp The HandConstraint behavior provides a solver that constrains the tracked object to a region safe for hand constrained content (such as hand UI, menus, etc). Safe regions are considered areas that don't intersect with the hand. A derived class of HandConstraint called HandConstraintPalmUp is also included to demonstrate a common behavior of activating the solver tracked object when the palm is facing the user. For example use of this behavior please see the HandBasedMenuExample scene under: MixedRealityToolkit.Examples/Demos/HandTracking/Scenes/ Please see the tool tips available for each HandConstraint property for additional documentation. A few properties are defined in more detail below. Safe Zone : The safe zone specifies where on the hand to constrain content. It is recommended that content be placed on the Ulnar Side to avoid overlap with the hand and improved interaction quality. Safe zones are calculated by taking the hands orientation projected into a plane orthogonal to the camera's view and raycasting against a bounding box around the hands. Safe zones are defined to work with IMixedRealityHand but also works with other controller types. It is recommended to explore what each safe zone represents on different controller types. Activation Events : Currently the HandConstraint triggers four activation events. These events can be used in many different combinations to create unique HandConstraint behaviors, please see the HandBasedMenuExample scene under: MixedRealityToolkit.Examples/Demos/HandTracking/Scenes/ for examples of these behaviors. OnHandActivate : triggers when a hand satisfies the IsHandActive method OnHandDeactivate : triggers when the IsHandActive method is no longer satisfied. OnFirstHandDetected : occurs when the hand tracking state changes from no hands in view, to the first hand in view. OnLastHandLost : occurs when the hand tracking state changes from at least one hand in view, to no hands in view. Experimental Solvers These solvers are available in MRTK but are currently experimental. Their APIs and functionality are subject to change. Furthermore, their robustness and quality may be lower than standard features. Directional Indicator The DirectionalIndicator class is a tag-along component that orients itself to the direction of a desired point in space. Most commonly used when the Tracked Target Type of the SolverHandler is set to Head . In this fashion, a UX component with the DirectionalIndicator solver will direct a user to look at the desired point in space. The desired point in space is determined via the Directional Target property. If the directional target is viewable by the user, or whatever frame of reference is set in the SolverHandler , then this solver will disable all Renderer components underneath it. If not viewable, then everything will be enabled on the indicator. Visibility Scale Factor - Multiplier to increase or decrease the FOV that determines if the Directional Target point is viewable or not View Offset - From the viewpoint of the frame of reference (i.e camera possibly), this property defines how far in the indicator direction should the object be from the center of the viewport. Directional Indicator properties Directional Indicator Example Scene See also Hand Tracking Gaze"
  },
  "Documentation/README_SystemKeyboard.html": {
    "href": "Documentation/README_SystemKeyboard.html",
    "title": "System keyboard | Mixed Reality Toolkit Documentation",
    "keywords": "System keyboard A Unity application can invoke the system keyboard at any time. Note that the system keyboard will behave according to the target platform's capabilities, for example the keyboard on HoloLens 2 would support direct hand interactions, while the keyboard on HoloLens (1st gen) would support GGV 1 . How to invoke the system keyboard public TouchScreenKeyboard keyboard; ... public void OpenSystemKeyboard() { keyboard = TouchScreenKeyboard.Open(\"\", TouchScreenKeyboardType.Default, false, false, false, false); } How to read the input public TouchScreenKeyboard keyboard; ... private void Update() { if (keyboard != null) { keyboardText = keyboard.text; // Do stuff with keyboardText } } System keyboard example You can see a simple example of how to bring up system keyboard in MixedRealityKeyboard.cs"
  },
  "Documentation/README_TextPrefab.html": {
    "href": "Documentation/README_TextPrefab.html",
    "title": "Text Prefab | Mixed Reality Toolkit Documentation",
    "keywords": "Text Prefab These prefabs are optimized for the rendering quality in Windows Mixed Reality. For more information, please read the guideline Text in Unity on Microsoft Windows Dev Center. 3DTextPrefab.prefab 3D Text Mesh prefab with optimized scaling factor at 2-meter distance. (Please read the instructions below) UITextPrefab.prefab UI Text Mesh prefab with optimized scaling factor at 2-meter distance. (Please read the instructions below) Fonts Open-source fonts included in Mixed Reality Toolkit. IMPORTANT: Text Prefab uses open source font 'Selawik'. To use Text Prefab with different font, please import font file and follow the instruction below. Below example shows how to use 'Segoe UI' font with Text Prefab. Assign font texture to 3DTextSegoeUI.mat material. On 3DTextSegoeUI.mat material, select the shader Custom/3DTextShader.shader. Assign Segoe UI font and 3DTextSegoeUI material to the text components in the prefabs. Working with Fonts in Unity When adding a new 3D TextMesh to a scene in Unity there are two issues that are visually apparent. One, the font appears very large and two, the font appears very blurry. It is also interesting to notice that the default Font Size value is set to zero in the Inspector. Replacing this zero value with 13 will show no difference in size, because 13 is actually the default value. Unity assumes all new elements added to a scene is 1 Unity Unit in size, or 100% Transform scale, which translates to about 1 meter on the HoloLens. In the case of fonts, the bounding box for a 3D TextMesh comes in, by default at about 1 meter in height. Font Scale and Font Sizes Most visual designers use Points to define font sizes in the real world, as well as their design programs. There are about 2835 (2,834.645666399962) points in 1 meter. Based on the point system conversion to 1 meter and Unity's default TextMesh Font Size of 13, the simple math of 13 divided by 2835 equals 0.0046 (0.004586111116 to be exact) provides a good standard scale to start with, though some may wish to round to 0.005. Either way, scaling the Text object or container to these values will not only allow for the 1:1 conversion of font sizes from a design program, but also provides a standard to maintain consistency throughout the application or game. UI Text When adding a UI or canvas based Text element to a scene, the size disparity is greater still. The differences in the two sizes is about 1000%, which would bring the scale factor for UI based Text components to 0.00046 (0.0004586111116 to be exact) or 0.0005 for the rounded value. Disclaimer : The default value of any font may be effected by the texture size of that font or how the font was imported into Unity. These tests were performed based on the default Arial font in Unity, as well as one other imported font. Text3DSelawik.mat Material for 3DTextPrefab with occlusion support. Requires 3DTextShader.shader Text3DShader.shader Shader for 3DTextPrefab with occlusion support."
  },
  "Documentation/README_Tooltip.html": {
    "href": "Documentation/README_Tooltip.html",
    "title": "Tooltip | Mixed Reality Toolkit Documentation",
    "keywords": "Tooltip Tooltips are usually used to convey a hint or extra information upon closer inspection of an object. Tooltips can be used to annotate objects in the physical environment. How to use a tooltip A tooltip can be added directly to the hierarchy and targeted to an object. To use this method simply add a game object and one of the tooltip prefabs to the scene hierarchy. In the prefab's inspector panel, expand the Tool Tip (script). Select a tip state and configure the tooltip. Enter the respective text for the tool tip in the text field. Expand the ToolTipConnector (Script) and drag the object that is to have the tooltip from the hierarchy into the field labelled Target . This attaches the tooltip to the object. This use assumes a tooltip that is always showing or that is shown / hidden via script by changing the tooltip state property of the tooltip component. Dynamically spawning tooltips A tooltip can be dynamically added to an object at runtime as well as pre-set to show and hide on a tap or focus. Simply add the ToolTipSpawner script to any game object. Delays for appearing and disappearing can be set in the scripts inspector as well as a lifetime so that the tooltip will disappear after a set duration. Tooltips also feature style properties such as background visuals in the spawner script. By default the tooltip will be anchored to the object with the spawner script. This can be changed by assigning a GameObject to the anchor field. Example scene In the example scene files , you will be able to find various examples of tooltips."
  },
  "Documentation/ReleaseNotes.html": {
    "href": "Documentation/ReleaseNotes.html",
    "title": "Microsoft Mixed Reality Toolkit发布说明 | Mixed Reality Toolkit Documentation",
    "keywords": "Microsoft Mixed Reality Toolkit发布说明 版本2.2.0 版本 2.1.0 版本 2.0.1 版本 2.0.0 Version 2.2.0 Upgrading projects What's new Known issues This release of the Microsoft Mixed Reality Toolkit supports the following devices and platforms. Microsoft HoloLens 2 Microsoft HoloLens (1st gen) Windows Mixed Reality Immersive headsets OpenVR (Experimental) Mobile AR Android iOS The following software is required. Microsoft Visual Studio (2017 or 2019) Community Edition or higher Windows 10 SDK 18362 or later (installed by the Visual Studio Installer) Unity 2018.4 LTS, 2019.1 or 2019.2 NuGet requirements If importing the Mixed Reality Toolkit NuGet packages, the following software is recommended. NuGet for Unity 2.0.0 or newer Upgrading projects to 2.2.0 The 2.2.0 release has some changes that may impact application projects. Breaking change details, including mitigation guidance, can be found in the Updating 2.1.0 to 2.2.0 article. Updating using .unitypackage files For the smoothest upgrade path, please use the following steps. Close Unity Delete MixedRealityToolkit (the project may not have all listed folders) MixedRealityToolkit MixedRealityToolkit.Examples MixedRealityToolkit.Extensions Note If additional extensions have been installed, please make a backup prior to deleting these folders. MixedRealityToolkit.Providers MixedRealityToolkit.SDK MixedRealityToolkit.Services MixedRealityToolkit.Tools Important Do NOT delete the MixedRealityToolkit.Generated folder. Delete the Library folder Re-open the project in Unity Import the new unity packages Foundation - Import this package first (Optional) Tools (Optional) Extensions Note If additional extensions had been installed, they may need to be re-imported. (Optional) Examples Close Unity and Delete the Library folder. This step is necessary to force Unity to refresh its asset database and reconcile existing custom profiles. Launch Unity, and for each scene in the project Delete MixedRealityToolkit and MixedRealityPlayspace , if present, from the hierarchy Select MixedRealityToolkit -> Add to Scene and Configure Select MixedRealityToolkit -> Utilities -> Update -> Controller Mapping Profiles (only needs to be done once) - This will update any custom Controller Mapping Profiles with updated axes and data, while leaving your custom-assigned input actions intact Updating from NuGet If your project was created using the Mixed Reality Toolkit NuGet packages, please use the following steps. Select NuGet > Manage NuGet Packages Select the Online tab and click Refresh Select the Installed tab Click the Update button for each installed package Microsoft.MixedReality.Toolkit.Foundation Microsoft.MixedReality.Toolkit.Tools Microsoft.MixedReality.Toolkit.Extensions Microsoft.MixedReality.Toolkit.Examples Re-open the project in Unity What's new in 2.2.0 Camera Settings Providers MRTK has added settings providers to the camera system. These components enable customization of the camera system on a per-platform basis. Shipping in version 2.2.0 are providers for Windows Mixed Reality (Foundation package) (Experimental) UnityAR for Android and iOS (Providers.UnityAR package) Note If no camera settings provider is configured for the current platform, the behavior from MRTK v2.1.0 will be used. Cursor resizing The DefaultCursor prefab now dynamically resizes based on the distance (to the raycast hit point) and uses angular scale to account for platform differences. Directional Indicator Solver The HoloToolkit directional indicator component has been re-introduced as a solver. Fingertip cursor translation and alignment The fingertip cursor's translation and alignment have been updated to better match the HoloLens 2 shell behavior. GridObjectCollection supports content alignment The GridObjectCollection UX control now supports aligning content to combinations of Left Center Right and Top Middle Bottom Fixing LayoutDirection in GridObjectCollection In MRTK 2.1 and below GridObjectCollection would always lay out its content first vertically, then horizontally, regardless of whether its layout was RowsThenColumns or ColumnsThenRows . In MRTK 2.2, if the layout is ColumnsThenRows then the content will lay out first horizontally (by columns), then vertically (by rows). If a collections layout is RowsThenColumns it will lay out first vertically, then horizontally as before. Below: RowsThenColumns layout, with Rows = 3. Below: ColumnsThenRows layout, with Columns = 3. All assets being upgraded from 2.1 to 2.2 that have ColumnsThenRows layout will be changed to have RowsThenColumns layout to ensure that layout behavior stays the same. This is because all GridObjectCollection assets prior to 2.2 were actually performing vertical, then horizontal layout. InteractableToggleCollection improvements InteractableToggleCollection now properly updates the toggle states within groups. A new InteractableToggleCollection inspector has also been added. Mixed Reality Capture setting (Experimental) The Windows Mixed Reality camera settings provider provides an experimental setting to better align holograms in mixed reality capture (MRC) recordings . Note This feature is supported on Unity versions 2018.4 (.13f1 and newer) and 2019.3 (.0f1 and newer). With other Unity versions, the recording behavior may not work as expected. Mobile AR (Android and iOS) support (Experimental) An experimental camera settings provider has been added to support mobile AR on Android and iOS phones and tablets. This provider requires Unity's AR Foundation as well as AR Core or AR Kit packages to be installed into the project. The provider is distributed via the Microsoft.MixedReality.Providers.UnityAR package on GitHub and NuGet. MSBuild for Unity MRTK now supports MSBuild for Unity to enable automatic acquisition of NuGet dependencies (for example, Microsoft.Windows.MixedReality.DotNetWinRT ). This is an optional install that can be performed with the Mixed Reality Toolkit > Utilities > Configure Unity Project menu item and at project load time. Note Some new MRTK features (ex: HoloLens 2 hand and eye remoting) require installing MSBuild for Unity. New audio clips for HoloLens 2 style bounding boxes The HoloLens 2 style bounding box UX control uses new audio clips to better match the shell experience. PressableButtonHoloLens2 icon lift on focus The PressableButtonHoloLens2 UX control now has improved parity with the HoloLens shell experience. Pulse shaders for spatial mesh and hand mesh (Experimental) Experimental shaders have been added for the spatial mesh and hand mesh to replicate the HoloLens 2 shell behavior. Spatial mesh Hand mesh Note On HoloLens 2, the experience does not show an offset from the hands. Scrolling Object Collection (Experimental) An experimental scrolling object collection UX control has been added to MRTK. This control was originally built for the HoloLens 2 initial (out of box) experience. Search MRTK profiles for keywords MRTK profiles now support searching by keyword. Surface Magnetism Solver and Hand Ray example scene A new example scene has been added, which demonstrates surface magnetism and the spatial awareness mesh. Support for hand and eye tracking remoting for Microsoft HoloLens 2 MRTK adds support for articulated hands and eye tracking when running an application via Holographic Remoting on a HoloLens 2. Please refer to the Holographic Remoting article for details on how to configure and use remoting. Note This feature requires installing MSBuild for Unity, which will install the Microsoft.Windows.MixedReality.DotNetWinRT package from NuGet. Windows Mixed Reality Depth Reprojection Settings Developer customers can now specify the desired depth reprojection method for their Microsoft HoloLens 2 applications. Select between Depth Reprojection and Auto Planar in the Windows Mixed Reality Camera Settings as shown in the following image. Known issues in 2.2.0 The sections below highlight some of the known issues in the Microsoft Mixed Reality Toolkit. Long paths When building on Windows, there is a MAX_PATH limit of 255 characters. Unity is affected by these limits and may fail to build a binary if its resolved output path is longer than 255 characters. This can manifest as CS0006 errors in Visual Studio that look like: CS0006: Metadata file 'C:\\path\\to\\longer\\file\\that\\is\\longer\\than\\255\\characters\\mrtk.long.binary.name.dll' could not be found. This can be worked around by moving the Unity project folder closer to the root of the drive, for example: C:\\src\\project Please see this issue for more background information. Runtime profile swapping MRTK does not fully support profile swapping at runtime. This feature is being investigated for a future release. Please see issues 4289 , 5465 and 5466 for more information. Unity 2018: .NET Backend and AR Foundation There is an issue in Unity 2018 where, when building a Universal Windows Platform project using the .NET scripting backend, the Unity AR Foundation package will fail to install. To work around this issue, please perform one of the following steps: Switch the scripting backend to IL2CPP In the Build Settings window, uncheck **Unity C# Projects\" Hang when using Holographic Remoting There is a known issue with some versions of Unity where the editor may hang upon entering play mode during a remoting session. This issue may manifest if the Holographic window is open when the project is loaded. To work around the issue, please perform the following steps: With the project open, close the Holographic dialog. Close Unity Reopen Unity and open the project. Failed to get IHolographicCameraRenderingParameters from main camera for updating rendering parameter When remoting, the Unity Console window may display a message stating \"Failed to get IHolographicCameraRenderingParameters from main camera for updating rendering parameter\". This error most commonly occurs when a hand comes into view. There is no functional impact on the application and this issue is being tracked on GitHub . Assembly has reference to non-existent assembly 'Unity.XR.ARFoundation' If the Providers.UnityAR package is installed, the following error indicates that Unity's AR Foundation package has not been installed. Please review the How to configure MRTK for iOS and Android article for requirements and instructions. If the project is not intended to be run on Android or iOS devices, it is safe to delete the MixedRealityToolkit.Staging folder from the project. Mixed Reality Capture settings (Experimental) The Windows Mixed Reality camera settings provider's experimental Mixed Reality Capture settings are disabled in the default profiles. This is due to some versions of Unity not properly supporting the feature of using the HoloLens photo video camera when recording captures. It is recommended to only enable this option on versions of Unity in the following list: 2018.4 (.13f1 and later) 2019.3.0f1 and later Enabling this feature on other versions of Unity may result in incorrect captures (ex: missing holograms). MRTK Configurator dialog When loading an MRTK based project, the MRTK Configurator dialog may display multiple times. This is related to MRTK detecting multiple loads of the project. This issue will be investigated and addressed in a future version of the MRTK. The type or namespace name 'TrackedPoseDriver' could not be found If the Providers.UnityAR package is installed in a project created in Unity 2019.2 or newer, the following error indicates that the assembly definition file (Microsoft.MixedReality.Toolkit.Providers.UnityAR.asmdef) needs to be updated to include a reference to UnityEngine.SpatialTracking . Please review the How to configure MRTK for iOS and Android article for requirements and instructions. If the project is not intended to be run on Android or iOS devices, it is safe to delete the MixedRealityToolkit.Staging folder from the project. Version 2.1.0 Upgrading projects What's new Known issues This release of the Microsoft Mixed Reality Toolkit supports the following devices and platforms. Microsoft HoloLens 2 Microsoft HoloLens (1st gen) Windows Mixed Reality Immersive headsets OpenVR The following software is required. Microsoft Visual Studio (2017 or 2019) Community Edition or higher Windows 10 SDK 18362 or later (installed by the Visual Studio Installer) Unity 2018.4, 2019.1 or 2019.2 NuGet requirements If importing the Mixed Reality Toolkit's NuGet packages, the following software is recommended. NuGet for Unity Upgrading projects to 2.1.0 Updating using .unitypackage files The 2.1.0 release has some changes that may impact application projects, including some files moving to new folder locations. Breaking change details, including mitigation guidance, can be found in the Updating 2.0.0 to 2.1.0 article. For the smoothest upgrade path, please use the following steps. Close Unity Delete MixedRealityToolkit (the project may not have all listed folders) MixedRealityToolkit MixedRealityToolkit.Examples MixedRealityToolkit.Extensions Note If additional extensions have been installed, please make a backup prior to deleting this folder. MixedRealityToolkit.Providers MixedRealityToolkit.SDK MixedRealityToolkit.Services MixedRealityToolkit.Tools Important Do NOT delete the MixedRealityToolkit.Generated folder. Delete the Library folder Re-open the project in Unity Import the new unity packages Foundation - Import this package first (Optional) Tools (Optional) Extensions Note If additional extensions had been installed, they may need to be re-imported. (Optional) Examples Close Unity and Delete the Library folder. This step is necessary to force Unity to refresh its asset database and reconcile existing custom profiles. Launch Unity, and for each scene in the project Delete MixedRealityToolkit and MixedRealityPlayspace , if present, from the hierarchy Select MixedRealityToolkit -> Add to Scene and Configure Select MixedRealityToolkit -> Utilities -> Update -> Controller Mapping Profiles (only needs to be done once) - This will update any custom Controller Mapping Profiles with updated axes and data, while leaving your custom-assigned input actions intact Related to issue #6144 : after upgrading, if you have a custom input simulation profile, the input playback service data provider may have a missing class. Click the \"Try Repair\" button in the profile window to fix the missing reference. Updating from NuGet If your project was created using the Mixed Reality Toolkit NuGet packages, please use the following steps. Select NuGet > Manage NuGet Packages Select the Online tab and click Refresh Select the Installed tab Click the Update button for each installed package Microsoft.MixedReality.Toolkit.Foundation Microsoft.MixedReality.Toolkit.Tools Microsoft.MixedReality.Toolkit.Extensions Microsoft.MixedReality.Toolkit.Examples Re-open the project in Unity After updating the packages, you may see messages similar to the following: Failed to unload 'Assets/Packages/Microsoft.MixedReality.Toolkit.Examples.2.1.0/MRTK/StandardAssets/Models/Materials/Material_56.mat' The step to re-open the project in Unity resolves the issue. What's new in 2.1.0 NuGet package distribution MRTK 2.1.0 now ships packages on NuGet.org. The following steps can be used to import the desired packages. Install NuGet for Unity Select NuGet > Manage NuGet Packages In the search field, enter \"MixedReality.Toolkit\" Click Search Click Install for each desired package Microsoft.MixedReality.Toolkit.Foundation (Optional) Microsoft.MixedReality.Toolkit.Tools (Optional) Microsoft.MixedReality.Toolkit.Extensions (Optional) Microsoft.MixedReality.Toolkit.Examples Dwell interaction (Experimental) MRTK has added experimental support for dwell interactions. Dwell interactions enable applications to respond to a user focusing their gaze or motion controller on an interactable object for a predefined period of time. Please refer to change 5594 for details. Hand menu example updates The hand menu example has received visual updates (no code changes). MRTK Examples Hub (Experimental) The MRTK Examples Hub is now part of the MixedRealityToolkit.Examples package, in the Experimental folder. For information on how to build and use the sample, please see the examples hub article. Near menu control Near Menu is a UX control which provides a collection of buttons or other UI components. It is floating around the user's body and easily accessible anytime. Since it is loosely coupled with the user, it does not disturb the user's interaction with the target content. The user can use the 'Pin' button to world-lock/unlock the menu. The menu can be grabbed and placed at a specific position. Please see Near Menu for more information. Pressable button for Unity UI Support for pressable buttons on Unity UI canvases has been added. The HandInteractionExamples demo scene, in the MixedRealityToolkit.Examples package, demonstrates this feature. Speech command confirmation label A new speech command confirmation label (SpeechConfirmationTooltip.prefab) has been added to provide functionality that matches the Microsoft HoloLens 2 shell. Please see the speech input article for more information. Mesh Outlining A component MeshOutline and MeshOutlineHierarchy to outline meshes without utilizing post processing effects, which can be costly on mobile mixed reality devices. See change 5562 for more details Ability to turn off hand rays and other pointers (gaze, grab, poke) from code We have had many requests for how to disable the far interaction (line pointer, hand rays, etc) at runtime. We now provide a one-line command to turn pointers on and off. // Turn off all hand rays PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff); // Turn hand rays back on PointerUtils.SetHandRayPointerBehavior(PointerBehavior.Default); // Turn off hand rays for the right hand only PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff, Handedness.Right); // Turn off the gaze pointer PointerUtils.SetGazePointerBehavior(PointerBehavior.AlwaysOff); Please see change 5920 for more details. Easily access hand, head, eye position, rotation from code We had feedback that it's difficult to find out where the hand is pointing, or where eyes / head is looking. This change adds methods to make it easy for application code to acquire the position and rotation of head, hands, eyes, and motion controllers. Please see change 5944 for details. // Get the head ray var headRay = InputRayUtils.GetHeadGazeRay(); // Get the right hand ray Ray rightHandRay; if(InputRayUtils.TryGetHandRay(Handedness.right, rightHandRay)) { // Right hand ray is available } Interactable can be instantiated, configured from code This release we focused a lot of energy on making Interactable configurable from code. It's now possible to instantiate and configure interactable from code. See change 5967 and Interactable for more information It's now easier to add event listeners from code. Here's an example of how to add focus enter/exit events: public static void AddFocusEvents(Interactable interactable) { var onFocusReceiver = interactable.AddReceiver<InteractableOnFocusReceiver>(); onFocusReceiver.OnFocusOn.AddListener(() => Debug.Log(\"Focus on\")); onFocusReceiver.OnFocusOff.AddListener(() => Debug.Log(\"Focus off\")); } Input simulation: Instead of Q/E, hold ctrl to rotate hands Keys for rotating hands have been removed, hand rotation is now controlled by the mouse as well. Holding HandRotateButton (Ctrl) together with the left/right hand manipulation key (LShift/Space) will enable hand rotation. Layer Masks for Grabbable objects We received feedback that hand rays would turn off / stick to objects when near surface reconstruction or any any other non-grabbable collider. As part of this fix, we added the ability to specify layer masks for near grabbable objects, similar to touchable objects. An object must both be on a Grabbable Layer as well as have a NearInteractionGrabbable component in order for hand rays to turn off. The Grabbable Layer is by default set to everything except Ignore Raycast and Spatial Awareness. See change 5823 for more details. Breaking changes in 2.1.0 Input simulation profile The input simulation system has been upgraded, which changes a few settings in the input simulation profile. Some changes can not be migrated automatically and users may find that profiles are using default values. All KeyCode and mouse button bindings in the profile have been replaced with a generic KeyBinding struct, which stores the type of binding (key or mouse) as well as the actual binding code (KeyCode or mouse button number respectively). The struct has its own inspector, which allows unified display and offers an \"auto-bind\" tool to quickly set key bindings by pressing the respective key instead of selecting from a huge dropdown list. FastControlKey ToggleLeftHandKey ToggleRightHandKey LeftHandManipulationKey RightHandManipulationKey MouseLookToggle was previously included in the 1MouseLookButton1 enum as InputSimulationMouseButton.Focused , it is now a separate option. When enabled, the camera will keep rotating with the mouse after releasing the button, until the escape key is pressed. HandDepthMultiplier default value has been lowered from 0.1 to 0.03 to accommodate some changes to the input simulation. If the camera moves too fast when scrolling, try lowering this value. Keys for rotating hands have been removed, hand rotation is now controlled by the mouse as well. Holding HandRotateButton (Ctrl) together with the left/right hand manipulation key (LShift/Space) will enable hand rotation. A new axis \"UpDown\" has been introduced to the input axis list. This controls camera movement in the vertical and defaults to Q/E keys as well as the controller trigger buttons. For more information on these changes, please see the input simulation service article. Related to issue #6144 : after upgrading, if you have a custom input simulation profile, the input playback service data provider may have a missing class. Click the \"Try Repair\" button in the profile window to fix the missing reference. Replace ColliderNearInteractionTouchable with BaseNearInteractionTouchable The CollierNearInteractionTouchable class is now obsolete. Replace all usages of ColliderNearInteractionTouchable with BaseNearInteractionTouchable . Interactable: deprecated methods Interactable has been upgraded to be configurable from code. The following methods in Interactable are now marked Obsolete: public void ResetBaseStates() public int GetDimensionIndex() public void SetDimensionIndex(int index) public void ForceUpdateThemes() public bool FocusEnabled public bool IsToggleButton public bool Enabled public bool RequiresFocus public bool IsDisabled public State[] GetStates() public virtual void SetFocus(bool focus) public virtual void SetPress(bool press) public virtual void SetDisabled(bool disabled) public virtual void SetTargeted(bool targeted) public virtual void SetInteractive(bool interactive) public virtual void SetObservationTargeted(bool targeted) public virtual void SetObservation(bool observation) public virtual void SetVisited(bool visited) public virtual void SetToggled(bool toggled) public virtual void SetGesture(bool gesture) public virtual void SetGestureMax(bool gesture) public virtual void SetCollision(bool collision) public virtual void SetCustom(bool custom) public virtual void SetVoiceCommand(bool voice) public virtual void SetPhysicalTouch(bool touch) public virtual void SetGrab(bool grab) Please see change 6104 for more details. Known issues in 2.1.0 The sections below highlight some of the known issues in the Microsoft Mixed Reality Toolkit. Long paths When building on Windows, there is a MAX_PATH limit of 255 characters. Unity is affected by these limits and may fail to build a binary if its resolved output path is longer than 255 characters. This can manifest as CS0006 errors in Visual Studio that look like: CS0006: Metadata file 'C:\\path\\to\\longer\\file\\that\\is\\longer\\than\\255\\characters\\mrtk.long.binary.name.dll' could not be found. This can be worked around by moving the Unity project folder closer to the root of the drive, for example: C:\\src\\project Please see this issue for more background information. Runtime profile swapping MRTK does not fully support profile swapping at runtime. This feature is being investigated for a future release. Please see issues 4289 , 5465 and 5466 for more information. Unity 2019: Could not copy the file HolographicAppRemoting.dll There is a known issue with version 3.0.0 of the Windows Mixed Reality package for Unity 2019. If the project has this version installed, the following error will be encountered when compiling in Microsoft Visual Studio. To work around the issues, please update to a newer version using Window > Package Manager in the Unity editor. VR/Immersive devices: Content in some demo scenes is placed below the user Some demo scenes contained in the Examples package are optimized for HoloLens device's (headset's y position is 0). These scenes may place objects below the user when run on VR/Immersive device's (headset's Y position is the distance from the floor). To work around this issue, select the Scene Content object, in the Hierarchy, and set the Transform's Position Y value to 1.5 (1.5 meters, or the preferred headset height). Version 2.0.1 Upgrading projects What's new This hotfix release of Mixed Reality Toolkit fixes a couple of small bugs when consuming Mixed Reality Toolkit in NuGet package form. In addition, this release introduce the NuGet package as a release mechanism for Mixed Reality Toolkit. Upgrading projects to 2.0.1 For non-NuGet package cases, the upgrade from 2.0.0 should not have an effect when consuming Mixed Reality Toolkit as .unitypackages or source. To upgrade your Unity project to 2.0.1 from before 2.0.0, follow the same instructions as: Upgrading projects Currently, the upgrade path from non-NuGet package to NuGet package version of Mixed Reality Toolkit is not officially supported. Look out for that in the coming releases. To add Mixed Reality Toolkit to your project in the form of a NuGet package, do the following: Download the latest NuGet For Unity .unitypackage Import the .unitypackage into your Unity Project. Click on the NuGet > Manage NuGet Packages menu. Search for Microsoft.MixedReality.Toolkit , and press Install on the packages you wish to bring-in: Microsoft.MixedReality.Toolkit.Foundation: This package contains everything needed to work with Mixed Reality Toolkit. Microsoft.MixedReality.Toolkit.Examples: This package contains example scenes of Mixed Reality Toolkit functionality. Microsoft.MixedReality.Toolkit.Extensions: This package contains extensions to Mixed Reality Toolkit. Microsoft.MixedReality.Toolkit.Tools: This package contains useful tooling for Unity. What's new in 2.0.1 Consuming Mixed Reality Toolkit as a NuGet package will reduce compilation time, the amount of .csproj files when editing code, and allow for a simple update mechanism for future versions. Version 2.0.0 Upgrading projects What's new Known issues This release of the Microsoft Mixed Reality Toolkit supports the following devices and platforms. Microsoft HoloLens 2 Microsoft HoloLens (1st gen) Windows Mixed Reality Immersive headsets OpenVR The following software is required. Microsoft Visual Studio (2017 or 2019) Community Edition or higher Windows 10 SDK 18362 or later (installed by the Visual Studio Installer) Unity 2018.4, 2019.1 or 2019.2 Upgrading projects to 2.0.0 Since the RC2 release, there have been several changes that may impact application projects, including some files moving to new folder locations. Breaking change details, including mitigation guidance, can be found in the Updating RC2 to 2.0.0 article. For the smoothest upgrade path, please use the following steps. Close Unity Delete MixedRealityToolkit (the project may not have all listed folders) MixedRealityToolkit MixedRealityToolkit.Examples MixedRealityToolkit.Extensions Note If additional extensions have been installed, please make a backup prior to deleting this folder. MixedRealityToolkit.Providers MixedRealityToolkit.SDK MixedRealityToolkit.Services MixedRealityToolkit.Tools Important Do NOT delete the MixedRealityToolkit.Generated folder. Delete the Library folder Re-open the project in Unity Import the new unity packages Foundation - Import this package first (Optional) Tools (Optional) Extensions Note If additional extensions had been installed, they may need to be re-imported. (Optional) Examples Close Unity and Delete the Library folder. This step is necessary to force Unity to refresh its asset database and reconcile existing custom profiles. Launch Unity, and for each scene in the project Delete MixedRealityToolkit and MixedRealityPlayspace , if present, from the hierarchy Select MixedRealityToolkit -> Add to Scene and Configure Important Some profiles have been changed (properties have been added) in this release. If the project has custom profiles, please open them to verify that all of the updated properties are correctly configured. What's new in 2.0.0 BoundingBox Improvements Normalized the handle asset size and scaling logic The handle asset is now sized to 1-meter Default values and examples are updated New features Animated handle by proximity Match the HoloLens 2 shell behavior Handles can be configured to appear only when a hand is close to them New example scene The BoundingBoxExample scene, in the Examples package (Demos\\UX\\BoundingBox\\Scenes\\BoundingBoxExamples.unity), shows various types of configurations Important Normalized asset handle size and scaling logic require updated handle scale values. With this change, the existing bounding box handle will be displayed in a very large size. Please refer to the Bounding box handle styles section in the Bounding Box documentation for updated recommended values for the handle size. Handle configuration examples can be found in the BoundingBoxExamples scene. Clipping Example The ClippingExamples scene, in the Examples package (Demos\\StandardShader\\Scenes\\ClippingExamples.unity), demonstrates using the MRTK Standard Shader’s new clipping feature. CoreServices The CoreServices static class works in conjunction with the MixedRealityServiceRegistry to provide applications with a fast and convenient mechanism to acquire instances of core services (ex: Input System). Default HoloLens (1st gen) profile We have added a new profile for HoloLens (1st gen) development that includes some of the recommended MRTK configurations for best performance. To configure the application for HoloLens (1st gen) optimized settings, set the Mixed Reality Toolkit's Active Profile to DefaultHoloLens1ConfigurationProfile . Dependency window A dependency window has been added which displays how assets reference and depend on each other. This tool can be used to easily determine which assets within a project are not being used. Example: Launch applications from within a Unity app See the HandInteractionExamples scene, in the Examples package (Demos\\HandInteraction\\Scenes\\HandInteractionDemos.unity), for a demonstration of using the LaunchUri script to start an external application. Extension Service Creation Wizard Making the transition from singletons to services can be difficult. The Extension Service Creation Wizard supplements documentation and sample code by enabling devs to create new services easily Fingertip Cursor The fingertip cursor has been updated to better match the HoloLens 2 shell. Hand Menu Graduated from Experimental The HandConstraint and HandConstraintPalmUp solvers are now an official feature (no longer experimental) and have improved documentation. The HandConstraintPalmUp solver now has a toggle to enforce the hand’s fingers are coplanar before activating. HoloLens 2 Button Improved many visual details to match the HoloLens 2 shell including Compressing visuals Far interaction support Focus highlight Shader effects HoloLens 2 style Round Button has been added HoloLens 2 Shell Parity This release updates the MRTK to better mirror the features. behaviors and visuals of the HoloLens 2 shell experience. This GitHub issue describes the changes. IMixedRealityRaycastProvider The input system was updated to allow for raycast customization, via custom implementations of IMixedRealityRaycastProvider . Specify the desired raycast provider in the Input System's configuration profile. Improved solvers Solvers can now be controlled by the first available hand/controller instead of being locked to left or right handedness. Old value types of Tracked Target Type need to be updated to the new non-obsolete values. Please review the solvers section of Updating from RC2 to 2.0.0 for additional changes and mitigation details. Input animation recording MRTK features a recording system by which head movement and hand tracking data can be stored in animation files. The recorded data can then be played back using the input simulation system . MRTK Standard Shader The MRTK Standard Shader now supports Unity's Lightweight Scriptable render pipeline. Additional improvements A warning and \"Fix Now\" button is now displayed on materials which are in a project that has depth buffer sharing enabled and do not write depth Proximity lights now have per material color overrides and a \"Subtractive Light\" option to mimic proximity shadows Clipping primitives can now be toggled on/off at runtime without requiring shader permutations to be known at (player) build time Additive and transparent materials are now clipped correctly. A new property for non-opaque or cutout materials called “Blended Clipping Width” allows developers to set the width of the clip blend region Lighting of back face triangles is now correct Optimize Window The MRTK Optimize Window is a utility to help automate and inform in the process of configuring a mixed reality project for best performance in Unity. Radial Solver There have been improvements on vertical positioning. Check ‘Use Fixed Vertical Position’ to lock the vertical movement to achieve shell-style tag-along behavior. An example of lazy-following tag-along behavior can be seen in the ‘ToggleFeaturesPanel’ prefab (SDK\\Features\\UX\\Prefabs\\ToggleFeaturesPanel.prefab). SceneSystem The Scene System has been added to help with applications that contain more than once scene. Service managers (experimental) This release adds service managers to enable the light-weight addition of specific Microsoft Mixed Reality Toolkit features, such as the Spatial Awareness system, individually. These service managers are imported as part of the Foundation package and are located in the MixedRealityToolkit.SDK\\Experimental\\Features folder and are a work in progress. Service manager prefabs are provided for the following services. BoundarySystem CameraSystem DiagnosticsSystem InputSystem SpatialAwarenessSystem TeleportSystem (requires the Input System) To use, drag and drop the desired prefab into the hierarchy and select the configuration profile. Note These service managers are currently experimental, may have issues and are subject to change. Please file any and all issues that are encountered on GitHub Slate Improved Usability of slates by adding the shadow based on the finger proximity ‘Follow Me’ behavior to match the HoloLens 2 shell behavior, using Radial Solver. Fixed Border thickness issue fixed on flattened Bounding Box SpatialObjectMeshObserver We have added the SpatialObjectMeshObserver to improve developer productivity when working with the Spatial Awareness system. This observer reads mesh data from imported 3D models and uses them to simulate environmental data from devices such as Microsoft HoloLens 2. SpatialObjectMeshObserver is not enabled in the default profiles, please see the Spatial Awareness Getting Started article for more information on how to use this feature. Take Screenshot A Take Screenshot utility menu item (Mixed Reality Toolkit > Utilities > Take Screenshot) has been added to capture high resolution screenshots within the editor. Screenshots can be captured with a transparent clear color for use in easy post compositing of images for documentation or media. UX controls The following UX controls in the following list can now be instantiated and configured from code. BoundingBox ManipulationHandler HandInteractionPanZoom Interactable (basic features) Updated architecture documentation The architecture documentation is all new for this version. Known issues in 2.0.0 The sections below highlight some of the known issues in the Microsoft Mixed Reality Toolkit. Extension service wizard When using the extension service wizard, Generate Inspector and/or Generate Profile are not actually optional. Trying to create an extension service with either of these deselected will result in an error on the following page. Furthermore, the extension service created for the user will create a property for the ScriptableObject profile that was not actually created. This results in a compiler error until the property line is removed. Current workaround steps: Ignore error message in extension service wizard Open up the *ExtensionService.cs file created and remove reference to the non-existent profile. Issue #5654 is tracking this problem. Long paths When building on Windows, there is a MAX_PATH limit of 255 characters. Unity is affected by these limits and may fail to build a binary if its resolved output path is longer than 255 characters. This can manifest as CS0006 errors in Visual Studio that look like: CS0006: Metadata file 'C:\\path\\to\\longer\\file\\that\\is\\longer\\than\\255\\characters\\mrtk.long.binary.name.dll' could not be found. This can be worked around by moving the Unity project folder closer to the root of the drive, for example: C:\\src\\project Please see this issue for more background information. Runtime profile swapping MRTK does not fully support profile swapping at runtime. This feature is being investigated for a future release. Please see issues 4289 , 5465 and 5466 for more information. Text overflow in the some of the scroll view example when deployed with 16-bit depth buffer Examples made with Unity's scroll view show text overflow on the device when it is built with 16-bit depth buffer. (e.g. EyeTrackingDemo-03-Navigation.unity scene) Use 24-bit depth to build these example scenes. Unity 2019: Could not copy the file HolographicAppRemoting.dll There is a known issue with version 3.0.0 of the Windows Mixed Reality package for Unity 2019. If the project has this version installed, the following error will be encountered when compiling in Microsoft Visual Studio. To work around the issues, please check for a newer version or roll back to version 3.0.2 using Window > Package Manager in the Unity editor. VR/Immersive devices: Content in some demo scenes is placed below the user Some demo scenes contained in the Examples package are optimized for HoloLens device's (headset's y position is 0). These scenes may place objects below the user when run on VR/Immersive device's (headset's Y position is the distance from the floor). To work around this issue, select the Scene Content object, in the Hierarchy, and set the Transform's Position Y value to 1.5 (1.5 meters, or the preferred headset height)."
  },
  "Documentation/Updating.html": {
    "href": "Documentation/Updating.html",
    "title": "更新Microsoft混合现实工具包 | Mixed Reality Toolkit Documentation",
    "keywords": "更新Microsoft混合现实工具包 2.1.0 至 2.2.0 2.0.0 至2.1.0 RC2 至2.0.0 将2.1.0更新为2.2.0 API 更改 2.2.0中的API更改 IMixedRealityBoundarySystem.Contains 该方法以前采用了特定的，Unity定义的实验枚举。现在，它接受一个与Unity枚举相同的MRTK定义的枚举。此更改有助于为Unity的未来边界API准备MRTK。 MixedRealityServiceProfileAttribute 为了更好地描述支持概要文件的需求，MixedRealityServiceProfileAttribute已被更新，以添加一个排除类型的可选集合。作为此更改的一部分，ServiceType属性已从Type更改为Type[]并重命名为RequiredTypes。 第二个属性，也添加了ExcludedTypes。 将2.0.0更新到2.1.0 API 更改 配置文件更改 2.1.0中的API更改 BaseNearInteractionTouchable 已对 BaseNearInteractionTouchable 进行了修改，以将 OnValidate 方法标记为虚拟方法。扩展 BaseNearInteractionTouchable 的类（例如： NearInteractionTouchableUnityUI ）已更新，以适应此更改。 ColliderNearInteractionTouchable ColliderNearInteractionTouchable 类已被弃用。请更新代码引用以使用 BaseNearInteractionTouchable 。 IMixedRealityMouseDeviceManager 添加 ImixedRealityMouseDeviceManager 已添加 CursorSpeed 和 WheelSpeed` 属性。这些属性允许应用程序指定乘数值，通过该乘数值将分别缩放光标和滚轮的速度。 这是一项重大更改，需要修改现有的鼠标设备管理器(mouse device manager)实现。 [!注意] 此更改与2.0.0版本不向后兼容。 弃用 MouseInputProfile 属性已被标记为过时，并且将从Microsoft混合现实工具包的将来版本中删除。建议应用程序代码不再使用此属性。 Interactable 以下方法和属性已被弃用，并且将从Microsoft混合现实工具包的将来版本中删除。建议按照包含在“过时”属性中并显示在控制台中的指南更新应用程序代码。 public bool Enabled public bool FocusEnabled public void ForceUpdateThemes() public bool IsDisabled public bool IsToggleButton public int GetDimensionIndex() public State[] GetStates() public bool RequiresFocus public void ResetBaseStates() public virtual void SetCollision(bool collision) public virtual void SetCustom(bool custom) public void SetDimensionIndex(int index) public virtual void SetDisabled(bool disabled) public virtual void SetFocus(bool focus) public virtual void SetGesture(bool gesture) public virtual void SetGestureMax(bool gesture) public virtual void SetGrab(bool grab) public virtual void SetInteractive(bool interactive) public virtual void SetObservation(bool observation) public virtual void SetObservationTargeted(bool targeted) public virtual void SetPhysicalTouch(bool touch) public virtual void SetPress(bool press) public virtual void SetTargeted(bool targeted) public virtual void SetToggled(bool toggled) public virtual void SetVisited(bool visited) public virtual void SetVoiceCommand(bool voice) NearInteractionTouchableSurface 添加了 NearInteractionTouchableSurface 类，现在用作 NearInteractionTouchable 和 NearInteractionTouchableUnityUI 的基类。 2.1.0中的配置文件更改 手动跟踪配置文件 现在，手部网格和关节可视化具有单独的编辑器和播放器设置。手动跟踪配置文件已更新，可以将这些可视化(visualizations)设置为；Nothing, Everything, Editor or Player. 自定义手部跟踪配置文件可能需要更新才能与版本2.1.0一起正常使用。 [!注意] 此更改与2.0.0版本不向后兼容。 输入模拟配置文件 输入模拟系统已升级，可以更改输入模拟配置文件中的一些设置。某些更改无法自动迁移，用户可能会发现配置文件正在使用默认值。 配置文件中的所有KeyCode和鼠标按钮绑定都已替换为通用的KeyBinding 结构，该结构存储绑定的类型（键或鼠标）以及实际的绑定代码（分别为KeyCode或鼠标按钮编号）。该结构具有自己的检查器，该检查器可以统一显示，并提供 auto-bind 工具，可通过按相应的键而不是从庞大的下拉列表中进行选择来快速设置键绑定。 FastControlKey ToggleLeftHandKey ToggleRightHandKey LeftHandManipulationKey RightHandManipulationKey MouseLookToggle 以前作为 InputSimulationMouseButton.Focuse d包含在 MouseLookButton 枚举中。现在，它是一个单独的选项。启用后，相机将在释放按钮后保持鼠标旋转，直到按下退出键。 HandDepthMultiplier 的默认值已从0.1降低到0.03，以适应输入模拟的某些更改。如果滚动时相机移动太快，请尝试降低此值。 旋转手的键已删除，手的旋转现在也由鼠标控制。同时按住 HandRotateButton （Ctrl）和左/右手操作键（LShift / Space）即可启用手旋转。 新轴“ UpDown”已引入到输入轴列表中。这可控制摄像机在垂直方向上的移动，默认为Q / E键以及控制器触发按钮。 有关这些更改的更多信息，请参见 输入模拟服务 文章。 Mouse data provider 配置文件 鼠标数据提供者配置文件已更新，以显示新的 CursorSpeed 和 WheelSpeed 属性。现有的自定义配置文件将自动提供默认值。保存配置文件后，这些新值将被保留。 Controller mapping 配置文件 2.1.0中已更新了某些轴和输入类型，尤其是在OpenVR平台周围。升级时，请确保选择 MixedRealityToolkit ->Utilities -> Update -> Controller Mapping Profiles 这将使用更新的轴和数据来更新所有自定义控制器映射配置文件，同时使自定义分配的输入操作保持不变。 将RC2更新到2.0.0 在Microsoft Mixed Reality Toolkit的RC2和2.0.0版本之间，进行了可能影响现有项目的更改。本文档介绍了这些更改以及如何将项目更新到2.0.0版本。 API 更改 Assembly name changes API changes in 2.0.0 自RC2发行以来，已经进行了许多API更改，其中一些更改可能会破坏现有项目。以下各节描述了RC2和2.0.0版本之间发生的更改。 MixedRealityToolkit MixedRealityToolkit对象上的以下公共属性已被弃用。 RegisteredMixedRealityServices 不再包含注册的扩展服务和数据提供程序的集合。 要访问扩展服务，请使用 MixedRealityServiceRegistry.TryGetService<T> 。要访问数据提供者，请将服务实例强制转换为 IMixedRealityDataProviderAccess 并使用 GetDataProvider<T> . 使用 MixedRealityServiceRegistry 或 CoreServices 代替以下不推荐使用的属性 ActiveSystems InputSystem BoundarySystem CameraSystem SpatialAwarenessSystem TeleportSystem DiagnosticsSystem SceneSystem CoreServices CoreServices 类是在 MixedRealityToolkit 对象中找到的静态系统访问器（例如BoundarySystem）的替换。 [!重要] MixedRealityToolkit 系统访问器已在2.0.0版中弃用，并将在以后的MRTK版本中删除。 以下代码示例说明了旧模式和新模式。 // 旧 GameObject playAreaVisualization = MixedRealityToolkit.BoundarySystem?.GetPlayAreaVisualization(); // 新 GameObject playAreaVisualization = CoreServices.BoundarySystem?.GetPlayAreaVisualization(); 如果将应用程序更改为使用其他服务注册商（例如：实验性服务管理器之一），则使用新的CoreSystem类将确保您的应用程序代码无需更新。 IMixedRealityRaycastProvider 通过添加IMixedRealityRaycastProvider，更改了输入系统配置配置文件。如果您具有自定义配置文件，则在运行应用程序时，您可能会在下图中收到错误。 要解决这些问题，请在输入系统配置文件中添加IMixedRealityRaycastProvider实例。 Event System ImixedRealityEventSystem 旧的API方法 Register 和 Unregister 已被标记为过时。保留它们是为了向后兼容。 InputSystemGlobalListener 已被标记为过时。它的功能没有改变。 BaseInputHandler 基类已从 InputSystemGlobalListener 更改为 InputSystemGlobalHandlerListener 。对于 BaseInputHandler 的任何继承来说，这是一个重大变化。 更改原因 旧的事件系统 API Register 和 Unregister 可能会在运行时导致多个问题，主要是： 如果组件注册了全局事件，它将接收所有类型的全局输入事件。 如果对象上的组件之一注册了全局输入事件，则该对象上的所有组件将接收所有类型的全局输入事件。 如果同一对象上的两个组件注册到全局事件，然后在运行时禁用一个组件，则第二个组件将停止接收全局事件。 新的API RegisterHandler 和 UnregisterHandler ： 提供一个明确的粒度控制，以控制哪些输入事件应在全局范围内侦听，哪些应基于焦点。 允许同一对象上的多个组件相互独立地侦听全局事件。 如何迁移 如果您之前直接调用过 Register / Unregister API ，请用对 RegisterHandler / UnregisterHandler 的调用替换这些调用。使用您实现为通用参数的处理程序接口。如果实现多个接口，并且其中几个监听全局输入事件，请多次调用 RegisterHandler 。 如果您一直从 InputSystemGlobalListener 继承，请将继承更改为 InputSystemGlobalHandlerListener 。实现 RegisterHandlers 和 UnregisterHandlers 抽象方法。在实现中，调用 inputSystem.RegisterHandler （ inputSystem.UnregisterHandler ）在要侦听全局事件的所有处理程序接口上注册。 如果您一直从 BaseInputHandler 继承，请实现 RegisterHandlers 和 UnregisterHandlers 抽象方法（与 InputSystemGlobalListener 相同） 迁移实例 // 旧 class SampleHandler : MonoBehaviour, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler { private void OnEnable() { InputSystem?.Register(gameObject); } private void OnDisable() { InputSystem?.Unregister(gameObject); } } // 迁移 class SampleHandler : MonoBehaviour, IMixedRealitySourceStateHandler, IMixedRealityHandJointHandler { private void OnEnable() { InputSystem?.RegisterHandler<IMixedRealitySourceStateHandler>(this); InputSystem?.RegisterHandler<IMixedRealityHandJointHandler>(this); } private void OnDisable() { InputSystem?.UnregisterHandler<IMixedRealitySourceStateHandler>(this); InputSystem?.UnregisterHandler<IMixedRealityHandJointHandler>(this); } } // 旧 class SampleHandler2 : InputSystemGlobalListener, IMixedRealitySpeechHandler { } // 迁移 class SampleHandler2 : InputSystemGlobalHandlerListener, IMixedRealitySpeechHandler { private void RegisterHandlers() { InputSystem?.RegisterHandler<IMixedRealitySpeechHandler>(this); } private void UnregisterHandlers() { InputSystem?.UnregisterHandler<IMixedRealitySpeechHandler>(this); } } // 可选迁移 class SampleHandler2 : MonoBehaviour, IMixedRealitySpeechHandler { private void OnEnable() { IMixedRealityInputSystem inputSystem; if (MixedRealityServiceRegistry.TryGetService<IMixedRealityInputSystem>(out inputSystem)) { inputSystem?.RegisterHandler<IMixedRealitySpeechHandler>(this); } } private void OnDisable() { IMixedRealityInputSystem inputSystem; if (MixedRealityServiceRegistry.TryGetService<IMixedRealityInputSystem>(out inputSystem)) { inputSystem?.UnregisterHandler<IMixedRealitySpeechHandler>(this); } } } Spatial Awareness IMixedRealitySpatialAwarenessSystem和IMixedRealitySpatialAwarenessObserver接口已进行了多个重大更改，如下所述。 更改 以下方法已重命名以更好地描述其用法。 IMixedRealitySpatialAwarenessSystem.CreateSpatialObjectParent 已重命名为 IMixedRealitySpatialAwarenessSystem.CreateSpatialAwarenessObservationParent ，以阐明其用法。 附加 根据客户的反馈，已添加了轻松删除以前观察到的空间感知数据的支持。 IMixedRealitySpatialAwarenessSystem.ClearObservations() IMixedRealitySpatialAwarenessSystem.ClearObservations<T>(string name) IMixedRealitySpatialAwarenessObserver.ClearObservations() Solvers 某些solver组件和SolverHandler管理器类已更改，以修复各种错误并实现更直观的用法。 SolverHandler 类不再从 ControllerFinder 扩展 不推荐使用 TrackedObjectToReference 公共属性，并将其重命名为 TrackedTargetType TrackedObjectType 弃用左右控制器值。而是使用 MotionController 或 HandJoint 值并更新新的 TrackedHandedness 属性以将跟踪限制为向左或向右控制器 InBetween 不推荐使用 TrackedObjectForSecondTransform 公共属性，并将其重命名为 SecondTrackedObjectType AttachSecondTransformToNewTrackedObject() 已被删除。要更新求解器，请修改公共属性（即 SecondTrackedObjectType ） SurfaceMagnetism MaxDistance 公共属性已弃用，并已重命名为 MaxRaycastDistance 不推荐使用 CloseDistance 公共属性，并将其重命名为 ClosestDistance 现在， RaycastDirectionMode 的默认值为 TrackedTargetForward ，它沿被跟踪目标向前的方向进行射线广播。 OrientationMode 枚举值 Vertical 和 Full 已分别重命名为 TrackedTarget 和 SurfaceNormal 添加了 KeepOrientationVertical 公共属性，以控制关联的 GameObject 的方向是否保持垂直 Buttons PressableButton 现在默认情况下将 DistanceSpaceMode 属性设置为 Local 。这允许在仍可按下的同时缩放按钮 Clipping Sphere ClippingSphere接口已更改，以反映在ClippingBox和ClippingPlane中找到的API。 现在，ClippingSphere的Radius属性是根据变换比例隐式计算的。在此之前，开发人员必须在检查器中指定ClippingSphere的半径。如果要更改半径，只需照常更新变换的变换比例即可。 NearInteractionTouchable and PokePointer NearInteractionTouchable不再处理Unity UI画布触摸。现在必须将NearInteractionTouchableUnityUI类用于Unity UI可触摸对象。 ColliderNearInteractionTouchable是基于碰撞器的可触摸对象的新基类，即除NearInteractionTouchableUnityUI之外的所有可触摸对象。 BaseNearInteractionTouchable.DistFront已被移动并重命名为PokePointer.TouchableDistance这是PokePointer可以与可触摸对象进行交互的距离。以前，每个可触摸对象都有其自己的最大交互距离，但是现在在PokePointer中定义了它，可以实现更好的优化。 BaseNearInteractionTouchable.DistBack已重命名为PokeThreshold。这清楚表明PokeThreshold是DebounceThreshold的副本。当超过PokeThreshold时激活可触摸，而当超过DebounceThreshold时释放可触摸。 ReadOnlyAttribute Microsoft.MixedReality.Toolkit 命名空间已添加到 ReadOnlyAttribute ， BeginReadOnlyGroupAttribute 和 EndReadOnlyGroupAttribute 。 PointerClickHandler 不推荐使用 PointerClickHandler 类。应该改用 PointerHandler ，它提供相同的功能。 HoloLens clicker support HoloLens clicker的控制器映射已从未经使用的 WindowsMixedRealityController 更改为未使用的 WindowsMixedRealityGGVHand .为此，您第一次打开ControllerMapping配置文件时将运行自动更新程序。升级到2.0.0后，请至少打开一次任何自定义配置文件，以触发此一次性迁移步骤。 InteractableHighlight 不推荐使用 InteractableHighlight 类。应该改用 InteractableOnFocus 类和 FocusInteractableStates 资源。要为 InteractableOnFocus 创建新的主题资源，请在项目窗口中右键单击，然后选择 Create > Mixed Reality Toolkit > Interactable > Theme . HandInteractionPanZoom HandInteractionPanZoom 已移动到UI命名空间，因为它不是输入组件。 HandPanEventData 也已移入该名称空间，并经过简化以与其他UI事件数据相对应。 程序集名称在2.0.0中更改 在2.0.0版中，所有正式的Mixed Reality Toolkit程序集名称及其关联的程序集定义（.asmdef）文件均已更新，以适应以下模式。 Microsoft.MixedReality.Toolkit[.<name>] 在某些情况下，多个程序集已合并以创建其内容更好的统一性。如果您的项目使用自定义.asmdef文件，则可能需要更新。 下表描述了RC2 .asmdef文件名如何映射到2.0.0版本。所有程序集名称均与.asmdef文件名匹配。 MixedRealityToolkit RC2 2.0.0 MixedRealityToolkit.asmdef Microsoft.MixedReality.Toolkit.asmdef MixedRealityToolkit.Core.BuildAndDeploy.asmdef Microsoft.MixedReality.Toolkit.Editor.BuildAndDeploy.asmdef MixedRealityToolkit.Core.Definitions.Utilities.Editor.asmdef Removed, use Microsoft.MixedReality.Toolkit.Editor.Utilities.asmdef MixedRealityToolkit.Core.Extensions.EditorClassExtensions.asmdef Microsoft.MixedReality.Toolkit.Editor.ClassExtensions.asmdef MixedRealityToolkit.Core.Inspectors.asmdef Microsoft.MixedReality.Toolkit.Editor.Inspectors.asmdef MixedRealityToolkit.Core.Inspectors.ServiceInspectors.asmdef Microsoft.MixedReality.Toolkit.Editor.ServiceInspectors.asmdef MixedRealityToolkit.Core.UtilitiesAsync.asmdef Microsoft.MixedReality.Toolkit.Async.asmdef MixedRealityToolkit.Core.Utilities.Editor.asmdef Microsoft.MixedReality.Toolkit.Editor.Utilities.asmdef MixedRealityToolkit.Utilities.Gltf.asmdef Microsoft.MixedReality.Toolkit.Gltf.asmdef MixedRealityToolkit.Utilities.Gltf.Importers.asmdef Microsoft.MixedReality.Toolkit.Gltf.Importers.asmdef MixedRealityToolkit.Providers RC2 2.0.0 MixedRealityToolkit.Providers.OpenVR.asmdef Microsoft.MixedReality.Toolkit.Providers.OpenVR.asmdef MixedRealityToolkit.Providers.WindowsMixedReality.asmdef Microsoft.MixedReality.Toolkit.Providers.WindowsMixedReality.asmdef MixedRealityToolkit.Providers.WindowsVoiceInput.asmdef Microsoft.MixedReality.Toolkit.Providers.WindowsVoiceInput.asmdef MixedRealityToolkit.Services RC2 2.0.0 MixedRealityToolkit.Services.BoundarySystem.asmdef Microsoft.MixedReality.Toolkit.Services.BoundarySystem.asmdef MixedRealityToolkit.Services.CameraSystem.asmdef Microsoft.MixedReality.Toolkit.Services.CameraSystem.asmdef MixedRealityToolkit.Services.DiagnosticsSystem.asmdef Microsoft.MixedReality.Toolkit.Services.DiagnosticsSystem.asmdef MixedRealityToolkit.Services.InputSimulation.asmdef Microsoft.MixedReality.Toolkit.Services.InputSimulation.asmdef MixedRealityToolkit.Services.InputSimulation.Editor.asmdef Microsoft.MixedReality.Toolkit.Services.InputSimulation.Editor.asmdef MixedRealityToolkit.Services.InputSystem.asmdef Microsoft.MixedReality.Toolkit.Services.InputSystem.asmdef MixedRealityToolkit.Services.Inspectors.asmdef Microsoft.MixedReality.Toolkit.Services.InputSystem.Editor.asmdef MixedRealityToolkit.Services.SceneSystem.asmdef Microsoft.MixedReality.Toolkit.Services.SceneSystem.asmdef MixedRealityToolkit.Services.SpatialAwarenessSystem.asmdef Microsoft.MixedReality.Toolkit.Services.SpatialAwarenessSystem.asmdef MixedRealityToolkit.Services.TeleportSystem.asmdef Microsoft.MixedReality.Toolkit.Services.TeleportSystem.asmdef MixedRealityToolkit.SDK RC2 2.0.0 MixedRealityToolkit.SDK.asmdef Microsoft.MixedReality.Toolkit.SDK.asmdef MixedRealityToolkit.SDK.Inspectors.asmdef Microsoft.MixedReality.Toolkit.SDK.Inspectors.asmdef MixedRealityToolkit.Examples RC2 2.0.0 MixedRealityToolkit.Examples.asmdef Microsoft.MixedReality.Toolkit.Examples.asmdef MixedRealityToolkit.Examples.Demos.Gltf.asmdef Microsoft.MixedReality.Toolkit.Demos.Gltf.asmdef MixedRealityToolkit.Examples.Demos.StandardShader.Inspectors.asmdef Microsoft.MixedReality.Toolkit.Demos.StandardShader.Inspectors.asmdef MixedRealityToolkit.Examples.Demos.Utilities.InspectorFields.asmdef Microsoft.MixedReality.Toolkit.Demos.InspectorFields.asmdef MixedRealityToolkit.Examples.Demos.Utilities.InspectorFields.Inspectors.asmdef Microsoft.MixedReality.Toolkit.Demos.InspectorFields.Inspectors.asmdef MixedRealityToolkit.Examples.Demos.UX.Interactables.asmdef Microsoft.MixedReality.Toolkit.Demos.UX.Interactables.asmdef"
  },
  "Documentation/VisualThemes.html": {
    "href": "Documentation/VisualThemes.html",
    "title": "Visual Themes | Mixed Reality Toolkit Documentation",
    "keywords": "Visual Themes Themes allow for flexible control of UX assets in response to various states transitions. This may involve changing a button's color, resizing an element in response to focus, etc. The Visual Themes framework is made up of two key pieces: 1) configuration and 2) runtime engines. Theme configurations are definitions of properties and types while Theme Engines are classes that consume the configurations and implement the logic to update transforms, materials, and more at runtime. Theme configuration Theme configurations are ScriptableObjects that define how Theme Engines will be initialized at runtime. They define what properties and values to utilize in response to input or other state changes when the app is running. As ScriptableObjects assets, theme configurations can be defined once and then re-used across different UX components. To create a new Theme asset: Right click in the Project Window Select Create > Mixed Reality Toolkit > Theme Example Theme configuration assets can be found under MixedRealityToolkit.SDK/Features/UX/Interactable/Themes . States When creating a new Theme , the first thing to set is what states are available. The States property indicates how many values a Theme configuration needs to define as there will be one value per state. In the example image above, the default states defined for the Interactable component are Default , Focus , Pressed , and Disabled . These are defined in the DefaultInteractableStates asset file. To create a new State asset: Right click in the Project Window Select Create > Mixed Reality Toolkit > State A State ScriptableObject defines both the list of states as well as the type of StateModel to create for these states. A StateModel is a class that extends BaseStateModel and implements the state machine logic to generate the current state at runtime. The current state from this class is generally used by Theme Engines at runtime to dictate what values to set against material properties, GameObject transforms, and more. Theme Engine properties Outside of States , a Theme asset also defines a list of Theme Engines and the associated properties for these engines. A Theme engine again defines the logic to set the correct values against a GameObject at runtime. A Theme asset can define multiple Theme Engines to achieve sophisticated visual states transitions targeting multiple GameObject properties. Theme Runtime Defines the class type of the Theme engine that will be created Easing Some Theme Engines , if they define their property IsEasingSupported as true, support easing between states. For example, lerping between two colors when a state change occurs. The Duration defines in seconds how long to ease from start value to end value and the Animation Curve defines the rate of change during that time period. Shader properties Some Theme Engines , if they define their property AreShadersSupported as true, will modify particular shader properties at runtime. The Shader and Property fields define the shader property to target. Create a theme configuration via code In general, it is easier to design Theme configurations via the Unity inspector but there are cases where Themes must be dynamically generated at runtime via code. The code snippet below gives an example of how to accomplish this task. To help expedite development, the following helper methods are useful for simplifying setup. Interactable.GetDefaultInteractableStates() - creates a new States ScriptableObject with the four default state values used in the Interactable component. ThemeDefinition.GetDefaultThemeDefinition<T>() - Every Theme Engine defines a default configuration with the correct properties needed for that Theme runtime type. This helper creates a definition for the given Theme Engine type. // This code example builds a Theme ScriptableObject that can be used with an Interactable component. // A random color is selected for the on pressed state every time this code is executed. // Use the default states utilized in the Interactable component var defaultStates = Interactable.GetDefaultInteractableStates(); // Get the default configuration for the Theme engine InteractableColorTheme var newThemeType = ThemeDefinition.GetDefaultThemeDefinition<InteractableColorTheme>().Value; // Define a color for every state in our Default Interactable States newThemeType.StateProperties[0].Values = new List<ThemePropertyValue>() { new ThemePropertyValue() { Color = Color.black}, // Default new ThemePropertyValue() { Color = Color.black}, // Focus new ThemePropertyValue() { Color = Random.ColorHSV()}, // Pressed new ThemePropertyValue() { Color = Color.black}, // Disabled }; // Create the Theme configuration asset Theme testTheme = ScriptableObject.CreateInstance<Theme>(); testTheme.States = defaultStates; testTheme.Definitions = new List<ThemeDefinition>() { newThemeType }; Theme Engines A Theme Engine is a class that extends from the InteractableThemeBase class. These classes are instantiated at runtime and configured with a ThemeDefinition object as outlined earlier. Default Theme Engines MRTK ships with a default set of Theme Engines listed below: InteractableActivateTheme InteractableAnimatorTheme InteractableAudioTheme InteractableColorChildrenTheme InteractableColorTheme InteractableGrabScaleTheme InteractableMaterialTheme InteractableOffsetTheme InteractableRotationTheme InteractableScaleTheme InteractableShaderTheme InteractableStringTheme InteractableTextureTheme ScaleOffsetColorTheme The default Theme Engines can be found under MixedRealityToolkit.SDK/Features/UX/Scripts/VisualThemes/ThemeEngines . Custom Theme Engines As stated, a Theme Engine is defined as a class that extends from the InteractableThemeBase class. Thus, new Theme Engine need only extend this class and implement the following: Mandatory implementations public abstract void SetValue(ThemeStateProperty property, int index, float percentage) (xref:Microsoft.MixedReality.Toolkit.UI.InteractableThemeBase.SetValue) For the given property, which can be identified by ThemeStateProperty.Name , set its current state value on the targeted GameObject host (i.e set the material color, etc). The index indicates the current state value to access and the percentage , a float between 0 and 1, is used for easing/lerping between values. public abstract ThemePropertyValue GetProperty(ThemeStateProperty property) (xref:Microsoft.MixedReality.Toolkit.UI.InteractableThemeBase.GetProperty) For the given property, which can be identified by ThemeStateProperty.Name , return the current value set on the targeted Host GameObject (i.e the current material color, the current local position offset, etc). This is primarily used for caching the start value when easing between states. public abstract ThemeDefinition GetDefaultThemeDefinition() (xref:Microsoft.MixedReality.Toolkit.UI.InteractableThemeBase.GetDefaultThemeDefinition) Returns a ThemeDefinition object that defines the default properties and configuration needed for the custom theme Recommended overrides InteractableThemeBase.Init(GameObject host, ThemeDefinition settings) Perform any initialization steps here targeting the provided GameObject parameter and using the properties and configurations defined in the ThemeDefinition parameter. It is recommended to call base.Init(host, settings) at the beginning of an override. InteractableThemeBase.IsEasingSupported If the custom Theme Engine can support easing between values which is configured via the ThemeDefinition.Easing property. InteractableThemeBase.AreShadersSupported If the custom Theme Engine can support targeting shader properties. It is recommended to extend from InteractableShaderTheme to benefit from the existing infrastructure to efficiently set/get shader properties via MaterialPropertyBlocks . The shader property information is stored in each ThemeStateProperty via ThemeStateProperty.TargetShader and ThemeStateProperty.ShaderPropertyName . Note If extending InteractableShaderTheme , it can also be useful to override the InteractableShaderTheme.DefaultShaderProperty via new . Example code: protected new const string DefaultShaderProperty = \"_Color\"; Furthermore, the following classes below extend the InteractableShaderTheme class which again uses MaterialPropertyBlocks to modify shader property values. This approach helps performance because MaterialPropertyBlocks do not create new instanced materials when values change. However, accessing the typical Material class properties will not return expected values. Use MaterialPropertyBlocks to get and validate current material property values (i.e _Color or _MainTex ). InteractableColorChildrenTheme InteractableColorTheme InteractableTextureTheme ScaleOffsetColorTheme Custom Theme Engine example The class below is an example of a custom new Theme Engine. This implementation will find a MeshRenderer component on the initialized host object and control its visibility based on the current state. using Microsoft.MixedReality.Toolkit.UI; using System; using System.Collections.Generic; using UnityEngine; // This class demonstrates a custom theme to control a Host's MeshRenderer visibility public class MeshVisibilityTheme : InteractableThemeBase { // Bool visibility does not make sense for lerping public override bool IsEasingSupported => false; // No material or shaders are being modified public override bool AreShadersSupported => false; // Cache reference to the MeshRenderer component on our Host private MeshRenderer meshRenderer; public MeshVisibilityTheme() { Types = new Type[] { typeof(MeshRenderer) }; Name = \"Mesh Visibility Theme\"; } // Define a default configuration to simplify initialization of this theme engine // There is only one state property with a value per available state // This state property is a boolean that defines whether the renderer is enabled public override ThemeDefinition GetDefaultThemeDefinition() { return new ThemeDefinition() { ThemeType = GetType(), StateProperties = new List<ThemeStateProperty>() { new ThemeStateProperty() { Name = \"Mesh Visible\", Type = ThemePropertyTypes.Bool, Values = new List<ThemePropertyValue>(), Default = new ThemePropertyValue() { Bool = true } }, }, CustomProperties = new List<ThemeProperty>() }; } // When initializing, cache a reference to the MeshRenderer component public override void Init(GameObject host, ThemeDefinition definition) { base.Init(host, definition); meshRenderer = host.GetComponent<MeshRenderer>(); } // Get the current state of the MeshRenderer visibility public override ThemePropertyValue GetProperty(ThemeStateProperty property) { return new ThemePropertyValue() { Bool = meshRenderer.enabled }; } // Update the MeshRenderer visibility based on the property state value data public override void SetValue(ThemeStateProperty property, int index, float percentage) { meshRenderer.enabled = property.Values[index].Bool; } } End-to-end example Extending off of the custom Theme Engine defined in the earlier section, the code example below demonstrates how to control this theme at runtime. In particular, how to set the current state on the theme so the MeshRenderer visibility is updated appropriately. Note theme.OnUpdate(state,force) should generally be called in the Update() method to support Theme Engines that utilize easing/lerping between values. using Microsoft.MixedReality.Toolkit.UI; using System; using System.Collections.Generic; using UnityEngine; public class MeshVisibilityController : MonoBehaviour { private MeshVisibilityTheme themeEngine; private bool hideMesh = false; private void Start() { // Define the default configuration. State 0 will be on while State 1 will be off var themeDefinition = ThemeDefinition.GetDefaultThemeDefinition<MeshVisibilityTheme>().Value; themeDefinition.StateProperties[0].Values = new List<ThemePropertyValue>() { new ThemePropertyValue() { Bool = true }, // show state new ThemePropertyValue() { Bool = false }, // hide state }; // Create the actual Theme engine and initialize it with the GameObject we are attached to themeEngine = (MeshVisibilityTheme)InteractableThemeBase.CreateAndInitTheme(themeDefinition, this.gameObject); } private void Update() { // Update the theme engine to set our MeshRenderer visibility // based on our current state (i.e the hideMesh variable) themeEngine.OnUpdate(Convert.ToInt32(hideMesh)); } public void ToggleVisibility() { // Alternate state of visibility hideMesh = !hideMesh; } } See also Interactable"
  },
  "Documentation/Diagnostics/DiagnosticsSystemGettingStarted.html": {
    "href": "Documentation/Diagnostics/DiagnosticsSystemGettingStarted.html",
    "title": "Diagnostic System (诊断系统) | Mixed Reality Toolkit Documentation",
    "keywords": "Diagnostic System (诊断系统) 混合现实工具包诊断系统（Mixed Reality Toolkit Diagnostic System）提供了在应用程序中运行的诊断工具，以能够分析应用程序问题。 诊断系统的第一版包含 可视分析器 以便在使用应用程序时分析性能问题。 入门 [!重要] 强烈 建议在整个产品开发周期中启用诊断系统，并在构建和发布最终版本之前将其禁用作为最后更改。 要开始使用诊断系统，有两个关键步骤。 启用 诊断系统 配置 诊断选项 启用诊断系统 诊断系统由MixedRealityToolkit对象（或其他 服务注册者 组件）管理。 以下步骤假定使用MixedRealityToolkit对象。其他服务注册者所需的步骤可能有所不同。 在场景层次中选择MixedRealityToolkit对象。 将“Inspector”面板导航到“Diagnostics 选择Diagnostics System [!注意] 默认配置文件的用户 DefaultMixedRealityToolkitConfigurationProfile ,将诊断系统预先配置为使用 MixedRealityDiagnosticsSystem 对象. 配置诊断选项 诊断系统使用配置文件来指定要显示的组件并配置它们的设置。请参见 配置诊断系统 查看与可用组件设置有关的更多信息。 [!重要] 尽管可以在开发应用程序时使用Unity的Play模式而不需要构建和部署步骤，但重要的是使用在目标硬件和平台上运行的编译应用程序来评估诊断系统的结果。 性能诊断，例如 可视分析器 从编辑器中运行时，可能无法准确反映实际的应用程序性能。 建议浏览 诊断系统API文档 配置诊断系统 使用可视分析器"
  },
  "Documentation/Diagnostics/UsingVisualProfiler.html": {
    "href": "Documentation/Diagnostics/UsingVisualProfiler.html",
    "title": "使用可视化分析器 | Mixed Reality Toolkit Documentation",
    "keywords": "使用可视化分析器 可视化分析器（Visual Profiler）为混合现实应用程序的性能提供了易于使用的 应用程序内部的视图。所有混合现实工具包平台均支持分析器，包括： Microsoft HoloLens（第一代） Microsoft HoloLens 2 Windows Mixed Reality沉浸式头显 OpenVR 在开发应用程序时，当可视化分析器显示与当前视图相关的数据时，要关注场景的多个部分。 [!重要] 将注意力集中在场景中具有复杂对象，粒子效果或活动的部分。这些因素和其他因素通常会导致应用程序性能下降和不理想的用户体验。 可视化分析器接口 The Visual Profiler interface includes the following components: 帧率 每帧时间 帧率图 内存利用率 帧率 界面的左上角是帧率，以每秒帧数为单位。为了获得最佳的用户体验和舒适度，该值应尽可能高。 特定的平台和硬件配置将在最大可达到的帧率中扮演重要角色。一些常见的目标值包括： 微软HoloLens：60 Windows Mixed Reality Ultra: 90 每帧时间 帧率的右侧是在CPU上花费的每帧时间（以毫秒为单位）。为了达到前面提到的目标帧率，应用程序可以每帧花费以下时间： 60 fps：16.6毫秒 90 fps：11.1毫秒 计划在将来的版本中增加GPU时间。 帧率图 帧图提供了应用程序帧率历史的图形显示。 使用该应用程序时，寻找丢失的帧（missed frames），这些帧表示该应用程序未达到其目标帧率，可能需要优化工作。 内存利用率 显示内存利用率可以轻松了解当前视图如何影响应用程序的内存消耗。 使用该应用程序时，请查找总内存使用量。关键指标包括接近内存限制和使用率的快速变化。 自定义可视化分析器 可通过诊断系统配置文件自定义可视化分析器的外观和行为。请参见 配置诊断系统 获取更多的信息。 建议浏览 诊断系统 配置诊断系统"
  },
  "Documentation/Extensions/ExtensionServices.html": {
    "href": "Documentation/Extensions/ExtensionServices.html",
    "title": "Extension services | Mixed Reality Toolkit Documentation",
    "keywords": "Extension services Extension services are components that extend the functionality of the Mixed Reality Toolkit. These services may be provided by the MRTK or by other parties. Creating an extension service The most efficient way to create an extension service is to use the extension service creation wizard . To start the extension service creation wizard, select Mixed Reality Toolkit > Utilities > Create Extension Service . The wizard automates the creation of the service components and ensures the proper interface inheritance. Note In MRTK version 2.0.0, there is an issue in the extension service wizard where the service inspector and service profile are required to be generated. Please see issue 5654 for more information. When the wizard completes, the service functionality can be implemented. Registering an extension service To be accessible by an application, the new extension service needs to be registered with the Mixed Reality Toolkit. The extension service creation wizard can be used to register the service. The service can also be manually registered using the Mixed Reality Toolkit configuration inspector. If the extension service uses a profile, please ensure that it is specified in the inspector. The component name and priority can also be adjusted. Accessing an extension service Extension services are accessed, in code, using the MixedRealityServiceRegistry as shown in the example below. INewService service = null; if (MixedRealityServiceRegistry.TryGetService<INewService>(out service)) { // Succeeded in getting the service, perform any desired tasks. } See Also Systems, extension services and data providers Extension service creation wizard IMixedRealityExtensionService MixedRealityServiceRegistry"
  },
  "Documentation/Extensions/SceneTransitionService/SceneTransitionServiceOverview.html": {
    "href": "Documentation/Extensions/SceneTransitionService/SceneTransitionServiceOverview.html",
    "title": "Scene Transition Service (场景过渡服务) | Mixed Reality Toolkit Documentation",
    "keywords": "Scene Transition Service (场景过渡服务) 该扩展简化了淡出场景，显示进度指示器，加载场景然后淡入的业务。 场景操作由SceneSystem服务驱动，但是任何基于任务的操作都可以用来驱动过渡操作。 Enabling the extension (启用扩展) 要启用扩展，请打开您的RegisteredServiceProvider配置文件。单击注册新服务提供者（Register a new Service Provider）以添加新配置。在“Component Type”字段中，选择“ SceneTransitionService”。在“Configuration Profile”字段中，选择default scene transition profile included with the extension。 配置文件选项 Use Default Progress Indicator (使用默认进度指示器) 如果选中，则在调用 DoSceneTransition 时未提供任何进度指示器对象时，将使用默认进度指示器预制体。如果提供了进度指示器对象，则默认设置将被忽略。 Use Fade Color (使用淡入淡出) 如果选中，过渡服务将在过渡期间应用淡入淡出。可以在运行时通过服务的 UseFadeColor 属性更改此设置。 Fade Color (淡入淡出颜色 ) 控制淡入淡出效果的颜色。Alpha被忽略。可以在在运行时且过渡之前通过服务的 FadeColor 属性更改此设置。 Fade Targets (淡入淡出目标) 控制将对它们应用淡入淡出效果的摄像机。可以在运行时通过服务的 FadeTargets 属性更改此设置。 设置 目标相机 Main 对主相机应用淡入淡出效果。 UI 将淡入淡出效果应用于UI层上的相机。（不影响覆盖UI） All 适用于主摄像机和UI摄像机。 Custom 适用于通过 SetCustomFadeTargetCameras 提供的一组自定义摄像机 Fade Out Time / Fade In Time (淡出时间/淡入时间 ) 进入/退出过渡时淡入淡出持续时间的默认设置。可以在运行时通过服务的 FadeOutTime 和 FadeInTime 属性更改这些设置 Camera Fader Type (相机淡入淡出类型) 使用哪个 ICameraFader 类用于向相机应用淡入淡出效果。默认的 CameraFaderQuad 类实例化一个quad，该quad在目标摄影机前面靠近剪切平面的位置使用透明材质。另一种方法可能是使用post effects系统。 Using the Extension (使用扩展) 您可以通过传递相机淡出时运行的任务来使用转换服务。 Using Scene System Tasks (使用场景系统任务) 在大多数情况下，您将使用SceneSystem服务提供的任务： private async void TransitionToScene() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); ISceneTransitionService transition = MixedRealityToolkit.Instance.GetService<ISceneTransitionService>(); //淡出 //运行LoadContent任务 //淡入 await transition.DoSceneTransition( () => sceneSystem.LoadContent(\"TestScene1\") ); } 使用自定义任务 在其他情况下，您可能想要执行淡入淡出而没有实际加载场景： private async void TransitionToScene() { ISceneTransitionService transition = MixedRealityToolkit.Instance.GetService<ISceneTransitionService>(); //淡出 //重置场景 //淡入 await transition.DoSceneTransition( () => ResetScene() ); } private async Task ResetScene() { //遍历当前场景中的所有敌人并将它们移回起始位置 } 或者，您可能想加载场景而不使用SceneSystem服务： private async void TransitionToScene() { ISceneTransitionService transition = MixedRealityToolkit.Instance.GetService<ISceneTransitionService>(); //淡出 //使用Unity的场景管理器加载场景 //淡入 await transition.DoSceneTransition( () => LoadScene(\"TestScene1\") ); } private async Task LoadScene(string sceneName) { AsyncOperation asyncOp = SceneManager.LoadSceneAsync(sceneName, LoadSceneMode.Additive); while (!asyncOp.isDone) { await Task.Yield(); } } 使用多个任务 You can also supply multiple tasks, which will be executed in order: private async void TransitionToScene() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); ISceneTransitionService transition = MixedRealityToolkit.Instance.GetService<ISceneTransitionService>(); //淡出 //将时间刻度设置为0 //将音频淡入0 //加载TestScene1 //音频衰减为1 //将时间刻度设置为1 //淡入 await transition.DoSceneTransition( () => SetTimescale(0f), () => FadeAudio(0f, 1f), () => sceneSystem.LoadContent(\"TestScene1\"), () => FadeAudio(1f, 1f), () => SetTimescale(1f) ); } private async Task SetTimescale(float targetTime) { Time.timeScale = targetTime; await Task.Yield(); } private async Task FadeAudio(float targetVolume, float duration) { float startTime = Time.realtimeSinceStartup; float startVolume = AudioListener.volume; while (Time.realtimeSinceStartup < startTime + duration) { AudioListener.volume = Mathf.Lerp(startVolume, targetVolume, Time.realtimeSinceStartup - startTime / duration); await Task.Yield(); } AudioListener.volume = targetVolume; } Using the Progress Indicator (使用进度指示器) 如果在SceneTransitionService配置文件中选中 UseDefaultProgressIndicator ，则过渡开始时将实例化进度指示器。在过渡期间，可以通过该服务的 SetProgressValue 和 SetProgressMessage 方法访问该指标的 Progress 和 Message 属性。 private async void TransitionToScene() { IMixedRealitySceneSystem sceneSystem = MixedRealityToolkit.Instance.GetService<IMixedRealitySceneSystem>(); ISceneTransitionService transition = MixedRealityToolkit.Instance.GetService<ISceneTransitionService>(); ListenToSceneTransition(sceneSystem, transition); await transition.DoSceneTransition( () => sceneSystem.LoadContent(\"TestScene1\") ); } private async void ListenToSceneTransition(IMixedRealitySceneSystem sceneSystem, ISceneTransitionService transition) { transition.SetProgressMessage(\"Starting transition...\"); while (transition.TransitionInProgress) { if (sceneSystem.SceneOperationInProgress) { transition.SetProgressMessage(\"Loading scene...\"); transition.SetProgressValue(sceneSystem.SceneOperationProgress); } else { transition.SetProgressMessage(\"Finished loading scene...\"); transition.SetProgressValue(1); } await Task.Yield(); } } 或者，在调用 DoSceneTransition 时，您可以通过可选的 progressIndicator 参数提供自己的进度指示器。这将覆盖默认进度指示器。"
  },
  "Documentation/EyeTracking/EyeTracking_BasicSetup.html": {
    "href": "Documentation/EyeTracking/EyeTracking_BasicSetup.html",
    "title": "Getting started with eye tracking in MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "Getting started with eye tracking in MRTK This page covers how to set up your Unity MRTK scene to use eye tracking in your app. The following assumes you are starting out with a fresh new scene. Alternatively, you can check out our already configured MRTK eye tracking examples with tons of great examples that you can directly build on. Eye tracking requirements checklist For eye tracking to work correctly, the following requirements must be met. If you are new to eye tracking on HoloLens 2 and to how eye tracking is set up in MRTK, don't worry! We will go into detail on how to address each of them further below. An 'Eye Gaze Data Provider' must be added to the input system. This provides eye tracking data from the platform. The GazeProvider must have its 'Use Eye Tracking' property set to true. Note that true is the default value (so no special action is required unless you have actively unchecked this property.) The 'GazeInput' capability must be enabled in the application manifest. Currently this is only available in Visual Studio and through the MRTK build tool The HoloLens must be eye calibrated for the current user. Check out our sample for detecting whether a user is eye calibrated or not . IMPORTANT: If any of the above requirements are not met, the application will automatically fall back to head-based gaze tracking. A note on the GazeInput capability The MRTK-provided build tooling (i.e. Mixed Reality Toolkit -> Utilities -> Build Window) can automatically enable the GazeInput capability for you. In order to do this, you need to make sure that the 'Gaze Input Capability' is checked on the 'Appx Build Options' tab: This tooling will find the AppX manifest after the Unity build is completed and manually add the GazeInput capability. Note that this tooling is NOT active when using Unity's built-in Build Window (i.e. File -> Build Settings). When using Unity's build window, the capability will need to manually added after the Unity build. Setting up eye tracking step-by-step Setting up the scene Set up the MixedRealityToolkit by simply clicking 'Mixed Reality Toolkit -> Configure…' in the menu bar. Setting up the MRTK profiles required for eye tracking After setting up your MRTK scene, you will be asked to choose a profile for MRTK. You can simply select DefaultMixedRealityToolkitConfigurationProfile and then select the 'Copy & Customize' option. Create an \"Eye Gaze Data Provider\" Click on the 'Input' tab in your MRTK profile. To edit the default one ( 'DefaultMixedRealityInputSystemProfile' ), click the 'Clone' button next to it. A 'Clone Profile' menu appears. Simply click on 'Clone' at the bottom of that menu. Double click on your new input profile and select '+ Add Data Provider' . Create a new data provider: Under Type select 'Microsoft.MixedReality.Toolkit.WindowsMixedReality.Input' -> 'WindowsMixedRealityEyeGazeDataProvider' For Platform(s) select 'Windows Universal' . Enabling eye tracking in the GazeProvider In HoloLens v1, head gaze was used as primary pointing technique. While head gaze is still available via the GazeProvider in MRTK which is attached to your Camera , you can check to use eye gaze instead by ticking the 'UseEyeTracking' checkbox as shown in the screenshot below. NOTE: Developers can toggle between eye tracking and head tracking in code by changing the 'UseEyeTracking' property of 'GazeProvider' . Simulating eye tracking in the Unity Editor You can simulate eye tracking input in the Unity Editor to ensure that events are correctly triggered before deploying the app to your HoloLens 2. The eye gaze signal is simulated by simply using the camera's location as eye gaze origin and the camera's forward vector as eye gaze direction. While this is great for initial testing, please note that it is not a good imitation for rapid eye movements. For this, it is better to ensure frequent tests of your eye-based interactions on the HoloLens 2. Enable simulated eye tracking : Click on the 'Input' tab in your MRTK configuration profile. From there, navigate to 'Input Data Providers' -> 'Input Simulation Service' . Check the 'Simulate Eye Position' checkbox. Disable default head gaze cursor : In general, it is recommended to avoid showing an eye gaze cursor or if absolutely required to make it very subtle. We do recommend to hide the default head gaze cursor that is attached to the MRTK gaze pointer profile by default. Navigate to your MRTK configuration profile -> 'Input' -> 'Pointers' Clone the 'DefaultMixedRealityInputPointerProfile' to make changes to it. At the top of the 'Pointer Settings' , you should assign an invisible cursor prefab to the 'GazeCursor' . If you downloaded the MRTK Examples folder, you can simply reference the included 'EyeGazeCursor' prefab. Accessing eye gaze data Now that your scene is set up to use eye tracking, let's take a look at how to access it in your scripts: Accessing eye tracking data via EyeGazeProvider and eye-supported target selections . Testing your Unity app on a HoloLens 2 Building your app with eye tracking should be similar to how you would compile other HoloLens 2 MRTK apps. The only difference is that the 'Gaze Input' capability is unfortunately not yet supported by Unity under 'Player Settings -> Publishing Settings -> Capabilities'. To use eye tracking on your HoloLens 2 device, you need to manually edit the package manifest that is part of your built Visual Studio project. Follow these steps: Build your Unity project as you would normally do for HoloLens 2 . Open your compiled Visual Studio project and then open the 'Package.appxmanifest' in your solution. Make sure to tick the 'GazeInput' checkbox under Capabilities . Please note: You only have to do this if you build into a new build folder. This means that if you had already built your Unity project and set up the appxmanifest before and now target the same folder again, the appxmanifest should stay untouched. You don't see a 'GazeInput' capability? Check that your system meets the prerequisites for using MRTK (in particular the Windows SDK version). You can also manually add the entry by opening the appxmanifest in an XML editor and adding the following: <Capabilities> <DeviceCapability Name=\"gazeInput\" /> </Capabilities> Eye calibration Finally, please don't forget to run through the eye calibration on your HoloLens 2. The eye tracking system will not return any input if the user is not calibrated. Easiest way to get to the calibration is by flipping up the visor and back down. A system notification should appear welcoming you as a new user and asking you to go through the eye calibration. Alternatively you can find the eye calibration in the system settings: Settings > System > Calibration > Run eye calibration. Eye tracking permission When starting the app on your HoloLens 2 for the first time, a prompt should pop up asking the user for permission to use eye tracking. If it is not showing up, then that is usually an indication that the 'GazeInput' capability was not set. After the permission prompt showed up once, it will not show up automatically again. If you \"denied eye tracking permission\" , you can reset this in Settings -> Privacy -> Apps. This should get you started with using eye tracking in your MRTK Unity app. Don't forget to check out our MRTK eye tracking tutorials and samples demonstrating how to use eye tracking input and conveniently providing scripts that you can reuse in your projects. Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/EyeTracking/EyeTracking_ExamplesOverview.html": {
    "href": "Documentation/EyeTracking/EyeTracking_ExamplesOverview.html",
    "title": "Eye tracking examples in MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "Eye tracking examples in MRTK This topic describes how to quickly get started with eye tracking in MRTK by building on MRTK eye tracking examples . These samples let you experience one of our new magical input capabilities: Eye tracking ! The demo includes various use cases, ranging from implicit eye-based activations to how to seamlessly combine information about what you are looking at with voice and hand input. This enables users to quickly and effortlessly select and move holographic content across their view simply by looking at a target and saying 'Select' or performing a hand gesture. The demos also include an example for eye-gaze-directed scroll, pan and zoom of text and images on a slate. Finally, an example is provided for recording and visualizing the user's visual attention on a 2D slate. In the following section, you will find more details on what each of the different samples in the MRTK eye tracking example package includes: The following section is a quick overview of what the individual eye tracking demo scenes are about. The MRTK eye tracking demo scenes are loaded additively , which we will explain below how to set up. Overview of the eye tracking demo samples Eye-Supported Target Selection This tutorial showcases the ease of accessing eye gaze data to select targets. It includes an example for subtle yet powerful feedback to provide the user with the confidence that a target is focused without being overwhelming. In addition, there is a simple example of smart notifications that automatically disappear after being read. Summary : Fast and effortless target selections using a combination of eyes, voice and hand input. Eye-Supported Navigation Imagine that you are reading some information on a distant display or your e-reader and when you reach the end of the displayed text, the text automatically scrolls up to reveal more content. Or how about magically zooming directly toward where you were looking at? These are some of the examples showcased in this tutorial regarding eye-supported navigation. In addition, there is an example for hands-free rotation of 3D holograms by making them automatically rotate based on your current focus. Summary : Scroll, pan, zoom, 3D rotation using a combination of eyes, voice and hand input. Eye-Supported Positioning This tutorial shows an input scenario called Put-That-There dating back to research from the MIT Media Lab in the early 1980's with eye, hand and voice input. The idea is simple: Benefit from your eyes for fast target selection and positioning. Simply look at a hologram and say 'put this' , look over where you want to place it and say 'there!' . For more precisely positioning your hologram, you can use additional input from your hands, voice or controllers. Summary : Positioning holograms using eyes, voice and hand input ( drag-and-drop ). Eye-supported sliders using eyes + hands. Visualization of Visual Attention Data based on where users look makes an immensely powerful tool to assess usability of a design and to identify problems in efficient work streams. This tutorial discusses different eye tracking visualizations and how they fit different needs. We provide basic examples for logging and loading eye tracking data and examples for how to visualize them. Summary : Two-dimensional attention map (heatmaps) on slates. Recording & replaying eye tracking data. Setting up the MRTK eye tracking samples Prerequisites Note that using the eye tracking samples on device requires a HoloLens 2 and a sample app package that is built with the \"Gaze Input\" capability on the package's AppXManifest. In order to use these eye tracking samples on device, make sure to follow these steps prior to building the app in Visual Studio. 1. Load EyeTrackingDemo-00-RootScene.unity The EyeTrackingDemo-00-RootScene is the base ( root ) scene that has all the core MRTK components included. This is the scene that you need to load first and from which you will run the eye tracking demos. It features a graphical scene menu that allows you to easily switch between the different eye tracking samples which will be loaded additively . The root scene includes a few core components that will persist across the additively loaded scenes, such as the MRTK configured profiles and scene camera. The MixedRealityBasicSceneSetup (see screenshot below) includes a script that will automatically load the referenced scene on startup. By default, this is EyeTrackingDemo-02-TargetSelection . 2. Adding scenes to the Build menu To load additive scenes during runtime, you must add these scenes to your Build Settings -> Scenes in Build menu first. It is important that the root scene is shown as the first scene in the list: 3. Play the eye tracking samples in the Unity Editor After adding the eye tracking scenes to the Build Settings and loading the EyeTrackingDemo-00-RootScene , there is one last thing you may want to check: Is the 'OnLoadStartScene' script that is attached to the MixedRealityBasicSceneSetup GameObject enabled? This is to let the root scene know which demo scene to load first. Let's roll! Hit \"Play\" ! You should see several gems appear and the scene menu at the top. You should also notice a small semitransparent circle at the center of your game view. This acts as an indicator (cursor) of your simulated eye gaze : Simply press down the right mouse button and move the mouse to change its position. When the cursor is hovering over the gems, you will notice that it will snap to the center of the currently viewed gem. This is a great way to test if events are triggered as expected when \"looking\" at a target. Be aware that the simulated eye gaze via mouse control is a rather poor supplement to our rapid and unintentional eye movements. However, it is great for testing the basic functionality before iterating on the design by deploying it to the HoloLens 2 device. Returning to our eye tracking sample scene: The gem rotates as long as being looked at and can be destroyed by \"looking\" at it and ... Pressing Enter (which simulates saying \"select\") Saying \"select\" into your microphone While pressing Space to show the simulated hand input, click the left mouse button to perform a simulated pinch We describe in more detail how you can achieve these interactions in our Eye-Supported Target Selection tutorial. When moving the cursor up to the top menu bar in the scene, you will notice that the currently hovered item will highlight subtly. You can select the currently highlighted item by using one of the above described commit methods (e.g., pressing Enter ). This way you can switch between the different eye tracking sample scenes. 4. How to test specific sub scenes When working on a specific scenario, you may not want to go through the scene menu every time. Instead, you may want to start directly from the scene that you are currently working on when pressing the Play button. No problem! Here is what you can do: Load the root scene In the root scene, disable the 'OnLoadStartScene' script Drag and drop one of the eye tracking test scenes that are described below (or any other scene) into your Hierarchy view as shown in the screenshot below. Press Play Please note that loading the sub scene like this is not persistent: This means that if you deploy your app to the HoloLens 2 device, it will only load the root scene (assuming it appears at the top of your Build Settings). Also, when you share your project with others, the sub scenes are not automatically loaded. Now that you know how to get the MRTK eye tracking example scenes to work, let's continue with diving deeper into how to select holograms with your eyes: Eye-supported target selection . Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/EyeTracking/EyeTracking_EyeGazeProvider.html": {
    "href": "Documentation/EyeTracking/EyeTracking_EyeGazeProvider.html",
    "title": "Accessing eye tracking data in your Unity script | Mixed Reality Toolkit Documentation",
    "keywords": "Accessing eye tracking data in your Unity script The following assumes that you followed the steps for setting up eye tracking in your MRTK scene (see Basic MRTK setup to use eye tracking ). To access eye tracking data in your MonoBehaviour scripts is easy! Simply use MixedRealityToolkit.InputSystem.EyeGazeProvider . MixedRealityToolkit.InputSystem.EyeGazeProvider While the MixedRealityToolkit.InputSystem.EyeGazeProvider provides several helpful variables, the key ones for eye tracking input are the following: UseEyeTracking : True if eye tracking hardware is available and the user has given permission to use eye tracking in the app. IsEyeCalibrationValid : Indicates whether the user's eye tracking calibration is valid or not. It returns 'null', if the value has not yet received data from the eye tracking system. It may be invalid, because the user skipped the eye tracking calibration. IsEyeGazeValid : Indicates whether the current eye tracking data is valid. It may be invalid due to exceeded timeout (should be robust to the user blinking though) or lack of tracking hardware or permissions. Check out our Missing eye calibration notification sample that explains how to detect whether a user is eye calibrated and to show an appropriate notification. GazeOrigin : Origin of the gaze ray. Please note that this will return the head gaze origin if 'IsEyeGazeValid' is false. GazeDirection : Direction of the gaze ray. This will return the head gaze direction if 'IsEyeGazeValid' is false. HitInfo , HitPosition , HitNormal , etc.: Information about the currently gazed at target. Again, if 'IsEyeGazeValid' is false, this will be based on the user's head gaze. Examples for using MixedRealityToolkit.InputSystem.EyeGazeProvider Here is an example from the FollowEyeGaze.cs : Get the point of a hologram that the user is looking at: // Show the object at the hit position of the user's eye gaze ray with the target. gameObject.transform.position = MixedRealityToolkit.InputSystem.EyeGazeProvider.HitPosition; Showing a visual asset at a fixed distance from where the user is currently looking: // If no target is hit, show the object at a default distance along the gaze ray. gameObject.transform.position = MixedRealityToolkit.InputSystem.EyeGazeProvider.GazeOrigin + MixedRealityToolkit.InputSystem.EyeGazeProvider.GazeDirection.normalized * defaultDistanceInMeters; Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/EyeTracking/EyeTracking_EyesAndHands.html": {
    "href": "Documentation/EyeTracking/EyeTracking_EyesAndHands.html",
    "title": "Eyes + Hand Interaction | Mixed Reality Toolkit Documentation",
    "keywords": "Eyes + Hand Interaction How to support look + hand motions (eye gaze & hand gestures) This page explains how to use eye targeting as a primary pointer in combination with hand motions. In our MRTK eye tracking demos , we describe several examples for using eyes + hands, for example: Selection : Looking at distant holographic button and simply performing a pinch gesture to quickly select it. Positioning : Fluently move a hologram across your scene by simply looking at it, pinching your index finger and thumb together to grab it and then move it around using your hand. Navigation : Simply look at a location you want to zoom in, pinch your index finger and thumb together and pull your hand toward you to zoom in. Please note that MRTK is currently designed in a way that at a distance hand rays act as the prioritized focus pointers. This means that the head and eye gaze pointers will automatically be suppressed once a hand is detected. However, this may not be the way you would like to interact at a distance and rather favor a simple 'gaze and commit' interaction independent of the presence of hands in your view. How to disable the hand ray To disable the hand ray pointer, simply remove the 'DefaultControllerPointer' in your Input -> Pointer MRTK configuration setting. To use eyes and hands as described above in your app, please also make sure that you meet all of the requirements for using eye tracking . You can also check out, how the input profile EyeTrackingDemoPointerProfile from the eye tracking sample package is set up as a reference. Back to \"Eye tracking in the MixedRealityToolkit\""
  },
  "Documentation/Input/Overview.html": {
    "href": "Documentation/Input/Overview.html",
    "title": "输入总览 | Mixed Reality Toolkit Documentation",
    "keywords": "输入总览 MRTK中的输入系统使您能够： 通过输入事件来处理来自各种输入源的输入，例如6个DOF控制器，铰接的手或语音。 定义抽象操作，例如 Select 或 Menu ，并将它们关联到不同的输入。 设置指针附加到控制器，以通过焦点和指针事件驱动UI组件。 Overview of MRTK Input System 输入是由 输入数据提供者（设备管理器） 产生.每个提供者都对应于特定的输入源：Open VR，Windows 混合现实（WMR），Unity游戏杆，Windows 语音等。通过 Mixed Reality Toolkit 组件中的 Registered Service Providers Profile 将提供者添加到您的项目中，并将产生 输入事件 当相应的输入源可用时（例如，当检测到WMR控制器或连接了游戏手柄时），将自动运行。 输入动作 是对原始输入的抽象，旨在帮助将应用程序逻辑与产生输入的特定输入源隔离开。例如，定义一个 Select 动作并将其映射到鼠标左键，游戏手柄中的一个按钮和一个6自由度控制器中的一个触发器，可能会很有用。然后，您可以让您的应用程序逻辑侦听 Select 输入操作事件，而不必知道可能产生此事件的所有不同输入。输入动作在 Input Actions Profile 中定义，该配置文件位于 Mixed Reality Toolkit 组件的 Input System Profile 中。 控制器 由检测到输入设备的 输入提供者 创建，并在丢失或断开连接时将其删除。例如，WMR输入提供者将为6个DOF设备创建 WMR控制器 ，为全连接手创建 WMR全连接手控制器 。控制器输入可以通过 Input System Profile 中的 Controller Mapping Profile 映射到输入动作。控制器引发的输入事件将包括关联的输入操作（如果有）。 控制器可以附加 指针 来查询场景以确定焦点游戏对象并在其上引发 指针事件 。举例来说，我们的 线指针(line pointer) 使用控制器的姿势对场景执行光线投射，以计算光线的起点和方向。在 Input System Profile 文件下的 Pointer Profile 中设置为每个控制器创建的指针。 Event flow(事件流). 虽然你可以处理 UI组件中的直接输入事件 ，建议使用 指针事件 保持实现与设备无关. MRTK还提供了几种方便的方法来使用与设备无关的方式直接查询输入状态。查看 在MRTK中获取输入状态 获取更多细节."
  },
  "Documentation/Input/Pointers.html": {
    "href": "Documentation/Input/Pointers.html",
    "title": "Pointers | Mixed Reality Toolkit Documentation",
    "keywords": "Pointers This article discusses how to configure and respond to Pointer input in practice, compared to Pointer Architecture Pointers are instanced automatically at runtime when a new controller is detected. More than one pointer can be attached to a controller. For example, with the default pointer profile, Windows Mixed Reality controllers get both a line and a parabolic pointer for normal selection and teleportation respectively. Pointer configuration Pointers are configured as part of the Input System in MRTK via a MixedRealityPointerProfile . This type of profile is assigned to a MixedRealityInputSystemProfile in the MRTK Configuration inspector. The Pointer profile determines the cursor, types of Pointers available at runtime, and how those pointers communicate with each other to decide which one is active. Pointing Extent - Defines the max distance for which a Pointer can interact with a GameObject. Pointing Raycast Layer Masks - This is a prioritized array of LayerMasks to determine what possible GameObjects any given Pointer can interact and the order of interaction to attempt. This is may be useful to ensure Pointers interact with UI elements first before other scene objects. Pointer options configuration The default MRTK Pointer Profile configuration includes the following pointer classes and associated prefabs out-of-box. The list of pointers available to the system at runtime is defined under Pointer Options in the Pointer profile. Developers can utilize this list to reconfigure existing Pointers, add new Pointers, or delete one. Each Pointer entry is defined by the following set of data: Controller Type - The set of controllers that a pointer is valid for. For example, the PokePointer is responsible for \"poking\" objects with a finger, and is, by default marked as only supporting the articulated hand controller type. Pointers are only instantiated when a controller becomes available and in particular the Controller Type defines what controllers this pointer prefab can be created with. Handedness - allows for a pointer to only being instantiated for a specific hand (left/right) Note Setting the Handedness property of a Pointer entry to None will effectively disable it from the system as an alternative to removing that Pointer from the list. Pointer Prefab - This prefab asset will be instantiated when a controller matching the specified controller type and handedness starts being tracked. It is possible to have multiple pointers associated with a controller. For example, in the default HoloLens 2 profile the articulated hand controller is associated with the PokePointer , GrabPointer , and the DefaultControllerPointer (i.e hand rays). Note MRTK provides a set of pointer prefabs in Assets/MixedRealityToolkit.SDK/Features/UX/Prefabs/Pointers . A new custom prefab can be built as long as it contains one of the pointer scripts in Assets/MixedRealityToolkit.SDK/Features/UX/Scripts/Pointers or any other script implementing IMixedRealityPointer . Default pointer classes The following classes are the out-of-box MRTK pointers available and defined in the default MRTK Pointer Profile outlined above. Each pointer prefab provided under Assets/MixedRealityToolkit.SDK/Features/UX/Prefabs/Pointers contains one of these pointer components attached. Far pointers LinePointer LinePointer , a base pointer class, draws lines from the source of the input (i.e. the controller) in the pointer direction. Generally, children classes such as the ShellHandRayPointer and the teleport pointers are instantiated and utilized (which also draw lines to indicate where teleportation will end up at) instead of this class which primarily provides common functionality. For motion controllers like in Oculus, Vive, and Windows Mixed Reality, the rotation will match the rotation of the controller. For other controllers like HoloLens 2 articulated hands, the rotation matches the system-provided pointing pose of the hand. ShellHandRayPointer The implementation of ShellHandRayPointer , which extends from LinePointer , is used as the default for the MRTK Pointer Profile . The DefaultControllerPointer prefab implements the ShellHandRayPointer class. GGVPointer Also known as the Gaze/Gesture/Voice (GGV) pointer, the GGVPointer powers HoloLens 1-style look and tap interactions, primarily via Gaze and Air Tap or Gaze and voice Select interaction. The GGV pointer's position and direction is driven by the head's position and rotation. TouchPointer The TouchPointer is responsible for working with Unity Touch input (i.e. touchscreen). These are 'far interactions' because the act of touching the screen will cast a ray from the camera to a potentially far location in the scene. MousePointer The MousePointer powers a screen to world raycast for far interactions, but for mouse instead of touch. Note Mouse support is not available by default in MRTK but can be enabled by adding a new Input Data Provider of type MouseDeviceManager to the MRTK input profile and assigning the MixedRealityMouseInputProfile to the data provider. Near pointers PokePointer The PokePointer is used to interact with game objects that support “near interaction touchable.” which are GameObjects that have an attached NearInteractionTouchable script. In the case of UnityUI, this pointer looks for NearInteractionTouchableUnityUIs. The PokePointer uses a SphereCast to determine the closest touchable element and is used to power things like the pressable buttons. When configuring the GameObject with the NearInteractionTouchable component, make sure to configure the localForward parameter to point out of the front of the button or other object that should be made touchable. Also make sure that the touchable's bounds matches the bounds of the touchable object. Useful Poke Pointer properties: TouchableDistance : Maximum distance a which a touchable surface can be interacted with Visuals : Game object used to render finger tip visual (the ring on finger, by default). Line : Optional line to draw from fingertip to the active input surface. Poke Layer Masks - A prioritized array of LayerMasks to determine which possible GameObjects the pointer can interact with and the order of interaction to attempt. Note that a GameObject must also have a NearInteractionTouchable component in order to interact with a poke pointer. SpherePointer The SpherePointer uses UnityEngine.Physics.OverlapSphere in order to identify the closest NearInteractionGrabbable object for interaction which is useful for \"grabbable\" input like the ManipulationHandler . Similar to the PokePointer / NearInteractionTouchable functional pair, in order to be interactable with the Sphere Pointer, the game object must contain a component that is the NearInteractionGrabbable script. Useful Sphere Pointer properties: Sphere Cast Radius : The radius for the sphere used to query for grabbable objects. Grab Layer Masks - A prioritized array of LayerMasks to determine which possible GameObjects the pointer can interact with and the order of interaction to attempt. Note that a GameObject must also have a NearInteractionGrabbable to interact with a SpherePointer. Note The Spatial Awareness layer is disabled in the default GrabPointer prefab provided by MRTK. This is done to reduce performance impact of doing a sphere overlap query with the spatial mesh. You can enable this by modifying the GrabPointer prefab. Teleport pointers TeleportPointer will raise a teleport request when action is taken (i.e the teleport button is pressed) in order to move the user. ParabolicTeleportPointer will raise a teleport request when action is taken (i.e the teleport button is pressed) with a parabolic line raycast in order to move the user. Pointer support for Mixed Reality Platforms The following table details the pointer types that are typically used for the common platforms in MRTK. NOTE: it's possible to add different pointer types to these platforms. For example, you could add a Poke pointer or Sphere pointer to VR. Additionally, VR devices with a gamepad could use the GGV pointer. OpenVR Windows Mixed Reality HoloLens 1 HoloLens 2 ShellHandRayPointer Valid Valid Valid TeleportPointer Valid Valid GGVPointer Valid SpherePointer Valid PokePointer Valid Pointer interactions via code Pointer event interfaces MonoBehaviours that implement one or more of the following interfaces and are assigned to a GameObject with a Collider will receive Pointer interactions events as defined by the associated interface. Event Description Handler Before Focus Changed / Focus Changed Raised on both the game object losing focus and the one gaining it every time a pointer changes focus. IMixedRealityFocusChangedHandler Focus Enter / Exit Raised on the game object gaining focus when the first pointer enters it and on the one losing focus when the last pointer leaves it. IMixedRealityFocusHandler Pointer Down / Dragged / Up / Clicked Raised to report pointer press, drag and release. IMixedRealityPointerHandler Touch Started / Updated / Completed Raised by touch-aware pointers like PokePointer to report touch activity. IMixedRealityTouchHandler Note IMixedRealityFocusChangedHandler and IMixedRealityFocusHandler should be handled in the objects they are raised on. It is possible to receive focus events globally but, unlike other input events, global event handler won't block receiving events based on focus (the event will be received by both global handler and a corresponding object in focus). Pointer input events in action Pointer input events are recognized and handled by the MRTK input system in a similar way as regular input events . The difference being that pointer input events are handled only by the GameObject in focus by the pointer that fired the input event - as well as any global input handlers. Regular input events are handled by GameObjects in focus for all active pointers. The MRTK input system recognizes an input event has occurred The MRTK input system fires the relevant interface function for the input event to all registered global input handlers The input system determines which GameObject is in focus for the pointer that fired the event The input system utilizes the Unity's Event System to fire the relevant interface function for all matching components on the focused GameObject If at any point an input event has been marked as used , the process will end and no further GameObjects will receive callbacks. Example: Components implementing the interface IMixedRealityFocusHandler will be searched for a GameObject gains or loses focus Note: The Unity Event System will bubble up to search the parent GameObject if no components matching the desired interface are found on the current GameObject.. If no global input handlers are registered and no GameObject is found with a matching component/interface, then the input system will call each fallback registered input handlers Example Below is an example script that changes the color of the attached renderer when a pointer takes or leaves focus or when a pointer selects the object. public class ColorTap : MonoBehaviour, IMixedRealityFocusHandler, IMixedRealityPointerHandler { private Color color_IdleState = Color.cyan; private Color color_OnHover = Color.white; private Color color_OnSelect = Color.blue; private Material material; private void Awake() { material = GetComponent<Renderer>().material; } void IMixedRealityFocusHandler.OnFocusEnter(FocusEventData eventData) { material.color = color_OnHover; } void IMixedRealityFocusHandler.OnFocusExit(FocusEventData eventData) { material.color = color_IdleState; } void IMixedRealityPointerHandler.OnPointerDown( MixedRealityPointerEventData eventData) { } void IMixedRealityPointerHandler.OnPointerDragged( MixedRealityPointerEventData eventData) { } void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) { material.color = color_OnSelect; } } Query Pointers It is possible to gather all pointers currently active by looping through the available input sources (i.e controllers and inputs available) to discover which pointers are attached to them. var pointers = new HashSet<IMixedRealityPointer>(); // Find all valid pointers foreach (var inputSource in CoreServices.InputSystem.DetectedInputSources) { foreach (var pointer in inputSource.Pointers) { if (pointer.IsInteractionEnabled && !pointers.Contains(pointer)) { pointers.Add(pointer); } } } Primary Pointer Developers can subscribe to the FocusProviders PrimaryPointerChanged event to be notified when the primary pointer in focus has changed. This can be extremely useful to identify if the user is currently interacting with a scene via gaze or a hand ray or other input source. private void OnEnable() { var focusProvider = CoreServices.InputSystem?.FocusProvider; focusProvider?.SubscribeToPrimaryPointerChanged(OnPrimaryPointerChanged, true); } private void OnPrimaryPointerChanged(IMixedRealityPointer oldPointer, IMixedRealityPointer newPointer) { ... } private void OnDisable() { var focusProvider = CoreServices.InputSystem?.FocusProvider; focusProvider?.UnsubscribeFromPrimaryPointerChanged(OnPrimaryPointerChanged); // This flushes out the current primary pointer OnPrimaryPointerChanged(null, null); } The PrimaryPointerExample scene shows how to use the PrimaryPointerChangedHandler for events to respond to a new primary pointer. Pointer Result The pointer Result property contains the current result for the scene query used to determine the object with focus. For a raycast pointer, like the ones created by default for motion controllers, gaze input and hand rays, it will contain the location and normal of the raycast hit. private void IMixedRealityPointerHandler.OnPointerClicked(MixedRealityPointerEventData eventData) { var result = eventData.Pointer.Result; var spawnPosition = result.Details.Point; var spawnRotation = Quaternion.LookRotation(result.Details.Normal); Instantiate(MyPrefab, spawnPosition, spawnRotation); } The PointerResultExample scene shows how to use the pointer Result to spawn an object at the hit location. Disable Pointers To turn enable and disable pointers (for example, to disable the hand ray), set the PointerBehavior for a given pointer type via PointerUtils . // Disable the hand rays PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff); // Disable hand rays for the right hand only PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff, Handedness.Right); // Disable the gaze pointer PointerUtils.SetGazePointerBehavior(PointerBehavior.AlwaysOff); // Set the behavior to match HoloLens 1 // Note, if on HoloLens 2, you must configure your pointer profile to make the GGV pointer show up for articulated hands. public void SetHoloLens1() { PointerUtils.SetPokePointerBehavior(PointerBehavior.AlwaysOff, Handedness.Any); PointerUtils.SetGrabPointerBehavior(PointerBehavior.AlwaysOff, Handedness.Any); PointerUtils.SetRayPointerBehavior(PointerBehavior.AlwaysOff, Handedness.Any); PointerUtils.SetGGVBehavior(PointerBehavior.Default); } See PointerUtils and TurnPointersOnOff for more examples. Pointer interactions via editor For pointer events handled by IMixedRealityPointerHandler , MRTK provides further convenience in the form of the PointerHandler component which allows pointer events to be handled directly via Unity Events. Pointer Extent Far pointers have settings which limit how far they will raycast and interact with other objects in the scene. By default, this value is set to 10 meters. This value was chosen to remain consistent with the behavior of the HoloLens shell. This can be changed by updating the DefaultControllerPointer prefab's ShellHandRayPointer component's fields: Pointer Extent - This controls the maximum distance that pointers will interact with. Default Pointer Extent - This controls the length of the pointer ray/line that will render when the pointer is not interacting with anything. See Also Pointer Architecture Input Events"
  },
  "Documentation/Input/Speech.html": {
    "href": "Documentation/Input/Speech.html",
    "title": "Speech | Mixed Reality Toolkit Documentation",
    "keywords": "Speech Speech input providers, like Windows Speech Input , don't create any controllers but instead allow you to define keywords that will raise speech input events when recognized. The Speech Commands Profile in the Input System Profile is where you configure the keywords to recognize. For each command you can also: Select an input action to map it to. This way you can for example use the keyword Select to have the same effect as a left mouse click, by mapping both to the same action. Specify a key code that will produce the same speech event when pressed. Add a localization key that will be used in UWP apps to obtain the localized keyword from the app resources. Handling Speech Input The Speech Input Handler script can be added to a GameObject to handle speech commands using UnityEvents . It automatically shows the list of the defined keywords from the Speech Commands Profile . Assign optional SpeechConfirmationTooltip.prefab to display animated confirmation tooltip label on recognition. Alternatively, developers can implement the IMixedRealitySpeechHandler interface in a custom script component to handle speech input events . Example Scene The SpeechInputExample scene, in MixedRealityToolkit.Examples\\Demos\\Input\\Scenes\\Speech , shows how to use speech. You can also listen to speech command events directly in your own script by implementing IMixedRealitySpeechHandler (see table of event handlers )."
  },
  "Documentation/InputSimulation/InputAnimationFileFormat.html": {
    "href": "Documentation/InputSimulation/InputAnimationFileFormat.html",
    "title": "Input Animation Binary File Format Specification | Mixed Reality Toolkit Documentation",
    "keywords": "Input Animation Binary File Format Specification Overall structure The input animation binary file begins with a 64 bit integer magic number. The value of this number in hexadecimal notation is 0x6a8faf6e0f9e42c6 and can be used to identify valid input animation files. The next eight bytes are two Int32 values declaring the major and minor version number of the file. The rest of the file is taken up by animation data, which may change between version numbers. Section Type Magic Number Int64 Major Version Number Int32 Minor Version Number Int32 Animation Data see version section Version 1.0 The input animation data consists of a sequence of animation curves. The number and meaning of animation curves is fixed, but each curve can have a different number of keyframes. Section Type Camera Pose Curves Hand Tracked Left Boolean Curve Hand Tracked Right Boolean Curve Hand Pinching Left Boolean Curve Hand Pinching Right Boolean Curve Hand Joints Left Joint Pose Curves Hand Joints Right Joint Pose Curves Joint Pose Curves For each hand a sequence of joint animation curves is stored. The number of joints is fixed, and a set of pose curves is stored for each joint. Section Type None Pose Curves Wrist Pose Curves Palm Pose Curves ThumbMetacarpalJoint Pose Curves ThumbProximalJoint Pose Curves ThumbDistalJoint Pose Curves ThumbTip Pose Curves IndexMetacarpal Pose Curves IndexKnuckle Pose Curves IndexMiddleJoint Pose Curves IndexDistalJoint Pose Curves IndexTip Pose Curves MiddleMetacarpal Pose Curves MiddleKnuckle Pose Curves MiddleMiddleJoint Pose Curves MiddleDistalJoint Pose Curves MiddleTip Pose Curves RingMetacarpal Pose Curves RingKnuckle Pose Curves RingMiddleJoint Pose Curves RingDistalJoint Pose Curves RingTip Pose Curves PinkyMetacarpal Pose Curves PinkyKnuckle Pose Curves PinkyMiddleJoint Pose Curves PinkyDistalJoint Pose Curves PinkyTip Pose Curves Pose Curves Pose curves are a sequence of 3 animation curves for the position vector, followed by 4 animation curves for the rotation quaternion. Section Type Position X Float Curve Position Y Float Curve Position Z Float Curve Rotation X Float Curve Rotation Y Float Curve Rotation Z Float Curve Rotation W Float Curve Float Curve Floating point curves are fully fledged Bézier curves with a variable number of keyframes. Each keyframe stores a time and a curve value, as well as tangents and weights on the left and right side of each keyframe. Section Type Pre-Wrap Mode Int32, Wrap Mode Post-Wrap Mode Int32, Wrap Mode Number of keyframes Int32 Keyframes Float Keyframe Float Keyframe A float keyframe stores tangent and weight values alongside the basic time and value. Section Type Time Float32 Value Float32 InTangent Float32 OutTangent Float32 InWeight Float32 OutWeight Float32 WeightedMode Int32, Weighted Mode Boolean Curve Boolean curves are simple sequences of on/off values. On every keyframe the value of the curve flips immediately. Section Type Pre-Wrap Mode Int32, Wrap Mode Post-Wrap Mode Int32, Wrap Mode Number of keyframes Int32 Keyframes Boolean Keyframe Boolean Keyframe A boolean keyframe only stores a time and value. Section Type Time Float32 Value Float32 Wrap Mode The semantics of Pre- and Post-Wrap modes follow the Unity WrapMode definition. They are a combination of the following bits: Value Meaning 0 Default: Reads the default repeat mode set higher up. 1 Once: When time reaches the end of the animation clip, the clip will automatically stop playing and time will be reset to beginning of the clip. 2 Loop: When time reaches the end of the animation clip, time will continue at the beginning. 4 PingPong: When time reaches the end of the animation clip, time will ping pong back between beginning and end. 8 ClampForever: Plays back the animation. When it reaches the end, it will keep playing the last frame and never stop playing. Weighted Mode The semantics of the Weighted mode follow the Unity WeightedMode definition. Value Meaning 0 None: Exclude both inWeight or outWeight when calculating curve segments. 1 In: Include inWeight when calculating the previous curve segment. 2 Out: Include outWeight when calculating the next curve segment. 3 Both: Include inWeight and outWeight when calculating curve segments."
  },
  "Documentation/InputSimulation/InputAnimationRecording.html": {
    "href": "Documentation/InputSimulation/InputAnimationRecording.html",
    "title": "Input Animation Recording | Mixed Reality Toolkit Documentation",
    "keywords": "Input Animation Recording MRTK features an recording system by which head movement and hand tracking data can be stored in animation files. The recorded data can then be played back using the input simulation system . Recording input is a useful tool in a variety of situations: Creating automated tests for interaction, manipulations, solvers, etc. Creating the movement of controllers and hands for these tests can be time consuming. Recording input directly can speed up the process and provide real-world data. Teaching the use of UX elements through animations. Showing users how to interact with buttons and other objects can smooth the learning curve. Debugging unexpected behavior that may be encountered during regular use. The recording system supports a \"rolling buffer\" concept that allows recording recent input in the background. See Input Recording Service . Recording and Playback services Two input system services are provided to record and play back input respectively. Input Recording Service InputRecordingService takes data from the main camera transform and active hand controllers and stores it in an internal buffer. When requested this data is then serialized into binary files for storage and later replay. To start recording input call the StartRecording function. StopRecording will pause recording (but not discard the data recorded so far, use DiscardRecordedInput to do this if needed). By default the size of the recording buffer is limited to 30 seconds. This allows the recording service to keep recording in the background without accumulating too much data, and then save the last 30 seconds when required. The time interval can be changed using the RecordingBufferTimeLimit property, or recording can be unlimited using the UseBufferTimeLimit option. The data in the recording buffer can be saved in a binary file using the SaveInputAnimation function. For details on the binary file format see Input Animation File Format Specification . Input Playback Service InputPlaybackService reads a binary file with input animation data and then applies this data through the InputSimulationService to recreate the recorded movements. To start playing back input animation it should be loaded from a file using the LoadInputAnimation function. Call Play , Pause , or Stop to control the animation playback. The current animation time can also be controlled directly with the LocalTime property. Warning Looping or resetting input animation or setting LocalTime directly by scrubbing the timeline may yield unexpected results when manipulating the scene! Only the input movements are recorded, any additional changes such as moving objects or flipping switches will not be reset. Make sure to reload the scene if irreversible changes have been made. Editor tools for recording and playing input animation A number of tools exist in the Unity editor for recording and examining input animation. These tools can be accessed in the input simulation tools window , which can be opened from the Mixed Reality Toolkit > Utilities > Input Simulation menu. Note Input recording and playback only works during play mode. The input recording window has two modes: Recording for recording input during play mode and saving it to animation files. When toggling on the recording button the InputRecordingService is enabled to record input. When toggling off the recording button a file save selection is shown and the recorded input animation is saved to the selected destination. The buffer time limit can also be changed in this mode. Playback for loading animation files and then recreating input through the input simulation system. An animation must be loaded in this mode first. After recording input in recording mode the resulting animation is automatically loaded. Alternatively click the \"Load\" button to select an existing animation file. The time control buttons from left to right are: Reset the playback time to the start of the animation. Play animation continuously over time. Step forward one time step. The slider can also be used to scrub through the animation timeline. Warning Looping or resetting input animation or scrubbing the timeline may yield unexpected results when manipulating the scene! Only the input movements are recorded, any additional changes such as moving objects or flipping switches will not be reset. Make sure to reload the scene if irreversible changes have been made."
  },
  "Documentation/InputSimulation/InputSimulationService.html": {
    "href": "Documentation/InputSimulation/InputSimulationService.html",
    "title": "Input Simulation Service | Mixed Reality Toolkit Documentation",
    "keywords": "Input Simulation Service The Input Simulation Service emulates the behaviour of devices and platforms that may not be available in the Unity editor. Examples include: HoloLens or VR device head tracking HoloLens hand gestures HoloLens 2 articulated hand tracking HoloLens 2 eye tracking Users can use a conventional keyboard and mouse combination to control simulated devices at runtime. This approach allows testing of interactions in the Unity editor without first deploying to a device. Warning This does not work when using Unity's XR Holographic Emulation > Emulation Mode = \"Simulate in Editor\". Unity's in-editor simulation will take control away from MRTK's input simulation. In order to use the MRTK input simulation service, you will need to set XR Holographic Emulation to Emulation Mode = \"None\" Enabling the Input Simulation Service Input simulation is enabled by default in MRTK. Input simulation is an optional Mixed Reality service . It can be added as a data provider in the Input System profile . Type must be Microsoft.MixedReality.Toolkit.Input > InputSimulationService . Platform(s) by default includes all Editor platforms, since the service uses keyboard and mouse input. Input simulation tools window Enable the input simulation tools window from the Mixed Reality Toolkit > Utilities > Input Simulation menu. This window provides access to the state of input simulation during play mode. Viewport Buttons A prefab for in-editor buttons to control basic hand placement can be specified in the input simulation profile under Indicators Prefab . This is an optional utility, the same features can be accessed in the input simulation tools window . Note The viewport indicators are disabled by default, as they currently can sometimes interfere with Unity UI interactions. See issue #6106 . To enable, add the InputSimulationIndicators prefab to Indicators Prefab . Hand icons show the state of the simulated hands: The hand is not tracking. Click to enable the hand. The hand is tracked, but not controlled by the user. Click to hide the hand. The hand is tracked and controlled by the user. Click to hide the hand. Click to reset the hand to default position. Camera Control Head movement can be emulated by the Input Simulation Service. Rotating the camera Hover over the viewport editor window. You may need to click the window to give it input focus if button presses don't work. Press and hold the Mouse Look Button (default: Right mouse button). Move the mouse in the viewport window to rotate the camera. Use the scroll wheel to roll the camera around the view direction. Camera rotation speed can be configured by changing the Mouse Look Speed setting in the input simulation profile. Alternatively, use the Look Horizontal / Look Vertical axes to rotate the camera (default: game controller right thumbstick). Moving the camera Use the Move Horizontal / Move Vertical axes to move the camera (default: WASD keys or game controller left thumbstick). Camera position and rotation angles can be set explicitly in the tools window, as well. The camera can be reset to its default using the Reset button. Hand Simulation The input simulation supports emulated hand devices. These virtual hands can interact with any object that supports regular hand devices, such as buttons or grabbable objects. Hand Simulation Mode In the input simulation tools window the Hand Simulation Mode setting switches between two distinct input models. The default mode can also be set in the input simulation profile. Articulated Hands : Simulates a fully articulated hand device with joint position data. Emulates HoloLens 2 interaction model. Interactions that are based on the precise positioning of the hand or use touching can be simulated in this mode. Gestures : Simulates a simplified hand model with air tap and basic gestures. Emulates HoloLens interaction model . Focus is controlled using the Gaze pointer. The Air Tap gesture is used to interact with buttons. Controlling hand movement Press and hold the Left/Right Hand Control Key (default: Left Shift for left hand and Space for right hand) to gain control of either hand. While the manipulation key is pressed, the hand will appear in the viewport. Once the manipulation key is released, the hands will disappear after a short Hand Hide Timeout . Hands can be toggled on permanently in the input simulation tools window or by pressing the Toggle Left/Right Hand Key (default: T for left and Y for right). Press the toggle key again to hide the hands again. Mouse movement will move the hand in the view plane. Hands can be moved further or closer to the camera using the mouse wheel . To rotate hands using the mouse, hold both the Left/Right Hand Control Key ( Left Shift or Space ) and the Hand Rotate Button (default: cntrl button) and then move the mouse to rotate the hand. Hand rotation speed can be configured by changing the Mouse Hand Rotation Speed setting in the input simulation profile. All hand placement can also changed in the input simulation tools window , including resetting hands to default. Additional profile settings Hand Depth Multiplier controls the sensitivity of the mouse scroll wheel depth movement. A larger number will speed up hand zoom. Default Hand Distance is the initial distance of hands from the camera. Clicking the Reset button hands will also place hands at this distance. Hand Jitter Amount adds random motion to hands. This feature can be used to simulate inaccurate hand tracking on the device, and ensure that interactions work well with noisy input. Hand Gestures Hand gestures such as pinching, grabbing, poking, etc. can also be simulated. Enable hand control using the Left/Right Hand Control Key ( Left Shift or Space ) Alternatively, toggle the hands on/off using the toggle keys ( T or Y ). While manipulating, press and hold a mouse button to perform a hand gesture. Each of the mouse buttons can be mapped to transform the hand shape into a different gesture using the Left/Middle/Right Mouse Hand Gesture settings. The Default Hand Gesture is the shape of the hand when no button is pressed. Note The Pinch gesture is the only gesture that performs the \"Select\" action at this point. One-Hand Manipulation Press and Left/Right Hand Control Key ( Left Shift or Space ) Point at object Hold mouse button to pinch Use your mouse to move the object Release the mouse button to stop interaction Two-Hand Manipulation For manipulating objects with two hands at the same time, the persistent hand mode is recommended. Toggle on both hands by pressing the toggle keys (T/Y). Manipulate one hand at a time: Hold Space to control the right hand Move the hand to where you want to grab the object Press the mouse button to activate the Pinch gesture. In persistent mode the gesture will remain active when you release the mouse button. Repeat the process with the other hand, grabbing the same object in a second spot. Now that both hands are grabbing the same object, you can move either of them to perform two-handed manipulation. GGV Interaction Enable GGV simulation by switching Hand Simulation Mode to Gestures in the Input Simulation Profile Rotate the camera to point the gaze cursor at the interactable object (right mouse button) Hold Space to control the right hand Click and hold left mouse button to interact Rotate the camera again to manipulate the object Eye tracking Eye tracking simulation can be enabled by checking the Simulate Eye Position option in the Input Simulation Profile . This should not be used with GGV style interactions (so ensure that Hand Simulation Mode is set to Articulated )."
  },
  "Documentation/Packaging/MRTK_Modularization.html": {
    "href": "Documentation/Packaging/MRTK_Modularization.html",
    "title": "Mixed Reality Toolkit Componentization | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Componentization One of the great new features of Mixed Reality Toolkit v2 is improved componentization. Wherever possible, individual components are isolated from all but the core layer of the foundation. Minimized Dependencies MRTK v2 was intentionally developed to be modular and to minimize dependencies between system services (ex: spatial awareness). Due to the nature of some system services (ex: input and teleportation), a small number of dependencies exist. While it is expected that services will need one or more data provider components, there are no direct links between them. The same is true for SDK features (ex: User Interface components). Component Communication To ensure that there are no direct links between components, MRTK v2 utilizes interfaces to communicate between services, data providers and application code. These interfaces are defined in and all communication is routed through the Mixed Reality Toolkit core component. Minimizing MRTK import footprint At this moment, the MRTK is imported as a single foundation package (ignoring for a moment the existence of the examples package, which is a completely optional package). It is possible to make this footprint smaller by manually cutting down on the files imported, though this is a highly manual process which doesn't have a well-defined guide. It is possible to uncheck arbitrary items during the import of the Foundation package. However, it's not recommended to do this at an early stage in development as it might break functionality. After having figured out the final feature set of an app, pruning unneeded providers and services can be done on the following folders: MixedRealityToolkit.Services MixedRealityToolkit.Providers MixedRealityToolkit.SDK\\Features Note MRTK v2 requires the contents of the Assets\\MixedRealityToolkit folder. Upcoming features Application Architecture The MRTK will have support to enable applications to be built with a variety of architectures, including: MixedRealityToolkit service locator Individual services Custom service locator Hybrid architecture When selecting an application architecture, it is important to consider design flexibility and application performance. The architectures described here are not expected to be suitable for every application. MixedRealityToolkit Service Locator The MRTK enables (and automatically configures) application scenes to use the default MixedRealityToolkit service locator component. This component includes support for configuring MRTK systems and data providers via configuration inspectors and manages component lifespans and core behaviors (ex: when to update). All systems are represented in the core configuration inspector, regardless of whether or not they are present or enabled in the project. Please see the Mixed Reality Configuration Guide for more information. Individual Service Components Some developers have expressed a desire to include individual service components into the application scene hierarchy. To enable this usage, services will either need to be encapsulated in a custom registrar or be self-registering / self-managing. A self-registering service would implement the IMixedRealityServiceRegistrar and register itself so that application code could discover the service instance via a registry. A self-managing service could be implemented as a singleton object in the scene hierarchy. This object would provide and instance property which application code could use to directly access service functionality. Custom Service Locator Some developers have requested the ability to create a custom service locator component. Custom service locators would implement the IMixedRealityServiceRegistrar interface and manage the life cycle and core behaviors of active services. Hybrid Architecture The MRTK will support a hybrid architecture in which developers can combine the previous approaches as needed or desired. For example, a developer could start with the MixedRealityToolkit service locator and add a self-registering service. Note When opting for a hybrid architecture, it is important to be mindful of any duplication of work (ex: acquiring controller data from multiple components)."
  },
  "Documentation/Packaging/MRTK_Packages.html": {
    "href": "Documentation/Packaging/MRTK_Packages.html",
    "title": "Mixed Reality Toolkit Packages | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Packages The Mixed Reality Toolkit (MRTK) is a collection of packages that enable cross platform Mixed Reality application development by providing support for Mixed Reality hardware and platforms. The MRTK ships via the following Unity packages: Foundation Extensions Examples Tools These packages are released and supported by Microsoft from source code in the mrtk_release branch on GitHub. Foundation Package The Mixed Reality Toolkit Foundation is the set of code that enables your application to leverage common functionality across Mixed Reality Platforms. MRTK Foundation Package The MRTK Foundation is comprised of: Core Package The Core Package contains the definitions for all of the common interfaces, classes and data types that are used by all other components. It is highly recommended that applications access MRTK components exclusively through the defined interfaces to enable the highest level of compatibility across platforms. Platform Providers The MRTK Platform Provider packages are the components that enable the Mixed Reality Toolkit to target Mixed Reality hardware and platform functionality. Supported platforms include: Windows Mixed Reality OpenVR Windows Voice System Services Core services provide the default implementations for the system service interfaces, defined in the core package. The MRTK foundation includes the following system services: Boundary System Diagnostic System Input System Spatial Awareness System Teleport System Feature Assets Feature Assets are collections of related functionality delivered as Unity assets and scripts including user interface controls, Standard assets, and more. Extensions Package The extensions package contains additional services and components that extend the functionality of the foundation package. Scene Transition Service Examples Package The examples package contains demos, sample scripts, and sample scenes that exercise functionality in the foundation package. This package contains the HandInteractionExample scene (pictured below) which contains sample objects that respond to various types of hand input (articulated and non-articulated). This package also contains eye tracking demos, which are documented here More generally, any new feature in the MRTK should contain a corresponding example in the examples package, roughly following the same folder structure and location. Tools Package The tools package contains tools that are useful for creating mixed reality experiences whose code will ultimately not ship as part of an application. Dependency Window Extension Service Creation Wizard Optimize Window Screenshot Utility See Also Architecture Overview Systems, Extension Services and Data Providers"
  },
  "Documentation/Architecture/ConfigurationAndProfiles.html": {
    "href": "Documentation/Architecture/ConfigurationAndProfiles.html",
    "title": "Configuration and profiles | Mixed Reality Toolkit Documentation",
    "keywords": "Configuration and profiles Not every single consumer of the MRTK will want it to behave the same way - some will want to have the spatial mesh running when on AR devices that support it. Some may want the diagnostic visualization on all the time, and some may only want it on when the user says a voice command. The MRTK needs to be configurable in order to support a wide range of those requirements, and it uses a concept called 'profiles' to accomplish this. What is a profile? Profiles store configuration settings for services. You use them to control which services are run and how those services behave while running. They're stored as ScriptableObject assets in your project. You can view and edit a profile by selecting it in your project window. For example, the MRTK has a camera service, which will apply different properties to the main camera, depending on whether or not the display is transparent (like in the case of a HoloLens) or opaque (like in the case of a VR headset). The camera service is given a camera profile , which contains those different transparent vs. opaque settings. An example of a more complex profile is the the InputSystem . Some of the properties on that profile (such as the MixedRealityInputDataProviderConfiguration entities) control the objects that will be instantiated at runtime - this is how the input system knows how to create OpenVR, WMR and Unity input subsystems. This profile is not just a set of properties that configures if a particular input sub-feature is enabled or disabled - it's also an injection mechanism that the MRTK will use to \"new\" other classes at runtime (for example, the input system profile contains a list of 'Input Data Providers' which has serialized type information - these objects are instantiated by the input system at runtime) Profile configurations are initially greyed out because they're set up with MRTK's default profiles. They can only be modified after cloning to ensure that customized profiles won't be lost after a MRTK version update. Modifying profiles While profiles can be individually modified (by going to the serialized asset of the ScriptableObject), they are generally accessed through the MRTK inspector of the root MixedRealityToolkit scene object. The picture above shows the sheer volume of settings - note that each option on the left will show the configuration for its corresponding service. Camera Contains per-display type settings. Used to apply different levels of quality, clip, and rendering settings based on the type of display that the application is run on (i.e. AR vs VR). Input The largest profile for the most complex subsystem of the MRTK. The various subsystems of input will be covered in the Input System documentation itself. Teleport This profile controls how the teleportation system works, which is primarily a VR concept. Spatial mapping This profile controls how the spatial mesh system works (i.e. this system is responsible for starting the system that will render the spatial meshes on an AR device). Primarily an AR concept. Diagnostics This controls the visual performance tool that shows a framerate counter, along with basic memory utilization. Scene system This controls a currently not-enabled-by-default system that is designed to make multi-scene scenarios easier to work with. Extensions This empty-by-default profile is the extension point where consumers can write and then plug in their own objects that will be instantiated and run by the MRTK runtime. Editor Contains general settings for editor-only behaviors of the MRTK."
  },
  "Documentation/Architecture/FrameworkAndRuntime.html": {
    "href": "Documentation/Architecture/FrameworkAndRuntime.html",
    "title": "框架和运行时 | Mixed Reality Toolkit Documentation",
    "keywords": "框架和运行时 场景改动 要使用该工具包，必须在您的场景中包含MixedRealityToolkit脚本的实例。要添加一个，请使用菜单选项：Mixed Reality Toolkit -> Add to Scene and Configure。该实例负责注册，更新和关闭服务。这也是您选择配置文件的地方。 除了将MRTK GameObject添加到场景外，菜单选项还将： 添加MixedRealityPlayspace，许多其他MRTK组件使用它来推理世界和本地空间转换。 将主Camera移至MixedRealityPlayspace的子级（并向主Camera添加一些与输入和注视相关的脚本，这有助于增强UnityUI和与凝视相关的输入功能）。 MixedRealityToolkit对象和运行时 MRTK有几个核心服务。有些彼此协调；其他是独立的。所有都有相同的生命周期-启动，注册，更新和关闭-该生命周期与Unity的MonoBehavior生命周期不同。这个 medium post 解释了此方法背后的一些背景和动机。MRTK具有一个对象来管理其服务寿命和运行时间。 该实体确保： 游戏开始时，服务的发现和初始化按预先定义的顺序进行。 它提供了一种机制，让服务注册自己(比如“我支持这个服务!”)，并让其他调用者获得这些服务。 它提供Update（）/ LateUpdate（）调用并将它们转发到各种服务上（即通过UpdateAllServices / LateUpdateAllServices）。"
  },
  "Documentation/Contributing/DocumentationGuide.html": {
    "href": "Documentation/Contributing/DocumentationGuide.html",
    "title": "Documentation guidelines | Mixed Reality Toolkit Documentation",
    "keywords": "Documentation guidelines This document outlines the documentation guidelines and standards for the Mixed Reality Toolkit (MRTK). Its purpose is to get you started quickly by giving an introduction about the technical aspects that you need to know, to point out common pitfalls and to describe the writing style that you should try to follow. The page itself is supposed to serve as an example, therefore it uses the intended style and the most common markup features of the documentation. Herein you will find some general style advice as well as the standards for the following forms of the MRTK documentation: Source How-to Design Performance notes Breaking changes Functionality and markup This section describes frequently needed features. To see how they work, look at the source code of the page. Numbered lists Nested numbered lists with at least 3 leading blank spaces The actual number in code is irrelevant; parsing will take care of setting the correct item number. Bullet point lists Nested bullet point lists Text in bold with **double asterisk** italic text with _underscore_ or *single asterisk* Text highlighted as code within a sentence `using backquotes` Links to docs pages MRTK documentation guidelines Links to anchors within a page ; anchors are formed by replacing spaces with dashes, and converting to lowercase For code samples we use the blocks with three backticks ``` and specify csharp as the language for syntax highlighting: int SampleFunction(int i) { return i + 42; } When mentioning code within a sentence use a single backtick . TODOs Avoid using TODOs in docs, as over time these TODOs (like code TODOs) tend to accumulate and information about how they should be updated and why gets lost. If it is absolutely necessary to add a TODO, follow these steps: File a new issue on Github describing the context behind the TODO, and provide enough background that another contributor would be able to understand and then address the TODO. Reference the issue URL in the todo in the docs. <!-- TODO( https://github.com/microsoft/MixedRealityToolkit-Unity/issues/ISSUE_NUMBER_HERE ): A brief blurb on the issue --> Highlighted sections To highlight specific points to the reader, use > [!NOTE] , > [!WARNING] , and > [!IMPORTANT] to produce the following styles. It is recommended to use notes for general points and warning/important points only for special relevant cases. Note Example of a note Warning Example of a warning Important Example of an important comment Page layout Introduction The part right after the main chapter title should serve as a short introduction what the chapter is about. Do not make this too long, instead add sub headlines. These allow to link to sections and can be saved as bookmarks. Main body Use two-level and three-level headlines to structure the rest. Mini Sections Use a bold line of text for blocks that should stand out. We might replace this by four-level headlines at some point. 'See also' section Most pages should end with a chapter called See also . This chapter is simply a bullet pointed list of links to pages related to this topic. These links may also appear within the page text where appropriate, but this is not required. Similarly, the page text may contain links to pages that are not related to the main topic, these should not be included in the See also list. See this page's ''See also'' chapter as an example for the choice of links. Table of Contents (TOC) Toc files are used for generating the navigation bars in the MRTK github.io documentation. Whenever you're adding a new file to the documentation make sure that there's an entry for that file in one of the toc.yml files of the documentation folder. Only articles listed in the toc files will show up in the navigation of the developer docs. There can be a toc file for every subfolder in the documentation folder which can be linked into any existing toc file to add it as a subsection to the corresponding part of the navigation. Style Writing style General rule of thumb: Try to sound professional . That usually means to avoid a 'conversational tone'. Also try to avoid hyperbole and sensationalism. Don't try to be (overly) funny. Never write 'I' Avoid 'we'. This can usually be rephrased easily, sometimes you can use 'MRTK' instead. Example: \"we support this feature\" -> \"MRTK supports this feature\" or \"the following features are supported ...\". Similarly, try to avoid 'you'. Example: \"With this simple change your shader becomes configurable!\" -> \"Shaders can be made configurable with little effort.\" Do not use 'sloppy phrases'. Avoid sounding overly excited, we do not need to sell anything. Similarly, avoid being overly dramatic. Exclamation marks are rarely needed. Capitalization Use Sentence case for headlines . Ie. capitalize the first letter and names, but nothing else. Use regular English for everything else. That means do not capitalize arbitrary words , even if they hold a special meaning in that context. Prefer italic text , if you really want to highlight certain words, see below . When a link is embedded in a sentence (which is the preferred method), the standard chapter name always uses capital letters, thus breaking the rule of no arbitrary capitalization inside text. Therefore use a custom link name to fix the capitalization. As an example, here is a link to the bounding box documentation. Do capitalize names, such as Unity . Do NOT capitalize \"editor\" when writing Unity editor . Emphasis and highlighting There are two ways to emphasize or highlight words, making them bold or making them italic. The effect of bold text is that bold text sticks out and therefore can easily be noticed while skimming a piece of text or even just scrolling over a page. Bold is great to highlight phrases that people should remember. However, use bold text rarely , because it is generally distracting. Often one wants to either 'group' something that belongs logically together or highlight a specific term, because it has a special meaning. Such things do not need to stand out of the overall text. Use italic text as a lightweight method to highlight something. Similarly, when a filename, a path or a menu-entry is mentioned in text, prefer to make it italic to logically group it, without being distracting. In general, try to avoid unnecessary text highlighting . Special terms can be highlighted once to make the reader aware, do not repeat such highlighting throughout the text, when it serves no purpose anymore and only distracts. Mentioning menu entries When mentioning a menu entry that a user should click, the current convention is: Project > Files > Create > Leaf Links Insert as many useful links to other pages as possible, but each link only once. Assume a reader clicks on every link in your page, and think about how annoying it would be, if the same page opens 20 times. Prefer links embedded in a sentence: BAD: Guidelines are useful. See this chapter for details. GOOD: Guidelines are useful. Avoid external links, they can become outdated or contain copyrighted content. When you add a link, consider whether it should also be listed in the See also section. Similarly, check whether a link to your new page should be added to the linked-to page. Images / screenshots Use screenshots sparingly. Maintaining images in documentation is a lot of work, small UI changes can make a lot of screenshots outdated. The following rules will reduce maintenance effort: Do not use screenshots for things that can be described in text. Especially, never screenshot a property grid for the sole purpose of showing property names and values. Do not include things in a screenshot that are irrelevant to what is shown. For instance, when a rendering effect is shown, make a screenshot of the viewport, but exclude any UI around it. When you have to show some UI, try to move windows around such that only that important part is in the image. When you do screenshot UI, only show the important parts. For example, when talking about buttons in a toolbar, you can make a small image that shows the important toolbar buttons, but exclude everything around it. Only use images that are easy to reproduce. That means do not paint markers or highlights into screenshots. First, there are no consistent rules how these should look, anyway. Second, reproducing such a screenshot is additional effort. Instead, describe the important parts in text. There are exceptions to this rule, but they are rare. Obviously, it is much more effort to recreate an animated GIF. If you make one, expect to be responsible to recreate it for the rest of your life, or expect people to throw it out, if they don't want to spend that time. Keep the number of images in an article low. Often a good method is to make one overall screenshot of some tool, that shows everything, and then describe the rest in text. This makes it easy to replace the screenshot when necessary. Some other aspects: Default image width is 500 pixels, as this displays well on most monitors. Try not to deviate too much from it. 800 pixels width should be the maximum. Use PNGs for screenshots of UI. Use PNGs or JPGs for 3D viewport screenshots. Prefer quality over compression ratio. List of component properties When documenting a list of properties, use bold text to highlight the property name, then line breaks and regular text to describe them. Do not use sub-chapters or bullet point lists. Also, don't forget to finish all sentences with a period. When you are finished with a page Make sure you followed the guidelines in this document. Browse the document structure and see if your new document could be mentioned under the See also section of other pages. If available, have someone with knowledge of the topic proof-read the page for technical correctness. Have someone proof-read your page for style and formatting. This can be someone unfamiliar with the topic, which is also a good idea to get feedback about how understandable the documentation is. Source documentation API documentation will be generated automatically from the MRTK source files. To facilitate this, source files are required to contain the following: Class, struct, enum summary blocks Property, method, event summary blocks Feature introduction version and dependencies Serialized fields Enumeration values In addition to the above, the code should be well commented to allow for maintenance, bug fixes and ease of customization. Class, struct, enum summary blocks If a class, struct or enum is being added to the MRTK, its purpose must be described. This is to take the form of a summary block above the class. /// <summary> /// AudioOccluder implements IAudioInfluencer to provide an occlusion effect. /// </summary> If there are any class level dependencies, they should be documented in a remarks block, immediately below the summary. /// <remarks> /// Ensure that all sound emitting objects have an attached AudioInfluencerController. /// Failing to do so will result in the desired effect not being applied to the sound. /// </remarks> Pull Requests submitted without summaries for classes, structures or enums will not be approved. Property, method, event summary blocks Properties, methods and events (PMEs) as well as fields are to be documented with summary blocks, regardless of code visibility (public, private, protected and internal). The documentation generation tool is responsible for filtering out and publishing only the public and protected features. NOTE: A summary block is not required for Unity methods (ex: Awake, Start, Update). PME documentation is required for a pull request to be approved. As part of a PME summary block, the meaning and purpose of parameters and returned data is required. /// <summary> /// Sets the cached native cutoff frequency of the attached low pass filter. /// </summary> /// <param name=\"frequency\">The new low pass filter cutoff frequency.</param> /// <returns>The new cutoff frequency value.</returns> Feature introduction version and dependencies As part of the API summary documentation, information regarding the MRTK version in which the feature was introduced and any dependencies should be documented in a remarks block. Dependencies should include extension and/or platform dependencies. /// <remarks> /// Introduced in MRTK version: 2018.06.0 /// Minimum Unity version: 2018.0.0f1 /// Minimum Operating System: Windows 10.0.11111.0 /// Requires installation of: ImaginarySDK v2.1 /// </remarks> Serialized fields It is a good practice to use Unity's tooltip attribute to provide runtime documentation for a script's fields in the inspector. So that configuration options are included in the API documentation, scripts are required to include at least the tooltip contents in a summary block. /// <summary> /// The quality level of the simulated audio source (ex: AM radio). /// </summary> [Tooltip(\"The quality level of the simulated audio source.\")] Enumeration values When defining and enumeration, code must also document the meaning of the enum values using a summary block. Remarks blocks can optionally be used to provide additional details to enhance understanding. /// <summary> /// Full range of human hearing. /// </summary> /// <remarks> /// The frequency range used is a bit wider than that of human /// hearing. It closely resembles the range used for audio CDs. /// </remarks> How-to documentation Many users of the Mixed Reality Toolkit may not need to use the API documentation. These users will take advantage of our pre-made, reusable prefabs and scripts to create their experiences. Each feature area will contain one or more markdown (.md) files that describe at a fairly high level, what is provided. Depending on the size and/or complexity of a given feature area, there may be a need for additional files, up to one per feature provided. When a feature is added (or the usage is changed), overview documentation must be provided. As part of this documentation, how-to sections, including illustrations, should be provided to assist customers new to a feature or concept in getting started. Design documentation Mixed Reality provides an opportunity to create entirely new worlds. Part of this is likely to involve the creation of custom assets for use with the MRTK. To make this as friction free as possible for customers, components should provide design documentation describing any formatting or other requirements for art assets. Some examples where design documentation can be helpful: Cursor models Spatial mapping visualizations Sound effect files This type of documentation is strongly recommended, and may be requested as part of a pull request review. This may or may not be different from the design recommendation on the MS Developer site Performance notes Some important features come at a performance cost. Often this code will very depending how they are configured. For example: When using the spatial mapping component, the performance impact will increase with the level of detail requested. It is recommended to use the least detail possible for your experience. Performance notes are recommended for CPU and/or GPU heavy components and may be requested as part of a pull request review. Any applicable performance notes are to be included in API and overview documentation. Breaking changes Breaking changes documentation is to consist of a top level file which links to each feature area's individual BreakingChanges.md. The feature area BreakingChanges.md files are to contain the list of all known breaking changes for a given release as well as the history of breaking changes from past releases. For example: Spatial sound breaking changes 2018.07.2 * Spatialization of the imaginary effect is now required. * Management of randomized AudioClip files requires an entropy value in the manager node. 2018.07.1 No known breaking changes 2018.07.0 ... The information contained within the feature level BreakingChanges.md files will be aggregated to the release notes for each new MRTK release. Any breaking changes that are part of a change must be documented as part of a Pull Request. Tools for editing MarkDown Visual Studio Code is a great tool for editing markdown files that are part of MRTK's documentation. When writing documentation, installing the following two extensions is also highly recommended: Docs Markdown Extension for Visual Studio Code - Use Alt+M to bring up a menu of docs authoring options. Code Spell Checker - misspelled words will be underlined; right-click on a misspelled word to change it or save it to the dictionary. Both of these come packaged in the Microsoft published Docs Authoring Pack. See also Documentation portal generation guide"
  },
  "Documentation/Contributing/ExperimentalFeatures.html": {
    "href": "Documentation/Contributing/ExperimentalFeatures.html",
    "title": "Experimental Features | Mixed Reality Toolkit Documentation",
    "keywords": "Experimental Features Some features the MRTK team works on appear to have a lot of initial value even if we haven’t fully fleshed out the details. For these types of features, we want the community to get a chance to see them early. Because they are early in the cycle, we label them as experimental to indicate that they are still evolving, and subject to change over time. What to expect from an experimental feature If a component is marked experimental you can expect the following: An example scene demonstrating usage, located under MixedRealityToolkit.Examples\\Experimental sub-folder Experimental features may not have docs. They probably don't have tests. Experimental features are subject to change. Experimental feature guidelines Experimental code should live in a separate folder Experimental code should go into a top-level experimental folder followed by the experimental feature name. For example, if trying to contribute a new feature FooBar, put code in the following: Example scenes, scripts go into MRTK.Examples/Experimental/FooBar/ Component scripts, prefabs go into MRTK.SDK/Experimental/FooBar/ Component inspectors go into MRTK.SDK/Inspectors/Experimental/FooBar When using sub-folders under the experimental feature name, try to mirror the same folder structure of MRTK. For example, solvers would go under MRTK.SDK/Experimental/FooBar/Features/Utilities/Solvers/FooBarSolver.cs Keep scenes in a scene folder near the top: MRTK.Examples/Experimental/FooBar/Scenes/FooBarExample.unity Note We considered not having a single Experimental root folder and instead putting Experimental under say MRTK.Examples/HandTracking/Scenes/Experimental/HandBasedMenuExample.unity . We decided to go with folders at the base to make the experimental features easier to discover. Experimental Code should be in a special namespace Ensure that the experimental code lives in an experimental namespace that matches the non-experimental location. For example, if your component is part of solvers at Microsoft.MixedReality.Toolkit.Utilities.Solvers , its namespace should be Microsoft.MixedReality.Toolkit.Experimental.Utilities.Solvers . See this PR for an example. Experimental features should have an [Experimental] attribute Add an [Experimental] attribute above one of your fields to have a small dialog appear in the component editor that mentions your feature is experimental and subject to significant changes. Menus for experimental features should go under \"Experimental\" sub-menu Ensure that experimental features are under \"experimental\" sub-menus when adding commands to menus in the editor. Here are a few examples: Adding a top-level menu command: [MenuItem(\"Mixed Reality Toolkit/Experimental/MyCommand\")] public static void MyCommand() Adding a component menu: [AddComponentMenu(\"MRTK/Experimental/MyCommand\")] Minimize impact to MRTK code While your MRTK change might get your experiment to work, it could impact other people in ways you do not expect. Any regressions you make to the MRTK core code would result in your pull request getting reverted. Aim to have zero changes in folders other than experimental folders. Here is a list of folders that can have experimental changes: MixedRealityToolkit.SDK\\Experimental MixedRealityToolkit.SDK\\Inspectors\\Experimental MixedRealityToolkit.Examples\\Experimental Changes outside of these folders should be treated very carefully. If your experimental feature must include changes to MRTK core code, consider splitting out MRTK changes into a separate pull request that includes tests and documentation. Using you experimental feature should not impact people's ability to use core controls Most people use core UX components like the button, ManipulationHandler and Interactable very frequently. They will likely not use your experimental feature if it prevents them from using buttons. Using your component should not break buttons, ManipulationHandler, BoundingBox, or interactable. For example, in this ScrollableObjectCollection PR , adding a ScrollableObjectCollection caused people to not be able to use the HoloLens button prefabs. Even though this was not caused by a bug in the PR (but rather exposed an existing bug), it prevented the PR from getting checked in. Provide and example scene that demonstrates how to use the feature People need to see how to use your feature, and how to test it. Provide an example under MRTK.Examples/Experimental/YOUR_FEATURE Minimize user visible flaws in experimental features Others will not use the experimental feature if it does not work, it will not graduate to a feature. Test your example scene on your target platform, make sure it works as expected. Make sure your feature also works in editor, so people can rapidly iterate and see your feature even if they don’t have the target platform. Graduating experimental code into MRTK code If a feature ends up seeing quite a lot of use, then we should graduate it into core MRTK code. To do this, the feature should have tests, documentation, and an example scene. When you are ready to graduate the feature MRTK, create an issue to check in your PR against. The PR should include all the things needed to make this a core feature: tests, documentation, and an example scene showing usage. Also, don’t forget to update the namespaces to remove the “Experimental” subspace."
  },
  "Documentation/Contributing/Feature_Contribution_Process.html": {
    "href": "Documentation/Contributing/Feature_Contribution_Process.html",
    "title": "Feature Contribution Process | Mixed Reality Toolkit Documentation",
    "keywords": "Feature Contribution Process Warning 10/1/2019: This page is deprecated because it provides guidelines for contributing very large systems to MRTK before the 2.0 release. After the 2.0 release, large changes need to be performed more carefully, and the process for this is not yet decided. We expect most MRTK contributions to have much smaller changes than what is covered here. Adding features to the Mixed Reality Toolkit (MRTK) is split up into a few iteration steps, so maintainers can have time to review and and ensure the process goes smoothly. Please be sure to review the list of feature requirements before you get started. Process The following process has been drafted to ensure all new work complies to the updated standards and architecture defined for the MRTK, this has been defined as: Open a new Proposal and related Tasks Submit an Architecture Draft or Outline Review and finalize the Architecture documentation Submit a PR implementing the Core feature interfaces and event datum (if applicable) Submit a PR Implementing any required SDK components Submit a PR Implementing feature demos or full scale Examples New Proposal Start by opening a new Proposal or Task describing the feature or the problem you want to solve. Describe the approach and how it fits into the version of the Mixed Reality Toolkit you're targeting. This will enable everyone have a discussion about the proposal and, hopefully, identify some potential pitfalls before any work is started. New Proposals will be reviewed and discussed during our weekly ship room meetings and if a proposal is accepted, supplemental tasks will then be created and assigned. Architecture Draft The first task once the initial proposal has been accepted, will be to draft the initial architecture document for the feature or work to be done. This document should typically be one or two pages long and include a high level overview of the feature and how it will relate to other parts of the Mixed Reality Toolkit. The draft must be easy to consume with key areas highlighted. The draft must include a list of the proposed core interfaces, configuration profiles, and event datum. The draft must include a simple graphic of the proposed architecture. Ensure that the architecture of the feature complies with the New Feature Requirements set out by the Core MRTK architecture. TODO: Add link to architecture draft template Once the draft is completed, this can be appended to the Proposal / Task issue on GitHub for final public review. Architecture Documentation Once the draft architecture is accepted, additional pull requests can be made to submit the final full architecture documents to the repository. TODO: Add link to the full architecture template Once the architecture document is approved, only then can the first code submissions can be made. Development can begin in your own private branch and complete as normal, however, the PR's submitted back to the core MRTK project should be submitted in stages to ensure the review and approval is as smooth as it can be (and ensure core changes do not impact other features) Core Implementation The initial work that should be submitted, is to implement: Definitions Interfaces Configuration profiles Event data If needed, the architectural document can be updated to align with any changes to the implementation. Please ensure that all existing Unit Tests and any new tests are all passing prior to submission. SDK Implementation Once the core interfaces and events are merged in to development, work can then be submitted for the SDK components. Adding the concrete implementation of the feature and testing against the supported platforms and unit tests. Example Implementation Once the SDK components are merged, then any demo scenes or updates to the example scenes can be submitted. Demos are for specific feature highlighting and demonstration Examples are full working scene learning examples New Feature Requirements Most feature implementations can be broken down into 3 main parts: The Feature Manager The Event Data (Optional) The Feature Handler (Optional) Manager Implementation Requirements Assembly Definitions for code outside of the MixedRealityToolkit folder. This ensures features are self-contained and have no dependencies to other features. Be defined using an interface found in MixedRealityToolkit/Definitions/<FeatureName>System . A feature's concrete manager implementation should inherit directly from BaseManager or MixedRealityEventManager if they will raise events. A feature's concrete manager implementation should setup and verify that the scene is ready for that system to use in Initialize . A feature's concrete manager should also clean up after themselves removing anything created in the scene in Destroy . Be registered with the Mixed Reality Manager. If the feature is a core feature, this should be hard coded into the MixedRealityToolkit and CoreServices and added to the MixedRealityConfigurationProfile . This includes being able to specify a concrete implementation via dropdown using SystemType . Features should have a configuration profile that derives from a scriptable object. A default configuration profile located in MixedRealityToolkit.SDK/Profiles and be assigned in the default configuration profile for the Mixed Reality Manager If this feature is not a core feature, then it must be registered using the extension service configuration profile and implement IMixedRealityExtensionService . Have a default implementation located in MixedRealityToolkit.Services/<FeatureName> Events that can be raised with the system should be defined in the interface, with all the required parameters for initializing the event data. Event Data Implementation Requirements The Event Data defines exactly what data the handler is expected to receive from the event. All Event Datum for the feature should be defined in MixedRealityToolkit/EventDatum/<FeatureName> . All new Event Data classes should inherit from GenericBaseEventData Handler Implementation Requirements The Handler Interface defines each event a component should be listening for and the types of data passed. End users will implement the interface to execute logic based on the event data received. Handler interfaces should be defined in MixedRealityToolkit/Interfaces/<FeatureName>System/Handlers . Handler interfaces should inherit from UnityEngine.EventSystems.IEventSystemHandler Opt-in by default. To receive events from the system, the handler will need to register itself with the system to receive those events."
  },
  "Documentation/Contributing/PullRequests.html": {
    "href": "Documentation/Contributing/PullRequests.html",
    "title": "Pull Requests | Mixed Reality Toolkit Documentation",
    "keywords": "Pull Requests Prerequisites If you haven't contributed to a Microsoft project before, you may be asked to sign a contribution license agreement . A comment in the PR will let you know if you do. Important If you are a Microsoft employee and are not a member of the Microsoft organization on GitHub , please link your Microsoft and GitHub accounts on corpnet by visiting Open Source at Microsoft before you start your pull request. There's some process stuff you'll need to do ahead of time. Creating a Pull Request When you are ready to submit a pull request, create a pull request targeting the mrtk_development branch. Read the guidelines and ensure your pull request meets the guidelines. Make sure to reference any Issue / Feature Request or Task the PR relates to. Check the pull request contains only files / changes related to the PR. Check documentation is up to date and included. Check all public fields have comments. If adding a new feature, check that tests are included to validate the feature (see UnitTests ). If fixing a bug, write a test to verify the bug fix. The project maintainers will review your changes. We aim to review all changes within three business days. Please address any review comments, push to your topic branch, and post a comment letting us know that there's new stuff to review. Note All PR's submitted to the project will also be vetted according to the MRTK coding standards guide , so please review these before submitting your PR to ensure a smooth process. Pull Request Guidelines These guidelines are based off of the Google's engineering practices . Keep pull requests small Smaller PRs are reviewed more quickly and thoroughly, are less likely to introduce bugs, easier to roll back, and easier to merge. Pull requests should be small enough that an engineer could review it in under 30 minutes. Try to make a minimal change that addresses just one thing. If you must create a large PR, split it into several PRs that go into either your local branch, or a feature branch of MRTK. Avoid adding new assets (e.g. fbx, obj files) and instead aim to re-use existing assets. Tests should be added in the same PR as your fix / feature, except for emergencies Tests are the best way to ensure changes do not regress existing code, but it is also easy to forget about tests when submitting pull requests. Requiring that they go in with your PR are a great way to ensure that tests get written. Every feature and bug fix should have tests associated with it. If you do not have the expertise or time to write a test, create an issue to write the tests, and mark them with label Consider for Current Iteration . Documentation should be added in the same pull request as a fix / feature Most developers look first at documentation, not code, when understanding how to use a feature. Ensuring documentation is up to date makes it much easier for people to consume and rely MRTK. Documentation should always be bundled with the related pull to ensure items remain up-to-date and consistent. Ensure every public field, method, property has triple slash summary comments so our docfx site can generate descriptions for fields / methods. If needed, update markdown files in Documentation folder. Pull request descriptions should clearly and completely describe changes Clear and complete descriptions of pull requests ensure reviewers understand what they are reviewing. If adding features that contain UX, add an image / gif of the feature you are changing. Here is a good example . Another suggestion is to have a gif of Before and After, for example in this pull request . A tool we recommend for generating gifs from screen captures is ScreenToGif ."
  },
  "Documentation/Contributing/Roadmap.html": {
    "href": "Documentation/Contributing/Roadmap.html",
    "title": "Roadmap | Mixed Reality Toolkit Documentation",
    "keywords": "Roadmap This document outlines the roadmap of the Mixed Reality Toolkit. Current Release Microsoft Mixed Reality Toolkit v2.1.0 Upcoming Releases Product Description Timeline Project board MRTK V2.3 Next iteration of MRTK January 2020 https://github.com/microsoft/MixedRealityToolkit-Unity/milestone/10 MRTK V2.4 Future iteration of MRTK TBD https://github.com/microsoft/MixedRealityToolkit-Unity/milestone/11 Release details, including backlog items, can be found on the GitHub milestone pages . The complete set of open issues can also be found on GitHub . Mixed Reality Toolkit (MRTK) Roadmap The Mixed Reality Toolkit is an all-new product, built to be cross MR/AR/VR/XR platform by design. There are two planned pre-releases after which the Mixed Reality Toolkit will become the primary product. The Mixed Reality Toolkit will require Unity 2018.4. When Unity releases an LTS (Long Term Support) product, the Mixed Reality Toolkit will update to the LTS release. MRTK will also support the latest non-beta (ex: 2019.1) tech branch version of Unity, at the time at which MRTK was released. 2.3.0 The version 2.3.0 plan has been finalized. While some details may change as the iteration progresses, the following describes the overall plan for the next MRTK release. For the latest status of the release, please visit the milestone page . Status: In development Timeline: January 2029 Themes: Stability Developer education Unity 2019.3 XR SDK support User Experience Iterate on mobile AR support Stability Quality and stability are the top priority for this and all Microsoft Mixed Reality Toolkit releases. We will continue to prioritize customer and partner issues that impact the stability of MRTK components. The MRTK build and deploy tools remain a continued area of stability and quality focus. Developer education Developer documentation and example scenes are, like stability, an ongoing priority for the MRTK team. Unity 2019.3 XR SDK support XR SDK is Unity's new mixed reality platform. The Microsoft Mixed Reality Toolkit is committed to supporting our customers on this new platform. All new platform support in MRTK is expected to be delivered via XR SDK. User Experience User experience (UX) work will include: Bug fixes Making it easier to add MRTK UX elements to projects Bounding box and manipulator updates New features Tap to place (HoloToolkit feature) Follow solver ( https://github.com/microsoft/MixedRealityToolkit-Unity/issues/5713 ) Iterate on mobile AR The Mixed Reality Toolkit will gain experimental support for spatial awareness (planes and points) on mobile AR platforms (Android ARCore and iOS ARKit) via ARFoundation. Refinements to the camera support module shipped in version 2.2.0 are also planned. 2.4.0 The planning for version 2.4.0 is in the early stages. All of the details below are subject to change. For the latest information, please consult GitHub . Status: Early planning Timeline: TBD Themes: Stability Developer education Potential areas of focus Leap Motion support (Unity 2018 and Unity 2019) Enhanced MRTK modularity Integration of Azure services User Experience"
  },
  "Documentation/Contributing/UnitTests.html": {
    "href": "Documentation/Contributing/UnitTests.html",
    "title": "Writing and Running Tests in MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "Writing and Running Tests in MRTK To ensure MRTK is reliable, MRTK has a set of tests to ensure that changes to the code does not regress existing behavior. Having good test coverage in a big codebase like MRTK is crucial for stability and having confidence when making changes. MRTK uses the Unity Test Runner which uses a Unity integration of NUnit . This guide will provide a starting point on how to add tests to MRTK. It will not explain the Unity Test Runner and NUnit which can be looked up in the links provided. Before submitting a pull request, make sure to: Run the tests locally so your changes don't regress existing behavior (completing PRs won't be allowed if any tests fail). If fixing a bug, write a test to test the fix and ensure that future code modifications won't break it again. If writing a feature, write new tests to prevent upcoming code changes breaking this feature. Running tests Unity editor The Unity Test Runner can be found under Window > General > Test Runner and will show all available MRTK play and edit mode tests. Command line Tests can also be run by a powershell script located at Scripts\\test\\run_playmode_tests.ps1 . This will run the playmode tests exactly as they are executed on github / CI (see below), and print results. Here are some examples of how to run the script Run the tests on the project located at H:\\mrtk.dev, with Unity 2018.4.1f1 .\\run_playmode_tests.ps1 H:\\mrtk.dev -unityExePath = \"C:\\Program Files\\Unity\\Hub\\Editor\\2018.4.1f1\\Editor\\Unity.exe\" Run the tests on the project located at H:\\mrtk.dev, with Unity 2018.4.1f1, output results to C:\\playmode_test_out .\\run_playmode_tests.ps1 H:\\mrtk.dev -unityExePath = \"C:\\Program Files\\Unity\\Hub\\Editor\\2018.4.1f1\\Editor\\Unity.exe\" -outFolder \"C:\\playmode_test_out\\\" It's also possible to run the playmode tests multiple times via the run_repeat_tests.ps1 script. All parameters used in run_playmode_tests.ps1 may be used. .\\run_repeat_tests.ps1 -Times 5 Pull Request Validation MRTK's CI will build MRTK in all configurations and run all edit and play mode tests. CI can be triggered by posting a comment on the github PR /azp run mrtk_pr if the user has sufficient rights. CI runs can be seen in the 'checks' tab of the PR. Only after all of the tests have passed successfully can the PR be merged into mrtk_development. Stress tests / bulk tests Sometimes tests will only fail occasionally which can be frustrating to debug. To have multiple test runs locally, modify the according test scripts. The following python script should make this scenario more convenient. Prerequisite for running the python script is having Python 3.X installed . For a single test that needs to be executed multiple times: [UnityTest] public IEnumerator MyTest() {...} Run the following from a command line ( PowerShell is recommended) cd scripts\\tests # Repeat the test 5 times. Default is 100 python .\\generate_repeat_tests.py -n 5 -t MyTest Copy and paste the output into your test file. The following script is for running multiple tests in sequence: cd scripts\\tests # Repeat the test 5 times. Default is 100 python .\\generate_repeat_tests.py -n 5 -t MyTest MySecondTest The new test file should now contain [UnityTest] public IEnumerator A1MyTest0(){ yield return MyTest();} [UnityTest] public IEnumerator A2MyTest0(){ yield return MyTest();} [UnityTest] public IEnumerator A3MyTest0(){ yield return MyTest();} [UnityTest] public IEnumerator A4MyTest0(){ yield return MyTest();} [UnityTest] public IEnumerator MyTest() {...} Open the test runner and observe the new tests that can now be called repeatedly. Writing tests There are two types of tests that can be added for new code Play mode tests Edit mode tests Play mode tests MRTK play mode tests have the ability to test how your new feature responds to different input sources such as hands or eyes. New play mode tests can inherit BasePlayModeTests or the skeleton below can be used. To create a new play mode test: Navigate to Assets > MixedRealityToolkit.Tests > PlayModeTests Right click, Create > Testing > C# Test Script Replace the default template with the skeleton below #if !WINDOWS_UWP // When the .NET scripting backend is enabled and C# projects are built // The assembly that this file is part of is still built for the player, // even though the assembly itself is marked as a test assembly (this is not // expected because test assemblies should not be included in player builds). // Because the .NET backend is deprecated in 2018 and removed in 2019 and this // issue will likely persist for 2018, this issue is worked around by wrapping all // play mode tests in this check. using Microsoft.MixedReality.Toolkit.Input; using Microsoft.MixedReality.Toolkit.Utilities; using NUnit.Framework; using System; using System.Collections; using System.Linq; using UnityEngine; using UnityEngine.TestTools; namespace Microsoft.MixedReality.Toolkit.Tests { class ExamplePlayModeTests { // This method is called once before we enter play mode and execute any of the tests // do any kind of setup here that can't be done in playmode public void Setup() { // eg installing unity packages is only possible in edit mode // so if a test requires TextMeshPro we will need to check for the package before entering play mode PlayModeTestUtilities.InstallTextMeshProEssentials(); } // Do common setup for each of your tests here - this will be called for each individual test after entering playmode [Setup] public void Init() { // in most play mode test cases you would want to at least create an MRTK GameObject using the default profile TestUtilities.InitializeMixedRealityToolkit(true); } // Destroy the scene - this method is called after each test listed below has completed [TearDown] public void TearDown() { PlayModeTestUtilities.TearDown(); } #region Tests /// <summary> /// Skeleton for a new MRTK play mode test. /// </summary> [UnityTest] public IEnumerator TestMyFeature() { // ---------------------------------------------------------- // EXAMPLE PLAY MODE TEST METHODS // ---------------------------------------------------------- // Getting the input system // var inputSystem = PlayModeTestUtilities.GetInputSystem(); // Creating a new test hand for input // var rightHand = new TestHand(Handedness.Right); // yield return rightHand.Show(new Vector3(0, 0, 0.5f)); // Moving the new test hand // We are doing a yield return here because moving the hand to a new position // requires multiple frames to complete the action. // yield return rightHand.MoveTo(new Vector3(0, 0, 2.0f)); // Getting a specific pointer from the hand // var linePointer = PointerUtils.GetPointer<LinePointer>(Handedness.Right); // Assert.IsNotNull(linePointer); // --------------------------------------------------------- // Your new test here yield return null; } #endregion } } #endif Edit mode tests Edit mode tests are executed in Unity's edit mode and can be added under the MixedRealityToolkit.Tests > EditModeTests folder in the Mixed Reality Toolkit repo. To create a new test the following template can be used: // Copyright (c) Microsoft Corporation. // Licensed under the MIT License. using NUnit.Framework; namespace Microsoft.MixedReality.Toolkit.Tests { class EditModeExampleTest { [Test] /// the name of this method will be used as test name in the unity test runner public void TestEditModeExampleFeature() { } } } Test naming conventions Tests should generally be named based on the class they are testing, or the scenario that they are testing. For example, given a to-be-tested class: namespace Microsoft.MixedReality.Toolkit.Input { class InterestingInputClass { } } Consider naming the test namespace Microsoft.MixedReality.Toolkit.Tests.Input { class InterestingInputClassTest { } } Consider placing the test in a folder hierarchy that is similar to its corresponding non-test file. For example: Non-Test: Assets/MixedRealityToolkit/Utilities/InterestingUtilityClass.cs Test: Assets/MixedRealityToolkit.Tests/EditModeTests/Core/Utilities/InterestingUtilityClassTest.cs This is to ensure that there's a clear an obvious way of finding each class's corresponding test class, if such a test class exists. Placement of scenario based tests is less defined - if the test exercises the overall input system, for example, consider putting it into an \"InputSystem\" folder in the corresponding edit mode or play mode test folder. Test script icons When adding a new test, please modify the script to have the correct MRTK icon. There's an easy MRTK tool to do so: Go go the Mixed Reality Toolkit menu item Click on Utilities, then Update, then Icons Click on Tests, and the updater will run automatically, updating any test scripts missing their icons MRTK Utility methods This section shows some of the commonly used code snippets / methods when writing tests for MRTK. There are two Utility classes that help with setting up MRTK and testing interactions with components in MRTK TestUtilities PlayModeTestUtilities TestUtilities provide the following methods to set up your MRTK scene and GameObjects: /// creates the mrtk GameObject and sets the default profile if passed param is true TestUtilities.InitializeMixedRealityToolkit() /// creates an empty scene prior to adding the mrtk GameObject to it TestUtilities.InitializeMixedRealityToolkitAndCreateScenes(); /// sets the initial playspace transform and camera position TestUtilities.InitializePlayspace(); /// destroys previously created mrtk GameObject and playspace TestUtilities.ShutdownMixedRealityToolkit(); Please refer to the API docs of TestUtilities and PlayModeTestUtilities for further methods of these util classes as they're extended on a regular basis while new tests get added to MRTK. See also Documentation portal generation guide"
  },
  "Documentation/CrossPlatform/UsingARFoundation.html": {
    "href": "Documentation/CrossPlatform/UsingARFoundation.html",
    "title": "如何为iOS和Android配置MRTK [实验性] | Mixed Reality Toolkit Documentation",
    "keywords": "如何为iOS和Android配置MRTK [实验性] 安装必需的软件包 从以下位置下载并导入 Microsoft.MixedReality.Toolkit.Providers.UnityAR 程序包, 从 GitHub 或 NuGet [!注意] 导入UnityAR程序包后，您将看到以下错误: Assembly has reference to non-existent assembly 'Unity.XR.ARFoundation' (Assets/MixedRealityToolkit.Staging/UnityAR/Microsoft.MixedReality.Toolkit.Providers.UnityAR.asmdef) . 要解决，请安装下面列出的正确版本的ARFoundation。 在Unity软件包管理器（UPM）中，安装以下软件包: Unity 2018.4.x Android iOS 评论 AR Foundation 版本: 1.5.0 - preview 6 AR Foundation 版本: 1.5.0 - preview 6 对于Unity 2018.4，此软件包包含在预览中。要查看软件包：Window > Package Manager > Advanced > Show Preview Packages ARCore XR Plugin 版本: 2.1.2 ARKit XR Plugin 版本: 2.1.2 Unity 2019.x Android iOS AR Foundation 版本: 2.1.4 AR Foundation 版本: 2.1.4 ARCore XR Plugin 版本: 2.1.2 ARKit XR Plugin 版本: 2.1.2 如果使用Unity 2019.x，则需要修改Unity AR提供者的程序集定义文件以添加 UnityEngine.SpatialTracking 引用。 [!注意] MRTK将根据项目加载的Unity版本自动更新程序集定义。此处提供此信息以供参考。 启用Unity AR相机设置提供者 以下步骤假定使用MixedRealityToolkit对象。其他服务注册者所需的步骤可能有所不同。 Select the MixedRealityToolkit object in the scene hierarchy. Select Copy and Customize to Clone the MRTK Profile to enable custom configuration. Select Clone next to the Camera Profile. Navigate the Inspector panel to the camera system section and expand the Camera Settings Providers section. Click Add Camera Settings Provider and expand the newly added New camera settings entry. Select the Unity AR Camera Settings provider For more information about configuring the Unity AR camera settings provider: Unity AR camera settings provider . Building a Scene for Android and iOS devices Make sure you have added the UnityAR Camera Settings Provider to your scene. Switch platform to either Android or iOS in the Unity Build Settings When you switch the platform you should see the MRTK Project Configurator Window with settings for your chosen platform. Click Apply to enable platform specific settings. iOS Project Configurator Settings There are no additional steps after switching the platform for Android. If the platform is iOS, Edit > Project Settings > Player > Other Settings, under the Optimization header, uncheck Strip Engine Code Note Unchecking Strip Engine Code is the short term solution to an error in Xcode #6646 . We are working on a long term solution for MRTK 2.3.0. Build and run the scene See Also Unity AR Camera Settings"
  },
  "Documentation/Architecture/Overview.html": {
    "href": "Documentation/Architecture/Overview.html",
    "title": "架构概述 | Mixed Reality Toolkit Documentation",
    "keywords": "架构概述 要全面了解MRTK的内容，本文档中包含的架构信息将帮助您了解以下内容： MRTK的大型部分及其连接方式 MRTK引入的概念在vanilla Unity中可能不存在 一些较大的系统（例如Input）如何工作 本部分并不是要教您如何执行任务，而是要教这些任务的结构以及原因。 众多受众，一个工具包 MRTK没有统一的受众。它被编写来支持用例，从第一次黑客马拉松到个人为企业构建复杂的，共享的经验。可能已经编写了一些代码和API，它们彼此之间的优化程度更高（即MRTK的某些部分似乎针对“一键配置(one click configure)”进行了优化），但需要注意的是，其中一些是出于历史和资源原因。随着MRTK的发展，应将构建的功能设计为可扩展以支持用例范围。 MRTK还具有在VR和AR体验中进行扩展的要求。构建部署在HoloLens 2或HoloLens 1上的可适当回退的应用程序应该很容易，并且构建针对OpenVR和WMR（和其他平台）的应用程序应该很简单。尽管团队有时可能会将特定的迭代重点放在特定的系统或平台上，但长期目标是为人们在何处构建混合现实体验提供广泛的支持。 高层级分解 MRTK既是用于快速获取混合现实（MR）体验的工具的集合，同时也是一个应用程序框架，它对自己的运行时、如何扩展和如何配置有自己的方式。 在较高层级，可以通过以下方式分解MRTK： MRTK还包含另一套实用程序，它们与其余MRTK几乎没有依赖（仅举几例: build tools, solvers, audio influencers,smoothing utilities和line renderers） 架构文档的其余部分将从框架和运行时开始，从下至上，逐步发展到更有趣，更复杂的系统，例如输入。请查看目录以继续进行架构概述。"
  },
  "Documentation/Architecture/SpatialAwareness.html": {
    "href": "Documentation/Architecture/SpatialAwareness.html",
    "title": "Spatial Awareness | Mixed Reality Toolkit Documentation",
    "keywords": "Spatial Awareness Read Spatial Awareness Getting Started"
  },
  "Documentation/Architecture/SystemsExtensionsProviders.html": {
    "href": "Documentation/Architecture/SystemsExtensionsProviders.html",
    "title": "系统，扩展服务和数据提供者 | Mixed Reality Toolkit Documentation",
    "keywords": "系统，扩展服务和数据提供者 在混合现实工具包中，许多功能以服务形式提供。服务分为三大类：系统，扩展服务和数据提供者(systems, extension services and data providers.)。 Systems (系统) 系统是提供混合现实工具包核心功能的服务。所有系统都实现了 IMixedRealityService 接口. 边界系统 相机系统 诊断系统 输入系统 场景系统 空间感知系统 传送系统 列出的每个系统都出现在MixedRealityToolkit组件的 配置文件 中。 Extensions (扩展) 扩展服务是扩展“混合现实工具包”功能的组件。所有扩展服务都实现了 IMixedRealityExtensionService 接口。 有关创建扩展服务的信息，请参考 扩展服务 article. 为了使MRTK可以访问，扩展服务是使用MixedRealityToolkit组件的配置文件的“Extensions”部分进行注册和配置的。 Data Providers (数据提供者) 数据提供者是向“混合现实工具包”服务提供数据的组件。所有数据提供者都实现了 IMixedRealityDataProvider 接口。 [!注意] 并非所有服务都需要数据提供者。在MixedRealityToolkit的系统中，输入和空间感知系统是唯一利用数据提供者的服务。 为了使特定MRTK服务可以访问，数据提供者已在服务的配置文件中注册。 应用程序代码通过 IMixedRealityDataProviderAccess 接口访问数据提供者。 [!重要] 尽管 ImixedRealityDataProvider 继承自 ImixedRealityService ，但数据提供者未在 MixedRealityServiceRegistry 中注册。要访问数据提供者，应用程序代码必须查询它们注册的服务实例（例如：输入系统）。 Input (输入) MRTK输入系统仅使用实现 IMixedRealityInputDeviceManager 接口的数据提供者。 下面的示例演示如何访问输入模拟提供者（input simulation provider）并切换SmoothEyeTracking属性。 if (CoreServices.InputSystem != null) { IMixedRealityDataProviderAccess dataProviderAccess = CoreServices.InputSystem as IMixedRealityDataProviderAccess; if (dataProviderAccess != null) { IInputSimulationService inputSimulation = dataProviderAccess.GetDataProvider<IInputSimulationService>(); if (inputSimulation != null) { inputSimulation.SmoothEyeTracking = !inputSimulation.SmoothEyeTracking; } } } [!注意] 输入系统仅返回运行该应用程序的平台所支持的数据提供者。 有关为MRTK输入系统编写数据提供者的信息，请参见 创建输入系统数据提供者 . Spatial Awareness (空间感知) MRTK空间感知系统仅使用实现 IMixedRealitySpatialAwarenessObserver 接口的数据提供者。 以下示例演示如何访问已注册的空间网格数据提供者（spatial mesh data providers）并更改网格的可见性。 if (CoreServices.SpatialAwarenessSystem != null) { IMixedRealityDataProviderAccess dataProviderAccess = CoreServices.SpatialAwarenessSystem as IMixedRealityDataProviderAccess; if (dataProviderAccess != null) { IReadOnlyList<IMixedRealitySpatialAwarenessMeshObserver> observers = dataProviderAccess.GetDataProviders<IMixedRealitySpatialAwarenessMeshObserver>(); foreach (IMixedRealitySpatialAwarenessMeshObserver observer in observers) { // 设置网格以使用遮挡材质 observer.DisplayOption = SpatialMeshDisplayOptions.Occlusion; } } } [!注意] 空间感知系统仅返回运行该应用程序的平台所支持的数据提供者。 有关编写MRTK空间感知系统数据提供者的信息，请参见 创建空间感知系统数据提供者 . 建议浏览 是什么构成了混合现实功能 扩展服务 创建输入系统数据提供者 创建空间感知系统的系统数据提供者 IMixedRealityService 接口 IMixedRealityDataProvider 接口 IMixedRealityExtensionService 接口"
  },
  "Documentation/Architecture/InputSystem/ControllersPointersAndFocus.html": {
    "href": "Documentation/Architecture/InputSystem/ControllersPointersAndFocus.html",
    "title": "控制器，指针和焦点 | Mixed Reality Toolkit Documentation",
    "keywords": "控制器，指针和焦点 控制器，指针和焦点(Controllers, pointers, and focus)是更高级的概念，它们建立在核心输入系统所建立的基础之上。它们一起提供了场景中与对象交互的大部分机制。 Controllers (控制器) 控制器表示物理控制器（6个自由度，全关节手等）。它们是由设备管理器创建的，负责与相应的底层系统进行通信，并将该数据转换为MRTK形数据和事件。 例如，在Windows Mixed Reality平台上， WindowsMixedRealityArticulatedHand 是一个控制器，负责与底层Windows 手部追踪API 交互，获取有关手的关节，姿势和其他属性的信息。它负责将这些数据转换为相关的MRTK事件（例如，通过调用RaisePoseInputChanged或RaiseHandJointsUpdated）并更新其内部状态，以便对 TryGetJointPose 的查询将返回正确的数据。 通常，控制器的生命周期将涉及： 在检测到新来源（例如，检测并开始跟踪一只手）时，设备管理器就会创建一个控制器。 在控制器的Update（）循环中，它调用其底层API系统。 在同一更新循环中，它通过直接调用核心输入系统本身来引发输入事件更改（例如，引发HandMeshUpdated或HandJointsUpdated）。 Pointers and focus (指针和焦点) 指针用于与游戏对象进行交互。本节介绍如何创建指针，如何更新指针以及如何确定被聚焦的对象。它还将介绍存在的不同类型的指针以及它们处于活动状态的场景。 指针类别 指针通常属于以下类别之一： Far pointers(远指针) 这些类型的指针用于与距离用户较远的对象进行交互（“远距离”仅定义为“不靠近”）。这些类型的指针通常会投射出可以深入世界的线，并允许用户与不紧邻它们的对象进行交互并对其进行操作。 Near pointers(近指针) 这些类型的指针用于与距离用户足够近的对象进行交互以进行抓取，触摸和操纵。通常，这些类型的指针通过查找附近的对象来与对象进行交互。（通过在较小范围内进行射线投射，进行球面投射来查找附近的对象，或者枚举被认为是可抓取/可触摸的对象列表）。 Teleport pointers(传送指针) 这些类型的指针插入到传送系统(teleportation system)中，以处理将用户移动到指针指向的位置。 Pointer Mediation(指针调解器) 因为单个控制器可以具有多个指针（例如，全关节手可以具有近距交互指针和远距交互指针），所以存在一个组件，负责调解哪个指针应处于活动状态。 例如，当用户的手接近可按下的按钮时， ShellHandRayPointer 应该停止显示，并且 PokePointer 应该被启用。 这是由 DefaultPointerMediator 处理的，它负责根据所有指针的状态确定哪些指针处于活动状态。它做的一个关键事情是 当一个近指针靠近对象时，禁用远指针 . 可以通过更改指针配置文件上的 PointerMediator 属性来提供指针调解器的替代实现。 如何禁用指针 由于指针调解器每帧运行，所以它最终控制所有指针的活动/非活动状态。因此，如果在代码中设置了指针的IsInteractionEnabled属性，则指针调解器将在每帧覆盖它。相反，您可以指定 PointerBehavior 控制指针是打开还是关闭自己。请注意，这仅在使用MRTK中的 FocusProvider 和 DefaultPointerMediator 默认设置时有效。 示例：在MRTK中禁用手部射线 以下代码将关闭MRTK中的手部射线： // 关闭所有手部射线 PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff); // 仅关闭右手的射线 PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOff, Handedness.Right); 以下代码将使手部射线返回其在MRTK中的默认行为： PointerUtils.SetHandRayPointerBehavior(PointerBehavior.Default); 以下代码将强制打开手射线，无论是否靠近可抓取的物体： // 打开所有手部射线 PointerUtils.SetHandRayPointerBehavior(PointerBehavior.AlwaysOn); 查看 PointerUtils 和 TurnPointersOnOff 有关更多示例。 FocusProvider FocusProvider 是负责遍历所有指针列表并弄清楚每个指针的焦点对象是什么的主力部分。 在每个 Update() 调用中，这将： 通过射线投射并执行指针本身配置的命中检测来更新所有指针（例如，球体指针可以指定SphereOverlap raycastMode，因此FocusProvider将进行基于球体的碰撞） 在每个指针的基础上更新聚焦对象（即，如果一个对象获得焦点，它也会触发那些对象的事件，如果一个对象失去焦点，它将触发焦点丢失，等等）。 指针配置和生命周期 指针可以配置 在输入系统配置文件的 Pointers 部分中。 The lifetime of a pointer is generally the following: 设备管理器将检测到控制器的存在。然后，该设备管理器将通过调用 RequestPointers 来创建与控制器关联的一组指针. FocusProvider在其Update()循环中，将遍历所有有效指针并执行关联的射线或命中检测逻辑。所以也有可能同时有多个焦点对象。 因为有可能同时有多个输入源处于活动状态（例如，两只手处于激活状态），所以也可以有多个对象同时聚焦。 当发现控制器源丢失时，设备管理器将销毁与丢失的控制器关联的指针。"
  },
  "Documentation/Architecture/InputSystem/CoreSystem.html": {
    "href": "Documentation/Architecture/InputSystem/CoreSystem.html",
    "title": "核心系统 | Mixed Reality Toolkit Documentation",
    "keywords": "核心系统 输入系统(input system)的核心是 混合现实输入系统 ，该服务负责初始化和操作与MRTK相关的所有与输入有关的功能。 Note 假定读者已经阅读并基本了解 术语 部分. 该服务负责： 读取 输入系统配置文件 启动各种设备管理器（例如， OpenVR , Windows混合现实 , Unity Touch ).实例化的设备管理器(device managers)集由输入系统配置文件配置(input system profile.)。 实例化 GazeProvider ,，该组件除了提供HoloLens2风格的视线凝视信息外，还负责提供HoloLens1风格的视线凝视信息。 实例化 FocusProvider ，它是负责确定具有焦点的对象的组件。这在 指针和焦点 文档部分描述。 提供所有输入事件的注册点（例如 全局侦听器 ). 为这些输入事件提供事件分发功能。 Input events(输入事件) 输入事件通常在两个不同的通道上触发： Objects in focus(焦点对象) 事件可以直接发送到具有焦点的GameObject。例如，一个对象可能有一个实现 IMixedRealityTouchHandler 的脚本。当一只手靠近该对象时，该对象将获得触摸事件。这些类型的事件在GameObject层次结构中“上升”，直到找到能够处理该事件的GameObject。 这是通过使用在 DispatchEventToObjectFocusedByPointer 中的 ExecuteHierarchy 实现。 全局侦听器 事件可以发送到全局侦听器(Global listeners)。可以使用输入系统的 IMixedRealityEventSystem 接口注册所有输入事件。建议使用 RegisterHandler 方法注册全局事件-已弃用的Register函数将导致侦听器获得所有输入事件的通知，而不仅仅是特定类型的输入事件(其中类型由事件接口定义)。 注意 fallback listeners 是不鼓励使用的另一种全局侦听器，因为它们将接收场景中其他地方未处理的每个输入事件。 Order of event dispatch(事件派发顺序) 通常，事件以以下方式发送给侦听器。请注意，如果以下任何步骤将事件标记为 handled ，事件分发过程停止。 事件发送到全局侦听器。 事件被发送到焦点对象的模式对话框。 事件被发送到焦点对象。 事件发送给后备侦听器（fallback listeners）。 Device Managers / Data Providers(设备管理器/数据提供者) 这些实体负责与较低级别的API（例如Windows Mixed Reality API或OpenVR API）进行接口并将来自这些系统的数据转换为符合MRTK的高层输入抽象的数据。他们负责检测，创建和管理 控制器 的生命周期. 设备管理器的基本流程包括： 设备管理器由输入系统服务实例化。 设备管理器向其底层系统注册（例如，Windows Mixed Reality设备管理器将注册 手势和交互事件 （gesture and interaction events）). 它创建从底层系统中发现的控制器（例如，provider可以检测到全关节手的存在） 在其Update（）循环中，调用UpdateController（）以轮询底层系统的新状态并更新其控制器表示形式。"
  },
  "Documentation/Architecture/InputSystem/Terminology.html": {
    "href": "Documentation/Architecture/InputSystem/Terminology.html",
    "title": "输入系统 | Mixed Reality Toolkit Documentation",
    "keywords": "输入系统 在MRTK提供的所​​有功能中，输入系统是最大的系统之一。工具包中的许多内容都建立在它之上（指针pointers，焦点focus，预制体prefabs）。输入系统中的代码允许自然交互，例如跨平台抓取和旋转。 输入系统具有一些自己的术语，值得定义： Data providers(数据提供者) 输入配置文件中的输入设置引用了称为数据提供者（data providers）的实体-另一个描述这些实体的词是设备管理器。这些组件的工作是通过与特定的底层系统接入来扩展MRTK输入系统。provider的一个示例是Windows Mixed Reality provider，它的工作是与基础Windows Mixed Reality API进行对话，然后将这些API中的数据转换为下面的MRTK特定的输入概念。另一个示例是OpenVR provider（其工作是与Unity抽象的OpenVR API版本进行通信，然后将数据转换为MRTK输入概念）。 Controller(控制器) 物理控制器的表示形式（无论是6自由度控制器，带手势支持的HoloLens 1型手，全关节手，跳跃运动控制器等）。控制器由设备管理器（device manager）生成（例如，WMR设备管理器会在看到全关节手出现时，生成一个控制器并管理其寿命）。 Pointer(指针) 控制器使用指针与游戏对象进行交互。例如，近距离交互指针负责检测手（它是控制器）何时靠近那些支持“近距离交互”的对象。指示器的其他示例是远距传递或远距指针（即手部射线指针），它们使用远射线投射来与长出用户的手臂的内容进行交互。 指针由设备管理器创建，然后附加到输入源。要获取控制器的所有指针，请执行: controller.InputSource.Pointers 请注意，控制器可以同时与许多不同的指针相关联–为了确保不会陷入混乱，有一个指针调解器（pointer mediator）可以控制允许激活哪些指针（例如，调解器将当检测到近距离交互时，禁用远距离交互指针）。 Focus(焦点) 指针事件发送到焦点对象。焦点的选择因指示器类型而异-手部射线指示器将使用射线，而食指的戳动指示器将使用球形投射。对象必须实现IMixedRealityFocusHandler才能获得焦点。可以全局注册一个对象以接收未过滤的指针事件，但是不建议使用此方法。 更新焦点对象的组件是 焦点提供者 Cursor(光标) 与指针关联的实体，在指针交互时提供额外的视觉提示。例如，FingerCursor会在您的手指周围呈现一个圆环，并且当您的手指靠近“近处可交互”的对象时可以旋转该环。一个指针可以同时与一个光标关联。 Interaction and Manipulation(交互与操作) 可以使用交互或操作脚本标记对象。这可以通过 Interactable , 或类似于 NearInteractionGrabbable / ManipulationHandler . 例如，NearInteractionGrabbable和NearInteractionTouchable允许某些指针（尤其是近处交互的指针）知道哪些对象可以成为焦点。 Interactable和ManipulationHandler是侦听指针事件以修改UI视觉效果或移动/缩放/旋转游戏对象的组件的示例。 下图捕获了MRTK输入栈的高级构建（从下至上）："
  },
  "Documentation/Boundary/BoundarySystemGettingStarted.html": {
    "href": "Documentation/Boundary/BoundarySystemGettingStarted.html",
    "title": "Boundary System (边界系统) | Mixed Reality Toolkit Documentation",
    "keywords": "Boundary System (边界系统) 边界系统为可视化混合现实应用程序中的虚拟现实边界(boundary)组件提供了支持。边界定义了用户可以戴着VR头显安全地走动的区域。边界是混合现实体验的重要组成部分，可帮助用户在佩戴VR头显时避免看不见的障碍。 许多虚拟现实平台提供一个自动显示，例如当用户或其控制器接近边界时，白色轮廓叠加在虚拟世界上。Mixed Reality Toolkit的边界系统扩展了此功能，可以显示被跟踪区域的轮廓，地板平面和其他可用于向用户提供额外信息的功能。 入门 增加对边界的支持需要混合现实工具包的两个关键组件：边界系统和配置有边界的虚拟现实平台。 启用 边界系统 配置 边界可视化 生成和部署 具有已配置边界的VR平台 启用边界系统 边界系统由MixedRealityToolkit对象（或另一个 服务注册者 组件管理)。 以下步骤假定使用MixedRealityToolkit对象。其他服务注册者（service registrars）所需的步骤可能有所不同。 在场景层次中选择MixedRealityToolkit对象。 将“Inspector”面板导航到“Boundary System”部分，然后选中“启用” 选择边界系统实现。MRTK提供的默认类实现是 MixedRealityBoundarySystem [!注意] 所有边界系统实现都必须继承 IMixedRealityBoundarySystem 配置边界可视化 边界系统使用配置文件 指定要显示的边界组件并配置其外观。 [!注意] 默认配置文件的用户 ( DefaultMixedRealityBoundaryVisualizationProfile ) 的边界系统已预先配置为显示地板平面，游戏区域和被跟踪区域。 生成和部署 一旦边界系统配置了所需的可视化选项，就可以将项目生成为部署到目标平台。 [!注意] Unity Play模式可在编辑器中可视化所配置的边界。此功能可以快速进行开发和测试，而无需生成和部署步骤。确保使用在目标硬件和平台上运行的应用程序的生成和部署版本进行最终验收测试。 通过代码访问边界系统 如果启用并配置了边界系统，则可以通过CoreServices静态帮助程序类访问边界系统。然后，该引用可用于动态更改边界参数，并访问系统管理的相关GameObject。 // 在运行时隐藏边界墙 CoreServices.BoundarySystem.ShowBoundaryWalls = false; // 为场景中的地面可视化获取Unity GameObject GameObject floorVisual = CoreServices.BoundarySystem.GetFloorVisualization(); 建议阅读 边界API文档 配置边界可视化"
  },
  "Documentation/Boundary/ConfiguringBoundaryVisualization.html": {
    "href": "Documentation/Boundary/ConfiguringBoundaryVisualization.html",
    "title": "配置边界可视化 | Mixed Reality Toolkit Documentation",
    "keywords": "配置边界可视化 边界可视化配置文件(Boundary Visualization Profile ) 提供了用于为边界系统配置视觉美感和其他相关参数的选项。边界可视化效果将附加到场景中的“混合现实游戏空间（Mixed Reality Playspace object）”对象，并与用户一起传送。 General Settings (通用设置) Boundary Height (边界高度) 边界高度指示地面上方应渲染的边界上限与地面的距离。默认值为3米。 Floor Settings (地面设置) Show 指示是否要创建地板平面并将其添加到场景。默认值是true。 Material 指示创建地板平面时应使用的材质。 Scale 指示要创建的地板平面的大小（以米为单位）。默认比例为3米 x 3米见方。 Physics Layer 应该在其上设置地板平面的图层。默认值为 default 层。 Play Area Settings (游戏区域设置) Show 指示是否创建了游戏区域矩形并将其添加到场景中。默认值是true。 Material 指示在创建游戏区域对象时应使用的材质。 Physics Layer 应当在其上设置游戏区域的图层。默认值为*忽略射线（Ignore Raycast）*层。 Tracked Area Settings (跟踪区域设置 ) Show 指示是否创建跟踪区域的轮廓并将其添加到场景中。默认值是true。 Material 指示在创建跟踪区域轮廓时应使用的材质。 Physics Layer 应当在其上设置跟踪区域的图层。默认值为 Ignore Raycast 层。 Boundary Wall Settings (边界墙设置) Show 指示是否要创建边界墙平面并将其添加到场景。默认值为false。 Material 指示在创建边界墙平面时应使用的材质。 Physics Layer 应在其上设置边界墙的图层。默认值为 Ignore Raycast 层。 [!注意] 将边界墙组件设置为 Ignore Raycast 以外的物理层可能会阻止用户与场景中的对象进行交互。 Boundary Ceiling Settings (边界顶端设置) Show 指示是否要创建边界顶端平面并将其添加到场景。默认值为false。 Material 指示在创建边界顶端平面时应使用的材质。 Physics Layer 应在其上设置边界墙的图层。默认值为 Ignore Raycast 层。 [!注意] 将边界顶端组件设置为 Ignore Raycast 以外的物理层可能会阻止用户与场景中的对象进行交互。 建议浏览 边界API文档 边界系统"
  },
  "Documentation/CameraSystem/CameraSystemOverview.html": {
    "href": "Documentation/CameraSystem/CameraSystemOverview.html",
    "title": "相机系统 | Mixed Reality Toolkit Documentation",
    "keywords": "相机系统 相机系统使Microsoft Mixed Reality Toolkit能够配置和优化该应用程序的相机，以用于混合现实应用程序。使用相机系统，可以编写应用程序以支持不透明（例如虚拟现实）和透明（例如Microsoft HoloLens）设备，而无需编写代码来区分和适应每种类型的显示。 启用相机系统 相机系统由MixedRealityToolkit对象（或另一个服务注册者组件）管理。 以下步骤假定使用MixedRealityToolkit对象。其他服务注册者所需的步骤可能有所不同。 在场景层次中选择MixedRealityToolkit对象。 将“Inspector”面板导航到“camera system”部分，并确保已选中 Enable Camera System 。 选择相机系统实现。MRTK提供的默认类实现是 MixedRealityCameraSystem 。 选择所需的配置文件 配置相机系统 Settings providers (设置提供者 ) 相机设置提供者支持相机的平台特定配置。这些设置可能包括自定义配置步骤和/或组件。 可以通过单击 Add Camera Settings Provider 按钮来添加提供者。可以通过单击提供者名称右侧的 - 按钮将其删除。 [!注意] 并非所有平台都需要相机设置提供者。如果没有与运行该应用程序的平台兼容的提供者，则Microsoft Mixed Reality Toolkit将应用基本默认值。 Display settings (显示设置 ) 为不透明（例如：虚拟现实）和透明（例如：Microsoft HoloLens）显示指定了显示设置。使用这些设置在运行时配置相机。 Near Clip near clip plane是相机可以渲染的最接近的虚拟对象的距离（以米为单位）。为了最大程度地提高用户的舒适度，建议将该值设置为大于零。上一张图片包含的值在各种设备上都很合适。 Far Clip far clip plane是相机可以渲染的最远的虚拟对象的距离（以米为单位）。对于透明设备，建议这个值相对近，以免过度超出真实世界的空间，破坏应用程序的沉浸性 Clear Flags (清除标志) 清除标志值指示绘制时如何清除显示。对于虚拟现实体验，此值通常设置为Skybox。对于透明显示器，建议将其设置为“Color”。 Background Color (背景颜色) 如果清除标志未设置为“ Skybox”，则将显示背景颜色属性。 Quality Settings (质量设置 ) 质量设置值指示Unity渲染场景时应使用的图形质量。质量级别是项目级别的设置，并不特定于任何一台相机。有关更多信息，请参见Unity文档中的 质量 文章。 建议浏览 相机系统API文档 创建相机设置提供者"
  },
  "Documentation/CameraSystem/CreateSettingsProvider.html": {
    "href": "Documentation/CameraSystem/CreateSettingsProvider.html",
    "title": "Creating a Camera Settings Provider (创建相机设置提供者 ) | Mixed Reality Toolkit Documentation",
    "keywords": "Creating a Camera Settings Provider (创建相机设置提供者 ) 相机系统是可扩展的系统，用于为平台特定的相机配置提供支持。为了增加对新相机配置的支持，可能需要自定义设置提供者。 [!注意] 导入 Microsoft.MixedReality.Toolkit.Unity.Extensions 程序包后，可以在 MixedRealityToolkit.Extensions\\Providers\\Experimental\\UnityAR 文件夹中找到本示例中使用的完整源代码。 命名空间和文件夹结构 数据提供者可以通过以下两种方式之一进行分发： 第三方插件 Microsoft混合现实工具包的一部分 向MRTK提交新数据提供者的批准过程将视具体情况而定，并会在提交初步建议时通知。可以通过创建一个新的 功能请求 类型问题 来提交. 第三方插件 命名空间 数据提供者必须具有命名空间以减轻潜在的名称冲突。建议命名空间包括以下组件。 产生附件的公司名称 功能区 例如，由Contoso公司创建和交付的相机设置提供者可能是* Contoso.MixedReality.Toolkit.Camera*。 文件结构 建议将数据提供者的源代码放在文件夹层次结构中，如下图所示。 ContosoCamera 文件夹包含数据提供者的实现，而 Editor 文件夹包含检查器（以及其他任何Unity编辑器特定的代码）， Profiles 文件夹包含一个或多个预制的配置文件脚本对象。 MRTK 提交 命名空间 如果相机设置提供者正在提交给 混合现实工具包仓库 ，命名空间 必须 以Microsoft.MixedReality.Toolkit（例如： Microsoft.MixedReality.Toolkit.CameraSystem ）开头。 文件结构 所有代码都必须位于MixedRealityToolkit.Providers下的文件夹中（例如：MixedRealityToolkit.Providers\\UnityAR）。 定义相机设置对象 创建相机设置提供者的第一步是确定它将提供给应用程序的数据类型（例如，网格或平面）。 所有空间数据对象都必须实现 IMixedRealityCameraSettingsProvider 接口。 Implement the settings provider (实现设置提供者 ) 指定接口 和/或 基类继承 所有相机设置提供者都必须实现 IMixedRealityCameraSettingsProvider 接口，这个接口指定了相机系统所需的最低功能。MRTK foundation包括 BaseCameraSettingsProvider 类，它提供所需功能的默认实现。 namespace namespace Microsoft.MixedReality.Toolkit.Experimental.UnityAR { public class UnityARCameraSettings : BaseCameraSettingsProvider { } } 应用MixedRealityDataProvider属性 创建相机设置提供者的关键步骤是应用 MixedRealityDataProvider 属性。此步骤允许在相机系统配置文件以及名称、文件夹路径等中选择时为数据提供程序设置默认配置文件和平台。 [MixedRealityDataProvider( typeof(IMixedRealityCameraSystem), SupportedPlatforms.Android | SupportedPlatforms.IOS, \"Unity AR Foundation Camera Settings\", \"UnityAR/Profiles/DefaultUnityARCameraSettingsProfile.asset\", \"MixedRealityToolkit.Providers\")] public class UnityARCameraSettings : BaseCameraSettingsProvider { } 实现IMixedRealityDataProvider方法 定义了类后，下一步就是提供 IMixedRealityDataProvider 接口的实现。 [!注意] BaseDataProvider 类，通过 BaseService 类，提供 IMixedRealityDataProvider 方法的空实现。这些方法的细节通常是特定于数据提供者的。 数据提供者应实现的方法是： Destroy() Disable() Enable() Initialize() Reset() Update() [!注意] 并非所有的设置提供者都需要所有这些方法的实现。强烈建议至少实现 Destroy() 和 Initialize() 实现数据提供者逻辑 下一步是通过实现 IMixedRealityCameraSettingsProvider 来添加设置提供者的逻辑。数据提供者的这一部分通常是特定于相机配置的。 创建配置文件和inspector 在Mixed Reality Toolkit中，数据提供者的配置使用 配置文件 . 定义配置文件 配置文件内容应反映开发人员可选择的配置选项。每个接口中定义的任何用户可配置属性也应包含在配置文件中。 using UnityEngine.SpatialTracking; namespace namespace Microsoft.MixedReality.Toolkit.Experimental.UnityAR { [CreateAssetMenu( menuName = \"Mixed Reality Toolkit/Profiles/Unity AR Camera Settings Profile\", fileName = \"UnityARCameraSettingsProfile\", order = 100)] public class UnityARCameraSettingsProfile : BaseCameraSettingsProfile { [SerializeField] [Tooltip(\"设备上用于读取姿势的部分(例如：彩色相机).\")] private ArTrackedPose poseSource = TrackedPoseDriver.TrackedPose.ColorCamera; /// <summary> /// 从设备中读取姿势的部分(例如：彩色相机). /// </summary> public ArTrackedPose PoseSource => poseSource; [SerializeField] [Tooltip(\"要应用的跟踪类型(位置和/或旋转).\")] private ArTrackingType trackingType = TrackedPoseDriver.TrackingType.RotationAndPosition; /// <summary> /// 要应用的跟踪类型(位置和/或旋转) /// </summary> public ArTrackingType TrackingType => trackingType; [SerializeField] [Tooltip(\"指定何时(在Update期间和/或在渲染之前)更新姿势的跟踪.\")] private ArUpdateType updateType = TrackedPoseDriver.UpdateType.UpdateAndBeforeRender; /// <summary> /// 指定何时(在Update期间和/或在渲染之前)更新姿势的跟踪 /// </summary> public ArUpdateType UpdateType => updateType; } } 可以将 CreateAssetMenu 属性应用于配置文件类，以使客户可以使用 Create > Assets > Mixed Reality Toolkit > Profiles 菜单创建配置文件实例. 实现检查器 配置文件检查器是用于配置和查看配置文件内容的用户界面。每个配置文件检查员应继承 BaseMixedRealityToolkitConfigurationProfileInspector class. CustomEditor 属性将检查员应用到的资源类型提供给Unity。 namespace namespace Microsoft.MixedReality.Toolkit.Experimental.UnityAR { [CustomEditor(typeof(UnityARCameraSettingsProfile))] public class UnityARCameraSettingsProfileInspector : BaseMixedRealityToolkitConfigurationProfileInspector { } } 创建程序集定义 Mixed Reality Toolkit使用程序集定义 ( .asmdef ) 文件，以指定组件之间的依赖关系，并协助Unity减少编译时间。 建议为所有数据提供者及其编辑器组件创建程序集定义文件。 使用前面的示例中的 文件夹结构 ContosoCamera数据提供者将有两个.asmdef文件。 第一个程序集定义用于数据提供者。在此示例中，它称为ContosoCamera，位于示例的 ContosoCamera 文件夹中。此程序集定义必须指定对Microsoft.MixedReality.Toolkit的依赖以及它所依赖的任何其他程序集。 ContosoCameraEditor程序集定义将指定配置文件检查器和任何特定于编辑器的代码。该文件必须位于编辑器代码的根文件夹中。在此示例中，文件将位于 ContosoCamera\\Editor 文件夹中。该程序集定义将包含对ContosoCamera程序集的引用，以及： Microsoft.MixedReality.Toolkit Microsoft.MixedReality.Toolkit.Editor.Inspectors Microsoft.MixedReality.Toolkit.Editor.Utilities 注册数据提供者 一旦创建，数据提供者就可以在相机系统中注册，以在应用程序中使用。 打包与发布 作为第三方组件发布的数据提供者将打包和发布的特定详细信息留给开发人员选择。最常见的解决方案可能是生成.unitypackage并通过Unity Asset Store发布。 如果数据提供者被提交并被接受为Microsoft Mixed Reality Toolkit软件包的一部分，则Microsoft MRTK团队将打包并将其作为MRTK产品的一部分进行发布。 建议浏览 相机系统概述 BaseCameraSettingsProvider 类 IMixedRealityCameraSettingsProvider 接口 IMixedRealityDataProvider 接口"
  },
  "Documentation/CameraSystem/UnityArCameraSettings.html": {
    "href": "Documentation/CameraSystem/UnityArCameraSettings.html",
    "title": "Unity AR camera settings provider (Unity AR相机设置提供者) | Mixed Reality Toolkit Documentation",
    "keywords": "Unity AR camera settings provider (Unity AR相机设置提供者) Unity AR相机设置提供者是一个实验性MRTK组件，它使混合现实应用程序可以在Android和iOS设备上运行。 Unity AR相机设置提供者选项 如何添加提供者到你的场景的指南: 如何为 iOS 和 Android配置MRTK 跟踪设定 Unity AR相机设置提供者允许使用配置选项来设置跟踪。这些设置特定于Unity AR相机设置提供者实现。 Pose Source (姿势源 ) 姿势源定义了增强现实跟踪姿势的可用类型。通常，这些值映射到正在运行应用程序的设备的一个组件。 下表描述了可用的选项。 选项 描述 Center 头戴式设备的中心眼。 Color Camera 移动设备的彩色相机。 Head 头戴式设备的头眼（head eye），通常略高于中心眼。 Left Eye 头戴式设备的左眼。 Left Pose 左手控制器姿势。 Right Eye 头戴式设备的右眼。 Right Pose 右手控制器姿势。 姿势源的默认值是 Color Camera ，以在手机或平板电脑等移动设备上启用透明显示。 Tracking Type (跟踪类型 ) 跟踪类型定义姿势中将用于跟踪的部分。 下表描述了可用的选项。 选项 描述 Position 设备的位置。 Rotation 设备的旋转。 Rotation And Position 设备的位置和旋转。 跟踪类型的默认值为 Rotation And Position ，以启用最丰富的跟踪体验。 Update Type (更新类型 ) 更新类型定义了在帧处理过程中采样姿态数据的阶段顺序。 下表描述了可用的选项。 选项 描述 Before Render 就在渲染之前。 Update 在框架的更新阶段。 Update And Before Render 在更新阶段并且在渲染之前。 跟踪类型的默认值为 Update And Before Render ，以启用最低的跟踪延迟。 建议浏览 相机系统概述 创建相机设置提供者"
  },
  "Documentation/CameraSystem/WindowsMixedRealityCameraSettings.html": {
    "href": "Documentation/CameraSystem/WindowsMixedRealityCameraSettings.html",
    "title": "Windows Mixed Reality相机设置提供者 | Mixed Reality Toolkit Documentation",
    "keywords": "Windows Mixed Reality相机设置提供者 Windows Mixed Reality camera settings provider（相机设置提供者）确定运行应用程序的设备类型，并根据显示（透明或不透明）应用适当的配置设置。 启用Windows Mixed Reality相机设置提供者 以下步骤假定使用MixedRealityToolkit对象。其他服务注册商所需的步骤可能有所不同。 在场景层次中选择MixedRealityToolkit对象。 将Inspector面板导航到“相机系统”部分，然后展开 Camera Settings Providers 部分。 单击 Add Camera Settings Provider 然后展开新添加的 New camera settings 条目. 选择 Windows Mixed Reality Camera Settings provider [!注意] 使用Microsoft Mixed Reality Toolkit默认配置文件时，将已启用和配置Windows Mixed Reality相机设置提供者。 配置Windows Mixed Reality相机设置提供者 Windows Mixed Reality相机设置还支持配置文件。此配置文件提供以下选项： Render Mixed Reality Capture from the photo/video camera (从照片/相机渲染混合现实捕获) 通过HoloLens 2的此设置，您可以在混合现实捕获中启用全息图对齐。如果启用，则在拍摄混合现实捕获的照片或视频时，平台将为应用程序提供一个额外的全息相机。该全息相机提供与照片/相机位置对应的视图矩阵，并使用照片/相机视场提供投影矩阵。这样可以确保全息图（例如手部网格）在视频输出中保持明显对齐。 建议浏览 相机系统概述 创建相机设置提供者 从PV相机渲染混合现实捕获"
  },
  "Documentation/Contributing/BreakingChanges.html": {
    "href": "Documentation/Contributing/BreakingChanges.html",
    "title": "Breaking Changes | Mixed Reality Toolkit Documentation",
    "keywords": "Breaking Changes Consumers of the MRTK depend on having a stable release-to-release API surface, so that they can take updates to the MRTK without having large breaking changes each time. This page describes our current policy regarding breaking changes in the MRTK, along with some longer term goals around how we can better manage the tradeoff between keeping breaking changes low and being able to make the right long term technical changes to the code. What is a breaking change? A change is a breaking change if it satisfies any of the conditions in the List A AND satisfies all of the conditions in list B List A The addition, removal, or update of any member or function of any interface (or removal/rename of the entire interface). The removal, update (changing type/definition, making private or internal) of any protected or public member or function of class. (or removal/rename of the entire class). The change in the order of events fired by a class. The rename of any private SerializedField (without a corresponding FormerlySerializedAs tag) or public property on a ScriptableObject (especially changes to profiles). Changing the type of a field on a ScriptableObject (especially changes to profiles). Updates to the namespace or asmdefs of any class or interface. Removal of any prefab or removal of a script on the top level object of a prefab. List B The asset in question is in the foundation package (i.e. it's in one of the following folders): MixedRealityToolkit/ MixedRealityToolkit.Providers/ MixedRealityToolkit.Services/ MixedRealityToolkit.SDK/ The asset in question does not belong to the experimental namespace. Important Any asset that sits in the examples package (i.e. part of the MixedRealityToolkit.Examples/ folder) is subject to change at any time, as assets there are designed to be copied and viewed by consumers as 'reference implementations' but are not part of the core set of APIs and assets. Assets in the experimental namespace (or more generally, features labelled as experimental) are ones that get published before all due diligence has been done (i.e. tests, UX iteration, documentation) and is published early to get feedback sooner. However, because they don't have tests and documentation, and because we likely haven't nailed down all of the interactions and designs, we publish them in a state where the public should assume that they can and will change (i.e. be modified, completely removed, etc). See Experimental features for more information. As the surface area for breaking changes is very large, it's important to note that having an absolute rule that says \"no breaking changes\" would be impossible - there may be issues that can only be fixed in a sane way by having a breaking change. To put another way, the only way we could really have \"no breaking changes\" is to have no changes at all. Our standing policy is to avoid making breaking changes if possible, and only do so if the change would accrue significant customer or framework long term value. What to do about breaking changes If it is possible to accomplish something without a breaking change and without compromising the long term structure and viability of the feature, don't do the breaking change. If there is no other way, the current policy is to evaluate each individual breaking change, to understand if the benefit from taking the change outweighs the cost to the consumer of absorbing the change. Debate about what is worth doing and what isn't will generally take place on the PR or issue discussion itself. What can happen here falls into several buckets: The breaking change adds value but could be written in a way that isn't breaking For example, this PR added a new feature that was initially written in a way that was breaking - it modified an existing interface - but was then rewritten where the feature was broken out as its own interface. This is generally the best possible outcome. Do not try to force a change into a non-breaking form if doing so would compromise the long term viability or structure of the feature. The breaking change adds sufficient value to the customer that it's worth doing Document what the breaking changes are and provide the best possible mitigation (i.e. prescriptive steps on how to migrate, or better yet tooling that will automatically migrate for the customer). Each release may contain a small amount of changes that are breaking - these should always be documented in docs as was done in this PR . If there already is a 2.x.x→2.x+1.x+1 migration guide, then add instructions or tooling to that doc. If it doesn't exist, create it. The breaking change adds value but the customer pain would be too high Not all types of breaking changes are created equal - some are significantly more painful that others, based on our experience and based on customer experiences. For example, changes to interfaces may be painful, but if the breaking change is one in which a customer is unlikely to have extended/implemented in the past (the diagnostic visualization system, for example), then the actual cost is probably low to nothing. However, if the change is the type of a field on a ScriptableObject (for example, on one of the core profiles of the MRTK), this is likely to cause massive customer pain. Customers have already cloned the default profile, merging/updating profiles can be extremely hard to do manually (i.e. via a text editor during merge time), and re-copying the default profile and reconfiguring everything by hand is extremely likely to lead to hard to debug regressions. These changes we have to put back onto the shelf until a branch exists that will allow significantly breaking changes (along with significant value that will give customers a reason to upgrade). Such a branch doesn't currently exist. In our future iteration planning meetings, we will review the set of changes/issues that were 'too breaking' to see if we reached a critical mass to make it reasonable to pursue a set of changes all at once. Note that it's dangerous to spin up a \"everything is allowed\" branch without due diligence being done because of the limited engineering resources we have, and the fact that we'd have to split testing and validation across those two. There needs to be a clear purpose and well-communicated start and end date of such a branch when it exists. Long term management of breaking changes In the long term, we should seek to reduce the scope of what is a breaking change by increasing the set of conditions in List B . Going forward the set of things in List A will always technically be breaking for the set of files and assets that we deem to be in the \"public API surface.\" The way that we can get a little more freedom for iteration (i.e. changing up the internal implementation details, allowing for easier refactoring and sharing of code between multiple classes, etc) is to be more explicit about which portions of the code are official surface, rather than implementation detail. One thing we've already done is introduce the concept of an \"experimental\" feature (it belongs in the experimental namespace, it may not have tests/documentation, and is publicly proclaimed to exist but may be removed and updated without warning). This has given has freedom to add new features sooner to get earlier feedback, but not be immediately tied to its API surface (because we may not have fully thought out the API surface). Other examples of things that could help in the future Usage of the internal keyword . This would allow for us to have shared code within our own assemblies (for reducing code duplication) without making things public to external consumers. Creation of an \"internal\" namespace (i.e. Microsoft.MixedReality.Toolkit.Internal.Utilities), where we publicly document that anything contained within that internal namespace is subject to change at anytime and could be removed, etc. This is similar to how C++ header libraries will make use of ::internal namespaces to hide their implementation details."
  },
  "Documentation/Contributing/CodingGuidelines.html": {
    "href": "Documentation/Contributing/CodingGuidelines.html",
    "title": "Coding guidelines | Mixed Reality Toolkit Documentation",
    "keywords": "Coding guidelines This document outlines coding principles and conventions to follow when contributing to MRTK. Philosophy Be concise and strive for simplicity The simplest solution is often the best. This is an overriding aim of these guidelines and should be the goal of all coding activity. Part of being simple is being concise, and consistent with existing code. Try to keep your code simple. Readers should only encounter artifacts that provide useful information. For example, comments that restate what is obvious provide no extra information and increase the noise to signal ratio. Keep code logic simple. Note that this is not a statement about using the fewest number of lines, minimizing the size of identifier names or brace style, but about reducing the number of concepts and maximizing the visibility of those through familiar patterns. Produce consistent, readable code Code readability is correlated with low defect rates. Strive to create code that is easy to read. Strive to create code that has simple logic and re-uses existing components as it will also help ensure correctness. All details of the code you produce matter, from the most basic detail of correctness to consistent style and formatting. Keep your coding style consistent with what already exists, even if it is not matching your preference. This increases the readability of the overall codebase. Support configuring components both in editor and at run-time MRTK supports a diverse set of users – people who prefer to configure components in the Unity editor and load prefabs, and people who need to instantiate and configure objects at run-time. All your code should work by BOTH adding a component to a GameObject in a saved scene, and by instantiating that component in code. Tests should include a test case both for instantiating prefabs and instantiating, configuring the component at runtime. Play-In-Editor is your first and primary target platform Play-In-Editor is the fastest way to iterate in Unity. Providing ways for our customers to iterate quickly allows them to both develop solutions more quickly and try out more ideas. In other words, maximizing the speed of iteration empowers our customers to achieve more. Make everything work in editor, then make it work on any other platform. Keep it working in the editor. It is easy to add a new platform to Play-In-Editor. It is very difficult to get Play-In-Editor working if your app only works on a device. Add new public fields, properties, methods and serialized private fields with care Every time you add a public method, field, property, it becomes part of MRTK’s public API surface. Private fields marked with [SerializeField] also expose fields to the editor and are part of the public API surface. Other people might use that public method, configure custom prefabs with your public field, and take a dependency on it. New public members should be carefully examined. Any public field will need to be maintained in the future. Remember that if the type of a public field (or serialized private field) changes or gets removed from a MonoBehaviour, that could break other people. The field will need to first be deprecated for a release, and code to migrate changes for people that have taken dependencies would need to be provided. Prioritize writing tests MRTK is a community project, modified by a diverse range of contributors. These contributors may not know the details of your bug fix / feature, and accidentally break your feature. MRTK runs continuous integration tests before completing every pull request. Changes that break tests cannot be checked in. Therefore, tests are the best way to ensure that other people do not break your feature. When you fix a bug, write a test to ensure it does not regress in the future. If adding a feature, write tests that verify your feature works. This is required for all UX features except experimental features. Coding Conventions Script license information headers All Microsoft employees contributing new files should add the following standard License header at the top of any new files, exactly as shown below: // Copyright (c) Microsoft Corporation. // Licensed under the MIT License. Function / Method summary headers All public classes, structs, enums, functions, properties, fields posted to the MRTK should be described as to its purpose and use, exactly as shown below: /// <summary> /// The Controller definition defines the Controller as defined by the SDK / Unity. /// </summary> public struct Controller { /// <summary> /// The ID assigned to the Controller /// </summary> public string ID; } This ensures documentation is properly generated and disseminated for all all classes, methods, and properties. Any script files submitted without proper summary tags will be rejected. MRTK namespace rules The Mixed Reality Toolkit uses a feature based namespace model, where all foundational namespaces begin with \"Microsoft.MixedReality.Toolkit\". In general, you need not specify the toolkit layer (ex: Core, Providers, Services) in your namespaces. The currently defined namespaces are: Microsoft.MixedReality.Toolkit Microsoft.MixedReality.Toolkit.Boundary Microsoft.MixedReality.Toolkit.Diagnostics Microsoft.MixedReality.Toolkit.Editor Microsoft.MixedReality.Toolkit.Input Microsoft.MixedReality.Toolkit.SpatialAwareness Microsoft.MixedReality.Toolkit.Teleport Microsoft.MixedReality.Toolkit.Utilities For namespaces with a large amount of types, it is acceptable to create a limited number of sub-namespaces to aid in scoping usage. Omitting the namespace for an interface, class or data type will cause your change to be blocked. Adding new MonoBehaviour scripts When adding new MonoBehaviour scripts with a pull-request, ensure the AddComponentMenu attribute is applied to all applicable files. This ensures the component is easily discoverable in the editor under the Add Component button. The attribute flag is not necessary if the component cannot show up in editor such as an abstract class. In the example below, the Package here should be filled with the package location of the component. If placing an item in MixedRealityToolkit.SDK folder, then the package will be SDK . If placing an item in the MixedRealityToolkit folder, then use Core as the string to insert. [AddComponentMenu(\"Scripts/MRTK/{Package here}/MyNewComponent\")] public class MyNewComponent : MonoBehaviour Spaces vs Tabs Please be sure to use 4 spaces instead of tabs when contributing to this project. Spacing Do not to add additional spaces between square brackets and parenthesis: Don't private Foo() { int[ ] var = new int [ 9 ]; Vector2 vector = new Vector2 ( 0f, 10f ); } Do private Foo() { int[] var = new int[9]; Vector2 vector = new Vector2(0f, 10f); } Naming Conventions Always use PascalCase for public / protected / virtual properties, and camelCase for private properties and fields. The only exception to this is for data structures that require the fields to be serialized by the JsonUtility . Don't public string myProperty; // <- Starts with a lower case letter private string MyProperty; // <- Starts with an uppercase case letter Do public string MyProperty; protected string MyProperty; private string myProperty; Access Modifiers Always declare an access modifier for all fields, properties and methods. All Unity API Methods should be private by default, unless you need to override them in a derived class. In this case protected should be used. Fields should always be private , with public or protected property accessors. Use expression-bodied members and auto properties where possible Don't // protected field should be private protected int myVariable = 0; // property should have protected setter public int MyVariable { get { return myVariable; } } // No public / private access modifiers void Foo() { } void Bar() { } Do public int MyVariable { get; protected set; } = 0; private void Foo() { } public void Bar() { } protected virtual void FooBar() { } Use Braces Always use braces after each statement block, and place them on the next line. Don't private Foo() { if (Bar==null) // <- missing braces surrounding if action DoThing(); else DoTheOtherThing(); } Don't private Foo() { // <- Open bracket on same line if (Bar==null) DoThing(); <- if action on same line with no surrounding brackets else DoTheOtherThing(); } Do private Foo() { if (Bar==true) { DoThing(); } else { DoTheOtherThing(); } } Public classes, structs, and enums should all go in their own files If the class, struct, or enum can be made private then it's okay to be included in the same file. This avoids compilations issues with Unity and ensure that proper code abstraction occurs, it also reduces conflicts and breaking changes when code needs to change. Don't public class MyClass { public struct MyStruct() { } public enum MyEnumType() { } public class MyNestedClass() { } } Do // Private references for use inside the class only public class MyClass { private struct MyStruct() { } private enum MyEnumType() { } private class MyNestedClass() { } } Do MyStruct.cs // Public Struct / Enum definitions for use in your class. Try to make them generic for reuse. public struct MyStruct { public string Var1; public string Var2; } MyEnumType.cs public enum MuEnumType { Value1, Value2 // <- note, no \",\" on last value to denote end of list. } MyClass.cs public class MyClass { private MyStruct myStructReference; private MyEnumType myEnumReference; } Initialize Enums To ensure all enums are initialized correctly starting at 0, .NET gives you a tidy shortcut to automatically initialize the enum by just adding the first (starter) value. (e.g Value 1 = 0 Remaining values are not required) Don't public enum Value { Value1, <- no initializer Value2, Value3 } Do public enum ValueType { Value1 = 0, Value2, Value3 } Order Enums for appropriate extension It is critical that if an Enum is likely to be extended in the future, to order defaults at the top of the Enum, this ensures Enum indexes are not affected with new additions. Don't public enum SDKType { WindowsMR, OpenVR, OpenXR, None, <- default value not at start Other <- anonymous value left to end of enum } Do /// <summary> /// The SDKType lists the VR SDKs that are supported by the MRTK /// Initially, this lists proposed SDKs, not all may be implemented at this time (please see ReleaseNotes for more details) /// </summary> public enum SDKType { /// <summary> /// No specified type or Standalone / non-VR type /// </summary> None = 0, /// <summary> /// Undefined SDK. /// </summary> Other, /// <summary> /// The Windows 10 Mixed reality SDK provided by the Universal Windows Platform (UWP), for Immersive MR headsets and HoloLens. /// </summary> WindowsMR, /// <summary> /// The OpenVR platform provided by Unity (does not support the downloadable SteamVR SDK). /// </summary> OpenVR, /// <summary> /// The OpenXR platform. SDK to be determined once released. /// </summary> OpenXR } Review Enum use for Bitfields If there is a possibility for an enum to require multiple states as a value, e.g. Handedness = Left & Right. Then the Enum needs to be decorated correctly with BitFlags to enable it to be used correctly The Handedness.cs file has a concrete implementation for this Don't public enum Handedness { None, Left, Right } Do [Flags] public enum Handedness { None = 0 << 0, Left = 1 << 0, Right = 1 << 1, Both = Left | Right } Best Practices, including Unity recommendations Some of the target platforms of this project require to take performance into consideration. With this in mind always be careful when allocating memory in frequently called code in tight update loops or algorithms. Encapsulation Always use private fields and public properties if access to the field is needed from outside the class or struct. Be sure to co-locate the private field and the public property. This makes it easier to see, at a glance, what backs the property and that the field is modifiable by script. Note The only exception to this is for data structures that require the fields to be serialized by the JsonUtility , where a data class is required to have all public fields for the serialization to work. Don't private float myValue1; private float myValue2; public float MyValue1 { get{ return myValue1; } set{ myValue1 = value } } public float MyValue2 { get{ return myValue2; } set{ myValue2 = value } } Do // Enable field to be configurable in the editor and available externally to other scripts (field is correctly serialized in Unity) [SerializeField] [ToolTip(\"If using a tooltip, the text should match the public property's summary documentation, if appropriate.\")] private float myValue; // <- Notice we co-located the backing field above our corresponding property. /// <summary> /// If using a tooltip, the text should match the public property's summary documentation, if appropriate. /// </summary> public float MyValue { get{ return myValue; } set{ myValue = value } } Cache values and serialize them in the scene/prefab whenever possible With the HoloLens in mind, it's best to optimize for performance and cache references in the scene or prefab to limit runtime memory allocations. Don't void Update() { gameObject.GetComponent<Renderer>().Foo(Bar); } Do [SerializeField] // To enable setting the reference in the inspector. private Renderer myRenderer; private void Awake() { // If you didn't set it in the inspector, then we cache it on awake. if (myRenderer == null) { myRenderer = gameObject.GetComponent<Renderer>(); } } private void Update() { myRenderer.Foo(Bar); } Cache references to materials, do not call the \".material\" each time Unity will create a new material each time you use \".material\", which will cause a memory leak if not cleaned up properly. Don't public class MyClass { void Update() { Material myMaterial = GetComponent<Renderer>().material; myMaterial.SetColor(\"_Color\", Color.White); } } Do // Private references for use inside the class only public class MyClass { private Material cachedMaterial; private void Awake() { cachedMaterial = GetComponent<Renderer>().material; } void Update() { cachedMaterial.SetColor(\"_Color\", Color.White); } private void OnDestroy() { Destroy(cachedMaterial); } } Note Alternatively, use Unity's \"SharedMaterial\" property which does not create a new material each time it is referenced. Use platform dependent compilation to ensure the Toolkit won't break the build on another platform Use WINDOWS_UWP in order to use UWP-specific, non-Unity APIs. This will prevent them from trying to run in the Editor or on unsupported platforms. This is equivalent to UNITY_WSA && !UNITY_EDITOR and should be used in favor of. Use UNITY_WSA to use UWP-specific Unity APIs, such as the UnityEngine.XR.WSA namespace. This will run in the Editor when the platform is set to UWP, as well as in built UWP apps. This chart can help you decide which #if to use, depending on your use cases and the build settings you expect. UWP IL2CPP UWP .NET Editor UNITY_EDITOR False False True UNITY_WSA True True True WINDOWS_UWP True True False UNITY_WSA && !UNITY_EDITOR True True False ENABLE_WINMD_SUPPORT True True False NETFX_CORE False True False Prefer DateTime.UtcNow over DateTime.Now DateTime.UtcNow is faster than DateTime.Now. In previous performance investigations we've found that using DateTime.Now adds significant overhead especially when used in the Update() loop. Others have hit the same issue . Prefer using DateTime.UtcNow unless you actually need the localized times (a legitimate reason may be you wanting to show the current time in the user's time zone). If you are dealing with relative times (i.e. the delta between some last update and now), it's best to use DateTime.UtcNow to avoid the overhead of doing timezone conversions. See also C# coding conventions from MSDN"
  },
  "Documentation/Contributing/CONTRIBUTING.html": {
    "href": "Documentation/Contributing/CONTRIBUTING.html",
    "title": "Contributing | Mixed Reality Toolkit Documentation",
    "keywords": "Contributing The Mixed Reality Toolkit (MRTK) welcomes contributions from the community. All changes be they small or large, need to adhere to the MRTK coding standards , so please ensure you are familiar with these while developing to avoid delays when the change is being reviewed. If you have any questions, please reach out on the mixed-reality-toolkit channel on Slack . You can join the Slack community via the automatic invitation sender . Submission process We provide several paths to enable developers to contribute to the Mixed Reality Toolkit, all starting with creating a new Issue . From here you file: Bug report - Functionality issue with one of the Mixed Reality Toolkit components Documentation issue - Issue with the Mixed Reality Toolkit documentation Feature request - Proposal for a new Mixed Reality Toolkit feature Proposing Feature Requests When requesting a new Mixed Reality Toolkit feature, it is important to document the customer benefit / problem to be solved. Once submitted, a feature request will be reviewed and discussed on GitHub. We encourage open and constructive discussion of each feature proposal to ensure that the work is beneficial to a large segment of customers. To avoid needing to rework the feature, it is generally recommended that development of the feature does not begin during the review phase. Many times, the community review process uncovers one or more issues that may require significant changes in the proposed implementation. Note If you wish to work on something that already exists on our backlog, you can use that work item as your proposal. Be sure to also comment on the task notifying maintainers that you're working towards completing it. Contribution process To get started, simply follow these steps: Fork the repository. Click on the \"Fork\" button on the top right of the page and follow the flow. Create a branch in your fork (off of the mrtk_development branch) to make it easier for you to isolate any changes until ready for submission. For the legacy HoloToolkit use the htk_development branch. If you are new to to the Git workflow, check out this introduction from Github . When adding a bug fix or feature, follow these steps: Implement the bug fix or feature. Instructions for building and deploying MRTK are at BuildAndDeploy . Remember to follow the Coding Guidelines . If adding a feature, also add an example scene that demonstrates the feature. If adding an experimental feature, then writing tests and documentation are not necessary. Instead, follow experimental feature guidelines . Add tests to verify the bug fix / feature. Instructions for writing and running tests are at UnitTests . Ensure the code and feature(s) are documented as described in the Documentation Guidelines . Ensure the code works as intended on all platforms. Please see Release notes for the list of supported platforms. For Windows UWP projects, code must be WACK compliant . To do this, generate a Visual Studio solution, right click on project; Store > Create App Packages . Follow the prompts and run WACK tests. Make sure they all succeed. Follow the instructions at Pull Requests when making a pull request."
  },
  "Documentation/Contributing/DevDocGuide.html": {
    "href": "Documentation/Contributing/DevDocGuide.html",
    "title": "Developer portal generation guide | Mixed Reality Toolkit Documentation",
    "keywords": "Developer portal generation guide MRTK uses docfx to generate html documentation out of triple slash comments in code and .md files in the MRTK repository. Docfx documentation generation is automatically triggered by CI on completed PRs in the mrtk_development branch. The current state of the developer documentation can be found on the MRTK github.io page Docfx supports DFM Docfx Flavored Markdown which includes GFM Github Flavored Markdown. The full documentation and feature list can be found here Docfx is not only converting but also checking all used local links in the documentation. If a path can't be resolved it won't be converted into its html equivalent. Therefor it's important to only use relative paths when referring to other local files. Building docfx locally The docfx build files in the MRTK repo can be used to create a local version of the developer documentation in a doc/ subfolder in the root of the project. Setup get the latest version of docfx extract the files in a folder on your computer add the folder to your PATH in your environment variables Generation open a powershell or cmd prompt in the root of the MRTK project execute docfx docfx.json (optionally with the -f option to force a rebuild of doc files) execute docfx serve doc (optionally with -p portnumber if you don't want to use the 8888 default port) open a web browser with localhost: portnumber Note that on executing the docfx command on the json build file docfx will show any broken links in the documentation as warning. Please make sure whenever you perform changes on any of the documentation files or API to update all links pointing to these articles or code. Verifying docfx on github Whenever a PR includes a change that might affect documentation CI has to be executed to run a check on docfx for broken links. This can be triggered by posting the command /azp run mrtk_docs into the PR if the user has sufficient rights to do so. The command will trigger a CI job which will add a docs build to the checks section of the PR. Using crefs and hrefs in /// documented code Docfx supports crefs in /// documented code. It will translate those references to links pointing to the generated api documentation or to external documentation websites. External xref services for resolving links to external libraries/apis can be added to the docfx.json build settings file in the property xrefService . For external apis that don't provide an xref service hrefs to the documentation website can be added to the comments. Examples: /// Links to MRTK internal class SystemType /// <see cref=\"Microsoft.MixedReality.Toolkit.Utilities.SystemType\"/> /// Links to external API - link provided by xref service /// <see cref=\"System.Collections.Generic.ICollection{Type}.Contains\"/> /// Links to Unity web API reference /// <see href=\"https://docs.unity3d.com/ScriptReference/EditorGUI.PropertyField.html\">EditorGUI.PropertyField</see> Linking in .md documentation files Docfx is translating and validating all relative local links on generation, there's no special syntax required. Referring to another documentation article should always be done by referring to the corresponding .md file, never the auto generated .html file. Please note that all links to local files need to be relative to the file you're modifying. Linking to the API documentation can be done by using cross references . Docfx automatically generated UIDs for all API docs by mangling the signature. Example: This links to the BoundarySystem API as well as this short version: Microsoft.MixedReality.Toolkit.Boundary This links to the [BoundarySystem API](xref:Microsoft.MixedReality.Toolkit.Boundary) as well as this short version: @Microsoft.MixedReality.Toolkit.Boundary Enumerating available xrefs Xref syntax can be difficult to remember - it's possible to enumerate all of the available xref IDs by first running docfx locally: docfx docfx.json This will generate an xrefmap.yml file, which will be located in docs/xrefmap.yml. For example, in order to link the following overload of HandleEvent, the syntax is fairly arcane: - uid: Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent``1(BaseEventData,ExecuteEvents.EventFunction{``0}) name: HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) href: api/Microsoft.MixedReality.Toolkit.BaseEventSystem.html#Microsoft_MixedReality_Toolkit_BaseEventSystem_HandleEvent__1_BaseEventData_ExecuteEvents_EventFunction___0__ commentId: M:Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent``1(BaseEventData,ExecuteEvents.EventFunction{``0}) name.vb: HandleEvent(Of T)(BaseEventData, ExecuteEvents.EventFunction(Of T)) fullName: Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) fullName.vb: Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent(Of T)(BaseEventData, ExecuteEvents.EventFunction(Of T)) nameWithType: BaseEventSystem.HandleEvent<T>(BaseEventData, ExecuteEvents.EventFunction<T>) nameWithType.vb: BaseEventSystem.HandleEvent(Of T)(BaseEventData, ExecuteEvents.EventFunction(Of T)) It's easy, however, to search for the name and then use the entire uid field as the xref. In this example, the xref would look like: (xref:Microsoft.MixedReality.Toolkit.BaseEventSystem.HandleEvent 1(BaseEventData,ExecuteEvents.EventFunction{ 0})) Adding new .md files to developer docs Docfx will pick up any .md files in folders that are added as content files in the build section of the docfx.json and generate html files out of them. For new folders a corresponding entry in the build file needs to be added. Navigation entries To determine the entries of the navigation in the developer docs docfx uses toc.yml/toc.md - table of content files. The toc file in the root of the project defines entries in the top navigation bar whereas the toc.yml files in the subfolders of the repo define subtopics in the sidebar navigation. toc.yml files can be used for structuring and there can be any amount of those files. For more info about defining entries for toc.yml check the docfx documentation entry on toc . Resource files There are some files like images, videos or PDFs that the documentation can refer to but are not converted by docfx. For those files there's a resource section in the docfx.json. Files in that section will only be copied over without performing any conversion on them. Currently there's a definition for the following resource types: ResourceType Path Images Documentation/Images/ Releasing a new version Multiple versions of developer docs are supported and can be switched by the version drop down in the top menu bar. If you're releasing a new version perform the following steps to have your version on the developer docs page. Optional: Adjusting your docfx.json Depending on whether you want to have the \"Improve this doc\" to point to a specific version of the github repo you will have to add the following entry to the globalMetaData section in the docfx.json file before calling the docfx command: \"_gitContribute\": { \"repo\": \"https://github.com/Microsoft/MixedRealityToolkit-Unity.git\", \"branch\": \"mrtk_development\" } If you don't set this up docfx will default to the branch and repo of the current folder you're calling docfx from. Create your docfx docs by calling docfx docfx.json in the root of the repo Create a folder with the name of your version in the version folder of the gh-pages branch and copy the contents of the generated doc folder into that folder Add your version number into the versionArray in web/version.js Push the modified version.js to mrtk_development branch and the changes in gh-pages branch CI will pick up the changes done to the version.js file and update the version dropdown automatically. Supporting development branches on CI The versioning system can also be used for showing doc versions from other dev branches that are built by CI. When setting up CI for one of those branches make sure your powershell script on CI copies the contents of the generated docfx output into a version folder named after your branch and add the corresponding version entry into the web/version.js file. Good practices for developers Use relative paths whenever referring to MRTK internal pages Use cross references for linking to any MRTK API page by using the mangled UID Use crefs and hrefs to link to internal or external documentation in /// comments Use the indicated folders in this doc for resource files Run docfx locally and check for warnings in the output whenever you modify existing APIs or update documentation pages Watch out for docfx warnings on CI after completing and merging your PR into one of the official MRTK branches Common errors when generating docs toc.yml errors: usually happens when an .md file gets moved/renamed or removed but the table of content file (toc.yml) pointing to that file wasn't updated accordingly. On the website this will result in a broken link on our top level or side navigation /// comments errors xml tag errors - docfx like any other xml parser can't handle malformed xml tags. typos in crefs incomplete namespace identifiers - docfx won't need the full namespace to the symbol you're referring to but the relative part of the namespace that's not included in the surrounding namespace of the cref. Example: if you're in a namespace Microsoft.MixedReality.Toolkit.Core.Providers.UnityInput and the file you want to link in is Microsoft.MixedReality.Toolkit.Core.Interfaces.IMixedRealityServiceRegistrar your cref can look like this: cref=\"Interfaces.IMixedRealityServiceRegistrar\" External crefs - As long as there's no xref service available (and listed in the docfx build file) crefs to external libraries won't work. If you still want to link to a specific external symbol that doesn't have xref service but an online api documentation you can use a href instead. Example: linking to EditorPrefs of Unity: <see href=\"https://docs.unity3d.com/ScriptReference/EditorPrefs.html\">EditorPrefs</see> See also MRTK documentation guide MRTK developer documentation on github.io DocFX"
  },
  "Documentation/Authors.html": {
    "href": "Documentation/Authors.html",
    "title": "Authors | Mixed Reality Toolkit Documentation",
    "keywords": "Authors The Microsoft Mixed Reality Toolkit is a collaborative project containing contributions from individuals around the world. Our sincere thanks to all who have, and continue to contribute. achaperon AdamMitchell-ms alandergrouse Alex Cooper Alexees andreiborodin Cameron-Micka CDiaz-MS chbecker-ms chrisfromwork CoPrez cre8ivepark danielhofmann-ms davidkline-ms derekfreed dfields-msft Ecnassianer ericob gejohnst gilbdev googlan Jarodshow jbienzms Jerome Humbert jganser johnppella JonathanPalmerGD julenka -julianloehr-kg jwittner keveleigh killerantz LaneMax LocalJoost luis-valverde-ms lukastonneMS macborow MenelvagorMilsom mpkoz ms738 myrandaGoesToSpace Nakda Nick K. Norbert Nemec paco-ms phosphoer provencher radicalad Railboy ritijain ryzngard sgwin SimonDarksideJ sostel stefan.wasserbauer StephenHodgson TakahiroMiyaura tarukosu thalbern Troy-Ferrell wassx Weasy666 witian wiwei Yoyozilla"
  },
  "Documentation/BuildAndDeploy.html": {
    "href": "Documentation/BuildAndDeploy.html",
    "title": "生成和部署MRTK | Mixed Reality Toolkit Documentation",
    "keywords": "生成和部署MRTK 要将应用程序作为独立应用程序在设备上运行（适用于HoloLens，Android，iOS等），生成和部署步骤需要在unity项目中执行。生成和部署使用MRTK的应用程序就像生成和部署任何其他Unity应用程序一样。没有特定于MRTK的说明。请阅读以下内容，了解有关如何为HoloLens生成和部署Unity应用的详细步骤。了解有关在其他平台上生成的更多信息，请访问 发布版本 . 为HoloLens 1和HoloLens 2（UWP）生成和部署MRTK 有关如何为Hololens 1和Hololens 2（UWP）进行生成和部署的说明，请访问： 将应用程序生成到设备 . 提示: 为WMR，HoloLens 1或HoloLens 2进行生成时，建议生成设置“Target SDK Version”和“Minimum Platform Version”看起来像下图所示： 其他设置可以不同（例如，“Build Configuration/Architecture/Build Type”，而其他设置始终可以在Visual Studio解决方案中更改）。 确保“目标SDK版本”下拉列表包含选项“ 10.0.18362.0”-如果缺少此选项， 最新的Windows SDK 需要安装。"
  },
  "Documentation/DetectingPlatformCapabilities.html": {
    "href": "Documentation/DetectingPlatformCapabilities.html",
    "title": "检测平台功能 | Mixed Reality Toolkit Documentation",
    "keywords": "检测平台功能 有关MRTK的一个常见问题是，知道使用哪个特定设备（例如Microsoft HoloLens 2）来运行应用程序。在不同的平台上识别准确的硬件是很有挑战性的。相反，MRTK提供了一种在运行时识别特定功能的方法（例如，如果当前设备端点支持全关节手）。 Capabilities (功能) 混合现实工具包提供了 MixedRealityCapability 枚举，它定义了一组功能，应用程序可以在运行时对其进行查询。 输入系统功能 默认的MRTK输入系统支持查询以下功能： 功能 描述 ArticulatedHand 全关节手输入 EyeTracking 眼动追踪 GGVHand 凝视-手势-语音 手部输入 MotionController 运动控制器输入 VoiceCommand 使用应用定义的关键字的语音命令 VoiceDictation 语音转文字 下面的示例代码检查输入系统是否已加载了支持全关节手的数据提供者。 bool supportsArticulatedHands = false; IMixedRealityCapabilityCheck capabilityCheck = CoreServices.InputSystem as IMixedRealityCapabilityCheck; if (capabilityCheck != null) { supportsArticulatedHands = capabilityCheck.CheckCapability(MixedRealityCapability.ArticulatedHand); } 空间感知功能 默认的MRTK空间感知系统支持查询以下功能: 功能 描述 SpatialAwarenessMesh 空间网格 SpatialAwarenessPlane 空间平面 SpatialAwarenessPoint 空间点 此示例检查以查看空间感知系统是否已加载了支持空间网格的数据提供者。 bool supportsSpatialMesh = false; IMixedRealityCapabilityCheck capabilityCheck = CoreServices.SpatialAwarenessSystem as IMixedRealityCapabilityCheck; if (capabilityCheck != null) { supportsSpatialMesh = capabilityCheck.CheckCapability(MixedRealityCapability.SpatialAwarenessMesh); } 建议浏览 IMixedRealityCapabilityCheck API 文档 MixedRealityCapability 枚举文档"
  },
  "Documentation/DownloadingTheMRTK.html": {
    "href": "Documentation/DownloadingTheMRTK.html",
    "title": "How to download the Mixed Reality Toolkit | Mixed Reality Toolkit Documentation",
    "keywords": "How to download the Mixed Reality Toolkit The MRTK is available via the following methods. For feedback on these methods, or to request an additional distribution method, please file an issue on Github Unity asset downloadable from the MRTK GitHub site You can download the packaged Unity assets from here for importing into your project. There are two Unity packages available for each release: Foundation This package contains the MRTK itself and all of the code and materials needed to build Mixed Reality experiences. Examples This is an optional package which contains example scenes and samples. This package is dependent on the Foundation package. GitHub submodule (advanced users) For those who would like to contribute to the MRTK or prefer to have the latest code in their project, there is another way to get access to the latest and greatest of the Mixed Reality Toolkit, be it the Release code or the in-progress development of the project. Stephen Hodgson has provided a full guide for how to use Git Submodules to download and synchronize the toolkit in to your project."
  },
  "Documentation/GettingStartedWithTheMRTK.html": {
    "href": "Documentation/GettingStartedWithTheMRTK.html",
    "title": "MRTK入门 | Mixed Reality Toolkit Documentation",
    "keywords": "MRTK入门 混合现实工具包（MRTK）是用于为虚拟现实（VR）和增强现实（AR）构建混合现实体验的跨平台工具包。 初始准备 要开始使用混合现实工具包，您需要： Visual Studio 2019 Unity 2018.4.x, 2019.1.x or 2019.2.x MRTK支持Unity 2018上的IL2CPP和.NET脚本后端 Windows SDK 18362+ . 如果要为WMR，HoloLens 1或HoloLens 2构建UWP应用，则这是必需的。为OpenVR构建时，则不需要。 将MRTK添加到您的Unity项目 需要 获取最新的MRTK Unity包 将MRTK包导入到您的Unity项目中 将您的Unity项目切换到目标平台 将MRTK添加到新场景或新项目 可选的 入门教程 了解MRTK的核心组成部分 在Unity编辑器中运行HandInteractionExamples场景r 获取最新的MRTK Unity软件包 转到 MRTK 发布页面 . 在 Assets下，下载 Microsoft.MixedRealityToolkit.Unity.Foundation.unitypackage ( 可选 ) Microsoft.MixedRealityToolkit.Unity.Extensions.unitypackage ( 可选 ) Microsoft.MixedRealityToolkit.Unity.Tools.unitypackage ( 可选 ) Microsoft.MixedRealityToolkit.Unity.Examples.unitypackage ( 可选 , 实验性的 ) Microsoft.MixedRealityToolkit.Unity.Providers.UnityAR.unitypackage 对于更多的包内容信息, 请查看 MRTK 包内容 . 现在可以在NuGet.org上下载“混合现实工具包”，有关详细信息，请参阅 MRTK NuGet 包 . 将MRTK包导入到您的Unity项目中 创建一个新的Unity项目，或打开一个现有项目。创建项目时，请确保选择“ 3D”作为模板类型。 通过进入“Asset -> Import Package -> Custom Package”，选择.unitypackage文件，确保选中了要导入的所有项目，然后选择“Import”，导入下载的 Microsoft.MixedRealityToolkit.Unity.Foundation.unitypackage 。 （ 可选 ）按照与上述相同的步骤导入 Microsoft.MixedRealityToolkit.Unity.Examples.unitypackage 。示例包是可选的，其中包含有关MRTK当前功能的有用演示场景。 （ 可选 ）按照与基础包相同的步骤导入 Microsoft.MixedRealityToolkit.Unity.Tools.unitypackage 。这些工具包是可选的，并且包含有用的工具，例如ExtensionServiceCreator，可增强MRTK开发人员的体验。 （ 可选 ）按照与基础包相同的步骤导入 Microsoft.MixedRealityToolkit.Unity.Extensions.unitypackage 。扩展包为MRTK提供了一组有用的可选组件。 （ 可选 ） 按照与基础包相同的步骤导入 Microsoft.MixedRealityToolkit.Unity.Providers.UnityAR.unitypackage .该包为MRTK中的移动AR(手机、平板)设备提供支持。 [!注意] 导入Microsoft.MixedRealityToolkit.Unity.Providers.UnityAR.unitypackage 需要执行额外的步骤。更多信息，请参阅 UnityAR相机设置 文章. 导入Foundation程序包后，您可能会看到如下的安装提示： MRTK正在尝试通过执行以下操作来建立用于构建混合现实解决方案的项目： 为您当前的平台启用XR设置（启用XR复选框）。 强制文本序列化/可见元文件（推荐用于使用源代码管理的Unity项目）。 接受这些选项是完全可选的，但建议这样做。 某些预制件和资源需要TextMesh Pro，这意味着您必须安装TextMesh Pro软件包以及项目中的资源（“Window -> TextMeshPro->Import TMP Essential Resources”）。 导入TMP Essentials资源后，需要重新启动Unity以查看更改 。 将您的Unity项目切换到目标平台 导入软件包后，下一步就是为应用程序选择正确的平台。 要创建 HoloLens应用程序 ，请切换到通用Windows平台： 打开菜单：File > Build Settings 在 Platform 列表中选择 通用Windows平台 (Universal Windows Platform) 单击“ Switch Platform ”按钮 [!注意] 选择平台后，混合现实工具包将提示将建议的更改应用于项目。无论何时切换平台，如有必要，都会检查并提示相应的设置。 将MRTK添加到新场景或新项目 创建一个新的Unity项目，或在当前项目中开始一个新场景。 确保已导入以下MRTK程序包（我们建议同时使用Foundation和Examples，尽管不需要Examples） 以上步骤 . 从菜单栏中，选择“Mixed Reality Toolkit -> Add to Scene and Configure” inspector现在将显示当前活动的MRTK配置概要文件和配置文件选择菜单,其中默认配置文件已经被预先选择。 配置文件配置MRTK核心组件的行为，在 配置文件 文章中有更详细的描述。 [!注意] 如果你使用 HoloLens 或 HoloLens 2, 你应该选择\"DefaultHoloLens1ConfigurationProfile\" 或DefaultHoloLens2ConfigurationProfile\". 查看 配置文件 获取有关DefaultMixedRealityToolkitConfigurationProfile 和DefaultHoloLens2ConfigurationProfile的区别. 你将在你场景的hierarchy中看到如下图所示: 这包括: Mixed Reality Toolkit - 工具包本身，为整个框架提供中央配置入口点。 MixedRealityPlayspace - 头显的父对象，可确保在场景中正确管理头显/控制器和其他所需系统。 • 主摄像机作为子级移动到Playspace-允许Playspace与SDK一起管理摄像机 [!注意] 在场景中工作时， 请勿将主摄像机（或MixedRealityPlayspace）从场景原点（0,0,0）移开 。这由MRTK和活动的SDK控制。如果您需要用户的起点， 请移动场景内容而不是相机 ！ 点击paly按钮并按 空格键 测试手部模拟。 您现在可以构建并部署到设备了！请按照以下步骤的说明进行操作 构建和部署MRTK . 入门教程 如果您不熟悉MRTK或MR开发，建议您查看 入门教程 使用MRTK v2. 了解MRTK的核心组成部分 查看 MRTK 101: How to use Mixed Reality Toolkit Unity for Basic Interactions (HoloLens 2, HoloLens, Windows Mixed Reality, Open VR) 了解核心组成部分. 在Unity编辑器中运行HandInteractionExamples场景 手势交互实例场景 是学习更多关于MRTK中的UX控件和交互的好地方. 要尝试手势互动场景，请执行以下步骤. 在 Assets\\MixedRealityToolkit.Examples\\Demos\\HandTracking\\Scenes\\HandInteractionExamples 下打开 HandInteractionExamples 场景 您可能会收到提示，要求您导入“ TMP Essentials”. 如果出现这样的提示，请选择“Import TMP essentials”按钮。“ TMP Essentials”是指Text Mesh Pro插件，某些MRTK示例使用该插件来改进文本呈现。 (查看 Unity中的文本 有关更多详细信息) 关闭“ TMP”对话框。之后，您需要重新加载场景。您可以通过双击项目选项卡中的场景来执行此操作. 按下播放按钮 使用编辑器内手动输入模拟来测试场景 编辑器中的输入模拟可让您测试特定类型的输入，例如 手势输入 或者 眼动输入 . 如何在场景四处异地 使用 W/A/S/D 键向前/向左/向后/向右移动相机. 使用 Q/E 垂直移动相机. 按住 鼠标右键 旋转相机. 如何模拟手势输入： 按住 空格键 以启用右手。 按住空格键时，请移动鼠标来移动手 使用 鼠标滚轮 调整手的深度。 单击 鼠标左键 以模拟捏合手势。 使用 T / Y 键将手保持在场景中。 按住 CTRL 键并移动鼠标以旋转手。 在探索中玩得开心！您可以了解有关UI控件的更多信息 在手势交互示例指南中 . 另外，通读 输入模拟文档 了解有关MRTK中编辑器内手动输入模拟的更多信息。 恭喜，您刚刚使用了第一个MRTK场景。现在开始创建自己的体验... 下一步 以下是一些建议的后续步骤： 查看 MRTK 101: 如何使用混合现实工具Unity包进行基本交互 了解如何实现常见的空间交互，例如抓取，移动，缩放和旋转. 了解MRTK中可用的UX控件，在 UI界面和交互构建块 中. 尝试 MRTK 示例中心 (为方便起见，发布页面中包含预构建的应用程序包) 了解如何使用MRTK配置配置文件 混合现实配置指南 . 了解有关 MRTK的架构 了解有关 MRTK的输入系统 了解有关 MRTK的工具 这将为您的混合现实设计和开发提供支持. 通读 输入模拟指南 了解如何在编辑器中模拟手动输入. 从HoloToolkit（HTK / MRTK v1）升级 由于重建了框架，因此没有从HoloToolkit到Mixed Reality Toolkit v2的直接升级路径。但是，可以将MRTK导入到HoloToolkit项目中并迁移您的实现。有关更多信息，请参见 HoloToolkit到Mixed Reality Toolkit移植指南"
  },
  "Documentation/HTKToMRTKPortingGuide.html": {
    "href": "Documentation/HTKToMRTKPortingGuide.html",
    "title": "移植指南 | Mixed Reality Toolkit Documentation",
    "keywords": "移植指南 控制器和手动输入 设置和配置 HTK 2017 MRTK v2 类型 按钮的特定事件，相关时带有输入类型信息。 基于动作/手势的输入，通过事件传递。 设定 将InputManager放置在场景中 在 配置文件 中启用输入系统并指定具体的输入系统类型。 配置 在Inspector中针对场景中的每个脚本进行配置。 通过混合现实输入系统配置文件及其相关配置文件进行配置，如下所示。 相关配置文件： 混合现实控制器映射配置文件 混合现实控制器可视化配置文件 混合现实手势配置文件 混合现实输入操作配置文件 混合现实输入操作规则配置文件 混合现实指针配置文件 Gaze Provider 在场景中的“Main Camera”对象上修改设置。 平台支持组件（例如Windows Mixed Reality设备管理器）必须添加到其相应服务的数据提供者中。 接口和事件映射 某些事件不再具有唯一事件，现在包含一个 混合现实输入操作 . 这些操作在“Input Actions”配置文件中指定，并映射到“Controller Mapping”配置文件中的特定控制器和平台。现在，像OnInputDown这样的事件应检查MixedRealityInputAction类型。 相关输入系统： 输入总览 输入事件 输入指针 HTK 2017 MRTK v2 动作映射 IControllerInputHandler IMixedRealityInputHandler<Vector2> 映射到触摸板或指尖 IControllerTouchpadHandler IMixedRealityInputHandler 映射到触摸板 IFocusable IMixedRealityFocusHandler IGamePadHandler IMixedRealitySourceStateHandler IHoldHandler IMixedRealityGestureHandler 映射为“Gestures”配置文件中的hold IInputClickHandler IMixedRealityPointerHandler IInputHandler IMixedRealityInputHandler 映射到控制器的按钮或手动点击 IManipulationHandler IMixedRealityGestureHandler<Vector3> 映射到“Gestures ”配置文件中的manipulation INavigationHandler IMixedRealityGestureHandler<Vector3> 映射到Gestures 配置文件中的 navigation IPointerSpecificFocusable IMixedRealityFocusChangedHandler ISelectHandler IMixedRealityInputHandler<float> 映射到触发位置 ISourcePositionHandler IMixedRealityInputHandler<Vector3> or IMixedRealityInputHandler<MixedRealityPose> 映射到指针位置或握持位置 ISourceRotationHandler IMixedRealityInputHandler<Quaternion> or IMixedRealityInputHandler<MixedRealityPose> 映射到指针位置或握持位置 ISourceStateHandler IMixedRealitySourceStateHandler IXboxControllerHandler IMixedRealityInputHandler 和 IMixedRealityInputHandler<Vector2> 映射到各种控制器按钮和指尖 相机 HTK 2017 MRTK v2 启用 删除MainCamera，将MixedRealityCameraParent / MixedRealityCamera / HoloLensCamera预制体添加到场景中， 或 使用“Mixed Reality Toolkit > Configure > Apply Mixed Reality Scene Settings”菜单项。 MainCamera是MixedRealityPlayspace的子物体，通过 Mixed Reality Toolkit > Add to Scene and Configure..导入 配置 在预制体上执行相机设置配置。 相机设置在 混合现实相机配置文件 中进行配置. 语音 关键字识别 HTK 2017 MRTK v2 设定 将SpeechInputSource添加到您的场景。 关键字服务（例如Windows语音输入管理器）必须添加到输入系统的数据提供者中。 配置 可识别的关键字在SpeechInputSource的Inspector中配置。 关键字在 混合现实语音命令配置文件 中进行配置. 事件处理者 ISpeechHandler IMixedRealitySpeechHandler 语音转文字 HTK 2017 MRTK v2 设定 将DictationInputManager添加到场景中。 语音转文字需要将服务（例如Windows Dictation Input Manager）添加到输入系统的数据提供程序中。 事件处理者 IDictationHandler IMixedRealityDictationHandler IMixedRealitySpeechHandler 空间感知/映射 Mesh HTK 2017 MRTK v2 设定 将SpatialMapping预制体添加到场景中。 在配置文件中启用空间感知系统( Spatial Awareness System)，并将空间观察器（例如Windows Mixed RealitySpatial Mesh Observer）添加到空间感知系统的数据提供者。 配置 在Inspector中配置场景实例。 在每个spatial observer的配置文件上配置设置。 平面 HTK 2017 MRTK v2 设定 使用 SurfaceMeshesToPlanes 脚本 尚未实现。 空间理解 HTK 2017 MRTK v2 设定 将SpatialUnderstanding预制体添加到场景中。 尚未实现。 配置 在Inspector中配置场景实例。 尚未实现。 边界 HTK 2017 MRTK v2 设定 将 BoundaryManager 脚本添加到场景中。 在配置文件中启用边界系统（Boundary System）。 配置 在Inspector中配置场景实例。 在“Boundary Visualization”配置文件中配置设置。 共享 HTK 2017 MRTK v2 设定 共享服务：将共享预制体（Sharing prefab）添加到场景中。UNet：使用SharingWithUNET示例。 进行中 配置 在Inspector中配置场景实例。 进行中 UX HTK 2017 MRTK v2 Button Interactable Objects Button Interactable Interactable Objects Interactable Bounding Box Bounding Box Bounding Box App Bar App Bar App Bar One Hand Manipulation (Grb and Move) HandDraggable Manipulation Handler Two Hand Manipulation (Grab/Move/Rotate/Scale) TwoHandManipulatable Manipulation Handler Keyboard Keyboard prefab System Keyboard Tooltip Tooltip Tooltip Object Collection Object Collection Object Collection Solver Solver Solver 实用工具 一些实用程序已与Solver系统的副本进行协调。如果您需要的任何脚本丢失，请提出问题。 HTK 2017 MRTK v2 Billboard Billboard Tagalong RadialView 或者 Orbital Solver FixedAngularSize ConstantViewSize Solver FpsDisplay Diagnostics System （在配置文件中） NearFade 内置于 Mixed Reality Toolkit Standard shader"
  },
  "Documentation/MixedRealityConfigurationGuide.html": {
    "href": "Documentation/MixedRealityConfigurationGuide.html",
    "title": "Mixed Reality Toolkit Profile configuration guide | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit Profile configuration guide The Mixed Reality Toolkit centralizes as much of the configuration required to manage the toolkit as possible (except for true runtime \"things\"). This guide is a simple walkthrough for each of the configuration profile screens currently available for the toolkit The main Mixed Reality Toolkit configuration profile The main configuration profile, which is attached to the MixedRealityToolkit GameObject in your Scene, provides the main entry point for the Toolkit in your project. Note The Mixed Reality Toolkit \"locks\" the default configuration screens to ensure you always have a common start point for your project and it is encouraged to start defining your own settings as your project evolves. The MRTK configuration is not editable during playmode. All the \"default\" profiles for the Mixed Reality Toolkit can be found in the SDK project in the folder Assets\\MixedRealityToolkit.SDK\\Profiles Important DefaultHoloLens2ConfigurationProfile is optimized for HoloLens 2. See Profiles for the details. When you open the main Mixed Reality Toolkit Configuration Profile, you will see the following screen in the inspector: If you select a MixedRealityToolkitConfigurationProfile asset without the MixedRealityToolkit in the scene, it will ask you if you want the MRTK to automatically setup the scene for you. This is optional, however, there must be an active MixedRealityToolkit object in the scene to access all the configuration screens. This houses the current active runtime configuration for the project. Note Almost any profile can be swapped out at runtime, with the exception of the InputActions configuration (see later). The profiles with then automatically adapt to the new configuration / runtime environment automatically. From here you can navigate to all the configuration profiles for the MRTK, including: Experience settings Camera settings Input system settings Boundary settings Teleporting settings Spatial awareness settings Diagnostics settings Scene system settings Additional services settings Input actions settings Input actions rules Pointer configuration Gestures configuration Speech commands Controller mapping configuration Controller visualization settings Editor Utilities These configuration profiles are detailed below in their relevant sections: Experience settings Located on the main Mixed Reality Toolkit configuration page, this setting defines the default operation of the Mixed Reality environment for your project. Camera settings The camera settings define how the camera will be setup for your Mixed Reality project, defining the generic clipping, quality and transparency settings. Input system settings The Mixed Reality Project provides a robust and well-trained input system for routing all the input events around the project which is selected by default. Behind the Input System provided by the MRTK are several other systems, these help to drive and manage the complex inter-weavings required to abstract out the complexities of a multi-platform / mixed reality framework. Each of the individual profiles are detailed below: Focus Settings Input actions settings Input actions rules Pointer configuration Gestures configuration Speech commands Controller mapping configuration Controller visualization settings Boundary visualization settings The boundary system translates the perceived boundary reported by the underlying platforms boundary / guardian system. The Boundary visualizer configuration gives you the ability to automatically show the recorded boundary within your scene relative to the user's position.The boundary will also react / update based on where the user teleports within the scene. Teleportation system selection The Mixed Reality Project provides a full featured Teleportation system for managing teleportation events in the project which is selected by default. Spatial awareness settings The Mixed Reality Project provides a rebuilt spatial awareness system for working with spatial scanning systems in the project which is selected by default. You can view the architecture behind the MRTK Spatial awareness system here . The Mixed Reality Toolkit spatial awareness configuration lets you tailor how the system starts, whether it is automatically when the application starts or later programmatically as well as setting the extents for the field of view. It also lets you configure the mesh and surface settings, further customizing how your project understands the environment around you. This is only applicable for devices that can provide a scanned environment. Diagnostics settings An optional but highly useful feature of the MRTK is the plugin diagnostics functionality. The diagnostics profile provides several simple systems to monitor whilst the project is running, including a handy On/Off switch to enable / disable the display panel in the scene. Scene system settings The MRTK provides this optional service to help you manage complex additive scene loading / unloading. To decide if the Scene System would be a good fit for your project, read the Scene System Getting Started Guide. Additional services settings One of the more advanced areas of the Mixed Reality Toolkit is its service locator pattern implementation which allows the registering of any \"Service\" with the framework. This allows the framework to be both extended with new features / systems easily but also allows for projects to take advantage of these capabilities to register their own runtime components. Any registered service still gets the full advantage of all of the Unity events, without the overhead and cost of implementing a MonoBehaviour or clunky singleton patterns. This allows for pure C# components with no scene overhead for running both foreground and background processes, e.g. spawning systems, runtime game logic, or practically anything else. Input actions settings Input actions provide a way to abstract any physical interactions and input from a runtime project. All physical input (from controllers / hands / mouse / etc) is translated in to a logical input action for use in your runtime project. This ensures no matter where the input comes from, your project simply implements these actions as \"Things to do\" or \"Interact with\" in your scenes. To create a new input action, simply click the \"Add a new Action\" button and enter a friendly text name for what it represents. You then only need select an axis (the type of data) the action is meant to convey, or in the case of physical controllers, the physical input type it can be attached to, for example: Axis Constraint Data Type Description Example use None No data Used for an empty action or event Event Trigger Raw (reserved) object Reserved for future use N/A Digital bool A boolean on or off type data A controller button Single Axis float A single precision data value A ranged input, e.g. a trigger Dual Axis Vector2 A dual float type date for multiple axis A Dpad or Thumbstick Three Dof Position Vector3 Positional type data from with 3 float axis 3D position style only controller Three Dof Rotation Quaternion Rotational only input with 4 float axis A Three degrees style controller, e.g. Oculus Go controller Six Dof Mixed Reality Pose (Vector3, Quaternion) A position and rotation style input with both Vector3 and Quaternion components A motion controller or Pointer Events utilizing input actions are not limited to physical controllers and can still be utilized within the project to have runtime effects generate new actions. Note Input actions are one of the few components which is not editable at runtime, they are a design time configuration only. This profile should not be swapped out whilst the project is running due to the framework (and your projects) dependency on the ID's generated for each action. Input actions rules Input action rules provide a way to automatically translate an event raised for one input action in to different actions based on its data value. These are managed seamlessly within the framework and do not incur any performance costs. For example, converting the single dual axis input event from a DPad in to the 4 corresponding \"Dpad Up\" / \"DPad Down\" / \"Dpad Left\" / \"Dpad Right\" actions (as shown in the image below). This could also be done in your own code. However, seeing as this was a very common pattern, the framework provides a mechanism to do this \"out of the box\" Input action Rules can be configured for any of the available input axis. However, input actions from one axis type can be translated to another input action of the same axis type. You can map a dual axis action to another dual axis action, but not to a digital or none action. Pointer configuration Pointers are used to drive interactivity in the scene from any input device, giving both a direction and hit test with any object in a scene (that has a collider attached, or is a UI component). Pointers are by default automatically configured for controllers, headsets (gaze / focus) and mouse / touch input. Pointers can also be visualized within the active scene using one of the many line components provided by the Mixed Reality Toolkit, or any of your own if they implement the MRTK IMixedRealityPointer interface. Pointing Extent: Determines the global pointing extent for all pointers, including gaze. Pointing Raycast Layer Masks: Determines which layers pointers will raycast against. Debug Draw Pointing Rays: A debug helper for visualizing the rays used for raycasting. Debug Draw Pointing Rays Colors: A set of colors to use for visualizing. Gaze cursor prefab: Makes it easy to specify a global gaze cursor for any scene. There's an additional helper button to quickly jump to the Gaze Provider to override some specific values for Gaze if needed. Gestures configuration Gestures are a system specific implementation allowing you to assign input actions to the various \"Gesture\" input methods provided by various SDKs (e.g. HoloLens). Note The current Gestures implementation is for the HoloLens only and will be enhanced for other systems as they are added to the Toolkit in the future (no dates yet). Speech Commands Like gestures, some runtime platforms also provide intelligent \"Speech to Text\" functionality with the ability to generate commands that can be received by a Unity project. This configuration profile allows you to configure the following: General Settings - \"Start Behavior\" set to Auto Start or Manual Start determines whether to initialize KeywordRecognizer at input system startup or let the project decide when to initialize the KeywordRecognizer. \"Recognition Confidence Level\" is used to initialize Unity's KeywordRecognizer API Speech Commands - Registers \"words\" and translates them in to input actions that can be received by your project. They can also be attached to keyboard actions if required. Important The system currently only supports speech when running on Windows 10 platforms, e.g. HoloLens and Windows 10 desktop and will be enhanced for other systems as they are added to MRTK in the future (no dates yet). Controller mapping configuration One of the core configuration screens for the Mixed Reality Toolkit is the ability to configure and map the various types of controllers that can be utilized by your project. The configuration screen below allows you to configure any of the controllers currently recognized by the toolkit. The MRTK provides a default configuration for the following controllers / systems: Mouse (including 3D spatial mouse support) Touch Screen Xbox controllers Windows Mixed Reality controllers HoloLens Gestures HTC Vive wand controllers Oculus Touch controllers Oculus Remote controller Generic OpenVR devices (advanced users only) Clicking on the Image for any of the pre-built controller systems allows you to configure a single input action for all its corresponding inputs, for example, see the Oculus Touch controller configuration screen below: There is also an advanced screen for configuring other OpenVR or Unity input controllers that are not identified above. Controller visualization settings In addition to the controller mapping, a separate configuration profile is provided to customize how your controllers are presented within your scenes. This can be configured at a \"Global\" (all instances of a controller for a specific hand) or specific to an individual controller type / hand. The MRTK also supports native SDK controller models for Windows Mixed Reality and OpenVR. These are loaded as GameObjects in your scene and positioned using the platform's controller tracking. If your controller representation in the scene needs to be offset from the physical controller position, then simply set that offset against the controller model's prefab (e.g. setting the transform position of the controller prefab with an offset position). Editor Utilities The following utilities work only in the editor and are useful to improve development productivity. Service Inspectors Service Inspectors are an editor-only feature that generates in-scene objects representing active services. Selecting these objects displays inspectors which offer documentation links, control over editor visualizations and insight into the state of the service. You can enable service inspectors by checking Use Service Inspectors under Editor Settings in the Configuration Profile. Depth Buffer Renderer Sharing the depth buffer with some mixed reality platforms can improve hologram stabilization . For example, the Windows Mixed Reality platform can modify the rendered scene per-pixel to account for subtle head movements during the time it took to render a frame. However, these techniques require depth buffers with accurate data to know where and how far geometry is from the user. To ensure a scene renders all necessary data to the depth buffer, developers can toggle the Render Depth Buffer feature under Editor Settings in the Configuration Profile. This will take the current depth buffer and render it as color to the scene view by applying a post-processing effect, DepthBufferRenderer , to the main camera. The blue cylinder in the scene has a material with ZWrite off so no depth data is written See Also Hologram Stabilization"
  },
  "Documentation/MixedRealityServices.html": {
    "href": "Documentation/MixedRealityServices.html",
    "title": "What makes a mixed reality feature | Mixed Reality Toolkit Documentation",
    "keywords": "What makes a mixed reality feature To avoid the performance overheads of the MonoBehaviour class, all services (systems, features, or modules that require independent operation in a mixed reality solution, e.g. input, boundary, spatial awareness) are required to be discrete plain old c# classes which implement IMixedRealityService and to register with the MixedRealityToolkit . The MixedRealityToolkit then coordinates all referencing between services and ensures that they receive all appropriate events (E.g. Awake/Initialize, Update, Destroy) as well as facilitating the finding of other services when needed. Additionally, the MixedRealityToolkit also maintains the active VR/XR/AR SDK in use in the running project, to initialize the active device based on attached hardware and instigate proper operation. A service An individual service can be any functionality that needs to be implemented in the project. Traditionally some projects use singletons which need to be alive in the scene, but this pattern has its advantages and disadvantages. We've decided to break away from this pattern in favor of a hybrid approach that brings several benefits over the traditional singleton implementations with MonoBehaviours , namely: Performance - without the overhead of a MonoBehaviour , script updates are approximately 80% faster and don't require a GameObject to live in the scene . Reference-ability - services can be discovered from the MixedRealityToolkit a lot faster and easier than searching GameObjects in a scene or using FindObjectsOfType<T> . No type dependency - though a method similar to dependency injection, services can be decoupled from their type, this means the concrete implementation can be swapped out at any time without adversely affecting code that consumes it (e.g. replacing the default InputSystem with your custom one, so long as you've fully implemented each interface). Multi-scene usage - if a service does need to know about a transform position in a scene, it can simply reference, or create, a GameObject rather than be a component attached to it . This makes it a lot easier to find and use the service when the project spans multiple scenes. Service interfaces The service container uses a predefined interface type for storage and retrieval of any service, this ensures there are no hard dependencies within the Mixed Reality Toolkit, so that each subsystem can easily be swapped out with another (so long as it conforms to the interface). Current system interfaces provided by the Mixed Reality Toolkit include: IMixedRealityInputSystem IMixedRealityBoundarySystem IMixedRealityTeleportSystem When creating your own implementations of these systems, you must ensure each complies with the interfaces provided by the Mixed Reality Toolkit (e.g. if you replace the InputSystem with another of your own design). Note All services must also inherit from the BaseService class or implement IMixedRealityService , to implement the functions required by the MixedRealityToolkit so their life-cycles are handled appropriately. (E.G. Initialize, Update, Destroy are called correctly.)"
  },
  "Documentation/MRTKNuGetPackage.html": {
    "href": "Documentation/MRTKNuGetPackage.html",
    "title": "Mixed Reality Toolkit NuGet package | Mixed Reality Toolkit Documentation",
    "keywords": "Mixed Reality Toolkit NuGet package Mixed Reality Toolkit (MRTK) is now available as a NuGet package on NuGet.org. There are some differences when it comes to consuming NuGet version of MRTK as opposed to a .unitypackage, read NuGet Package Considerations below. If any issues are encountered, file an issue using this template . Note: Migration of existing projects to consume MRTK as a NuGet package is not yet supported, use MRTK via NuGet only for new projects. Installing the NuGet package Follow these instructions to add the Mixed Reality Toolkit as a NuGet package to your project. Download the latest NuGetForUnity .unitypackage. If you already have NuGetForUnity installed, please ensure you're using version 2.0.0 or newer. Import the package into your Unity project, instructions . In the Unity menu bar, click on NuGet > Manage NuGet Packages . In the Search box, enter Microsoft.MixedReality.Toolkit . Choose the MRTK core package: Microsoft.MixedReality.Toolkit.Foundation – The core package for MRTK. (Optional) Choose the MRTK optional packages. Microsoft.MixedReality.Toolkit.Examples – The package that contains all of our examples. Microsoft.MixedReality.Toolkit.Extensions – The package that contains extensions services and/or data providers. Microsoft.MixedReality.Toolkit.Tools – Contains some of the tooling that comes with MRTK (Build Window, etc). Updating MRTK NuGet packages Steps 1-2 above will only need to be done once for your project, and the update is a much simpler step. Once newer packages available on NuGet.org (including prerelease), follow these steps: In the Unity menu bar, click on NuGet > Manage NuGet Packages. Switch to the Updates tab. Check the Show prerelease box if you want to get latest prerelease version. Update the packages desired. NuGet package considerations The release of MRTK as NuGet package is a new delivery mechanism being explored and there are a couple of key benefits and considerations one must make when choosing whether to consume the NuGet version of MRTK. Migrating to NuGet from .unitypackage or source (not yet supported) NuGet package consists of compiled binaries as opposed to loose script files, and the C# script asset identifiers are different. As such, the assets like prefabs in the MRTK package have been updated to reference the appropriate compiled script. A project using the .unitypackage or source version of MRTK will have to re-target its assets as well, and although there is code for it this is not a supported scenario, yet. Thereby, there is no currently supported way of migrating to NuGet from .unitypackage or source. This will change as we continue development on this delivery mechanism. Compiled binaries (NuGet) vs source files (.unitypackage) Since the NuGet package contains the compiled binaries instead of scripts, this has two major advantages: Reduced compilation time Considerably fewer C# project files in Visual Studio Debugging Mixed Reality Toolkit There are known issues with Unity & Visual Studio Tools for Unity that prevent a PDB from being easily debugged in Visual Studio Debugger. So although the package comes with PDBs and source embedded, debugging the DLLs is possible only if it was locally built (read further). There is a workaround being built as part of MSBuildForUnity , more updates on that later. Locally building the NuGet package With the latest source from MRTK, you can build the NuGet package locally and configure NuGetForUnity to pick it up. Download the latest MRTK source. Execute the scripts\\packaging\\createnugetpackages.ps1 powershell script. Specify the -UnityDirectory flag by passing the Editor folder of your Unity installation Specify the -Version of the package to create, in x.x.x format. Make sure the version is higher than available on NuGet.org Example: .\\createnugetpackages.ps1 -UnityDirectory \"C:\\Program Files\\Unity\\Hub\\Editor\\2018.3\\Editor\" -Version 2.0.2 After the build succeeds, open the destination project with NuGet packages. Click on the menu Edit > Preferences... On the left, find NuGet for Unity tab. Press Add New Source and replace source_path with the <Path to your Repository>\\NuGet\\artifacts If this your first time building, or the version was incremented, follow the update process: In the Unity menu bar, click on NuGet > Manage NuGet Packages . Switch to the Updates tab. Update the packages to the version you just built desired. Otherwise, just delete the Assets\\Packages folder and let NuGetForUnity restore the packages."
  },
  "Documentation/MRTK_PackageContents.html": {
    "href": "Documentation/MRTK_PackageContents.html",
    "title": "混合现实工具包 | Mixed Reality Toolkit Documentation",
    "keywords": "混合现实工具包 Microsoft混合现实工具包作为软件包的集合提供。以下各节介绍了这些软件包的内容。 Foundation Extensions Tools Providers.UnityAR Examples Foundation Microsoft.MixedRealityToolkit.Unity.Foundation程序包包括创建混合现实应用程序所需的核心组件。 文件夹 组件 描述 MixedRealityToolkit 接口和类型定义，基类，标准着色器。 MixedRealityToolkit.Providers ObjectMeshObserver 使用3D模型作为数据的空间感知观察者。 OpenVR 支持OpenVR设备。 WindowsMixedReality 支持Windows Mixed Reality设备，包括Microsoft HoloLens和沉浸式头显。 WindowsVoiceInput 在Microsoft Windows平台上支持语音和语音转文字。 MixedRealityToolkit.SDK Experimental 实验功能，包括着色器，用户界面控件和独立系统管理器。 Features 基于Foundation软件包的功能。 Profiles Microsoft Mixed Reality Toolkit系统和服务的默认配置文件。 StandardAssets 共同资源；模型，纹理，材料等 BoundarySystem 实现VR边界支持的系统。 CameraSystem 实现摄像机配置和管理的系统。 DiagnosticsSystem 实现应用程序诊断的系统，例如可视分析器。 InputAnimation 支持记录头部运动和手部跟踪数据。 InputSimulation 支持编辑器中手和眼输入的模拟。 InputSystem 提供支持访问和处理用户输入的系统。 SceneSystem 提供多场景应用程序支持的系统。 SpatialAwarenessSystem 提供支持以感知用户环境的系统。 TeleportSystem 提供支持传送的系统（在跳跃中移动体验）。 Extensions 可选的Microsoft.MixedRealityToolkit.Unity.Extensions程序包包括扩展Microsoft混合现实工具包功能的其他服务 [!注意] 扩展程序包需要Microsoft.MixedRealityToolkit.Unity.Foundation。 文件夹 组件 描述 MixedRealityToolkit.Extensions LostTrackingService 简化在Microsoft HoloLens设备上处理跟踪丢失的服务。 SceneTransitionService 简化添加平滑场景过渡的服务。 Tools 可选的Microsoft.MixedRealityToolkit.Unity.Tools软件包包括有用的工具，这些工具可以使用Microsoft Mixed Reality Toolkit增强混合现实开发体验。这些工具位于Unity编辑器的 Mixed Reality Toolkit > Utilities 菜单中。 [!注意] 该工具包需要Microsoft.MixedRealityToolkit.Unity.Foundation。 文件夹 组件 描述 MixedRealityToolkit.Tools DependencyWindow 在项目中创建资源依赖图的工具。 ExtensionServiceCreator 可帮助创建扩展服务的向导。 OptimizeWindow 该实用程序可帮助自动配置混合现实项目，以在Unity中获得最佳性能。 ReserializeAssetsUtility 提供对重新序列化特定Unity文件的支持。 RuntimeTools/Tools/ControllerMappingTool 该实用程序使开发人员能够快速确定硬件控制器的Unity映射。 ScreenshotUtility 在Unity编辑器中启用捕获应用程序图像。 TextureCombinerWindow 组合图形纹理的实用程序。 Providers.UnityAR [!注意] UnityAR软件包需要 Microsoft.MixedRealityToolkit.Unity.Foundation。 文件夹 组件 描述 MixedRealityToolkit.Staging UnityAR Camera settings provider允许MRTK与移动AR设备一起使用。 Examples 可选的Microsoft.MixedRealityToolkit.Unity.Examples包包括演示项目，这些演示项目说明了Microsoft Mixed Reality Toolkit的功能。 [!注意] 示例包需要Microsoft.MixedRealityToolkit.Unity.Foundation。 文件夹 组件 描述 MixedRealityToolkit.Examples Demos 简单的场景，说明一个或两个相关功能。 Experimental 演示场景演示了实验功能。 Inspectors 演示场景使用的Unity Editor inspectors。 StandardAssets 多个演示场景共享的共同资源。 建议浏览 MRTK入门"
  },
  "Documentation/README_AppBar.html": {
    "href": "Documentation/README_AppBar.html",
    "title": "App bar | Mixed Reality Toolkit Documentation",
    "keywords": "App bar App bar is a UI component that is used together with the bounding box script. It adds button controls to an object with the intent to manipulate it. Using the 'Adjust' button, the bounding box interface for an object can be de- / activated. The \"Remove\" button should remove the object from the scene. How to use app bar Drag and drop AppBar.prefab into the scene hierarchy. In the inspector panel of the component, assign any object with a bounding box as the Target Bounding Box to add the app bar to it. Important: The bounding box activation option for the target object should be 'Activate Manually'."
  },
  "Documentation/README_BoundingBox.html": {
    "href": "Documentation/README_BoundingBox.html",
    "title": "Bounding box | Mixed Reality Toolkit Documentation",
    "keywords": "Bounding box The BoundingBox.cs script provides basic functionality for transforming objects in mixed reality. A bounding box will show a cube around the hologram to indicate that it can be interacted with. Handles on the corners and edges of the cube allow scaling or rotating the object. The bounding box also reacts to user input. On HoloLens 2 for example the bounding box responds to finger proximity, providing visual feedback to help perceive the distance from the object. All interactions and visuals can be easily customized. For more information please see Bounding Box and App Bar on Windows Dev Center. Example scene You can find examples of Bounding Box configurations in the BoundingBoxExamples scene. How to add and configure a bounding box using Unity Inspector Add Box Collider to an object Assign BoundingBox script to an object Configure options such as 'Activation' methods (see Inspector properties section below) (Optional) Assign prefabs and materials for HoloLens 2 style Bounding Box (see Handle styles section below) Note Use Target Object and Bounds Override field in the inspector to assign specific object and collider in the object with multiple child components. How to add and configure a bounding box in the code Instantiate cube GameObject GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); Assign BoundingBox script to an object with collider, using AddComponent<>() private BoundingBox bbox; bbox = cube.AddComponent<BoundingBox>(); Configure options (see Inspector properties section below) // Make the scale handles large bbox.ScaleHandleSize = 0.1f; // Hide rotation handles bbox.ShowRotationHandleForX = false; bbox.ShowRotationHandleForY = false; bbox.ShowRotationHandleForZ = false; (Optional) Assign prefabs and materials for HoloLens 2 style Bounding Box. This still requires assignments through the inspector since the materials and prefabs should be dynamically loaded. Note Using Unity's 'Resources' folder or Shader.Find for dynamically loading shaders is not recommended since shader permutations may be missing at runtime. bbox.BoxMaterial = [Assign BoundingBox.mat] bbox.BoxGrabbedMaterial = [Assign BoundingBoxGrabbed.mat] bbox.HandleMaterial = [Assign BoundingBoxHandleWhite.mat] bbox.HandleGrabbedMaterial = [Assign BoundingBoxHandleBlueGrabbed.mat] bbox.ScaleHandlePrefab = [Assign MRTK_BoundingBox_ScaleHandle.prefab] bbox.ScaleHandleSlatePrefab = [Assign MRTK_BoundingBox_ScaleHandle_Slate.prefab] bbox.ScaleHandleSize = 0.016f; bbox.ScaleHandleColliderPadding = 0.016f; bbox.RotationHandleSlatePrefab = [Assign MRTK_BoundingBox_RotateHandle.prefab] bbox.RotationHandleSize = 0.016f; bbox.RotateHandleColliderPadding = 0.016f; Example: Set minimum, maximum bounding box scale using TransformScaleHandler To set the minimum and maximum scale, use the TransformScaleHandler . You can also use TransformScaleHandler to set minimum and maximum scale for ManipulationHandler . GameObject cube = GameObject.CreatePrimitive(PrimitiveType.Cube); bbox = cube.AddComponent<BoundingBox>(); // Important: BoundingBox creates a scale handler on start if one does not exist // do not use AddComponent, as that will create a duplicate handler that will not be used TransformScaleHandler scaleHandler = bbox.gameObject.GetComponent<TransformScaleHandler>(); scaleHandler.ScaleMinimum = 1f; scaleHandler.ScaleMaximum = 2f; Example: Add bounding box around a game object To add a bounding box around an object, just add a bounding box component to it: private void PutABoxAroundIt(GameObject target) { target.AddComponent<BoundingBox>(); } Inspector properties Target Object This property specifies which object will get transformed by the bounding box manipulation. If no object is set, the bounding box defaults to the owner object. Bounds Override Sets a box collider from the object for bounds computation. Activation Behavior There are several options to activate the bounding box interface. Activate On Start : Bounding Box becomes visible once the scene is started. Activate By Proximity : Bounding Box becomes visible when an articulated hand is close to the object. Activate By Pointer : Bounding Box becomes visible when it is targeted by a hand-ray pointer. Activate Manually : Bounding Box does not become visible automatically. You can manually activate it through a script by accessing the boundingBox.Active property. Scale Minimum The minimum allowed scale. This property is deprecated and it is preferable to add a TransformScaleHandler script. If this script is added, the minimum scale will be taken from it instead of from BoundingBox. Scale Maximum The maximum allowed scale. This property is deprecated and it is preferable to add a TransformScaleHandler script. If this script is added, the maximum scale will be taken from it instead of from BoundingBox. Box Display Various bounding box visualization options. If Flatten Axis is set to Flatten Auto , the script will disallow manipulation along the axis with the smallest extent. This results in a 2D bounding box, which is usually used for thin objects. Handles You can assign the material and prefab to override the handle style. If no handles are assigned, they will be displayed in the default style. Events Bounding box provides the following events. The example uses these events to play audio feedback. Rotate Started : Fired when rotation starts. Rotate Ended : Fired when rotation ends. Scale Started : Fires when scaling ends. Scale Ended : Fires when scaling ends. Handle styles By default, when you just assign the BoundingBox.cs script, it will show the handle of the HoloLens 1st gen style. To use HoloLens 2 style handles, you need to assign proper handle prefabs and materials. Below are the prefabs, materials, and the scaling values for the HoloLens 2 style Bounding Box handles. You can find this example in the BoundingBoxExamples scene. Handles (Setup for HoloLens 2 style) Handle Material : BoundingBoxHandleWhite.mat Handle Grabbed Material : BoundingBoxHandleBlueGrabbed.mat Scale Handle Prefab : MRTK_BoundingBox_ScaleHandle.prefab Scale Handle Slate Prefab : MRTK_BoundingBox_ScaleHandle_Slate.prefab Scale Handle Size : 0.016 (1.6cm) Scale Handle Collider Padding : 0.016 (makes the grabbable collider slightly bigger than handle visual) Rotation Handle Prefab : MRTK_BoundingBox_RotateHandle.prefab Rotation Handle Size : 0.016 Rotation Handle Collider Padding : 0.016 (makes the grabbable collider slightly bigger than handle visual) Proximity (Setup for HoloLens 2 style) Show and hide the handles with animation based on the distance to the hands. It has two-step scaling animation. Proximity Effect Active : Enable proximity-based handle activation Handle Medium Proximity : Distance for the 1st step scaling Handle Close Proximity : Distance for the 2nd step scaling Far Scale : Default scale value of the handle asset when the hands are out of the range of Bounding Box interaction(distance defined above by 'Handle Medium Proximity'. Use 0 to hide handle by default) Medium Scale : Scale value of the handle asset when the hands are within the range of the Bounding Box interaction(distance defined above by 'Handle Close Proximity'. Use 1 to show normal size) Close Scale : Scale value of the handle asset when the hands are within the grab interaction(distance defined above by 'Handle Close Proximity'. Use 1.x to show bigger size) Making an object movable with manipulation handler A bounding box can be combined with ManipulationHandler.cs to make the object movable using far interaction. The manipulation handler supports both one and two-handed interactions. Hand tracking can be used to interact with an object up close. In order for the bounding box edges to behave the same way when moving it using ManipulationHandler 's far interaction, it is advised to connect its events for On Manipulation Started / On Manipulation Ended to BoundingBox.HighlightWires / BoundingBox.UnhighlightWires respectively, as shown in the screenshot above."
  },
  "Documentation/README_Button.html": {
    "href": "Documentation/README_Button.html",
    "title": "Button | Mixed Reality Toolkit Documentation",
    "keywords": "Button A button gives the user a way to trigger an immediate action. It is one of the most foundational components in mixed reality. MRTK provides various types of button prefabs. Button prefabs in MRTK Examples of the button prefabs under MixedRealityToolkit.SDK/Features/UX/Interactable/Prefabs folder Unity UI Image/Graphic based buttons UnityUIInteractableButton.prefab PressableButtonUnityUI.prefab PressableButtonUnityUICircular.prefab PressableButtonHoloLens2UnityUI.prefab Collider based buttons PressableButtonHoloLens2 PressableButtonHoloLens2Unplated PressableButtonHoloLens2Circular HoloLens 2's shell-style button with backplate which supports various visual feedback such as border light, proximity light, and compressed front plate HoloLens 2's shell-style button without backplate HoloLens 2's shell-style button with circular shape PressableButtonHoloLens2_32x96 PressableButtonHoloLens2Bar3H PressableButtonHoloLens2Bar3V Wide HoloLens 2's shell-style button 32x96mm Horizontal HoloLens 2 button bar with shared backplate Vertical HoloLens 2 button bar with shared backplate Radial Checkbox ToggleSwitch Radial button Checkbox Toggle switch ButtonHoloLens1 PressableRoundButton Button HoloLens 1st gen's shell style button Round shape push button Basic button The Button.prefab is based on the Interactable concept to provide easy UI controls for buttons or other types of interactive surfaces. The baseline button supports all available input methods, including articulated hand input for the near interactions as well as gaze + air-tap for the far interactions. You can also use voice command to trigger the button. PressableButtonHoloLens2.prefab is HoloLens 2's shell style button that supports the precise movement of the button for the direct hand tracking input. It combines Interactable script with PressableButton script. How to use pressable buttons Unity UI based buttons Create a Canvas in your scene (GameObject -> UI -> Canvas). In the Inspector panel for your Canvas: Click \"Convert to MRTK Canvas\" Click \"Add NearInteractionTouchableUnityUI\" Set the Rect Transform component's X, Y, and Z scale to 0.001 Then, drag PressableButtonUnityUI.prefab , PressableButtonUnityUICircular.prefab , or PressableButtonHoloLens2UnityUI.prefab onto the Canvas. Collider based buttons Simply drag PressableButtonHoloLens2.prefab or PressableButtonHoloLens2Unplated.prefab into the scene. These button prefabs are already configured to have audio-visual feedback for the various types of inputs, including articulated hand input and gaze. The events exposed in the prefab itself as well as the Interactable component can be used to trigger additional actions. The pressable buttons in the HandInteractionExample scene use Interactable's OnClick event to trigger a change in the color of a cube. This event gets triggered for different types of input methods such as gaze, air-tap, hand-ray, as well as physical button presses through the pressable button script. You can configure when the pressable button fires the OnClick event via the PhysicalPressEventRouter on the button. For example, you can set OnClick to fire when the button is first pressed, as opposed to be pressed and released, by setting Interactable On Click to Event On Press . To leverage specific articulated hand input state information, you can use pressable buttons events - Touch Begin , Touch End , Button Pressed , Button Released . These events will not fire in response to air-tap, hand-ray, or eye inputs, however. Interaction States In the idle state, the button's front plate is not visible. As a finger approaches or a cursor from gaze input targets the surface, the front plate's glowing border becomes visible. There is additional highlighting of the fingertip position on the front plate surface. When pushed with a finger, the front plate moves with the fingertip. When the fingertip touches the surface of the front plate, it shows a subtle pulse effect to give visual feedback of the touch point. The subtle pulse effect is triggered by the pressable button, which looks for ProximityLight(s) that live on the currently interacting pointer. If any proximity lights are found, the ProximityLight.Pulse method is called, which automatically animates shader parameters to display a pulse. Inspector properties Box Collider Box Collider for the button's front plate. Pressable Button The logic for the button movement with hand press interaction. Physical Press Event Router This script sends events from hand press interaction to Interactable . Interactable Interactable handles various types of interaction states and events. HoloLens gaze, gesture, and voice input and immersive headset motion controller input are directly handled by this script. Audio Source Unity audio source for the audio feedback clips. NearInteractionTouchable.cs Required to make any object touchable with articulated hand input. Prefab Layout The ButtonContent object contains front plate, text label and icon. The FrontPlate responds to the proximity of the index fingertip using the Button_Box shader. It shows glowing borders, proximity light, and a pulse effect on touch. The text label is made with TextMesh Pro. SeeItSayItLabel 's visibility is controlled by Interactable 's theme. How to change the icon and text To change the text of the button, update the Text component of the TextMeshPro object under IconAndText . Changing the icon can be done by replacing the material that is assigned to UIButtonSquareIcon object. By default, HolographicButtonIconFontMaterial is assigned. To create a new icon material, duplicate one of the existing icon materials. These can be found under MixedRealityToolkit.SDK/Features/UX/Interactable/Materials folder. Create a new PNG texture and import into Unity. Use existing icon PNG file examples as reference. MixedRealityToolkit.SDK/Features/UX/Interactable/Textures Drag and drop newly created PNG texture onto the Albedo property in the material. Assign the material to the UIButtonSquareIcon object. Voice command ('See-it, Say-it') Speech Input Handler The Interactable script in Pressable Button already implements IMixedRealitySpeechHandler . A voice command keyword can be set here. Speech Input Profile Additionally, you need to register the voice command keyword in the global Speech Commands Profile . See-it, Say-it label The pressable button prefab has a placeholder TextMesh Pro label under the SeeItSayItLabel object. You can use this label to communicate the voice command keyword for the button to the user. How to make a button from scratch You can find the examples of these buttons in the PressableButtonExample scene. 1. Creating a Pressable Button with Cube (Near interaction only) Create a Unity Cube (GameObject > 3D Object > Cube) Add PressableButton.cs script Add NearInteractionTouchable.cs script In the PressableButton 's Inspector panel, assign the cube object to the Moving Button Visuals . When you select the cube, you will see multiple colored layers on the object. This visualizes the distance values under Press Settings . Using the handles, you can configure when to start press (move the object) and when to trigger event. When you press the button, it will move and generate proper events exposed in the PressableButton.cs script such as TouchBegin(), TouchEnd(), ButtonPressed(), ButtonReleased(). 2. Adding visual feedback to the basic cube button MRTK Standard Shader provides various features that makes it easy to add visual feedback. Create an material and select shader Mixed Reality Toolkit/Standard . Or you can use or duplicate one of the existing materials under /SDK/StandardAssets/Materials/ that uses MRTK Standard Shader. Check Hover Light and Proximity Light under Fluent Options . This enables visual feedback for both near hand(Proximity Light) and far pointer(Hover Light) interactions. 3. Adding audio feedback to the basic cube button Since PressableButton.cs script exposes events such as TouchBegin(), TouchEnd(), ButtonPressed(), ButtonReleased(), we can easily assign audio feedback. Simply add Unity's Audio Source to the cube object then assign audio clips by selecting AudioSource.PlayOneShot(). You can use MRTK_Select_Main and MRTK_Select_Secondary audio clips under /SDK/StandardAssets/Audio/ folder. 4. Adding visual states and handle far interaction events Interactable is a script that makes it easy to create a visual states for the various types of input interactions. It also handles far interaction events. Add Interactable.cs and drag and drop the cube object onto the Target field under Profiles . Then, create a new Theme with a type ScaleOffsetColorTheme . Under this theme, you can specify the color of the object for the specific interaction states such as Focus and Pressed . You can also control Scale and Offset as well. Check Easing and set duration to make the visual transition smooth. You will see the object responds to both far(hand ray or gaze cursor) and near(hand) interactions. Custom Button Examples In the HandInteractionExample scene , you can take a look at the piano and round button examples which are both using PressableButton . Each piano key has a PressableButton and a NearInteractionTouchable script assigned. It is important to verify that the Local Forward direction of NearInteractionTouchable is correct. It is represented by a white arrow in the editor. Make sure the arrow points away from the button's front face: See also Interactable Visual Themes"
  },
  "Documentation/README_ExampleHub.html": {
    "href": "Documentation/README_ExampleHub.html",
    "title": "MRTK Examples Hub | Mixed Reality Toolkit Documentation",
    "keywords": "MRTK Examples Hub MRTK Examples Hub is a Unity scene that makes it easy to experience multiple scenes. It uses MRTK's Scene System to load & unload the scenes. MRTKExamplesHub.unity is the container scene that has shared components including MixedRealityToolkit and MixedRealityPlayspace . MRTKExamplesHubMainMenu.unity scene has the cube buttons. Prerequisite MRTK Examples Hub uses Scene Transition Service and related scripts. If you are using MRTK through Unity packages, please import Microsoft.MixedReality.Toolkit.Unity.Extensions.x.x.x.unitypackage which is part of the release packages . If you are using MRTK through the repository clone, you should already have MixedRealityToolkit.Extensions folder in your project. MRTKExamplesHub Scene and the Scene System Open MRTKExamplesHub.unity which is located at MixedRealityToolkit.Examples/Experimental/Demos/ExamplesHub/Scenes/ It is an empty scene with MixedRealityToolkit, MixedRealityPlayspace and LoadHubOnStartup. This scene is configured to use MRTK's Scene System. Click MixedRealitySceneSystem under MixedRealityToolkit. It will display the Scene System's information in the Inspector panel. On the bottom of the Inspector, it displays the list of the scenes defined in the Scene System Profile. You can click the scene names to load/unload them. Example of loading MRTKExamplesHub scene by clicking the scene name in the list. Example of loading HandInteractionExamples scene. Example of loading multiple scenes. Running the scene The scene works in both Unity's game mode and on device. Run the MRTKExamplesHub scene in the Unity editor and use MRTK's input simulation to interact with the scene contents. To build and deploy, simply build MRTKExamplesHub scene with other scenes that are included in the Scene System's list. The inspector also makes it easy to add scenes to the Build Settings. In the Building Settings, make sure MRTKExamplesHub scene is on the top of the list at index 0. How MRTKExamplesHub loads a scene In the MRTKExamplesHub scene, you can find the ExamplesHubButton prefab. There is a FrontPlate object in the prefab which contains Interactable . Using the Interactable's OnClick() and OnTouch() event, it triggers the LoadContentScene script's LoadContent() function. In the LoadContentScene script's Inspector, you can define the scene name to load. The script uses the Scene System's LoadContent() function to load the scene. Please refer to the Scene System page for more details. MixedRealityToolkit.SceneSystem.LoadContent(contentName, loadSceneMode); Returning to the main menu scene To return to the main menu scene (MRTKExamplesHubMainMenu scene), you can use the same Scene System LoadContent() method. The ToggleFeaturesPanelExamplesHub.prefab provides the 'Home' button which contains the LoadContentScene script. Use this prefab or provide a custom home button in each scene to allow the user to return to the main scene. One can put the ToggleFeaturesPanelExamplesHub.prefab in the MRTKExamplesHub scene to make it always visible since MRTKExamplesHub is a shared container scene. Make sure to hide/deactivate ToggleFeaturesPanel.prefab in each example scene. Adding additional buttons In the CubeCollection object, duplicate (or add) ExampleHubButton prefabs and click Update Collection in the GridObjectCollection . This will update the cylinder layout based on the new total number of buttons. Please refer to the Object Collection page for more details. After adding the buttons, update the scene name in the LoadContentScene script(explained above). Add additional scenes to the Scene System's profile."
  },
  "Documentation/README_FingertipVisualization.html": {
    "href": "Documentation/README_FingertipVisualization.html",
    "title": "Fingertip visualization | Mixed Reality Toolkit Documentation",
    "keywords": "Fingertip visualization The fingertip affordance helps the user recognize the distance from the target object. The ring shape visual adjusts its size based on the distance from the fingertip to the object. The fingertip visualization is primarily controlled by the FingerCursor.prefab (and script) which is spawned as the cursor prefab of the PokePointer . Other components of the visualization include the ProximityLight script, and MixedRealityStandard shader. How to use the fingertip visualization By default the fingertip visualization will work in any Unity scene that is configured to spawn a FingerCursor. Spawning of the FingerCursor occurs in the DefaultMixedRealityToolkitConfigurationProfile under: DefaultMixedRealityInputSystemProfile > DefaultMixedRealityInputPointerProfile > PokePointer > FingerCursor At a high level the fingertip visualization works by using a proximity light to project a colored gradient on any nearby surfaces that accept proximity lights. The finger cursor then looks for any nearby interactable surfaces, which are determined by parent IMixedRealityNearPointer(s) , to align the finger ring with a surface as the finger moves towards a surface. As a finger approaches a surface the finger ring is also dynamically animated using the round corner properties of the MixedRealityStandard shader. Example scene You can find fingertip visualization examples in almost any scene that works with articulated hands, but is prominent in the HandInteractionExample scene . Inspector properties FingerCursor Many of the finger cursor properties are inherited from the base cursor class. Important properties include the far / near surface margins and widths which drive the finger ring animation in the MixedRealityStandard shader. For other properties please hover over the inspector tool tips. ProximityLight The proximity light settings control how the light looks when near and far from a surface. The center, middle, and outer colors control the gradient look of the light and can be custom tailored for the color palette of your application. Note, the colors are HDR (High Dynamic Range) to allow users to brighten the proximity light to values above one. For other properties please hover over the inspector tool tips. MixedRealityStandard Shader The MixedRealityStandard shader is used for many effects in the MRTK. The two settings important for fingertip visualization are \"Near Fade\" and \"Proximity Light.\" Near Fade allows objects to fade in / out as a camera or light nears them. Make sure to check \"Light\" to allow proximity lights to drive the fade (rather than the camera). You can reverse the values of \"Fade Begin\" and \"Fade Complete\" to reverse a fade. Check \"Proximity Light\" for any surface you would like the proximity light to brighten. For other properties please hover over the inspector tool tips."
  },
  "Documentation/README_HandInteractionExamples.html": {
    "href": "Documentation/README_HandInteractionExamples.html",
    "title": "Hand interaction examples scene | Mixed Reality Toolkit Documentation",
    "keywords": "Hand interaction examples scene The HandInteractionExamples.unity example scene contains various types of interactions and UI controls that highlight articulated hand input. Note This example scene uses TextMesh Pro . To open the scene, click 'Import TMP Essentials' when the respective prompt is shown during the import of the scene. Unity will then import TextMesh Pro packages. If you see large text after the TextMesh Pro import, open another Unity scene and then open the example scene again. Pressable button See button page for the details. Bounding box See bounding box page for the details. Manipulation handler See manipulation handler page for the details. Slate See slate page for the details. System keyboard See system keyboard page for the details."
  }
}